{
  "model_name": "all-mpnet-base-v2",
  "embedding_dimension": 768,
  "num_segments": 456,
  "normalize_embeddings": true,
  "segments": [
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 0.0,
      "end_time": 28.32,
      "text": "Hey everybody, how's it going? In this video we're going to be taking a look at list comprehensions in Python. So basically a list comprehension is an easier and more readable way to create a list. Now I think the best way to learn list comprehensions is to first show what it would look like in a for loop because I think everybody is familiar with for loops and even if you're coming from another language you'll be familiar with that as well. So let's take",
      "original_segments": [
        {
          "id": 0,
          "start": 0.0,
          "end": 3.84,
          "text": "Hey everybody, how's it going? In this video we're going to be taking a look at",
          "tokens": [
            50364,
            1911,
            2201,
            11,
            577,
            311,
            309,
            516,
            30,
            682,
            341,
            960,
            321,
            434,
            516,
            281,
            312,
            1940,
            257,
            574,
            412,
            50556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11635922534125191,
          "compression_ratio": 1.7586206896551724,
          "no_speech_prob": 0.02111496590077877,
          "confidence": 0.9788850340992212
        },
        {
          "id": 1,
          "start": 3.84,
          "end": 9.28,
          "text": "list comprehensions in Python. So basically a list comprehension is an",
          "tokens": [
            50556,
            1329,
            10753,
            8302,
            294,
            15329,
            13,
            407,
            1936,
            257,
            1329,
            44991,
            307,
            364,
            50828
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11635922534125191,
          "compression_ratio": 1.7586206896551724,
          "no_speech_prob": 0.02111496590077877,
          "confidence": 0.9788850340992212
        },
        {
          "id": 2,
          "start": 9.28,
          "end": 15.52,
          "text": "easier and more readable way to create a list. Now I think the best way to learn",
          "tokens": [
            50828,
            3571,
            293,
            544,
            49857,
            636,
            281,
            1884,
            257,
            1329,
            13,
            823,
            286,
            519,
            264,
            1151,
            636,
            281,
            1466,
            51140
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11635922534125191,
          "compression_ratio": 1.7586206896551724,
          "no_speech_prob": 0.02111496590077877,
          "confidence": 0.9788850340992212
        },
        {
          "id": 3,
          "start": 15.52,
          "end": 19.34,
          "text": "list comprehensions is to first show what it would look like in a for loop",
          "tokens": [
            51140,
            1329,
            10753,
            8302,
            307,
            281,
            700,
            855,
            437,
            309,
            576,
            574,
            411,
            294,
            257,
            337,
            6367,
            51331
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11635922534125191,
          "compression_ratio": 1.7586206896551724,
          "no_speech_prob": 0.02111496590077877,
          "confidence": 0.9788850340992212
        },
        {
          "id": 4,
          "start": 19.34,
          "end": 23.76,
          "text": "because I think everybody is familiar with for loops and even if you're",
          "tokens": [
            51331,
            570,
            286,
            519,
            2201,
            307,
            4963,
            365,
            337,
            16121,
            293,
            754,
            498,
            291,
            434,
            51552
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11635922534125191,
          "compression_ratio": 1.7586206896551724,
          "no_speech_prob": 0.02111496590077877,
          "confidence": 0.9788850340992212
        },
        {
          "id": 5,
          "start": 23.76,
          "end": 28.32,
          "text": "coming from another language you'll be familiar with that as well. So let's take",
          "tokens": [
            51552,
            1348,
            490,
            1071,
            2856,
            291,
            603,
            312,
            4963,
            365,
            300,
            382,
            731,
            13,
            407,
            718,
            311,
            747,
            51780
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11635922534125191,
          "compression_ratio": 1.7586206896551724,
          "no_speech_prob": 0.02111496590077877,
          "confidence": 0.9788850340992212
        }
      ],
      "duration": 28.32
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 23.32,
      "end_time": 53.16,
      "text": "because I think everybody is familiar with for loops and even if you're coming from another language you'll be familiar with that as well. So let's take a look at some of these examples and I'll show you some of the advantages to list comprehensions in terms of how easy they are to write and also in how easy they are to read. So let's go ahead and take a look at this first example here. So in this first example I have this comment here that this is just going to be the easiest loop. All it does is pretty much copy it. So I'm saying that",
      "original_segments": [
        {
          "id": 6,
          "start": 28.32,
          "end": 32.52,
          "text": "a look at some of these examples and I'll show you some of the advantages to",
          "tokens": [
            50364,
            257,
            574,
            412,
            512,
            295,
            613,
            5110,
            293,
            286,
            603,
            855,
            291,
            512,
            295,
            264,
            14906,
            281,
            50574
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09330928915798074,
          "compression_ratio": 1.768181818181818,
          "no_speech_prob": 0.11016180366277695,
          "confidence": 0.889838196337223
        },
        {
          "id": 7,
          "start": 32.52,
          "end": 39.16,
          "text": "list comprehensions in terms of how easy they are to write and also in how easy",
          "tokens": [
            50574,
            1329,
            10753,
            8302,
            294,
            2115,
            295,
            577,
            1858,
            436,
            366,
            281,
            2464,
            293,
            611,
            294,
            577,
            1858,
            50906
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09330928915798074,
          "compression_ratio": 1.768181818181818,
          "no_speech_prob": 0.11016180366277695,
          "confidence": 0.889838196337223
        },
        {
          "id": 8,
          "start": 39.16,
          "end": 43.92,
          "text": "they are to read. So let's go ahead and take a look at this first example here.",
          "tokens": [
            50906,
            436,
            366,
            281,
            1401,
            13,
            407,
            718,
            311,
            352,
            2286,
            293,
            747,
            257,
            574,
            412,
            341,
            700,
            1365,
            510,
            13,
            51144
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09330928915798074,
          "compression_ratio": 1.768181818181818,
          "no_speech_prob": 0.11016180366277695,
          "confidence": 0.889838196337223
        },
        {
          "id": 9,
          "start": 43.92,
          "end": 48.96,
          "text": "So in this first example I have this comment here that this is just going to",
          "tokens": [
            51144,
            407,
            294,
            341,
            700,
            1365,
            286,
            362,
            341,
            2871,
            510,
            300,
            341,
            307,
            445,
            516,
            281,
            51396
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09330928915798074,
          "compression_ratio": 1.768181818181818,
          "no_speech_prob": 0.11016180366277695,
          "confidence": 0.889838196337223
        },
        {
          "id": 10,
          "start": 48.96,
          "end": 53.16,
          "text": "be the easiest loop. All it does is pretty much copy it. So I'm saying that",
          "tokens": [
            51396,
            312,
            264,
            12889,
            6367,
            13,
            1057,
            309,
            775,
            307,
            1238,
            709,
            5055,
            309,
            13,
            407,
            286,
            478,
            1566,
            300,
            51606
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09330928915798074,
          "compression_ratio": 1.768181818181818,
          "no_speech_prob": 0.11016180366277695,
          "confidence": 0.889838196337223
        }
      ],
      "duration": 29.839999999999996
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 48.16,
      "end_time": 75.12,
      "text": "So in this first example I have this comment here that this is just going to be the easiest loop. All it does is pretty much copy it. So I'm saying that I want n for each n in nums. So if you were to write this in a for loop, first you would create an empty list and then you see here I have a list of numbers 1 through 10 and then I have this empty list myNums. So we're doing for n in nums, so it's going to loop through all these numbers, myList.append n, so it's",
      "original_segments": [
        {
          "id": 11,
          "start": 53.16,
          "end": 59.519999999999996,
          "text": "I want n for each n in nums. So if you were to write this in a for loop, first you",
          "tokens": [
            50364,
            286,
            528,
            297,
            337,
            1184,
            297,
            294,
            1031,
            82,
            13,
            407,
            498,
            291,
            645,
            281,
            2464,
            341,
            294,
            257,
            337,
            6367,
            11,
            700,
            291,
            50682
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14894702280168054,
          "compression_ratio": 1.84765625,
          "no_speech_prob": 0.17285221815109253,
          "confidence": 0.8271477818489075
        },
        {
          "id": 12,
          "start": 59.519999999999996,
          "end": 64.28,
          "text": "would create an empty list and then you see here I have a list of numbers 1",
          "tokens": [
            50682,
            576,
            1884,
            364,
            6707,
            1329,
            293,
            550,
            291,
            536,
            510,
            286,
            362,
            257,
            1329,
            295,
            3547,
            502,
            50920
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14894702280168054,
          "compression_ratio": 1.84765625,
          "no_speech_prob": 0.17285221815109253,
          "confidence": 0.8271477818489075
        },
        {
          "id": 13,
          "start": 64.28,
          "end": 69.8,
          "text": "through 10 and then I have this empty list myNums. So we're doing for n in",
          "tokens": [
            50920,
            807,
            1266,
            293,
            550,
            286,
            362,
            341,
            6707,
            1329,
            452,
            45,
            8099,
            13,
            407,
            321,
            434,
            884,
            337,
            297,
            294,
            51196
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14894702280168054,
          "compression_ratio": 1.84765625,
          "no_speech_prob": 0.17285221815109253,
          "confidence": 0.8271477818489075
        },
        {
          "id": 14,
          "start": 69.8,
          "end": 75.12,
          "text": "nums, so it's going to loop through all these numbers, myList.append n, so it's",
          "tokens": [
            51196,
            1031,
            82,
            11,
            370,
            309,
            311,
            516,
            281,
            6367,
            807,
            439,
            613,
            3547,
            11,
            452,
            43,
            468,
            13,
            1746,
            521,
            297,
            11,
            370,
            309,
            311,
            51462
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14894702280168054,
          "compression_ratio": 1.84765625,
          "no_speech_prob": 0.17285221815109253,
          "confidence": 0.8271477818489075
        }
      ],
      "duration": 26.960000000000008
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 70.12,
      "end_time": 97.44,
      "text": "nums, so it's going to loop through all these numbers, myList.append n, so it's just going to add each number to this list. Now we're going to print out that list. So let's go ahead and run that and you can see that it's exactly what we've expected. It's just a copy of the top list here. Now let's see what this looks like in a list comprehension and also notice how similar the list comprehension is to my comment here. So what I'm going to say is I'm going to",
      "original_segments": [
        {
          "id": 15,
          "start": 75.12,
          "end": 78.67999999999999,
          "text": "just going to add each number to this list. Now we're going to print out that",
          "tokens": [
            51462,
            445,
            516,
            281,
            909,
            1184,
            1230,
            281,
            341,
            1329,
            13,
            823,
            321,
            434,
            516,
            281,
            4482,
            484,
            300,
            51640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14894702280168054,
          "compression_ratio": 1.84765625,
          "no_speech_prob": 0.17285221815109253,
          "confidence": 0.8271477818489075
        },
        {
          "id": 16,
          "start": 78.67999999999999,
          "end": 82.92,
          "text": "list. So let's go ahead and run that and you can see that it's exactly what we've",
          "tokens": [
            51640,
            1329,
            13,
            407,
            718,
            311,
            352,
            2286,
            293,
            1190,
            300,
            293,
            291,
            393,
            536,
            300,
            309,
            311,
            2293,
            437,
            321,
            600,
            51852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14894702280168054,
          "compression_ratio": 1.84765625,
          "no_speech_prob": 0.17285221815109253,
          "confidence": 0.8271477818489075
        },
        {
          "id": 17,
          "start": 82.92,
          "end": 87.2,
          "text": "expected. It's just a copy of the top list here. Now let's see what this looks",
          "tokens": [
            50364,
            5176,
            13,
            467,
            311,
            445,
            257,
            5055,
            295,
            264,
            1192,
            1329,
            510,
            13,
            823,
            718,
            311,
            536,
            437,
            341,
            1542,
            50578
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09848213195800781,
          "compression_ratio": 1.7660550458715596,
          "no_speech_prob": 0.008050685748457909,
          "confidence": 0.9919493142515421
        },
        {
          "id": 18,
          "start": 87.2,
          "end": 92.12,
          "text": "like in a list comprehension and also notice how similar the list",
          "tokens": [
            50578,
            411,
            294,
            257,
            1329,
            44991,
            293,
            611,
            3449,
            577,
            2531,
            264,
            1329,
            50824
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09848213195800781,
          "compression_ratio": 1.7660550458715596,
          "no_speech_prob": 0.008050685748457909,
          "confidence": 0.9919493142515421
        },
        {
          "id": 19,
          "start": 92.12,
          "end": 97.44,
          "text": "comprehension is to my comment here. So what I'm going to say is I'm going to",
          "tokens": [
            50824,
            44991,
            307,
            281,
            452,
            2871,
            510,
            13,
            407,
            437,
            286,
            478,
            516,
            281,
            584,
            307,
            286,
            478,
            516,
            281,
            51090
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09848213195800781,
          "compression_ratio": 1.7660550458715596,
          "no_speech_prob": 0.008050685748457909,
          "confidence": 0.9919493142515421
        }
      ],
      "duration": 27.319999999999993
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 92.44,
      "end_time": 118.68,
      "text": "comprehension is to my comment here. So what I'm going to say is I'm going to make myList equal to and then brackets. So the brackets means that we're making a list and then let's try to pretty much copy exactly what is in the comment here. So I want n and then for each n in nums. That's a list comprehension. So",
      "original_segments": [
        {
          "id": 20,
          "start": 97.44,
          "end": 102.44,
          "text": "make myList equal to and then brackets. So the brackets means that we're making",
          "tokens": [
            51090,
            652,
            452,
            43,
            468,
            2681,
            281,
            293,
            550,
            26179,
            13,
            407,
            264,
            26179,
            1355,
            300,
            321,
            434,
            1455,
            51340
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09848213195800781,
          "compression_ratio": 1.7660550458715596,
          "no_speech_prob": 0.008050685748457909,
          "confidence": 0.9919493142515421
        },
        {
          "id": 21,
          "start": 102.44,
          "end": 109.04,
          "text": "a list and then let's try to pretty much copy exactly what is in the comment here.",
          "tokens": [
            51340,
            257,
            1329,
            293,
            550,
            718,
            311,
            853,
            281,
            1238,
            709,
            5055,
            2293,
            437,
            307,
            294,
            264,
            2871,
            510,
            13,
            51670
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09848213195800781,
          "compression_ratio": 1.7660550458715596,
          "no_speech_prob": 0.008050685748457909,
          "confidence": 0.9919493142515421
        },
        {
          "id": 22,
          "start": 109.04,
          "end": 118.68,
          "text": "So I want n and then for each n in nums. That's a list comprehension. So",
          "tokens": [
            50364,
            407,
            286,
            528,
            297,
            293,
            550,
            337,
            1184,
            297,
            294,
            1031,
            82,
            13,
            663,
            311,
            257,
            1329,
            44991,
            13,
            407,
            50846
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13754575995988744,
          "compression_ratio": 1.7247191011235956,
          "no_speech_prob": 0.08324097096920013,
          "confidence": 0.9167590290307999
        }
      ],
      "duration": 26.24000000000001
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 113.68,
      "end_time": 140.28,
      "text": "So I want n and then for each n in nums. That's a list comprehension. So this is what we're returning. This is what we want. I want n and then this is the for loop here, for n in nums. So if I save that and run it, then I actually have to print this out so that it shows up. So we'll run that and you'll see that it's the exact same result that we had from the for loop but this is much",
      "original_segments": [
        {
          "id": 23,
          "start": 118.68,
          "end": 123.16000000000001,
          "text": "this is what we're returning. This is what we want. I want n and then this is",
          "tokens": [
            50846,
            341,
            307,
            437,
            321,
            434,
            12678,
            13,
            639,
            307,
            437,
            321,
            528,
            13,
            286,
            528,
            297,
            293,
            550,
            341,
            307,
            51070
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13754575995988744,
          "compression_ratio": 1.7247191011235956,
          "no_speech_prob": 0.08324097096920013,
          "confidence": 0.9167590290307999
        },
        {
          "id": 24,
          "start": 123.16000000000001,
          "end": 129.44,
          "text": "the for loop here, for n in nums. So if I save that and run it, then I actually",
          "tokens": [
            51070,
            264,
            337,
            6367,
            510,
            11,
            337,
            297,
            294,
            1031,
            82,
            13,
            407,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            11,
            550,
            286,
            767,
            51384
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13754575995988744,
          "compression_ratio": 1.7247191011235956,
          "no_speech_prob": 0.08324097096920013,
          "confidence": 0.9167590290307999
        },
        {
          "id": 25,
          "start": 129.44,
          "end": 135.36,
          "text": "have to print this out so that it shows up. So we'll run that and you'll see",
          "tokens": [
            51384,
            362,
            281,
            4482,
            341,
            484,
            370,
            300,
            309,
            3110,
            493,
            13,
            407,
            321,
            603,
            1190,
            300,
            293,
            291,
            603,
            536,
            51680
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13754575995988744,
          "compression_ratio": 1.7247191011235956,
          "no_speech_prob": 0.08324097096920013,
          "confidence": 0.9167590290307999
        },
        {
          "id": 26,
          "start": 135.36,
          "end": 140.28,
          "text": "that it's the exact same result that we had from the for loop but this is much",
          "tokens": [
            50364,
            300,
            309,
            311,
            264,
            1900,
            912,
            1874,
            300,
            321,
            632,
            490,
            264,
            337,
            6367,
            457,
            341,
            307,
            709,
            50610
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10676581188313013,
          "compression_ratio": 1.6853448275862069,
          "no_speech_prob": 0.24839626252651215,
          "confidence": 0.7516037374734879
        }
      ],
      "duration": 26.599999999999994
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 135.28,
      "end_time": 162.8,
      "text": "have to print this out so that it shows up. So we'll run that and you'll see that it's the exact same result that we had from the for loop but this is much easier to write and it's pretty easy to understand also. So that's about the easiest list comprehension that you can do. So let's do a slightly more complicated example. So in this example here, if we read the comment, I'm saying that I want n squared, so n times n, for each n in nums. So this is pretty similar",
      "original_segments": [
        {
          "id": 27,
          "start": 140.28,
          "end": 144.88000000000002,
          "text": "easier to write and it's pretty easy to understand also. So that's about the",
          "tokens": [
            50610,
            3571,
            281,
            2464,
            293,
            309,
            311,
            1238,
            1858,
            281,
            1223,
            611,
            13,
            407,
            300,
            311,
            466,
            264,
            50840
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10676581188313013,
          "compression_ratio": 1.6853448275862069,
          "no_speech_prob": 0.24839626252651215,
          "confidence": 0.7516037374734879
        },
        {
          "id": 28,
          "start": 144.88000000000002,
          "end": 150.16000000000003,
          "text": "easiest list comprehension that you can do. So let's do a slightly more",
          "tokens": [
            50840,
            12889,
            1329,
            44991,
            300,
            291,
            393,
            360,
            13,
            407,
            718,
            311,
            360,
            257,
            4748,
            544,
            51104
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10676581188313013,
          "compression_ratio": 1.6853448275862069,
          "no_speech_prob": 0.24839626252651215,
          "confidence": 0.7516037374734879
        },
        {
          "id": 29,
          "start": 150.16000000000003,
          "end": 156.12,
          "text": "complicated example. So in this example here, if we read the comment, I'm saying",
          "tokens": [
            51104,
            6179,
            1365,
            13,
            407,
            294,
            341,
            1365,
            510,
            11,
            498,
            321,
            1401,
            264,
            2871,
            11,
            286,
            478,
            1566,
            51402
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10676581188313013,
          "compression_ratio": 1.6853448275862069,
          "no_speech_prob": 0.24839626252651215,
          "confidence": 0.7516037374734879
        },
        {
          "id": 30,
          "start": 156.12,
          "end": 162.8,
          "text": "that I want n squared, so n times n, for each n in nums. So this is pretty similar",
          "tokens": [
            51402,
            300,
            286,
            528,
            297,
            8889,
            11,
            370,
            297,
            1413,
            297,
            11,
            337,
            1184,
            297,
            294,
            1031,
            82,
            13,
            407,
            341,
            307,
            1238,
            2531,
            51736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10676581188313013,
          "compression_ratio": 1.6853448275862069,
          "no_speech_prob": 0.24839626252651215,
          "confidence": 0.7516037374734879
        }
      ],
      "duration": 27.52000000000001
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 157.8,
      "end_time": 186.88000000000002,
      "text": "that I want n squared, so n times n, for each n in nums. So this is pretty similar to our previous example but now we're actually returning the square event instead of just copying all the values. So to do this in a for loop, we would create an empty list and then we would loop through all the numbers and then we would append the square to the list and then when we're done we can print the list. So if I run this code, then you can see that our result, we get all of the",
      "original_segments": [
        {
          "id": 31,
          "start": 162.96,
          "end": 166.64000000000001,
          "text": "to our previous example but now we're actually returning the square event",
          "tokens": [
            50372,
            281,
            527,
            3894,
            1365,
            457,
            586,
            321,
            434,
            767,
            12678,
            264,
            3732,
            2280,
            50556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11026489834825531,
          "compression_ratio": 1.8352941176470587,
          "no_speech_prob": 0.2399153858423233,
          "confidence": 0.7600846141576767
        },
        {
          "id": 32,
          "start": 166.64000000000001,
          "end": 171.0,
          "text": "instead of just copying all the values. So to do this in a for loop, we would",
          "tokens": [
            50556,
            2602,
            295,
            445,
            27976,
            439,
            264,
            4190,
            13,
            407,
            281,
            360,
            341,
            294,
            257,
            337,
            6367,
            11,
            321,
            576,
            50774
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11026489834825531,
          "compression_ratio": 1.8352941176470587,
          "no_speech_prob": 0.2399153858423233,
          "confidence": 0.7600846141576767
        },
        {
          "id": 33,
          "start": 171.0,
          "end": 176.28,
          "text": "create an empty list and then we would loop through all the numbers and then we",
          "tokens": [
            50774,
            1884,
            364,
            6707,
            1329,
            293,
            550,
            321,
            576,
            6367,
            807,
            439,
            264,
            3547,
            293,
            550,
            321,
            51038
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11026489834825531,
          "compression_ratio": 1.8352941176470587,
          "no_speech_prob": 0.2399153858423233,
          "confidence": 0.7600846141576767
        },
        {
          "id": 34,
          "start": 176.28,
          "end": 181.44,
          "text": "would append the square to the list and then when we're done we can print the",
          "tokens": [
            51038,
            576,
            34116,
            264,
            3732,
            281,
            264,
            1329,
            293,
            550,
            562,
            321,
            434,
            1096,
            321,
            393,
            4482,
            264,
            51296
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11026489834825531,
          "compression_ratio": 1.8352941176470587,
          "no_speech_prob": 0.2399153858423233,
          "confidence": 0.7600846141576767
        },
        {
          "id": 35,
          "start": 181.44,
          "end": 186.88000000000002,
          "text": "list. So if I run this code, then you can see that our result, we get all of the",
          "tokens": [
            51296,
            1329,
            13,
            407,
            498,
            286,
            1190,
            341,
            3089,
            11,
            550,
            291,
            393,
            536,
            300,
            527,
            1874,
            11,
            321,
            483,
            439,
            295,
            264,
            51568
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11026489834825531,
          "compression_ratio": 1.8352941176470587,
          "no_speech_prob": 0.2399153858423233,
          "confidence": 0.7600846141576767
        }
      ],
      "duration": 29.080000000000013
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 181.88000000000002,
      "end_time": 206.0,
      "text": "list. So if I run this code, then you can see that our result, we get all of the squares of each number in this 1 through 10 list. Okay now let's see the same example but in a list comprehension and also let's notice how similar it is to the comment again. So it's almost like reading exactly what we want. So we want",
      "original_segments": [
        {
          "id": 36,
          "start": 186.88000000000002,
          "end": 192.12,
          "text": "squares of each number in this 1 through 10 list. Okay now let's see the same",
          "tokens": [
            51568,
            19368,
            295,
            1184,
            1230,
            294,
            341,
            502,
            807,
            1266,
            1329,
            13,
            1033,
            586,
            718,
            311,
            536,
            264,
            912,
            51830
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11026489834825531,
          "compression_ratio": 1.8352941176470587,
          "no_speech_prob": 0.2399153858423233,
          "confidence": 0.7600846141576767
        },
        {
          "id": 37,
          "start": 192.12,
          "end": 200.70000000000002,
          "text": "example but in a list comprehension and also let's notice how similar it is to",
          "tokens": [
            50364,
            1365,
            457,
            294,
            257,
            1329,
            44991,
            293,
            611,
            718,
            311,
            3449,
            577,
            2531,
            309,
            307,
            281,
            50793
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08941736004569313,
          "compression_ratio": 1.6161616161616161,
          "no_speech_prob": 0.010802810080349445,
          "confidence": 0.9891971899196506
        },
        {
          "id": 38,
          "start": 200.70000000000002,
          "end": 206.0,
          "text": "the comment again. So it's almost like reading exactly what we want. So we want",
          "tokens": [
            50793,
            264,
            2871,
            797,
            13,
            407,
            309,
            311,
            1920,
            411,
            3760,
            2293,
            437,
            321,
            528,
            13,
            407,
            321,
            528,
            51058
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08941736004569313,
          "compression_ratio": 1.6161616161616161,
          "no_speech_prob": 0.010802810080349445,
          "confidence": 0.9891971899196506
        }
      ],
      "duration": 24.119999999999976
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 201.0,
      "end_time": 230.32,
      "text": "the comment again. So it's almost like reading exactly what we want. So we want n times n, for n, in nums. So this is what we are appending to our list and this is the for loop here. So if I save that and then let me remember to print it out this time and then run it, then we get the exact same result as our for loop. Now there's another way to do something like this that's very similar. If you",
      "original_segments": [
        {
          "id": 39,
          "start": 206.0,
          "end": 215.32,
          "text": "n times n, for n, in nums. So this is what we are appending to our list and this is",
          "tokens": [
            51058,
            297,
            1413,
            297,
            11,
            337,
            297,
            11,
            294,
            1031,
            82,
            13,
            407,
            341,
            307,
            437,
            321,
            366,
            724,
            2029,
            281,
            527,
            1329,
            293,
            341,
            307,
            51524
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08941736004569313,
          "compression_ratio": 1.6161616161616161,
          "no_speech_prob": 0.010802810080349445,
          "confidence": 0.9891971899196506
        },
        {
          "id": 40,
          "start": 215.32,
          "end": 219.84,
          "text": "the for loop here. So if I save that and then let me remember to print it out",
          "tokens": [
            51524,
            264,
            337,
            6367,
            510,
            13,
            407,
            498,
            286,
            3155,
            300,
            293,
            550,
            718,
            385,
            1604,
            281,
            4482,
            309,
            484,
            51750
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08941736004569313,
          "compression_ratio": 1.6161616161616161,
          "no_speech_prob": 0.010802810080349445,
          "confidence": 0.9891971899196506
        },
        {
          "id": 41,
          "start": 219.84,
          "end": 225.8,
          "text": "this time and then run it, then we get the exact same result as our for loop.",
          "tokens": [
            50364,
            341,
            565,
            293,
            550,
            1190,
            309,
            11,
            550,
            321,
            483,
            264,
            1900,
            912,
            1874,
            382,
            527,
            337,
            6367,
            13,
            50662
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08529683521815709,
          "compression_ratio": 1.6824034334763949,
          "no_speech_prob": 0.06498918682336807,
          "confidence": 0.9350108131766319
        },
        {
          "id": 42,
          "start": 225.8,
          "end": 230.32,
          "text": "Now there's another way to do something like this that's very similar. If you",
          "tokens": [
            50662,
            823,
            456,
            311,
            1071,
            636,
            281,
            360,
            746,
            411,
            341,
            300,
            311,
            588,
            2531,
            13,
            759,
            291,
            50888
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08529683521815709,
          "compression_ratio": 1.6824034334763949,
          "no_speech_prob": 0.06498918682336807,
          "confidence": 0.9350108131766319
        }
      ],
      "duration": 29.319999999999993
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 225.32,
      "end_time": 255.28,
      "text": "this time and then run it, then we get the exact same result as our for loop. Now there's another way to do something like this that's very similar. If you know how to use maps and lambdas, then maybe you've made something like this before. So let me comment out this code. So map pretty much runs everything in the list through a certain function and lambda is an anonymous function. So if I save this and print it out, you can see that we got the same result but list",
      "original_segments": [
        {
          "id": 43,
          "start": 230.32,
          "end": 236.6,
          "text": "know how to use maps and lambdas, then maybe you've made something like this",
          "tokens": [
            50888,
            458,
            577,
            281,
            764,
            11317,
            293,
            10097,
            27476,
            11,
            550,
            1310,
            291,
            600,
            1027,
            746,
            411,
            341,
            51202
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08529683521815709,
          "compression_ratio": 1.6824034334763949,
          "no_speech_prob": 0.06498918682336807,
          "confidence": 0.9350108131766319
        },
        {
          "id": 44,
          "start": 236.6,
          "end": 243.24,
          "text": "before. So let me comment out this code. So map pretty much runs everything in",
          "tokens": [
            51202,
            949,
            13,
            407,
            718,
            385,
            2871,
            484,
            341,
            3089,
            13,
            407,
            4471,
            1238,
            709,
            6676,
            1203,
            294,
            51534
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08529683521815709,
          "compression_ratio": 1.6824034334763949,
          "no_speech_prob": 0.06498918682336807,
          "confidence": 0.9350108131766319
        },
        {
          "id": 45,
          "start": 243.24,
          "end": 249.16,
          "text": "the list through a certain function and lambda is an anonymous function. So if I",
          "tokens": [
            51534,
            264,
            1329,
            807,
            257,
            1629,
            2445,
            293,
            13607,
            307,
            364,
            24932,
            2445,
            13,
            407,
            498,
            286,
            51830
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08529683521815709,
          "compression_ratio": 1.6824034334763949,
          "no_speech_prob": 0.06498918682336807,
          "confidence": 0.9350108131766319
        },
        {
          "id": 46,
          "start": 249.16,
          "end": 255.28,
          "text": "save this and print it out, you can see that we got the same result but list",
          "tokens": [
            50364,
            3155,
            341,
            293,
            4482,
            309,
            484,
            11,
            291,
            393,
            536,
            300,
            321,
            658,
            264,
            912,
            1874,
            457,
            1329,
            50670
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08454317416784898,
          "compression_ratio": 1.7404580152671756,
          "no_speech_prob": 0.011577984318137169,
          "confidence": 0.9884220156818628
        }
      ],
      "duration": 29.960000000000008
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 250.28,
      "end_time": 277.4,
      "text": "save this and print it out, you can see that we got the same result but list comprehensions pretty much do away with these map functions because they're no longer needed. This works and it's a one-liner just like the comprehension but you can't read this and understand exactly what it's doing unless you already knew about these to begin with. If you compare this readability to the list comprehension, somebody who's completely new to Python can see this",
      "original_segments": [
        {
          "id": 47,
          "start": 255.28,
          "end": 260.15999999999997,
          "text": "comprehensions pretty much do away with these map functions because they're no",
          "tokens": [
            50670,
            10753,
            8302,
            1238,
            709,
            360,
            1314,
            365,
            613,
            4471,
            6828,
            570,
            436,
            434,
            572,
            50914
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08454317416784898,
          "compression_ratio": 1.7404580152671756,
          "no_speech_prob": 0.011577984318137169,
          "confidence": 0.9884220156818628
        },
        {
          "id": 48,
          "start": 260.15999999999997,
          "end": 263.64,
          "text": "longer needed. This works and it's a one-liner just like the comprehension",
          "tokens": [
            50914,
            2854,
            2978,
            13,
            639,
            1985,
            293,
            309,
            311,
            257,
            472,
            12,
            36849,
            445,
            411,
            264,
            44991,
            51088
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08454317416784898,
          "compression_ratio": 1.7404580152671756,
          "no_speech_prob": 0.011577984318137169,
          "confidence": 0.9884220156818628
        },
        {
          "id": 49,
          "start": 263.64,
          "end": 269.44,
          "text": "but you can't read this and understand exactly what it's doing unless you",
          "tokens": [
            51088,
            457,
            291,
            393,
            380,
            1401,
            341,
            293,
            1223,
            2293,
            437,
            309,
            311,
            884,
            5969,
            291,
            51378
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08454317416784898,
          "compression_ratio": 1.7404580152671756,
          "no_speech_prob": 0.011577984318137169,
          "confidence": 0.9884220156818628
        },
        {
          "id": 50,
          "start": 269.44,
          "end": 273.6,
          "text": "already knew about these to begin with. If you compare this readability to the",
          "tokens": [
            51378,
            1217,
            2586,
            466,
            613,
            281,
            1841,
            365,
            13,
            759,
            291,
            6794,
            341,
            1401,
            2310,
            281,
            264,
            51586
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08454317416784898,
          "compression_ratio": 1.7404580152671756,
          "no_speech_prob": 0.011577984318137169,
          "confidence": 0.9884220156818628
        },
        {
          "id": 51,
          "start": 273.6,
          "end": 277.4,
          "text": "list comprehension, somebody who's completely new to Python can see this",
          "tokens": [
            51586,
            1329,
            44991,
            11,
            2618,
            567,
            311,
            2584,
            777,
            281,
            15329,
            393,
            536,
            341,
            51776
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08454317416784898,
          "compression_ratio": 1.7404580152671756,
          "no_speech_prob": 0.011577984318137169,
          "confidence": 0.9884220156818628
        }
      ],
      "duration": 27.119999999999976
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 272.4,
      "end_time": 299.2,
      "text": "already knew about these to begin with. If you compare this readability to the list comprehension, somebody who's completely new to Python can see this and say n times n for n and nums and that just is readable. It just kind of flows together and you can kind of understand what's going on with these maps and lambdas. It says map lambda n n times n nums. It just doesn't read very well and you have to be experienced with those before you",
      "original_segments": [
        {
          "id": 52,
          "start": 277.4,
          "end": 284.96,
          "text": "and say n times n for n and nums and that just is readable. It just kind of",
          "tokens": [
            50364,
            293,
            584,
            297,
            1413,
            297,
            337,
            297,
            293,
            1031,
            82,
            293,
            300,
            445,
            307,
            49857,
            13,
            467,
            445,
            733,
            295,
            50742
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14038766663649987,
          "compression_ratio": 1.8506224066390042,
          "no_speech_prob": 0.43168649077415466,
          "confidence": 0.5683135092258453
        },
        {
          "id": 53,
          "start": 284.96,
          "end": 288.59999999999997,
          "text": "flows together and you can kind of understand what's going on with these",
          "tokens": [
            50742,
            12867,
            1214,
            293,
            291,
            393,
            733,
            295,
            1223,
            437,
            311,
            516,
            322,
            365,
            613,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14038766663649987,
          "compression_ratio": 1.8506224066390042,
          "no_speech_prob": 0.43168649077415466,
          "confidence": 0.5683135092258453
        },
        {
          "id": 54,
          "start": 288.59999999999997,
          "end": 295.52,
          "text": "maps and lambdas. It says map lambda n n times n nums. It just doesn't",
          "tokens": [
            50924,
            11317,
            293,
            10097,
            27476,
            13,
            467,
            1619,
            4471,
            13607,
            297,
            297,
            1413,
            297,
            1031,
            82,
            13,
            467,
            445,
            1177,
            380,
            51270
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14038766663649987,
          "compression_ratio": 1.8506224066390042,
          "no_speech_prob": 0.43168649077415466,
          "confidence": 0.5683135092258453
        },
        {
          "id": 55,
          "start": 295.52,
          "end": 299.2,
          "text": "read very well and you have to be experienced with those before you",
          "tokens": [
            51270,
            1401,
            588,
            731,
            293,
            291,
            362,
            281,
            312,
            6751,
            365,
            729,
            949,
            291,
            51454
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14038766663649987,
          "compression_ratio": 1.8506224066390042,
          "no_speech_prob": 0.43168649077415466,
          "confidence": 0.5683135092258453
        }
      ],
      "duration": 26.80000000000001
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 294.2,
      "end_time": 322.0,
      "text": "maps and lambdas. It says map lambda n n times n nums. It just doesn't read very well and you have to be experienced with those before you understand what's going on. So if you are using maps and lambdas from within your code, then you might want to check and see if those can be converted to list comprehensions because 99 of the time they can be. So I'm going to comment these out here and erase these and we'll move on to a slightly more difficult",
      "original_segments": [
        {
          "id": 56,
          "start": 299.2,
          "end": 303.59999999999997,
          "text": "understand what's going on. So if you are using maps and lambdas from within your",
          "tokens": [
            51454,
            1223,
            437,
            311,
            516,
            322,
            13,
            407,
            498,
            291,
            366,
            1228,
            11317,
            293,
            10097,
            27476,
            490,
            1951,
            428,
            51674
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14038766663649987,
          "compression_ratio": 1.8506224066390042,
          "no_speech_prob": 0.43168649077415466,
          "confidence": 0.5683135092258453
        },
        {
          "id": 57,
          "start": 303.59999999999997,
          "end": 307.32,
          "text": "code, then you might want to check and see if those can be converted to list",
          "tokens": [
            51674,
            3089,
            11,
            550,
            291,
            1062,
            528,
            281,
            1520,
            293,
            536,
            498,
            729,
            393,
            312,
            16424,
            281,
            1329,
            51860
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14038766663649987,
          "compression_ratio": 1.8506224066390042,
          "no_speech_prob": 0.43168649077415466,
          "confidence": 0.5683135092258453
        },
        {
          "id": 58,
          "start": 307.32,
          "end": 314.52,
          "text": "comprehensions because 99% of the time they can be. So I'm going to comment",
          "tokens": [
            50364,
            10753,
            8302,
            570,
            11803,
            4,
            295,
            264,
            565,
            436,
            393,
            312,
            13,
            407,
            286,
            478,
            516,
            281,
            2871,
            50724
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1146955265718348,
          "compression_ratio": 1.5656565656565657,
          "no_speech_prob": 0.004097813740372658,
          "confidence": 0.9959021862596273
        },
        {
          "id": 59,
          "start": 314.52,
          "end": 322.0,
          "text": "these out here and erase these and we'll move on to a slightly more difficult",
          "tokens": [
            50724,
            613,
            484,
            510,
            293,
            23525,
            613,
            293,
            321,
            603,
            1286,
            322,
            281,
            257,
            4748,
            544,
            2252,
            51098
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1146955265718348,
          "compression_ratio": 1.5656565656565657,
          "no_speech_prob": 0.004097813740372658,
          "confidence": 0.9959021862596273
        }
      ],
      "duration": 27.80000000000001
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 317.0,
      "end_time": 345.96,
      "text": "these out here and erase these and we'll move on to a slightly more difficult example. Okay so in the comment for this example, I'm saying that I want n for each n n nums if n is even. So this is going to create a list that is all the even numbers of our original 1 through 10 list. So what's going on in our for loop here is we're creating our empty list and then we're saying for each",
      "original_segments": [
        {
          "id": 60,
          "start": 322.0,
          "end": 328.15999999999997,
          "text": "example. Okay so in the comment for this example, I'm saying that I want n for",
          "tokens": [
            51098,
            1365,
            13,
            1033,
            370,
            294,
            264,
            2871,
            337,
            341,
            1365,
            11,
            286,
            478,
            1566,
            300,
            286,
            528,
            297,
            337,
            51406
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1146955265718348,
          "compression_ratio": 1.5656565656565657,
          "no_speech_prob": 0.004097813740372658,
          "confidence": 0.9959021862596273
        },
        {
          "id": 61,
          "start": 328.15999999999997,
          "end": 336.96,
          "text": "each n n nums if n is even. So this is going to create a list that is all the",
          "tokens": [
            51406,
            1184,
            297,
            297,
            1031,
            82,
            498,
            297,
            307,
            754,
            13,
            407,
            341,
            307,
            516,
            281,
            1884,
            257,
            1329,
            300,
            307,
            439,
            264,
            51846
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1146955265718348,
          "compression_ratio": 1.5656565656565657,
          "no_speech_prob": 0.004097813740372658,
          "confidence": 0.9959021862596273
        },
        {
          "id": 62,
          "start": 336.96,
          "end": 341.79999999999995,
          "text": "even numbers of our original 1 through 10 list. So what's going on in our for",
          "tokens": [
            50364,
            754,
            3547,
            295,
            527,
            3380,
            502,
            807,
            1266,
            1329,
            13,
            407,
            437,
            311,
            516,
            322,
            294,
            527,
            337,
            50606
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0951556677770133,
          "compression_ratio": 1.6622222222222223,
          "no_speech_prob": 0.005372007377445698,
          "confidence": 0.9946279926225543
        },
        {
          "id": 63,
          "start": 341.79999999999995,
          "end": 345.96,
          "text": "loop here is we're creating our empty list and then we're saying for each",
          "tokens": [
            50606,
            6367,
            510,
            307,
            321,
            434,
            4084,
            527,
            6707,
            1329,
            293,
            550,
            321,
            434,
            1566,
            337,
            1184,
            50814
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0951556677770133,
          "compression_ratio": 1.6622222222222223,
          "no_speech_prob": 0.005372007377445698,
          "confidence": 0.9946279926225543
        }
      ],
      "duration": 28.95999999999998
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 340.96,
      "end_time": 369.76,
      "text": "even numbers of our original 1 through 10 list. So what's going on in our for loop here is we're creating our empty list and then we're saying for each item in the numbers list, then if that number mod 2 which will give us the remainder after we divide it by 2 is equal to 0, that means that it's even. So then append that to our list and then at the end we'll print out our list. So if we run that then you can see that it works. We get 2 4 6 8 10. So now",
      "original_segments": [
        {
          "id": 64,
          "start": 345.96,
          "end": 353.71999999999997,
          "text": "item in the numbers list, then if that number mod 2 which will give us the",
          "tokens": [
            50814,
            3174,
            294,
            264,
            3547,
            1329,
            11,
            550,
            498,
            300,
            1230,
            1072,
            568,
            597,
            486,
            976,
            505,
            264,
            51202
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0951556677770133,
          "compression_ratio": 1.6622222222222223,
          "no_speech_prob": 0.005372007377445698,
          "confidence": 0.9946279926225543
        },
        {
          "id": 65,
          "start": 353.71999999999997,
          "end": 358.91999999999996,
          "text": "remainder after we divide it by 2 is equal to 0, that means that it's even. So",
          "tokens": [
            51202,
            29837,
            934,
            321,
            9845,
            309,
            538,
            568,
            307,
            2681,
            281,
            1958,
            11,
            300,
            1355,
            300,
            309,
            311,
            754,
            13,
            407,
            51462
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0951556677770133,
          "compression_ratio": 1.6622222222222223,
          "no_speech_prob": 0.005372007377445698,
          "confidence": 0.9946279926225543
        },
        {
          "id": 66,
          "start": 358.91999999999996,
          "end": 363.79999999999995,
          "text": "then append that to our list and then at the end we'll print out our",
          "tokens": [
            51462,
            550,
            34116,
            300,
            281,
            527,
            1329,
            293,
            550,
            412,
            264,
            917,
            321,
            603,
            4482,
            484,
            527,
            51706
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0951556677770133,
          "compression_ratio": 1.6622222222222223,
          "no_speech_prob": 0.005372007377445698,
          "confidence": 0.9946279926225543
        },
        {
          "id": 67,
          "start": 363.8,
          "end": 369.76,
          "text": "list. So if we run that then you can see that it works. We get 2 4 6 8 10. So now",
          "tokens": [
            50364,
            1329,
            13,
            407,
            498,
            321,
            1190,
            300,
            550,
            291,
            393,
            536,
            300,
            309,
            1985,
            13,
            492,
            483,
            568,
            1017,
            1386,
            1649,
            1266,
            13,
            407,
            586,
            50662
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1491145120150801,
          "compression_ratio": 1.4424242424242424,
          "no_speech_prob": 0.4770198166370392,
          "confidence": 0.5229801833629608
        }
      ],
      "duration": 28.80000000000001
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 364.76,
      "end_time": 383.12,
      "text": "list. So if we run that then you can see that it works. We get 2 4 6 8 10. So now let's look at this same example using a list comprehension. So I'm going to say my list equal to brackets which means that we're making a list. So we want n",
      "original_segments": [
        {
          "id": 68,
          "start": 369.76,
          "end": 375.56,
          "text": "let's look at this same example using a list comprehension. So I'm going to say",
          "tokens": [
            50662,
            718,
            311,
            574,
            412,
            341,
            912,
            1365,
            1228,
            257,
            1329,
            44991,
            13,
            407,
            286,
            478,
            516,
            281,
            584,
            50952
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1491145120150801,
          "compression_ratio": 1.4424242424242424,
          "no_speech_prob": 0.4770198166370392,
          "confidence": 0.5229801833629608
        },
        {
          "id": 69,
          "start": 375.56,
          "end": 383.12,
          "text": "my list equal to brackets which means that we're making a list. So we want n",
          "tokens": [
            50952,
            452,
            1329,
            2681,
            281,
            26179,
            597,
            1355,
            300,
            321,
            434,
            1455,
            257,
            1329,
            13,
            407,
            321,
            528,
            297,
            51330
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1491145120150801,
          "compression_ratio": 1.4424242424242424,
          "no_speech_prob": 0.4770198166370392,
          "confidence": 0.5229801833629608
        }
      ],
      "duration": 18.360000000000014
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 378.12,
      "end_time": 403.8,
      "text": "my list equal to brackets which means that we're making a list. So we want n for n n nums if n mod 2 equals equals 0. So what we're saying is that we want we want an item for each item n nums if that item mod 2 equals equals 0. So let's",
      "original_segments": [
        {
          "id": 70,
          "start": 383.12,
          "end": 396.48,
          "text": "for n n nums if n mod 2 equals equals 0. So what we're saying is that we want we",
          "tokens": [
            50364,
            337,
            297,
            297,
            1031,
            82,
            498,
            297,
            1072,
            568,
            6915,
            6915,
            1958,
            13,
            407,
            437,
            321,
            434,
            1566,
            307,
            300,
            321,
            528,
            321,
            51032
          ],
          "temperature": 0.0,
          "avg_logprob": -0.131175829016644,
          "compression_ratio": 1.7426470588235294,
          "no_speech_prob": 0.09353579580783844,
          "confidence": 0.9064642041921616
        },
        {
          "id": 71,
          "start": 396.48,
          "end": 403.8,
          "text": "want an item for each item n nums if that item mod 2 equals equals 0. So let's",
          "tokens": [
            51032,
            528,
            364,
            3174,
            337,
            1184,
            3174,
            297,
            1031,
            82,
            498,
            300,
            3174,
            1072,
            568,
            6915,
            6915,
            1958,
            13,
            407,
            718,
            311,
            51398
          ],
          "temperature": 0.0,
          "avg_logprob": -0.131175829016644,
          "compression_ratio": 1.7426470588235294,
          "no_speech_prob": 0.09353579580783844,
          "confidence": 0.9064642041921616
        }
      ],
      "duration": 25.680000000000007
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 398.8,
      "end_time": 427.48,
      "text": "want an item for each item n nums if that item mod 2 equals equals 0. So let's save that and actually let me print it out here and then run that and you can see that we get the exact same result as our for loop. Now just like the map and lambda functions there's also the filter and lambda functions which is pretty much the same thing. So instead of map we have filter and what this does is",
      "original_segments": [
        {
          "id": 72,
          "start": 403.8,
          "end": 409.88,
          "text": "save that and actually let me print it out here and then run that and you can",
          "tokens": [
            51398,
            3155,
            300,
            293,
            767,
            718,
            385,
            4482,
            309,
            484,
            510,
            293,
            550,
            1190,
            300,
            293,
            291,
            393,
            51702
          ],
          "temperature": 0.0,
          "avg_logprob": -0.131175829016644,
          "compression_ratio": 1.7426470588235294,
          "no_speech_prob": 0.09353579580783844,
          "confidence": 0.9064642041921616
        },
        {
          "id": 73,
          "start": 409.88,
          "end": 414.68,
          "text": "see that we get the exact same result as our for loop. Now just like the map",
          "tokens": [
            50364,
            536,
            300,
            321,
            483,
            264,
            1900,
            912,
            1874,
            382,
            527,
            337,
            6367,
            13,
            823,
            445,
            411,
            264,
            4471,
            50604
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10482445767051295,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.5674858093261719,
          "confidence": 0.4325141906738281
        },
        {
          "id": 74,
          "start": 414.68,
          "end": 420.8,
          "text": "and lambda functions there's also the filter and lambda functions which is",
          "tokens": [
            50604,
            293,
            13607,
            6828,
            456,
            311,
            611,
            264,
            6608,
            293,
            13607,
            6828,
            597,
            307,
            50910
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10482445767051295,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.5674858093261719,
          "confidence": 0.4325141906738281
        },
        {
          "id": 75,
          "start": 420.8,
          "end": 427.48,
          "text": "pretty much the same thing. So instead of map we have filter and what this does is",
          "tokens": [
            50910,
            1238,
            709,
            264,
            912,
            551,
            13,
            407,
            2602,
            295,
            4471,
            321,
            362,
            6608,
            293,
            437,
            341,
            775,
            307,
            51244
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10482445767051295,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.5674858093261719,
          "confidence": 0.4325141906738281
        }
      ],
      "duration": 28.680000000000007
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 422.48,
      "end_time": 449.28000000000003,
      "text": "pretty much the same thing. So instead of map we have filter and what this does is it filters it runs the list through this function and only gives us the values that are even. So if we print this out you can see that it works but the same with the map lambda function people just aren't going to know what this is if they're new to it. It's just not as readable as this list comprehension is.",
      "original_segments": [
        {
          "id": 76,
          "start": 427.48,
          "end": 434.08,
          "text": "it filters it runs the list through this function and only gives us the values",
          "tokens": [
            51244,
            309,
            15995,
            309,
            6676,
            264,
            1329,
            807,
            341,
            2445,
            293,
            787,
            2709,
            505,
            264,
            4190,
            51574
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10482445767051295,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.5674858093261719,
          "confidence": 0.4325141906738281
        },
        {
          "id": 77,
          "start": 434.08,
          "end": 439.56,
          "text": "that are even. So if we print this out you can see that it works but the same",
          "tokens": [
            51574,
            300,
            366,
            754,
            13,
            407,
            498,
            321,
            4482,
            341,
            484,
            291,
            393,
            536,
            300,
            309,
            1985,
            457,
            264,
            912,
            51848
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10482445767051295,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.5674858093261719,
          "confidence": 0.4325141906738281
        },
        {
          "id": 78,
          "start": 439.56,
          "end": 445.16,
          "text": "with the map lambda function people just aren't going to know what this is if",
          "tokens": [
            50364,
            365,
            264,
            4471,
            13607,
            2445,
            561,
            445,
            3212,
            380,
            516,
            281,
            458,
            437,
            341,
            307,
            498,
            50644
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0834342883183406,
          "compression_ratio": 1.5454545454545454,
          "no_speech_prob": 0.007878568954765797,
          "confidence": 0.9921214310452342
        },
        {
          "id": 79,
          "start": 445.16,
          "end": 449.28000000000003,
          "text": "they're new to it. It's just not as readable as this list comprehension is.",
          "tokens": [
            50644,
            436,
            434,
            777,
            281,
            309,
            13,
            467,
            311,
            445,
            406,
            382,
            49857,
            382,
            341,
            1329,
            44991,
            307,
            13,
            50850
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0834342883183406,
          "compression_ratio": 1.5454545454545454,
          "no_speech_prob": 0.007878568954765797,
          "confidence": 0.9921214310452342
        }
      ],
      "duration": 26.80000000000001
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 444.28000000000003,
      "end_time": 474.12,
      "text": "with the map lambda function people just aren't going to know what this is if they're new to it. It's just not as readable as this list comprehension is. So let's go ahead and delete all of this stuff and move on to a slightly more difficult example. So in this example here I'm saying that I want a letter number pair for each letter and ABCD and each number in 0 1 2 3. So for example I",
      "original_segments": [
        {
          "id": 80,
          "start": 449.28000000000003,
          "end": 457.16,
          "text": "So let's go ahead and delete all of this stuff and move on to a slightly more",
          "tokens": [
            50850,
            407,
            718,
            311,
            352,
            2286,
            293,
            12097,
            439,
            295,
            341,
            1507,
            293,
            1286,
            322,
            281,
            257,
            4748,
            544,
            51244
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0834342883183406,
          "compression_ratio": 1.5454545454545454,
          "no_speech_prob": 0.007878568954765797,
          "confidence": 0.9921214310452342
        },
        {
          "id": 81,
          "start": 457.16,
          "end": 464.56,
          "text": "difficult example. So in this example here I'm saying that I want a letter",
          "tokens": [
            51244,
            2252,
            1365,
            13,
            407,
            294,
            341,
            1365,
            510,
            286,
            478,
            1566,
            300,
            286,
            528,
            257,
            5063,
            51614
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0834342883183406,
          "compression_ratio": 1.5454545454545454,
          "no_speech_prob": 0.007878568954765797,
          "confidence": 0.9921214310452342
        },
        {
          "id": 82,
          "start": 464.56,
          "end": 474.12,
          "text": "number pair for each letter and ABCD and each number in 0 1 2 3. So for example I",
          "tokens": [
            50364,
            1230,
            6119,
            337,
            1184,
            5063,
            293,
            22342,
            35,
            293,
            1184,
            1230,
            294,
            1958,
            502,
            568,
            805,
            13,
            407,
            337,
            1365,
            286,
            50842
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12597583469591642,
          "compression_ratio": 1.5286624203821657,
          "no_speech_prob": 0.3835029900074005,
          "confidence": 0.6164970099925995
        }
      ],
      "duration": 29.839999999999975
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 469.12,
      "end_time": 495.8,
      "text": "number pair for each letter and ABCD and each number in 0 1 2 3. So for example I would want a 0 a 1 a 2 a 3 b 0 b 1 b 2 b 3 and so on. So if we were to do this with a for loop then we would create our empty list then we would do a for loop for letter in ABC and then within that for loop we're gonna have another nested",
      "original_segments": [
        {
          "id": 83,
          "start": 474.12,
          "end": 483.28,
          "text": "would want a 0 a 1 a 2 a 3 b 0 b 1 b 2 b 3 and so on. So if we were to do this",
          "tokens": [
            50842,
            576,
            528,
            257,
            1958,
            257,
            502,
            257,
            568,
            257,
            805,
            272,
            1958,
            272,
            502,
            272,
            568,
            272,
            805,
            293,
            370,
            322,
            13,
            407,
            498,
            321,
            645,
            281,
            360,
            341,
            51300
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12597583469591642,
          "compression_ratio": 1.5286624203821657,
          "no_speech_prob": 0.3835029900074005,
          "confidence": 0.6164970099925995
        },
        {
          "id": 84,
          "start": 483.28,
          "end": 489.56,
          "text": "with a for loop then we would create our empty list then we would do a for loop",
          "tokens": [
            51300,
            365,
            257,
            337,
            6367,
            550,
            321,
            576,
            1884,
            527,
            6707,
            1329,
            550,
            321,
            576,
            360,
            257,
            337,
            6367,
            51614
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12597583469591642,
          "compression_ratio": 1.5286624203821657,
          "no_speech_prob": 0.3835029900074005,
          "confidence": 0.6164970099925995
        },
        {
          "id": 85,
          "start": 489.56,
          "end": 495.8,
          "text": "for letter in ABC and then within that for loop we're gonna have another nested",
          "tokens": [
            50364,
            337,
            5063,
            294,
            22342,
            293,
            550,
            1951,
            300,
            337,
            6367,
            321,
            434,
            799,
            362,
            1071,
            15646,
            292,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14529625935987991,
          "compression_ratio": 1.6373056994818653,
          "no_speech_prob": 0.30336424708366394,
          "confidence": 0.6966357529163361
        }
      ],
      "duration": 26.680000000000007
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 490.8,
      "end_time": 515.92,
      "text": "for letter in ABC and then within that for loop we're gonna have another nested for loop and say for num and range for which will give us 0 1 2 3 and then we're going to do a my list dot append a tuple of the pair letter and number. So if I save that and I run it then you can see that we got all of our pairs we got",
      "original_segments": [
        {
          "id": 86,
          "start": 495.8,
          "end": 503.0,
          "text": "for loop and say for num and range for which will give us 0 1 2 3 and then",
          "tokens": [
            50676,
            337,
            6367,
            293,
            584,
            337,
            1031,
            293,
            3613,
            337,
            597,
            486,
            976,
            505,
            1958,
            502,
            568,
            805,
            293,
            550,
            51036
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14529625935987991,
          "compression_ratio": 1.6373056994818653,
          "no_speech_prob": 0.30336424708366394,
          "confidence": 0.6966357529163361
        },
        {
          "id": 87,
          "start": 503.0,
          "end": 510.44,
          "text": "we're going to do a my list dot append a tuple of the pair letter and number. So",
          "tokens": [
            51036,
            321,
            434,
            516,
            281,
            360,
            257,
            452,
            1329,
            5893,
            34116,
            257,
            2604,
            781,
            295,
            264,
            6119,
            5063,
            293,
            1230,
            13,
            407,
            51408
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14529625935987991,
          "compression_ratio": 1.6373056994818653,
          "no_speech_prob": 0.30336424708366394,
          "confidence": 0.6966357529163361
        },
        {
          "id": 88,
          "start": 510.44,
          "end": 515.92,
          "text": "if I save that and I run it then you can see that we got all of our pairs we got",
          "tokens": [
            51408,
            498,
            286,
            3155,
            300,
            293,
            286,
            1190,
            309,
            550,
            291,
            393,
            536,
            300,
            321,
            658,
            439,
            295,
            527,
            15494,
            321,
            658,
            51682
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14529625935987991,
          "compression_ratio": 1.6373056994818653,
          "no_speech_prob": 0.30336424708366394,
          "confidence": 0.6966357529163361
        }
      ],
      "duration": 25.119999999999948
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 510.91999999999996,
      "end_time": 534.4799999999999,
      "text": "if I save that and I run it then you can see that we got all of our pairs we got a 0 a 1 a 2 a 3 b 0 b 1 b 2 b 3 and so on. So we can have these nested for loops and list comprehensions as well. So if I was to do this in a list comprehension I would say my list equals create an empty list here and now what I want is",
      "original_segments": [
        {
          "id": 89,
          "start": 515.92,
          "end": 524.12,
          "text": "a 0 a 1 a 2 a 3 b 0 b 1 b 2 b 3 and so on. So we can have these nested for loops",
          "tokens": [
            50364,
            257,
            1958,
            257,
            502,
            257,
            568,
            257,
            805,
            272,
            1958,
            272,
            502,
            272,
            568,
            272,
            805,
            293,
            370,
            322,
            13,
            407,
            321,
            393,
            362,
            613,
            15646,
            292,
            337,
            16121,
            50774
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13291349675920275,
          "compression_ratio": 1.5629139072847682,
          "no_speech_prob": 0.10256130248308182,
          "confidence": 0.8974386975169182
        },
        {
          "id": 90,
          "start": 524.12,
          "end": 529.1999999999999,
          "text": "and list comprehensions as well. So if I was to do this in a list comprehension",
          "tokens": [
            50774,
            293,
            1329,
            10753,
            8302,
            382,
            731,
            13,
            407,
            498,
            286,
            390,
            281,
            360,
            341,
            294,
            257,
            1329,
            44991,
            51028
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13291349675920275,
          "compression_ratio": 1.5629139072847682,
          "no_speech_prob": 0.10256130248308182,
          "confidence": 0.8974386975169182
        },
        {
          "id": 91,
          "start": 529.1999999999999,
          "end": 534.4799999999999,
          "text": "I would say my list equals create an empty list here and now what I want is",
          "tokens": [
            51028,
            286,
            576,
            584,
            452,
            1329,
            6915,
            1884,
            364,
            6707,
            1329,
            510,
            293,
            586,
            437,
            286,
            528,
            307,
            51292
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13291349675920275,
          "compression_ratio": 1.5629139072847682,
          "no_speech_prob": 0.10256130248308182,
          "confidence": 0.8974386975169182
        }
      ],
      "duration": 23.559999999999945
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 529.4799999999999,
      "end_time": 559.2,
      "text": "I would say my list equals create an empty list here and now what I want is I want letter num for letter in ABCD and then right after that for loop for num in range for. So let's save this and print it out and make sure I typed",
      "original_segments": [
        {
          "id": 92,
          "start": 534.48,
          "end": 550.08,
          "text": "I want letter num for letter in ABCD and then right after that for loop for num",
          "tokens": [
            50364,
            286,
            528,
            5063,
            1031,
            337,
            5063,
            294,
            22342,
            35,
            293,
            550,
            558,
            934,
            300,
            337,
            6367,
            337,
            1031,
            51144
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11415089935552879,
          "compression_ratio": 1.5616438356164384,
          "no_speech_prob": 0.07563777267932892,
          "confidence": 0.9243622273206711
        },
        {
          "id": 93,
          "start": 550.08,
          "end": 559.2,
          "text": "in range for. So let's save this and print it out and make sure I typed",
          "tokens": [
            51144,
            294,
            3613,
            337,
            13,
            407,
            718,
            311,
            3155,
            341,
            293,
            4482,
            309,
            484,
            293,
            652,
            988,
            286,
            33941,
            51600
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11415089935552879,
          "compression_ratio": 1.5616438356164384,
          "no_speech_prob": 0.07563777267932892,
          "confidence": 0.9243622273206711
        }
      ],
      "duration": 29.72000000000014
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 554.2,
      "end_time": 581.52,
      "text": "in range for. So let's save this and print it out and make sure I typed everything right. So we print that out and we see that we get the exact same result as our for loop. Now let's walk through this one one more time. So what we're saying is that we want a list so we open up our brackets and we're saying that we want this tuple letter number for letter in ABCD for num in",
      "original_segments": [
        {
          "id": 94,
          "start": 559.2,
          "end": 563.88,
          "text": "everything right. So we print that out and we see that we get the exact same",
          "tokens": [
            51600,
            1203,
            558,
            13,
            407,
            321,
            4482,
            300,
            484,
            293,
            321,
            536,
            300,
            321,
            483,
            264,
            1900,
            912,
            51834
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11415089935552879,
          "compression_ratio": 1.5616438356164384,
          "no_speech_prob": 0.07563777267932892,
          "confidence": 0.9243622273206711
        },
        {
          "id": 95,
          "start": 563.88,
          "end": 568.28,
          "text": "result as our for loop. Now let's walk through this one one more time. So what",
          "tokens": [
            50364,
            1874,
            382,
            527,
            337,
            6367,
            13,
            823,
            718,
            311,
            1792,
            807,
            341,
            472,
            472,
            544,
            565,
            13,
            407,
            437,
            50584
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09392098299006826,
          "compression_ratio": 1.8066037735849056,
          "no_speech_prob": 0.17127135396003723,
          "confidence": 0.8287286460399628
        },
        {
          "id": 96,
          "start": 568.28,
          "end": 573.08,
          "text": "we're saying is that we want a list so we open up our brackets and we're",
          "tokens": [
            50584,
            321,
            434,
            1566,
            307,
            300,
            321,
            528,
            257,
            1329,
            370,
            321,
            1269,
            493,
            527,
            26179,
            293,
            321,
            434,
            50824
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09392098299006826,
          "compression_ratio": 1.8066037735849056,
          "no_speech_prob": 0.17127135396003723,
          "confidence": 0.8287286460399628
        },
        {
          "id": 97,
          "start": 573.08,
          "end": 581.52,
          "text": "saying that we want this tuple letter number for letter in ABCD for num in",
          "tokens": [
            50824,
            1566,
            300,
            321,
            528,
            341,
            2604,
            781,
            5063,
            1230,
            337,
            5063,
            294,
            22342,
            35,
            337,
            1031,
            294,
            51246
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09392098299006826,
          "compression_ratio": 1.8066037735849056,
          "no_speech_prob": 0.17127135396003723,
          "confidence": 0.8287286460399628
        }
      ],
      "duration": 27.319999999999936
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 576.52,
      "end_time": 602.1999999999999,
      "text": "saying that we want this tuple letter number for letter in ABCD for num in range for. So one thing I probably should have mentioned earlier is that these values that we're saying that we want they have to match these values that we assign here. So I couldn't just call this number here I couldn't say that I want letter num for letter in ABCD for number in range for because it's not",
      "original_segments": [
        {
          "id": 98,
          "start": 581.52,
          "end": 586.24,
          "text": "range for. So one thing I probably should have mentioned earlier is that these",
          "tokens": [
            51246,
            3613,
            337,
            13,
            407,
            472,
            551,
            286,
            1391,
            820,
            362,
            2835,
            3071,
            307,
            300,
            613,
            51482
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09392098299006826,
          "compression_ratio": 1.8066037735849056,
          "no_speech_prob": 0.17127135396003723,
          "confidence": 0.8287286460399628
        },
        {
          "id": 99,
          "start": 586.24,
          "end": 590.68,
          "text": "values that we're saying that we want they have to match these values that we",
          "tokens": [
            51482,
            4190,
            300,
            321,
            434,
            1566,
            300,
            321,
            528,
            436,
            362,
            281,
            2995,
            613,
            4190,
            300,
            321,
            51704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09392098299006826,
          "compression_ratio": 1.8066037735849056,
          "no_speech_prob": 0.17127135396003723,
          "confidence": 0.8287286460399628
        },
        {
          "id": 100,
          "start": 590.68,
          "end": 595.4799999999999,
          "text": "assign here. So I couldn't just call this number here I couldn't say that I",
          "tokens": [
            50364,
            6269,
            510,
            13,
            407,
            286,
            2809,
            380,
            445,
            818,
            341,
            1230,
            510,
            286,
            2809,
            380,
            584,
            300,
            286,
            50604
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11922028064727783,
          "compression_ratio": 1.6813186813186813,
          "no_speech_prob": 0.46888962388038635,
          "confidence": 0.5311103761196136
        },
        {
          "id": 101,
          "start": 595.4799999999999,
          "end": 602.1999999999999,
          "text": "want letter num for letter in ABCD for number in range for because it's not",
          "tokens": [
            50604,
            528,
            5063,
            1031,
            337,
            5063,
            294,
            22342,
            35,
            337,
            1230,
            294,
            3613,
            337,
            570,
            309,
            311,
            406,
            50940
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11922028064727783,
          "compression_ratio": 1.6813186813186813,
          "no_speech_prob": 0.46888962388038635,
          "confidence": 0.5311103761196136
        }
      ],
      "duration": 25.67999999999995
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 597.1999999999999,
      "end_time": 626.16,
      "text": "want letter num for letter in ABCD for number in range for because it's not going to know what this value is this num value. We have to use the same values that we want whenever we say that we want those values in the list. So you can see how we can start to do some complicated lists here that take you know a good bit of lines of code that we can write as a one-liner and it's",
      "original_segments": [
        {
          "id": 102,
          "start": 602.1999999999999,
          "end": 608.2399999999999,
          "text": "going to know what this value is this num value. We have to use the same",
          "tokens": [
            50940,
            516,
            281,
            458,
            437,
            341,
            2158,
            307,
            341,
            1031,
            2158,
            13,
            492,
            362,
            281,
            764,
            264,
            912,
            51242
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11922028064727783,
          "compression_ratio": 1.6813186813186813,
          "no_speech_prob": 0.46888962388038635,
          "confidence": 0.5311103761196136
        },
        {
          "id": 103,
          "start": 608.2399999999999,
          "end": 615.5999999999999,
          "text": "values that we want whenever we say that we want those values in the list. So you",
          "tokens": [
            51242,
            4190,
            300,
            321,
            528,
            5699,
            321,
            584,
            300,
            321,
            528,
            729,
            4190,
            294,
            264,
            1329,
            13,
            407,
            291,
            51610
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11922028064727783,
          "compression_ratio": 1.6813186813186813,
          "no_speech_prob": 0.46888962388038635,
          "confidence": 0.5311103761196136
        },
        {
          "id": 104,
          "start": 615.6,
          "end": 621.0,
          "text": "can see how we can start to do some complicated lists here that take you",
          "tokens": [
            50364,
            393,
            536,
            577,
            321,
            393,
            722,
            281,
            360,
            512,
            6179,
            14511,
            510,
            300,
            747,
            291,
            50634
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07817354202270507,
          "compression_ratio": 1.6609442060085837,
          "no_speech_prob": 0.0927760973572731,
          "confidence": 0.9072239026427269
        },
        {
          "id": 105,
          "start": 621.0,
          "end": 626.16,
          "text": "know a good bit of lines of code that we can write as a one-liner and it's",
          "tokens": [
            50634,
            458,
            257,
            665,
            857,
            295,
            3876,
            295,
            3089,
            300,
            321,
            393,
            2464,
            382,
            257,
            472,
            12,
            36849,
            293,
            309,
            311,
            50892
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07817354202270507,
          "compression_ratio": 1.6609442060085837,
          "no_speech_prob": 0.0927760973572731,
          "confidence": 0.9072239026427269
        }
      ],
      "duration": 28.960000000000036
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 621.16,
      "end_time": 650.92,
      "text": "know a good bit of lines of code that we can write as a one-liner and it's slightly more readable as well. But it's not only lists that you can do these comprehensions with you can also do this with dictionaries and sets also. So if I delete that then let's move down to our next example here. Now this is going to be an example of a dictionary comprehension. So I have two lists here I have names and then I have their superhero name that matches up with",
      "original_segments": [
        {
          "id": 106,
          "start": 626.16,
          "end": 630.4,
          "text": "slightly more readable as well. But it's not only lists that you can do these",
          "tokens": [
            50892,
            4748,
            544,
            49857,
            382,
            731,
            13,
            583,
            309,
            311,
            406,
            787,
            14511,
            300,
            291,
            393,
            360,
            613,
            51104
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07817354202270507,
          "compression_ratio": 1.6609442060085837,
          "no_speech_prob": 0.0927760973572731,
          "confidence": 0.9072239026427269
        },
        {
          "id": 107,
          "start": 630.4,
          "end": 636.6,
          "text": "comprehensions with you can also do this with dictionaries and sets also. So if I",
          "tokens": [
            51104,
            10753,
            8302,
            365,
            291,
            393,
            611,
            360,
            341,
            365,
            22352,
            4889,
            293,
            6352,
            611,
            13,
            407,
            498,
            286,
            51414
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07817354202270507,
          "compression_ratio": 1.6609442060085837,
          "no_speech_prob": 0.0927760973572731,
          "confidence": 0.9072239026427269
        },
        {
          "id": 108,
          "start": 636.6,
          "end": 641.5600000000001,
          "text": "delete that then let's move down to our next example here. Now this is going to",
          "tokens": [
            51414,
            12097,
            300,
            550,
            718,
            311,
            1286,
            760,
            281,
            527,
            958,
            1365,
            510,
            13,
            823,
            341,
            307,
            516,
            281,
            51662
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07817354202270507,
          "compression_ratio": 1.6609442060085837,
          "no_speech_prob": 0.0927760973572731,
          "confidence": 0.9072239026427269
        },
        {
          "id": 109,
          "start": 641.56,
          "end": 645.3599999999999,
          "text": "be an example of a dictionary comprehension. So I have two lists here I",
          "tokens": [
            50364,
            312,
            364,
            1365,
            295,
            257,
            25890,
            44991,
            13,
            407,
            286,
            362,
            732,
            14511,
            510,
            286,
            50554
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1252574920654297,
          "compression_ratio": 1.8028846153846154,
          "no_speech_prob": 0.30496159195899963,
          "confidence": 0.6950384080410004
        },
        {
          "id": 110,
          "start": 645.3599999999999,
          "end": 650.92,
          "text": "have names and then I have their superhero name that matches up with",
          "tokens": [
            50554,
            362,
            5288,
            293,
            550,
            286,
            362,
            641,
            19428,
            1315,
            300,
            10676,
            493,
            365,
            50832
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1252574920654297,
          "compression_ratio": 1.8028846153846154,
          "no_speech_prob": 0.30496159195899963,
          "confidence": 0.6950384080410004
        }
      ],
      "duration": 29.75999999999999
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 645.92,
      "end_time": 674.04,
      "text": "have names and then I have their superhero name that matches up with their first name. So if you've never seen this zip function here let me just print out this zip function here so that you know what it does. So what the zip function does is so all these match up one to one so the first index of names is matches up with the first index of the heroes list here. Now if we run zip",
      "original_segments": [
        {
          "id": 111,
          "start": 650.92,
          "end": 657.1999999999999,
          "text": "their first name. So if you've never seen this zip function here let me just",
          "tokens": [
            50832,
            641,
            700,
            1315,
            13,
            407,
            498,
            291,
            600,
            1128,
            1612,
            341,
            20730,
            2445,
            510,
            718,
            385,
            445,
            51146
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1252574920654297,
          "compression_ratio": 1.8028846153846154,
          "no_speech_prob": 0.30496159195899963,
          "confidence": 0.6950384080410004
        },
        {
          "id": 112,
          "start": 657.1999999999999,
          "end": 661.2399999999999,
          "text": "print out this zip function here so that you know what it does. So what the zip",
          "tokens": [
            51146,
            4482,
            484,
            341,
            20730,
            2445,
            510,
            370,
            300,
            291,
            458,
            437,
            309,
            775,
            13,
            407,
            437,
            264,
            20730,
            51348
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1252574920654297,
          "compression_ratio": 1.8028846153846154,
          "no_speech_prob": 0.30496159195899963,
          "confidence": 0.6950384080410004
        },
        {
          "id": 113,
          "start": 661.2399999999999,
          "end": 667.8,
          "text": "function does is so all these match up one to one so the first index of names",
          "tokens": [
            51348,
            2445,
            775,
            307,
            370,
            439,
            613,
            2995,
            493,
            472,
            281,
            472,
            370,
            264,
            700,
            8186,
            295,
            5288,
            51676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1252574920654297,
          "compression_ratio": 1.8028846153846154,
          "no_speech_prob": 0.30496159195899963,
          "confidence": 0.6950384080410004
        },
        {
          "id": 114,
          "start": 667.8,
          "end": 674.04,
          "text": "is matches up with the first index of the heroes list here. Now if we run zip",
          "tokens": [
            50364,
            307,
            10676,
            493,
            365,
            264,
            700,
            8186,
            295,
            264,
            12332,
            1329,
            510,
            13,
            823,
            498,
            321,
            1190,
            20730,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1273387423101461,
          "compression_ratio": 1.7048458149779735,
          "no_speech_prob": 0.2428845763206482,
          "confidence": 0.7571154236793518
        }
      ],
      "duration": 28.120000000000005
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 669.04,
      "end_time": 695.9599999999999,
      "text": "is matches up with the first index of the heroes list here. Now if we run zip then it's going to create a list of tuples that match those up for us. So it's going to say it's going to be a tuple of Bruce, Batman and then the next tuple will be Clark, Superman and so on. So I'm going to make a dictionary comprehension using this zip function. So let me take that out and now you can see",
      "original_segments": [
        {
          "id": 115,
          "start": 674.04,
          "end": 678.4799999999999,
          "text": "then it's going to create a list of tuples that match those up for us. So",
          "tokens": [
            50676,
            550,
            309,
            311,
            516,
            281,
            1884,
            257,
            1329,
            295,
            2604,
            2622,
            300,
            2995,
            729,
            493,
            337,
            505,
            13,
            407,
            50898
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1273387423101461,
          "compression_ratio": 1.7048458149779735,
          "no_speech_prob": 0.2428845763206482,
          "confidence": 0.7571154236793518
        },
        {
          "id": 116,
          "start": 678.4799999999999,
          "end": 682.8399999999999,
          "text": "it's going to say it's going to be a tuple of Bruce, Batman and then the next",
          "tokens": [
            50898,
            309,
            311,
            516,
            281,
            584,
            309,
            311,
            516,
            281,
            312,
            257,
            2604,
            781,
            295,
            15429,
            11,
            15432,
            293,
            550,
            264,
            958,
            51116
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1273387423101461,
          "compression_ratio": 1.7048458149779735,
          "no_speech_prob": 0.2428845763206482,
          "confidence": 0.7571154236793518
        },
        {
          "id": 117,
          "start": 682.8399999999999,
          "end": 688.64,
          "text": "tuple will be Clark, Superman and so on. So I'm going to make a dictionary",
          "tokens": [
            51116,
            2604,
            781,
            486,
            312,
            18572,
            11,
            22455,
            293,
            370,
            322,
            13,
            407,
            286,
            478,
            516,
            281,
            652,
            257,
            25890,
            51406
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1273387423101461,
          "compression_ratio": 1.7048458149779735,
          "no_speech_prob": 0.2428845763206482,
          "confidence": 0.7571154236793518
        },
        {
          "id": 118,
          "start": 688.64,
          "end": 695.9599999999999,
          "text": "comprehension using this zip function. So let me take that out and now you can see",
          "tokens": [
            51406,
            44991,
            1228,
            341,
            20730,
            2445,
            13,
            407,
            718,
            385,
            747,
            300,
            484,
            293,
            586,
            291,
            393,
            536,
            51772
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1273387423101461,
          "compression_ratio": 1.7048458149779735,
          "no_speech_prob": 0.2428845763206482,
          "confidence": 0.7571154236793518
        }
      ],
      "duration": 26.91999999999996
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 690.9599999999999,
      "end_time": 717.24,
      "text": "comprehension using this zip function. So let me take that out and now you can see that in my comment here I'm saying that I want a dictionary of the name as the key, hero as the value for each name hero in zip names and heroes and this is going to be a list of tuples. So here in the for loop I am making an empty",
      "original_segments": [
        {
          "id": 119,
          "start": 695.96,
          "end": 703.2800000000001,
          "text": "that in my comment here I'm saying that I want a dictionary of the name as the",
          "tokens": [
            50364,
            300,
            294,
            452,
            2871,
            510,
            286,
            478,
            1566,
            300,
            286,
            528,
            257,
            25890,
            295,
            264,
            1315,
            382,
            264,
            50730
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0784543316538741,
          "compression_ratio": 1.7206703910614525,
          "no_speech_prob": 0.06671076267957687,
          "confidence": 0.9332892373204231
        },
        {
          "id": 120,
          "start": 703.2800000000001,
          "end": 712.08,
          "text": "key, hero as the value for each name hero in zip names and heroes and this is",
          "tokens": [
            50730,
            2141,
            11,
            5316,
            382,
            264,
            2158,
            337,
            1184,
            1315,
            5316,
            294,
            20730,
            5288,
            293,
            12332,
            293,
            341,
            307,
            51170
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0784543316538741,
          "compression_ratio": 1.7206703910614525,
          "no_speech_prob": 0.06671076267957687,
          "confidence": 0.9332892373204231
        },
        {
          "id": 121,
          "start": 712.08,
          "end": 717.24,
          "text": "going to be a list of tuples. So here in the for loop I am making an empty",
          "tokens": [
            51170,
            516,
            281,
            312,
            257,
            1329,
            295,
            2604,
            2622,
            13,
            407,
            510,
            294,
            264,
            337,
            6367,
            286,
            669,
            1455,
            364,
            6707,
            51428
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0784543316538741,
          "compression_ratio": 1.7206703910614525,
          "no_speech_prob": 0.06671076267957687,
          "confidence": 0.9332892373204231
        }
      ],
      "duration": 26.280000000000086
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 712.24,
      "end_time": 742.08,
      "text": "going to be a list of tuples. So here in the for loop I am making an empty dictionary and then I'm looping through these tuples and saying that for the name of that tuple I want to be my key in the dictionary and for the hero of that tuple I want to be the value in the dictionary and then I'll print out the dictionary here. So if I save that and run it then you can see that we get our dictionary using our for loop. So now let's say that we want to do this as a",
      "original_segments": [
        {
          "id": 122,
          "start": 717.24,
          "end": 723.96,
          "text": "dictionary and then I'm looping through these tuples and saying that for the",
          "tokens": [
            51428,
            25890,
            293,
            550,
            286,
            478,
            6367,
            278,
            807,
            613,
            2604,
            2622,
            293,
            1566,
            300,
            337,
            264,
            51764
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0784543316538741,
          "compression_ratio": 1.7206703910614525,
          "no_speech_prob": 0.06671076267957687,
          "confidence": 0.9332892373204231
        },
        {
          "id": 123,
          "start": 723.96,
          "end": 728.88,
          "text": "name of that tuple I want to be my key in the dictionary and for the hero of",
          "tokens": [
            50364,
            1315,
            295,
            300,
            2604,
            781,
            286,
            528,
            281,
            312,
            452,
            2141,
            294,
            264,
            25890,
            293,
            337,
            264,
            5316,
            295,
            50610
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09644421320112925,
          "compression_ratio": 2.0128755364806867,
          "no_speech_prob": 0.16290250420570374,
          "confidence": 0.8370974957942963
        },
        {
          "id": 124,
          "start": 728.88,
          "end": 732.84,
          "text": "that tuple I want to be the value in the dictionary and then I'll print out the",
          "tokens": [
            50610,
            300,
            2604,
            781,
            286,
            528,
            281,
            312,
            264,
            2158,
            294,
            264,
            25890,
            293,
            550,
            286,
            603,
            4482,
            484,
            264,
            50808
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09644421320112925,
          "compression_ratio": 2.0128755364806867,
          "no_speech_prob": 0.16290250420570374,
          "confidence": 0.8370974957942963
        },
        {
          "id": 125,
          "start": 732.84,
          "end": 737.2800000000001,
          "text": "dictionary here. So if I save that and run it then you can see that we get our",
          "tokens": [
            50808,
            25890,
            510,
            13,
            407,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            550,
            291,
            393,
            536,
            300,
            321,
            483,
            527,
            51030
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09644421320112925,
          "compression_ratio": 2.0128755364806867,
          "no_speech_prob": 0.16290250420570374,
          "confidence": 0.8370974957942963
        },
        {
          "id": 126,
          "start": 737.2800000000001,
          "end": 742.08,
          "text": "dictionary using our for loop. So now let's say that we want to do this as a",
          "tokens": [
            51030,
            25890,
            1228,
            527,
            337,
            6367,
            13,
            407,
            586,
            718,
            311,
            584,
            300,
            321,
            528,
            281,
            360,
            341,
            382,
            257,
            51270
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09644421320112925,
          "compression_ratio": 2.0128755364806867,
          "no_speech_prob": 0.16290250420570374,
          "confidence": 0.8370974957942963
        }
      ],
      "duration": 29.840000000000032
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 737.08,
      "end_time": 757.64,
      "text": "dictionary here. So if I save that and run it then you can see that we get our dictionary using our for loop. So now let's say that we want to do this as a list or as a dictionary comprehension. So I'm going to do my dict equal to now instead of the brackets this isn't a list anymore it's a dictionary. So we're going to use these braces instead. So for the dictionary comprehension I'm",
      "original_segments": [
        {
          "id": 127,
          "start": 742.08,
          "end": 750.4200000000001,
          "text": "list or as a dictionary comprehension. So I'm going to do my dict equal to now",
          "tokens": [
            51270,
            1329,
            420,
            382,
            257,
            25890,
            44991,
            13,
            407,
            286,
            478,
            516,
            281,
            360,
            452,
            12569,
            2681,
            281,
            586,
            51687
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09644421320112925,
          "compression_ratio": 2.0128755364806867,
          "no_speech_prob": 0.16290250420570374,
          "confidence": 0.8370974957942963
        },
        {
          "id": 128,
          "start": 750.4200000000001,
          "end": 753.8000000000001,
          "text": "instead of the brackets this isn't a list anymore it's a dictionary. So we're",
          "tokens": [
            51687,
            2602,
            295,
            264,
            26179,
            341,
            1943,
            380,
            257,
            1329,
            3602,
            309,
            311,
            257,
            25890,
            13,
            407,
            321,
            434,
            51856
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09644421320112925,
          "compression_ratio": 2.0128755364806867,
          "no_speech_prob": 0.16290250420570374,
          "confidence": 0.8370974957942963
        },
        {
          "id": 129,
          "start": 753.8,
          "end": 757.64,
          "text": "going to use these braces instead. So for the dictionary comprehension I'm",
          "tokens": [
            50364,
            516,
            281,
            764,
            613,
            41537,
            2602,
            13,
            407,
            337,
            264,
            25890,
            44991,
            286,
            478,
            50556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11383546250207084,
          "compression_ratio": 1.564625850340136,
          "no_speech_prob": 0.0016082332003861666,
          "confidence": 0.9983917667996138
        }
      ],
      "duration": 20.559999999999945
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 752.64,
      "end_time": 777.3599999999999,
      "text": "instead of the brackets this isn't a list anymore it's a dictionary. So we're going to use these braces instead. So for the dictionary comprehension I'm going to say name and then colon hero for name comma hero in zip heroes or actually that's going to be names comma heroes. So save that and now let's print",
      "original_segments": [
        {
          "id": 130,
          "start": 757.64,
          "end": 770.24,
          "text": "going to say name and then colon hero for name comma hero in zip heroes or",
          "tokens": [
            50556,
            516,
            281,
            584,
            1315,
            293,
            550,
            8255,
            5316,
            337,
            1315,
            22117,
            5316,
            294,
            20730,
            12332,
            420,
            51186
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11383546250207084,
          "compression_ratio": 1.564625850340136,
          "no_speech_prob": 0.0016082332003861666,
          "confidence": 0.9983917667996138
        },
        {
          "id": 131,
          "start": 770.24,
          "end": 777.3599999999999,
          "text": "actually that's going to be names comma heroes. So save that and now let's print",
          "tokens": [
            51186,
            767,
            300,
            311,
            516,
            281,
            312,
            5288,
            22117,
            12332,
            13,
            407,
            3155,
            300,
            293,
            586,
            718,
            311,
            4482,
            51542
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11383546250207084,
          "compression_ratio": 1.564625850340136,
          "no_speech_prob": 0.0016082332003861666,
          "confidence": 0.9983917667996138
        }
      ],
      "duration": 24.719999999999914
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 772.3599999999999,
      "end_time": 801.96,
      "text": "actually that's going to be names comma heroes. So save that and now let's print this out and you can see that we get the exact same result that we did with our for loop and it's easy to add restrictions on to the ends of these comprehensions. So like in this comment here I want to do the same thing but I don't want Peter added to this list. So here at the end I can just say if name",
      "original_segments": [
        {
          "id": 132,
          "start": 777.36,
          "end": 785.0,
          "text": "this out and you can see that we get the exact same result that we did with",
          "tokens": [
            50364,
            341,
            484,
            293,
            291,
            393,
            536,
            300,
            321,
            483,
            264,
            1900,
            912,
            1874,
            300,
            321,
            630,
            365,
            50746
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08960519602269303,
          "compression_ratio": 1.6,
          "no_speech_prob": 0.11252762377262115,
          "confidence": 0.8874723762273788
        },
        {
          "id": 133,
          "start": 785.0,
          "end": 789.76,
          "text": "our for loop and it's easy to add restrictions on to the ends of these",
          "tokens": [
            50746,
            527,
            337,
            6367,
            293,
            309,
            311,
            1858,
            281,
            909,
            14191,
            322,
            281,
            264,
            5314,
            295,
            613,
            50984
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08960519602269303,
          "compression_ratio": 1.6,
          "no_speech_prob": 0.11252762377262115,
          "confidence": 0.8874723762273788
        },
        {
          "id": 134,
          "start": 789.76,
          "end": 795.52,
          "text": "comprehensions. So like in this comment here I want to do the same thing but I",
          "tokens": [
            50984,
            10753,
            8302,
            13,
            407,
            411,
            294,
            341,
            2871,
            510,
            286,
            528,
            281,
            360,
            264,
            912,
            551,
            457,
            286,
            51272
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08960519602269303,
          "compression_ratio": 1.6,
          "no_speech_prob": 0.11252762377262115,
          "confidence": 0.8874723762273788
        },
        {
          "id": 135,
          "start": 795.52,
          "end": 801.96,
          "text": "don't want Peter added to this list. So here at the end I can just say if name",
          "tokens": [
            51272,
            500,
            380,
            528,
            6508,
            3869,
            281,
            341,
            1329,
            13,
            407,
            510,
            412,
            264,
            917,
            286,
            393,
            445,
            584,
            498,
            1315,
            51594
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08960519602269303,
          "compression_ratio": 1.6,
          "no_speech_prob": 0.11252762377262115,
          "confidence": 0.8874723762273788
        }
      ],
      "duration": 29.600000000000136
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 796.96,
      "end_time": 821.36,
      "text": "don't want Peter added to this list. So here at the end I can just say if name is not equal to Peter and then run that and you can see that we get our list without Peter and Spider-Man included in the list. So comprehensions really make it easy to add those loops and those conditionals on to the existing",
      "original_segments": [
        {
          "id": 136,
          "start": 802.36,
          "end": 809.2800000000001,
          "text": "is not equal to Peter and then run that and you can see that we get our list",
          "tokens": [
            50384,
            307,
            406,
            2681,
            281,
            6508,
            293,
            550,
            1190,
            300,
            293,
            291,
            393,
            536,
            300,
            321,
            483,
            527,
            1329,
            50730
          ],
          "temperature": 0.0,
          "avg_logprob": -0.15254202023358412,
          "compression_ratio": 1.6833333333333333,
          "no_speech_prob": 0.15321066975593567,
          "confidence": 0.8467893302440643
        },
        {
          "id": 137,
          "start": 809.2800000000001,
          "end": 815.36,
          "text": "without Peter and Spider-Man included in the list. So comprehensions really make",
          "tokens": [
            50730,
            1553,
            6508,
            293,
            17733,
            12,
            6652,
            5556,
            294,
            264,
            1329,
            13,
            407,
            10753,
            8302,
            534,
            652,
            51034
          ],
          "temperature": 0.0,
          "avg_logprob": -0.15254202023358412,
          "compression_ratio": 1.6833333333333333,
          "no_speech_prob": 0.15321066975593567,
          "confidence": 0.8467893302440643
        },
        {
          "id": 138,
          "start": 815.36,
          "end": 821.36,
          "text": "it easy to add those loops and those conditionals on to the existing",
          "tokens": [
            51034,
            309,
            1858,
            281,
            909,
            729,
            16121,
            293,
            729,
            4188,
            1124,
            322,
            281,
            264,
            6741,
            51334
          ],
          "temperature": 0.0,
          "avg_logprob": -0.15254202023358412,
          "compression_ratio": 1.6833333333333333,
          "no_speech_prob": 0.15321066975593567,
          "confidence": 0.8467893302440643
        }
      ],
      "duration": 24.399999999999977
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 816.36,
      "end_time": 844.12,
      "text": "it easy to add those loops and those conditionals on to the existing comprehension. So now let's go ahead and delete the dictionary comprehension example and we'll move on to the set comprehensions. So if you don't know what a set is, a set is pretty much like a list except it has all unique values. So you see here that we have this jumbled mess of a bunch of values",
      "original_segments": [
        {
          "id": 139,
          "start": 821.36,
          "end": 827.12,
          "text": "comprehension. So now let's go ahead and delete the dictionary comprehension",
          "tokens": [
            51334,
            44991,
            13,
            407,
            586,
            718,
            311,
            352,
            2286,
            293,
            12097,
            264,
            25890,
            44991,
            51622
          ],
          "temperature": 0.0,
          "avg_logprob": -0.15254202023358412,
          "compression_ratio": 1.6833333333333333,
          "no_speech_prob": 0.15321066975593567,
          "confidence": 0.8467893302440643
        },
        {
          "id": 140,
          "start": 827.12,
          "end": 834.04,
          "text": "example and we'll move on to the set comprehensions. So if you don't know",
          "tokens": [
            50364,
            1365,
            293,
            321,
            603,
            1286,
            322,
            281,
            264,
            992,
            10753,
            8302,
            13,
            407,
            498,
            291,
            500,
            380,
            458,
            50710
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11422319914165296,
          "compression_ratio": 1.6451612903225807,
          "no_speech_prob": 0.18910935521125793,
          "confidence": 0.8108906447887421
        },
        {
          "id": 141,
          "start": 834.04,
          "end": 839.96,
          "text": "what a set is, a set is pretty much like a list except it has all unique values.",
          "tokens": [
            50710,
            437,
            257,
            992,
            307,
            11,
            257,
            992,
            307,
            1238,
            709,
            411,
            257,
            1329,
            3993,
            309,
            575,
            439,
            3845,
            4190,
            13,
            51006
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11422319914165296,
          "compression_ratio": 1.6451612903225807,
          "no_speech_prob": 0.18910935521125793,
          "confidence": 0.8108906447887421
        },
        {
          "id": 142,
          "start": 839.96,
          "end": 844.12,
          "text": "So you see here that we have this jumbled mess of a bunch of values",
          "tokens": [
            51006,
            407,
            291,
            536,
            510,
            300,
            321,
            362,
            341,
            361,
            19928,
            2082,
            295,
            257,
            3840,
            295,
            4190,
            51214
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11422319914165296,
          "compression_ratio": 1.6451612903225807,
          "no_speech_prob": 0.18910935521125793,
          "confidence": 0.8108906447887421
        }
      ],
      "duration": 27.75999999999999
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 839.12,
      "end_time": 868.6,
      "text": "what a set is, a set is pretty much like a list except it has all unique values. So you see here that we have this jumbled mess of a bunch of values between zero and ten and so whenever we make a set and loop through and add those values to the set the final set is going to have all unique values. So if I have this list of nums to do this in a for loop I'm going to say my set equal to an empty set and then for each item and nums my set dot",
      "original_segments": [
        {
          "id": 143,
          "start": 844.12,
          "end": 851.64,
          "text": "between zero and ten and so whenever we make a set and loop",
          "tokens": [
            51214,
            1296,
            4018,
            293,
            2064,
            293,
            370,
            5699,
            321,
            652,
            257,
            992,
            293,
            6367,
            51590
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11422319914165296,
          "compression_ratio": 1.6451612903225807,
          "no_speech_prob": 0.18910935521125793,
          "confidence": 0.8108906447887421
        },
        {
          "id": 144,
          "start": 851.64,
          "end": 856.6,
          "text": "through and add those values to the set the final set is going to have all",
          "tokens": [
            51590,
            807,
            293,
            909,
            729,
            4190,
            281,
            264,
            992,
            264,
            2572,
            992,
            307,
            516,
            281,
            362,
            439,
            51838
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11422319914165296,
          "compression_ratio": 1.6451612903225807,
          "no_speech_prob": 0.18910935521125793,
          "confidence": 0.8108906447887421
        },
        {
          "id": 145,
          "start": 856.6,
          "end": 861.84,
          "text": "unique values. So if I have this list of nums to do this in a for loop I'm going",
          "tokens": [
            50364,
            3845,
            4190,
            13,
            407,
            498,
            286,
            362,
            341,
            1329,
            295,
            1031,
            82,
            281,
            360,
            341,
            294,
            257,
            337,
            6367,
            286,
            478,
            516,
            50626
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10031713021768106,
          "compression_ratio": 1.841860465116279,
          "no_speech_prob": 0.04975685849785805,
          "confidence": 0.950243141502142
        },
        {
          "id": 146,
          "start": 861.84,
          "end": 868.6,
          "text": "to say my set equal to an empty set and then for each item and nums my set dot",
          "tokens": [
            50626,
            281,
            584,
            452,
            992,
            2681,
            281,
            364,
            6707,
            992,
            293,
            550,
            337,
            1184,
            3174,
            293,
            1031,
            82,
            452,
            992,
            5893,
            50964
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10031713021768106,
          "compression_ratio": 1.841860465116279,
          "no_speech_prob": 0.04975685849785805,
          "confidence": 0.950243141502142
        }
      ],
      "duration": 29.480000000000018
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 863.6,
      "end_time": 890.6,
      "text": "to say my set equal to an empty set and then for each item and nums my set dot add that item and now I'm going to print out my set. So let's save that and run it and you can see that I get all the unique values from that nums list. So now if I wanted to turn this into a set comprehension then I can comment out the for loop there and I'm just going to say my set equal to and this is going to be",
      "original_segments": [
        {
          "id": 147,
          "start": 868.6,
          "end": 873.84,
          "text": "add that item and now I'm going to print out my set. So let's save that and run it",
          "tokens": [
            50964,
            909,
            300,
            3174,
            293,
            586,
            286,
            478,
            516,
            281,
            4482,
            484,
            452,
            992,
            13,
            407,
            718,
            311,
            3155,
            300,
            293,
            1190,
            309,
            51226
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10031713021768106,
          "compression_ratio": 1.841860465116279,
          "no_speech_prob": 0.04975685849785805,
          "confidence": 0.950243141502142
        },
        {
          "id": 148,
          "start": 873.84,
          "end": 879.96,
          "text": "and you can see that I get all the unique values from that nums list. So now",
          "tokens": [
            51226,
            293,
            291,
            393,
            536,
            300,
            286,
            483,
            439,
            264,
            3845,
            4190,
            490,
            300,
            1031,
            82,
            1329,
            13,
            407,
            586,
            51532
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10031713021768106,
          "compression_ratio": 1.841860465116279,
          "no_speech_prob": 0.04975685849785805,
          "confidence": 0.950243141502142
        },
        {
          "id": 149,
          "start": 879.96,
          "end": 885.1600000000001,
          "text": "if I wanted to turn this into a set comprehension then I can comment out the",
          "tokens": [
            51532,
            498,
            286,
            1415,
            281,
            1261,
            341,
            666,
            257,
            992,
            44991,
            550,
            286,
            393,
            2871,
            484,
            264,
            51792
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10031713021768106,
          "compression_ratio": 1.841860465116279,
          "no_speech_prob": 0.04975685849785805,
          "confidence": 0.950243141502142
        },
        {
          "id": 150,
          "start": 885.16,
          "end": 890.6,
          "text": "for loop there and I'm just going to say my set equal to and this is going to be",
          "tokens": [
            50364,
            337,
            6367,
            456,
            293,
            286,
            478,
            445,
            516,
            281,
            584,
            452,
            992,
            2681,
            281,
            293,
            341,
            307,
            516,
            281,
            312,
            50636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13470035791397095,
          "compression_ratio": 1.8695652173913044,
          "no_speech_prob": 0.14065611362457275,
          "confidence": 0.8593438863754272
        }
      ],
      "duration": 27.0
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 885.6,
      "end_time": 911.68,
      "text": "for loop there and I'm just going to say my set equal to and this is going to be braces again just like the dictionary comprehension but we're not going to have a colon like the dictionary comprehension had. So now we can do this just like the other list comprehension so we want n for n in nums. So save that now this is doing exactly what this for loop did it's just adding in for each",
      "original_segments": [
        {
          "id": 151,
          "start": 890.6,
          "end": 894.3199999999999,
          "text": "braces again just like the dictionary comprehension but we're not going to",
          "tokens": [
            50636,
            41537,
            797,
            445,
            411,
            264,
            25890,
            44991,
            457,
            321,
            434,
            406,
            516,
            281,
            50822
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13470035791397095,
          "compression_ratio": 1.8695652173913044,
          "no_speech_prob": 0.14065611362457275,
          "confidence": 0.8593438863754272
        },
        {
          "id": 152,
          "start": 894.3199999999999,
          "end": 898.8,
          "text": "have a colon like the dictionary comprehension had. So now we can do this",
          "tokens": [
            50822,
            362,
            257,
            8255,
            411,
            264,
            25890,
            44991,
            632,
            13,
            407,
            586,
            321,
            393,
            360,
            341,
            51046
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13470035791397095,
          "compression_ratio": 1.8695652173913044,
          "no_speech_prob": 0.14065611362457275,
          "confidence": 0.8593438863754272
        },
        {
          "id": 153,
          "start": 898.8,
          "end": 906.52,
          "text": "just like the other list comprehension so we want n for n in nums. So save that",
          "tokens": [
            51046,
            445,
            411,
            264,
            661,
            1329,
            44991,
            370,
            321,
            528,
            297,
            337,
            297,
            294,
            1031,
            82,
            13,
            407,
            3155,
            300,
            51432
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13470035791397095,
          "compression_ratio": 1.8695652173913044,
          "no_speech_prob": 0.14065611362457275,
          "confidence": 0.8593438863754272
        },
        {
          "id": 154,
          "start": 906.52,
          "end": 911.68,
          "text": "now this is doing exactly what this for loop did it's just adding in for each",
          "tokens": [
            51432,
            586,
            341,
            307,
            884,
            2293,
            437,
            341,
            337,
            6367,
            630,
            309,
            311,
            445,
            5127,
            294,
            337,
            1184,
            51690
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13470035791397095,
          "compression_ratio": 1.8695652173913044,
          "no_speech_prob": 0.14065611362457275,
          "confidence": 0.8593438863754272
        }
      ],
      "duration": 26.079999999999927
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 906.68,
      "end_time": 935.52,
      "text": "now this is doing exactly what this for loop did it's just adding in for each number in the nums list. So if I print this out and run it then you can see that we get the exact same result that we got with the for loop and just like with the list comprehensions you can add nested loops and conditionals on to the end of this as much as you want. So let's go ahead and delete that and so that",
      "original_segments": [
        {
          "id": 155,
          "start": 911.68,
          "end": 920.0799999999999,
          "text": "number in the nums list. So if I print this out and run it then you can see",
          "tokens": [
            50364,
            1230,
            294,
            264,
            1031,
            82,
            1329,
            13,
            407,
            498,
            286,
            4482,
            341,
            484,
            293,
            1190,
            309,
            550,
            291,
            393,
            536,
            50784
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12288171342275675,
          "compression_ratio": 1.7522522522522523,
          "no_speech_prob": 0.10204622149467468,
          "confidence": 0.8979537785053253
        },
        {
          "id": 156,
          "start": 920.0799999999999,
          "end": 924.16,
          "text": "that we get the exact same result that we got with the for loop and just like",
          "tokens": [
            50784,
            300,
            321,
            483,
            264,
            1900,
            912,
            1874,
            300,
            321,
            658,
            365,
            264,
            337,
            6367,
            293,
            445,
            411,
            50988
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12288171342275675,
          "compression_ratio": 1.7522522522522523,
          "no_speech_prob": 0.10204622149467468,
          "confidence": 0.8979537785053253
        },
        {
          "id": 157,
          "start": 924.16,
          "end": 929.54,
          "text": "with the list comprehensions you can add nested loops and conditionals on to the",
          "tokens": [
            50988,
            365,
            264,
            1329,
            10753,
            8302,
            291,
            393,
            909,
            15646,
            292,
            16121,
            293,
            4188,
            1124,
            322,
            281,
            264,
            51257
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12288171342275675,
          "compression_ratio": 1.7522522522522523,
          "no_speech_prob": 0.10204622149467468,
          "confidence": 0.8979537785053253
        },
        {
          "id": 158,
          "start": 929.54,
          "end": 935.52,
          "text": "end of this as much as you want. So let's go ahead and delete that and so that",
          "tokens": [
            51257,
            917,
            295,
            341,
            382,
            709,
            382,
            291,
            528,
            13,
            407,
            718,
            311,
            352,
            2286,
            293,
            12097,
            300,
            293,
            370,
            300,
            51556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12288171342275675,
          "compression_ratio": 1.7522522522522523,
          "no_speech_prob": 0.10204622149467468,
          "confidence": 0.8979537785053253
        }
      ],
      "duration": 28.840000000000032
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 930.52,
      "end_time": 957.28,
      "text": "end of this as much as you want. So let's go ahead and delete that and so that does it for the comprehensions. Now I do have this one last example here of generator expressions. Now generators are a lot different than lists and dictionaries and sets but I wanted to include them in this tutorial because a generator expression is so similar to a list comprehension. So if you do want a",
      "original_segments": [
        {
          "id": 159,
          "start": 935.52,
          "end": 940.28,
          "text": "does it for the comprehensions. Now I do have this one last example here of",
          "tokens": [
            51556,
            775,
            309,
            337,
            264,
            10753,
            8302,
            13,
            823,
            286,
            360,
            362,
            341,
            472,
            1036,
            1365,
            510,
            295,
            51794
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12288171342275675,
          "compression_ratio": 1.7522522522522523,
          "no_speech_prob": 0.10204622149467468,
          "confidence": 0.8979537785053253
        },
        {
          "id": 160,
          "start": 940.28,
          "end": 944.76,
          "text": "generator expressions. Now generators are a lot different than lists and",
          "tokens": [
            50364,
            19265,
            15277,
            13,
            823,
            38662,
            366,
            257,
            688,
            819,
            813,
            14511,
            293,
            50588
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12706563639086346,
          "compression_ratio": 1.670995670995671,
          "no_speech_prob": 0.217351034283638,
          "confidence": 0.782648965716362
        },
        {
          "id": 161,
          "start": 944.76,
          "end": 951.4399999999999,
          "text": "dictionaries and sets but I wanted to include them in this tutorial because a",
          "tokens": [
            50588,
            22352,
            4889,
            293,
            6352,
            457,
            286,
            1415,
            281,
            4090,
            552,
            294,
            341,
            7073,
            570,
            257,
            50922
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12706563639086346,
          "compression_ratio": 1.670995670995671,
          "no_speech_prob": 0.217351034283638,
          "confidence": 0.782648965716362
        },
        {
          "id": 162,
          "start": 951.4399999999999,
          "end": 957.28,
          "text": "generator expression is so similar to a list comprehension. So if you do want a",
          "tokens": [
            50922,
            19265,
            6114,
            307,
            370,
            2531,
            281,
            257,
            1329,
            44991,
            13,
            407,
            498,
            291,
            360,
            528,
            257,
            51214
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12706563639086346,
          "compression_ratio": 1.670995670995671,
          "no_speech_prob": 0.217351034283638,
          "confidence": 0.782648965716362
        }
      ],
      "duration": 26.75999999999999
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 952.28,
      "end_time": 977.12,
      "text": "generator expression is so similar to a list comprehension. So if you do want a more in-depth look at the advantages of generators then you can watch my video that I made specifically on generators but in this example I'm just going to focus on generator expressions. Okay so if we uncomment out this code here this is just a regular generator this isn't an expression. So if we look at the",
      "original_segments": [
        {
          "id": 163,
          "start": 957.28,
          "end": 962.12,
          "text": "more in-depth look at the advantages of generators then you can watch my video",
          "tokens": [
            51214,
            544,
            294,
            12,
            25478,
            574,
            412,
            264,
            14906,
            295,
            38662,
            550,
            291,
            393,
            1159,
            452,
            960,
            51456
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12706563639086346,
          "compression_ratio": 1.670995670995671,
          "no_speech_prob": 0.217351034283638,
          "confidence": 0.782648965716362
        },
        {
          "id": 164,
          "start": 962.12,
          "end": 966.64,
          "text": "that I made specifically on generators but in this example I'm just going to",
          "tokens": [
            51456,
            300,
            286,
            1027,
            4682,
            322,
            38662,
            457,
            294,
            341,
            1365,
            286,
            478,
            445,
            516,
            281,
            51682
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12706563639086346,
          "compression_ratio": 1.670995670995671,
          "no_speech_prob": 0.217351034283638,
          "confidence": 0.782648965716362
        },
        {
          "id": 165,
          "start": 966.64,
          "end": 971.48,
          "text": "focus on generator expressions. Okay so if we uncomment out this code here this",
          "tokens": [
            50364,
            1879,
            322,
            19265,
            15277,
            13,
            1033,
            370,
            498,
            321,
            8585,
            518,
            484,
            341,
            3089,
            510,
            341,
            50606
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11603991820080446,
          "compression_ratio": 1.7782805429864252,
          "no_speech_prob": 0.45952504873275757,
          "confidence": 0.5404749512672424
        },
        {
          "id": 166,
          "start": 971.48,
          "end": 977.12,
          "text": "is just a regular generator this isn't an expression. So if we look at the",
          "tokens": [
            50606,
            307,
            445,
            257,
            3890,
            19265,
            341,
            1943,
            380,
            364,
            6114,
            13,
            407,
            498,
            321,
            574,
            412,
            264,
            50888
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11603991820080446,
          "compression_ratio": 1.7782805429864252,
          "no_speech_prob": 0.45952504873275757,
          "confidence": 0.5404749512672424
        }
      ],
      "duration": 24.840000000000032
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 972.12,
      "end_time": 1001.56,
      "text": "is just a regular generator this isn't an expression. So if we look at the comment I'm saying that I want to yield n times n so the square of n for each n and nums just like our other examples. So here our generator function we are passing in this nums list and then we're saying for n in nums yield the square of n and then here we're saying my gen equals this gen function and we're",
      "original_segments": [
        {
          "id": 167,
          "start": 977.12,
          "end": 983.16,
          "text": "comment I'm saying that I want to yield n times n so the square of n for each n",
          "tokens": [
            50888,
            2871,
            286,
            478,
            1566,
            300,
            286,
            528,
            281,
            11257,
            297,
            1413,
            297,
            370,
            264,
            3732,
            295,
            297,
            337,
            1184,
            297,
            51190
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11603991820080446,
          "compression_ratio": 1.7782805429864252,
          "no_speech_prob": 0.45952504873275757,
          "confidence": 0.5404749512672424
        },
        {
          "id": 168,
          "start": 983.16,
          "end": 988.88,
          "text": "and nums just like our other examples. So here our generator function we are",
          "tokens": [
            51190,
            293,
            1031,
            82,
            445,
            411,
            527,
            661,
            5110,
            13,
            407,
            510,
            527,
            19265,
            2445,
            321,
            366,
            51476
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11603991820080446,
          "compression_ratio": 1.7782805429864252,
          "no_speech_prob": 0.45952504873275757,
          "confidence": 0.5404749512672424
        },
        {
          "id": 169,
          "start": 988.88,
          "end": 996.28,
          "text": "passing in this nums list and then we're saying for n in nums yield the square of",
          "tokens": [
            51476,
            8437,
            294,
            341,
            1031,
            82,
            1329,
            293,
            550,
            321,
            434,
            1566,
            337,
            297,
            294,
            1031,
            82,
            11257,
            264,
            3732,
            295,
            51846
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11603991820080446,
          "compression_ratio": 1.7782805429864252,
          "no_speech_prob": 0.45952504873275757,
          "confidence": 0.5404749512672424
        },
        {
          "id": 170,
          "start": 996.28,
          "end": 1001.56,
          "text": "n and then here we're saying my gen equals this gen function and we're",
          "tokens": [
            50364,
            297,
            293,
            550,
            510,
            321,
            434,
            1566,
            452,
            1049,
            6915,
            341,
            1049,
            2445,
            293,
            321,
            434,
            50628
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09679821840266592,
          "compression_ratio": 1.7612612612612613,
          "no_speech_prob": 0.003320964751765132,
          "confidence": 0.9966790352482349
        }
      ],
      "duration": 29.43999999999994
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 996.56,
      "end_time": 1025.24,
      "text": "n and then here we're saying my gen equals this gen function and we're passing in that list of numbers and then finally here at the bottom we are looping through that generator and printing out each i. So let's save that and run it and you can see that it ran the for loop and printed out all of the values in that generator. Now if I was to do this with a generator expression the syntax is",
      "original_segments": [
        {
          "id": 171,
          "start": 1001.56,
          "end": 1007.12,
          "text": "passing in that list of numbers and then finally here at the bottom we are looping",
          "tokens": [
            50628,
            8437,
            294,
            300,
            1329,
            295,
            3547,
            293,
            550,
            2721,
            510,
            412,
            264,
            2767,
            321,
            366,
            6367,
            278,
            50906
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09679821840266592,
          "compression_ratio": 1.7612612612612613,
          "no_speech_prob": 0.003320964751765132,
          "confidence": 0.9966790352482349
        },
        {
          "id": 172,
          "start": 1007.12,
          "end": 1013.56,
          "text": "through that generator and printing out each i. So let's save that and run it and",
          "tokens": [
            50906,
            807,
            300,
            19265,
            293,
            14699,
            484,
            1184,
            741,
            13,
            407,
            718,
            311,
            3155,
            300,
            293,
            1190,
            309,
            293,
            51228
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09679821840266592,
          "compression_ratio": 1.7612612612612613,
          "no_speech_prob": 0.003320964751765132,
          "confidence": 0.9966790352482349
        },
        {
          "id": 173,
          "start": 1013.56,
          "end": 1020.1,
          "text": "you can see that it ran the for loop and printed out all of the values in that",
          "tokens": [
            51228,
            291,
            393,
            536,
            300,
            309,
            5872,
            264,
            337,
            6367,
            293,
            13567,
            484,
            439,
            295,
            264,
            4190,
            294,
            300,
            51555
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09679821840266592,
          "compression_ratio": 1.7612612612612613,
          "no_speech_prob": 0.003320964751765132,
          "confidence": 0.9966790352482349
        },
        {
          "id": 174,
          "start": 1020.1,
          "end": 1025.24,
          "text": "generator. Now if I was to do this with a generator expression the syntax is",
          "tokens": [
            51555,
            19265,
            13,
            823,
            498,
            286,
            390,
            281,
            360,
            341,
            365,
            257,
            19265,
            6114,
            264,
            28431,
            307,
            51812
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09679821840266592,
          "compression_ratio": 1.7612612612612613,
          "no_speech_prob": 0.003320964751765132,
          "confidence": 0.9966790352482349
        }
      ],
      "duration": 28.680000000000064
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 1020.24,
      "end_time": 1047.88,
      "text": "generator. Now if I was to do this with a generator expression the syntax is almost identical to a list comprehension but instead of the brackets or the braces we're going to use parentheses. So now just like the other examples we can say I want n times n for n in nums. Save that and then we still need to keep our",
      "original_segments": [
        {
          "id": 175,
          "start": 1025.24,
          "end": 1032.2,
          "text": "almost identical to a list comprehension but instead of the brackets or the",
          "tokens": [
            50364,
            1920,
            14800,
            281,
            257,
            1329,
            44991,
            457,
            2602,
            295,
            264,
            26179,
            420,
            264,
            50712
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12360583679585517,
          "compression_ratio": 1.5970149253731343,
          "no_speech_prob": 0.011571266688406467,
          "confidence": 0.9884287333115935
        },
        {
          "id": 176,
          "start": 1032.2,
          "end": 1037.64,
          "text": "braces we're going to use parentheses. So now just like the other examples we can",
          "tokens": [
            50712,
            41537,
            321,
            434,
            516,
            281,
            764,
            34153,
            13,
            407,
            586,
            445,
            411,
            264,
            661,
            5110,
            321,
            393,
            50984
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12360583679585517,
          "compression_ratio": 1.5970149253731343,
          "no_speech_prob": 0.011571266688406467,
          "confidence": 0.9884287333115935
        },
        {
          "id": 177,
          "start": 1037.64,
          "end": 1047.88,
          "text": "say I want n times n for n in nums. Save that and then we still need to keep our",
          "tokens": [
            50984,
            584,
            286,
            528,
            297,
            1413,
            297,
            337,
            297,
            294,
            1031,
            82,
            13,
            15541,
            300,
            293,
            550,
            321,
            920,
            643,
            281,
            1066,
            527,
            51496
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12360583679585517,
          "compression_ratio": 1.5970149253731343,
          "no_speech_prob": 0.011571266688406467,
          "confidence": 0.9884287333115935
        }
      ],
      "duration": 27.6400000000001
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 1042.88,
      "end_time": 1069.56,
      "text": "say I want n times n for n in nums. Save that and then we still need to keep our for loop here because we have to iterate through that generator. So if I save that and print it out then you can see that we got the exact same result as we did with these lines of code that where we had to create the generator function and do the for loop and then create the generator using the function and all of",
      "original_segments": [
        {
          "id": 178,
          "start": 1047.88,
          "end": 1052.56,
          "text": "for loop here because we have to iterate through that generator. So if I save that",
          "tokens": [
            51496,
            337,
            6367,
            510,
            570,
            321,
            362,
            281,
            44497,
            807,
            300,
            19265,
            13,
            407,
            498,
            286,
            3155,
            300,
            51730
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12360583679585517,
          "compression_ratio": 1.5970149253731343,
          "no_speech_prob": 0.011571266688406467,
          "confidence": 0.9884287333115935
        },
        {
          "id": 179,
          "start": 1052.6,
          "end": 1058.36,
          "text": "and print it out then you can see that we got the exact same result as we did",
          "tokens": [
            50366,
            293,
            4482,
            309,
            484,
            550,
            291,
            393,
            536,
            300,
            321,
            658,
            264,
            1900,
            912,
            1874,
            382,
            321,
            630,
            50654
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10129544199729452,
          "compression_ratio": 1.8148148148148149,
          "no_speech_prob": 0.5317574143409729,
          "confidence": 0.4682425856590271
        },
        {
          "id": 180,
          "start": 1058.36,
          "end": 1064.28,
          "text": "with these lines of code that where we had to create the generator function and",
          "tokens": [
            50654,
            365,
            613,
            3876,
            295,
            3089,
            300,
            689,
            321,
            632,
            281,
            1884,
            264,
            19265,
            2445,
            293,
            50950
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10129544199729452,
          "compression_ratio": 1.8148148148148149,
          "no_speech_prob": 0.5317574143409729,
          "confidence": 0.4682425856590271
        },
        {
          "id": 181,
          "start": 1064.28,
          "end": 1069.56,
          "text": "do the for loop and then create the generator using the function and all of",
          "tokens": [
            50950,
            360,
            264,
            337,
            6367,
            293,
            550,
            1884,
            264,
            19265,
            1228,
            264,
            2445,
            293,
            439,
            295,
            51214
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10129544199729452,
          "compression_ratio": 1.8148148148148149,
          "no_speech_prob": 0.5317574143409729,
          "confidence": 0.4682425856590271
        }
      ],
      "duration": 26.679999999999836
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 1064.56,
      "end_time": 1090.76,
      "text": "do the for loop and then create the generator using the function and all of that. So you can see how this one line of code is not only a lot easier to write and maintain but it's also a lot more readable as well. So that about does it for this video on list comprehensions. You'll be surprised at how often you'll use these and how much code that you can go through your code base and replace",
      "original_segments": [
        {
          "id": 182,
          "start": 1069.56,
          "end": 1075.0,
          "text": "that. So you can see how this one line of code is not only a lot easier to write",
          "tokens": [
            51214,
            300,
            13,
            407,
            291,
            393,
            536,
            577,
            341,
            472,
            1622,
            295,
            3089,
            307,
            406,
            787,
            257,
            688,
            3571,
            281,
            2464,
            51486
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10129544199729452,
          "compression_ratio": 1.8148148148148149,
          "no_speech_prob": 0.5317574143409729,
          "confidence": 0.4682425856590271
        },
        {
          "id": 183,
          "start": 1075.0,
          "end": 1080.08,
          "text": "and maintain but it's also a lot more readable as well. So that about does it",
          "tokens": [
            51486,
            293,
            6909,
            457,
            309,
            311,
            611,
            257,
            688,
            544,
            49857,
            382,
            731,
            13,
            407,
            300,
            466,
            775,
            309,
            51740
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10129544199729452,
          "compression_ratio": 1.8148148148148149,
          "no_speech_prob": 0.5317574143409729,
          "confidence": 0.4682425856590271
        },
        {
          "id": 184,
          "start": 1080.1999999999998,
          "end": 1085.96,
          "text": "for this video on list comprehensions. You'll be surprised at how often you'll",
          "tokens": [
            50370,
            337,
            341,
            960,
            322,
            1329,
            10753,
            8302,
            13,
            509,
            603,
            312,
            6100,
            412,
            577,
            2049,
            291,
            603,
            50658
          ],
          "temperature": 0.0,
          "avg_logprob": -0.16355001515355602,
          "compression_ratio": 1.6607142857142858,
          "no_speech_prob": 0.16518107056617737,
          "confidence": 0.8348189294338226
        },
        {
          "id": 185,
          "start": 1085.96,
          "end": 1090.76,
          "text": "use these and how much code that you can go through your code base and replace",
          "tokens": [
            50658,
            764,
            613,
            293,
            577,
            709,
            3089,
            300,
            291,
            393,
            352,
            807,
            428,
            3089,
            3096,
            293,
            7406,
            50898
          ],
          "temperature": 0.0,
          "avg_logprob": -0.16355001515355602,
          "compression_ratio": 1.6607142857142858,
          "no_speech_prob": 0.16518107056617737,
          "confidence": 0.8348189294338226
        }
      ],
      "duration": 26.200000000000045
    },
    {
      "video_id": "570578679109",
      "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
      "start_time": 1085.76,
      "end_time": 1105.76,
      "text": "for this video on list comprehensions. You'll be surprised at how often you'll use these and how much code that you can go through your code base and replace these long nested for loops with these list comprehensions. So if you guys do have any questions just ask in the comment section below. Be sure to subscribe for future Python videos and thank you guys for watching.",
      "original_segments": [
        {
          "id": 186,
          "start": 1090.76,
          "end": 1096.72,
          "text": "these long nested for loops with these list comprehensions. So if you guys do",
          "tokens": [
            50898,
            613,
            938,
            15646,
            292,
            337,
            16121,
            365,
            613,
            1329,
            10753,
            8302,
            13,
            407,
            498,
            291,
            1074,
            360,
            51196
          ],
          "temperature": 0.0,
          "avg_logprob": -0.16355001515355602,
          "compression_ratio": 1.6607142857142858,
          "no_speech_prob": 0.16518107056617737,
          "confidence": 0.8348189294338226
        },
        {
          "id": 187,
          "start": 1096.72,
          "end": 1100.12,
          "text": "have any questions just ask in the comment section below. Be sure to",
          "tokens": [
            51196,
            362,
            604,
            1651,
            445,
            1029,
            294,
            264,
            2871,
            3541,
            2507,
            13,
            879,
            988,
            281,
            51366
          ],
          "temperature": 0.0,
          "avg_logprob": -0.16355001515355602,
          "compression_ratio": 1.6607142857142858,
          "no_speech_prob": 0.16518107056617737,
          "confidence": 0.8348189294338226
        },
        {
          "id": 188,
          "start": 1100.12,
          "end": 1105.76,
          "text": "subscribe for future Python videos and thank you guys for watching.",
          "tokens": [
            51366,
            3022,
            337,
            2027,
            15329,
            2145,
            293,
            1309,
            291,
            1074,
            337,
            1976,
            13,
            51648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.16355001515355602,
          "compression_ratio": 1.6607142857142858,
          "no_speech_prob": 0.16518107056617737,
          "confidence": 0.8348189294338226
        }
      ],
      "duration": 20.0
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 0.0,
      "end_time": 29.96,
      "text": "Hey everybody, how's it going? In this video we're going to be looking at string formatting operations in Python. Now a lot of people know the basics of string formatting, but there are a lot of options beyond the basics that are available that will allow us to format our strings in exactly the way that we want. So I'm going to run through a few examples here really fast just to show some of the different things that we can do with formatting our strings. So first of all, if you're not already using some kind of formatting when you print out your strings, then you definitely should be. So sometimes I'll see people using",
      "original_segments": [
        {
          "id": 0,
          "start": 0.0,
          "end": 3.84,
          "text": "Hey everybody, how's it going? In this video we're going to be looking at string",
          "tokens": [
            50364,
            1911,
            2201,
            11,
            577,
            311,
            309,
            516,
            30,
            682,
            341,
            960,
            321,
            434,
            516,
            281,
            312,
            1237,
            412,
            6798,
            50556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09520354786434689,
          "compression_ratio": 1.8660714285714286,
          "no_speech_prob": 0.07187025249004364,
          "confidence": 0.9281297475099564
        },
        {
          "id": 1,
          "start": 3.84,
          "end": 8.040000000000001,
          "text": "formatting operations in Python. Now a lot of people know the basics of string",
          "tokens": [
            50556,
            39366,
            7705,
            294,
            15329,
            13,
            823,
            257,
            688,
            295,
            561,
            458,
            264,
            14688,
            295,
            6798,
            50766
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09520354786434689,
          "compression_ratio": 1.8660714285714286,
          "no_speech_prob": 0.07187025249004364,
          "confidence": 0.9281297475099564
        },
        {
          "id": 2,
          "start": 8.040000000000001,
          "end": 11.6,
          "text": "formatting, but there are a lot of options beyond the basics that are",
          "tokens": [
            50766,
            39366,
            11,
            457,
            456,
            366,
            257,
            688,
            295,
            3956,
            4399,
            264,
            14688,
            300,
            366,
            50944
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09520354786434689,
          "compression_ratio": 1.8660714285714286,
          "no_speech_prob": 0.07187025249004364,
          "confidence": 0.9281297475099564
        },
        {
          "id": 3,
          "start": 11.6,
          "end": 15.24,
          "text": "available that will allow us to format our strings in exactly the way that we",
          "tokens": [
            50944,
            2435,
            300,
            486,
            2089,
            505,
            281,
            7877,
            527,
            13985,
            294,
            2293,
            264,
            636,
            300,
            321,
            51126
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09520354786434689,
          "compression_ratio": 1.8660714285714286,
          "no_speech_prob": 0.07187025249004364,
          "confidence": 0.9281297475099564
        },
        {
          "id": 4,
          "start": 15.24,
          "end": 18.44,
          "text": "want. So I'm going to run through a few examples here really fast just to show",
          "tokens": [
            51126,
            528,
            13,
            407,
            286,
            478,
            516,
            281,
            1190,
            807,
            257,
            1326,
            5110,
            510,
            534,
            2370,
            445,
            281,
            855,
            51286
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09520354786434689,
          "compression_ratio": 1.8660714285714286,
          "no_speech_prob": 0.07187025249004364,
          "confidence": 0.9281297475099564
        },
        {
          "id": 5,
          "start": 18.44,
          "end": 22.88,
          "text": "some of the different things that we can do with formatting our strings. So first",
          "tokens": [
            51286,
            512,
            295,
            264,
            819,
            721,
            300,
            321,
            393,
            360,
            365,
            39366,
            527,
            13985,
            13,
            407,
            700,
            51508
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09520354786434689,
          "compression_ratio": 1.8660714285714286,
          "no_speech_prob": 0.07187025249004364,
          "confidence": 0.9281297475099564
        },
        {
          "id": 6,
          "start": 22.88,
          "end": 26.080000000000002,
          "text": "of all, if you're not already using some kind of formatting when you print out",
          "tokens": [
            51508,
            295,
            439,
            11,
            498,
            291,
            434,
            406,
            1217,
            1228,
            512,
            733,
            295,
            39366,
            562,
            291,
            4482,
            484,
            51668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09520354786434689,
          "compression_ratio": 1.8660714285714286,
          "no_speech_prob": 0.07187025249004364,
          "confidence": 0.9281297475099564
        },
        {
          "id": 7,
          "start": 26.080000000000002,
          "end": 29.96,
          "text": "your strings, then you definitely should be. So sometimes I'll see people using",
          "tokens": [
            51668,
            428,
            13985,
            11,
            550,
            291,
            2138,
            820,
            312,
            13,
            407,
            2171,
            286,
            603,
            536,
            561,
            1228,
            51862
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09520354786434689,
          "compression_ratio": 1.8660714285714286,
          "no_speech_prob": 0.07187025249004364,
          "confidence": 0.9281297475099564
        }
      ],
      "duration": 29.96
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 24.96,
      "end_time": 52.94,
      "text": "of all, if you're not already using some kind of formatting when you print out your strings, then you definitely should be. So sometimes I'll see people using string concatenation to display information, and that's exactly what I'm doing on this first line here. And there are a few things wrong with this. So you can see first of all it's not very readable. You have to open and close strings in different places, plus you have plus signs everywhere. Whenever you have an integer, you have to cast those two strings. And also you have to",
      "original_segments": [
        {
          "id": 8,
          "start": 29.96,
          "end": 33.8,
          "text": "string concatenation to display information, and that's exactly what I'm",
          "tokens": [
            50364,
            6798,
            1588,
            7186,
            399,
            281,
            4674,
            1589,
            11,
            293,
            300,
            311,
            2293,
            437,
            286,
            478,
            50556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10435125849268458,
          "compression_ratio": 1.7272727272727273,
          "no_speech_prob": 0.00859395693987608,
          "confidence": 0.9914060430601239
        },
        {
          "id": 9,
          "start": 33.8,
          "end": 38.52,
          "text": "doing on this first line here. And there are a few things wrong with this. So you",
          "tokens": [
            50556,
            884,
            322,
            341,
            700,
            1622,
            510,
            13,
            400,
            456,
            366,
            257,
            1326,
            721,
            2085,
            365,
            341,
            13,
            407,
            291,
            50792
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10435125849268458,
          "compression_ratio": 1.7272727272727273,
          "no_speech_prob": 0.00859395693987608,
          "confidence": 0.9914060430601239
        },
        {
          "id": 10,
          "start": 38.52,
          "end": 42.68,
          "text": "can see first of all it's not very readable. You have to open and close",
          "tokens": [
            50792,
            393,
            536,
            700,
            295,
            439,
            309,
            311,
            406,
            588,
            49857,
            13,
            509,
            362,
            281,
            1269,
            293,
            1998,
            51000
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10435125849268458,
          "compression_ratio": 1.7272727272727273,
          "no_speech_prob": 0.00859395693987608,
          "confidence": 0.9914060430601239
        },
        {
          "id": 11,
          "start": 42.68,
          "end": 48.120000000000005,
          "text": "strings in different places, plus you have plus signs everywhere. Whenever you",
          "tokens": [
            51000,
            13985,
            294,
            819,
            3190,
            11,
            1804,
            291,
            362,
            1804,
            7880,
            5315,
            13,
            14159,
            291,
            51272
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10435125849268458,
          "compression_ratio": 1.7272727272727273,
          "no_speech_prob": 0.00859395693987608,
          "confidence": 0.9914060430601239
        },
        {
          "id": 12,
          "start": 48.120000000000005,
          "end": 52.94,
          "text": "have an integer, you have to cast those two strings. And also you have to",
          "tokens": [
            51272,
            362,
            364,
            24922,
            11,
            291,
            362,
            281,
            4193,
            729,
            732,
            13985,
            13,
            400,
            611,
            291,
            362,
            281,
            51513
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10435125849268458,
          "compression_ratio": 1.7272727272727273,
          "no_speech_prob": 0.00859395693987608,
          "confidence": 0.9914060430601239
        }
      ],
      "duration": 27.979999999999997
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 47.94,
      "end_time": 76.03999999999999,
      "text": "strings in different places, plus you have plus signs everywhere. Whenever you have an integer, you have to cast those two strings. And also you have to remember to put spaces in the correct location. So this middle string here I have to remember to put in a space at the beginning and at the end. And if I mess that up, then it can bunch my string together when I print it out. So you can see if I run this code that it does work, but there are much better ways to do this. So it's much easier to use the formatting option, and that's what we're",
      "original_segments": [
        {
          "id": 13,
          "start": 52.94,
          "end": 57.44,
          "text": "remember to put spaces in the correct location. So this middle string here I",
          "tokens": [
            51513,
            1604,
            281,
            829,
            7673,
            294,
            264,
            3006,
            4914,
            13,
            407,
            341,
            2808,
            6798,
            510,
            286,
            51738
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10435125849268458,
          "compression_ratio": 1.7272727272727273,
          "no_speech_prob": 0.00859395693987608,
          "confidence": 0.9914060430601239
        },
        {
          "id": 14,
          "start": 57.44,
          "end": 61.12,
          "text": "have to remember to put in a space at the beginning and at the end. And if I",
          "tokens": [
            50364,
            362,
            281,
            1604,
            281,
            829,
            294,
            257,
            1901,
            412,
            264,
            2863,
            293,
            412,
            264,
            917,
            13,
            400,
            498,
            286,
            50548
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08998824985882709,
          "compression_ratio": 1.7536764705882353,
          "no_speech_prob": 0.048665307462215424,
          "confidence": 0.9513346925377846
        },
        {
          "id": 15,
          "start": 61.12,
          "end": 65.56,
          "text": "mess that up, then it can bunch my string together when I print it out. So you can",
          "tokens": [
            50548,
            2082,
            300,
            493,
            11,
            550,
            309,
            393,
            3840,
            452,
            6798,
            1214,
            562,
            286,
            4482,
            309,
            484,
            13,
            407,
            291,
            393,
            50770
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08998824985882709,
          "compression_ratio": 1.7536764705882353,
          "no_speech_prob": 0.048665307462215424,
          "confidence": 0.9513346925377846
        },
        {
          "id": 16,
          "start": 65.56,
          "end": 71.08,
          "text": "see if I run this code that it does work, but there are much better ways to do",
          "tokens": [
            50770,
            536,
            498,
            286,
            1190,
            341,
            3089,
            300,
            309,
            775,
            589,
            11,
            457,
            456,
            366,
            709,
            1101,
            2098,
            281,
            360,
            51046
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08998824985882709,
          "compression_ratio": 1.7536764705882353,
          "no_speech_prob": 0.048665307462215424,
          "confidence": 0.9513346925377846
        },
        {
          "id": 17,
          "start": 71.08,
          "end": 76.03999999999999,
          "text": "this. So it's much easier to use the formatting option, and that's what we're",
          "tokens": [
            51046,
            341,
            13,
            407,
            309,
            311,
            709,
            3571,
            281,
            764,
            264,
            39366,
            3614,
            11,
            293,
            300,
            311,
            437,
            321,
            434,
            51294
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08998824985882709,
          "compression_ratio": 1.7536764705882353,
          "no_speech_prob": 0.048665307462215424,
          "confidence": 0.9513346925377846
        }
      ],
      "duration": 28.099999999999994
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 71.03999999999999,
      "end_time": 100.92,
      "text": "see if I run this code that it does work, but there are much better ways to do this. So it's much easier to use the formatting option, and that's what we're going to take a look at here. So let me uncomment out this. So you can see that this is a lot easier to read. Now we have these braces here as placeholders, and after our string closes, we run this format method, and then we pass in the values that we want to replace our placeholders with. Now if we do it the way that I did here and don't add anything to these placeholders, then what",
      "original_segments": [
        {
          "id": 18,
          "start": 76.03999999999999,
          "end": 80.72,
          "text": "going to take a look at here. So let me uncomment out this. So you can see that",
          "tokens": [
            51294,
            516,
            281,
            747,
            257,
            574,
            412,
            510,
            13,
            407,
            718,
            385,
            8585,
            518,
            484,
            341,
            13,
            407,
            291,
            393,
            536,
            300,
            51528
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08998824985882709,
          "compression_ratio": 1.7536764705882353,
          "no_speech_prob": 0.048665307462215424,
          "confidence": 0.9513346925377846
        },
        {
          "id": 19,
          "start": 80.72,
          "end": 86.36,
          "text": "this is a lot easier to read. Now we have these braces here as placeholders, and",
          "tokens": [
            51528,
            341,
            307,
            257,
            688,
            3571,
            281,
            1401,
            13,
            823,
            321,
            362,
            613,
            41537,
            510,
            382,
            1081,
            12916,
            11,
            293,
            51810
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08998824985882709,
          "compression_ratio": 1.7536764705882353,
          "no_speech_prob": 0.048665307462215424,
          "confidence": 0.9513346925377846
        },
        {
          "id": 20,
          "start": 86.4,
          "end": 92.03999999999999,
          "text": "after our string closes, we run this format method, and then we pass in the",
          "tokens": [
            50366,
            934,
            527,
            6798,
            24157,
            11,
            321,
            1190,
            341,
            7877,
            3170,
            11,
            293,
            550,
            321,
            1320,
            294,
            264,
            50648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09706242064125517,
          "compression_ratio": 1.9075630252100841,
          "no_speech_prob": 0.05418640747666359,
          "confidence": 0.9458135925233364
        },
        {
          "id": 21,
          "start": 92.03999999999999,
          "end": 96.52,
          "text": "values that we want to replace our placeholders with. Now if we do it the",
          "tokens": [
            50648,
            4190,
            300,
            321,
            528,
            281,
            7406,
            527,
            1081,
            12916,
            365,
            13,
            823,
            498,
            321,
            360,
            309,
            264,
            50872
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09706242064125517,
          "compression_ratio": 1.9075630252100841,
          "no_speech_prob": 0.05418640747666359,
          "confidence": 0.9458135925233364
        },
        {
          "id": 22,
          "start": 96.52,
          "end": 100.92,
          "text": "way that I did here and don't add anything to these placeholders, then what",
          "tokens": [
            50872,
            636,
            300,
            286,
            630,
            510,
            293,
            500,
            380,
            909,
            1340,
            281,
            613,
            1081,
            12916,
            11,
            550,
            437,
            51092
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09706242064125517,
          "compression_ratio": 1.9075630252100841,
          "no_speech_prob": 0.05418640747666359,
          "confidence": 0.9458135925233364
        }
      ],
      "duration": 29.88000000000001
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 95.92,
      "end_time": 125.03999999999999,
      "text": "values that we want to replace our placeholders with. Now if we do it the way that I did here and don't add anything to these placeholders, then what it's going to do is it's just going to pass our first value here to our first placeholder, and our second value to our second placeholder. Now if you want to, you can explicitly number your placeholders. So in this example here, it's the exact same example, but now I've numbered my placeholders. So now what this is saying is that we want this zero here is the first value that you",
      "original_segments": [
        {
          "id": 23,
          "start": 100.92,
          "end": 105.52,
          "text": "it's going to do is it's just going to pass our first value here to our first",
          "tokens": [
            51092,
            309,
            311,
            516,
            281,
            360,
            307,
            309,
            311,
            445,
            516,
            281,
            1320,
            527,
            700,
            2158,
            510,
            281,
            527,
            700,
            51322
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09706242064125517,
          "compression_ratio": 1.9075630252100841,
          "no_speech_prob": 0.05418640747666359,
          "confidence": 0.9458135925233364
        },
        {
          "id": 24,
          "start": 105.52,
          "end": 109.88,
          "text": "placeholder, and our second value to our second placeholder. Now if you want to,",
          "tokens": [
            51322,
            1081,
            20480,
            11,
            293,
            527,
            1150,
            2158,
            281,
            527,
            1150,
            1081,
            20480,
            13,
            823,
            498,
            291,
            528,
            281,
            11,
            51540
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09706242064125517,
          "compression_ratio": 1.9075630252100841,
          "no_speech_prob": 0.05418640747666359,
          "confidence": 0.9458135925233364
        },
        {
          "id": 25,
          "start": 109.88,
          "end": 115.52,
          "text": "you can explicitly number your placeholders. So in this example here,",
          "tokens": [
            51540,
            291,
            393,
            20803,
            1230,
            428,
            1081,
            12916,
            13,
            407,
            294,
            341,
            1365,
            510,
            11,
            51822
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09706242064125517,
          "compression_ratio": 1.9075630252100841,
          "no_speech_prob": 0.05418640747666359,
          "confidence": 0.9458135925233364
        },
        {
          "id": 26,
          "start": 115.52,
          "end": 119.96,
          "text": "it's the exact same example, but now I've numbered my placeholders. So now",
          "tokens": [
            50364,
            309,
            311,
            264,
            1900,
            912,
            1365,
            11,
            457,
            586,
            286,
            600,
            40936,
            452,
            1081,
            12916,
            13,
            407,
            586,
            50586
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0863295461310715,
          "compression_ratio": 1.8983739837398375,
          "no_speech_prob": 0.014268320053815842,
          "confidence": 0.9857316799461842
        },
        {
          "id": 27,
          "start": 119.96,
          "end": 125.03999999999999,
          "text": "what this is saying is that we want this zero here is the first value that you",
          "tokens": [
            50586,
            437,
            341,
            307,
            1566,
            307,
            300,
            321,
            528,
            341,
            4018,
            510,
            307,
            264,
            700,
            2158,
            300,
            291,
            50840
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0863295461310715,
          "compression_ratio": 1.8983739837398375,
          "no_speech_prob": 0.014268320053815842,
          "confidence": 0.9857316799461842
        }
      ],
      "duration": 29.11999999999999
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 120.03999999999999,
      "end_time": 144.28,
      "text": "what this is saying is that we want this zero here is the first value that you pass in the format, and then this one is the second value that you pass in the format. And if I save that and run it, you can see that it still works. Now this is more useful when you have placeholders for values that need to be repeated. So in this next example that I have here, you can see that I have this tag",
      "original_segments": [
        {
          "id": 28,
          "start": 125.03999999999999,
          "end": 129.2,
          "text": "pass in the format, and then this one is the second value that you pass in the",
          "tokens": [
            50840,
            1320,
            294,
            264,
            7877,
            11,
            293,
            550,
            341,
            472,
            307,
            264,
            1150,
            2158,
            300,
            291,
            1320,
            294,
            264,
            51048
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0863295461310715,
          "compression_ratio": 1.8983739837398375,
          "no_speech_prob": 0.014268320053815842,
          "confidence": 0.9857316799461842
        },
        {
          "id": 29,
          "start": 129.2,
          "end": 133.2,
          "text": "format. And if I save that and run it, you can see that it still works. Now this is",
          "tokens": [
            51048,
            7877,
            13,
            400,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            11,
            291,
            393,
            536,
            300,
            309,
            920,
            1985,
            13,
            823,
            341,
            307,
            51248
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0863295461310715,
          "compression_ratio": 1.8983739837398375,
          "no_speech_prob": 0.014268320053815842,
          "confidence": 0.9857316799461842
        },
        {
          "id": 30,
          "start": 133.2,
          "end": 138.56,
          "text": "more useful when you have placeholders for values that need to be repeated. So",
          "tokens": [
            51248,
            544,
            4420,
            562,
            291,
            362,
            1081,
            12916,
            337,
            4190,
            300,
            643,
            281,
            312,
            10477,
            13,
            407,
            51516
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0863295461310715,
          "compression_ratio": 1.8983739837398375,
          "no_speech_prob": 0.014268320053815842,
          "confidence": 0.9857316799461842
        },
        {
          "id": 31,
          "start": 138.56,
          "end": 144.28,
          "text": "in this next example that I have here, you can see that I have this tag",
          "tokens": [
            51516,
            294,
            341,
            958,
            1365,
            300,
            286,
            362,
            510,
            11,
            291,
            393,
            536,
            300,
            286,
            362,
            341,
            6162,
            51802
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0863295461310715,
          "compression_ratio": 1.8983739837398375,
          "no_speech_prob": 0.014268320053815842,
          "confidence": 0.9857316799461842
        }
      ],
      "duration": 24.24000000000001
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 139.28,
      "end_time": 165.0,
      "text": "in this next example that I have here, you can see that I have this tag variable and this text variable. So in my string, I'm putting the tag in some opening brackets here, and then I'm putting in a placeholder for the text, and then I'm putting the tag inside these closing braces here. And then the values that I pass in the format tag will go where all of the zeros are for",
      "original_segments": [
        {
          "id": 32,
          "start": 144.32,
          "end": 150.44,
          "text": "variable and this text variable. So in my string, I'm putting the tag in some",
          "tokens": [
            50366,
            7006,
            293,
            341,
            2487,
            7006,
            13,
            407,
            294,
            452,
            6798,
            11,
            286,
            478,
            3372,
            264,
            6162,
            294,
            512,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09740882274533107,
          "compression_ratio": 1.9579831932773109,
          "no_speech_prob": 0.1809834986925125,
          "confidence": 0.8190165013074875
        },
        {
          "id": 33,
          "start": 150.44,
          "end": 154.96,
          "text": "opening brackets here, and then I'm putting in a placeholder for the text,",
          "tokens": [
            50672,
            5193,
            26179,
            510,
            11,
            293,
            550,
            286,
            478,
            3372,
            294,
            257,
            1081,
            20480,
            337,
            264,
            2487,
            11,
            50898
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09740882274533107,
          "compression_ratio": 1.9579831932773109,
          "no_speech_prob": 0.1809834986925125,
          "confidence": 0.8190165013074875
        },
        {
          "id": 34,
          "start": 154.96,
          "end": 159.6,
          "text": "and then I'm putting the tag inside these closing braces here. And then the",
          "tokens": [
            50898,
            293,
            550,
            286,
            478,
            3372,
            264,
            6162,
            1854,
            613,
            10377,
            41537,
            510,
            13,
            400,
            550,
            264,
            51130
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09740882274533107,
          "compression_ratio": 1.9579831932773109,
          "no_speech_prob": 0.1809834986925125,
          "confidence": 0.8190165013074875
        },
        {
          "id": 35,
          "start": 159.6,
          "end": 165.0,
          "text": "values that I pass in the format tag will go where all of the zeros are for",
          "tokens": [
            51130,
            4190,
            300,
            286,
            1320,
            294,
            264,
            7877,
            6162,
            486,
            352,
            689,
            439,
            295,
            264,
            35193,
            366,
            337,
            51400
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09740882274533107,
          "compression_ratio": 1.9579831932773109,
          "no_speech_prob": 0.1809834986925125,
          "confidence": 0.8190165013074875
        }
      ],
      "duration": 25.72
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 160.0,
      "end_time": 187.0,
      "text": "values that I pass in the format tag will go where all of the zeros are for our placeholders, and text will go where the one is for our placeholder. So if I save that and run it, you can see that it prints out the value that we expected. Okay, so now we can also grab specific fields from our placeholders. So in our previous example, we were passing in a dictionary to our format, and within our",
      "original_segments": [
        {
          "id": 36,
          "start": 165.0,
          "end": 169.56,
          "text": "our placeholders, and text will go where the one is for our placeholder. So if I",
          "tokens": [
            51400,
            527,
            1081,
            12916,
            11,
            293,
            2487,
            486,
            352,
            689,
            264,
            472,
            307,
            337,
            527,
            1081,
            20480,
            13,
            407,
            498,
            286,
            51628
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09740882274533107,
          "compression_ratio": 1.9579831932773109,
          "no_speech_prob": 0.1809834986925125,
          "confidence": 0.8190165013074875
        },
        {
          "id": 37,
          "start": 169.56,
          "end": 173.44,
          "text": "save that and run it, you can see that it prints out the value that we expected.",
          "tokens": [
            51628,
            3155,
            300,
            293,
            1190,
            309,
            11,
            291,
            393,
            536,
            300,
            309,
            22305,
            484,
            264,
            2158,
            300,
            321,
            5176,
            13,
            51822
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09740882274533107,
          "compression_ratio": 1.9579831932773109,
          "no_speech_prob": 0.1809834986925125,
          "confidence": 0.8190165013074875
        },
        {
          "id": 38,
          "start": 173.44,
          "end": 180.12,
          "text": "Okay, so now we can also grab specific fields from our placeholders. So in our",
          "tokens": [
            50364,
            1033,
            11,
            370,
            586,
            321,
            393,
            611,
            4444,
            2685,
            7909,
            490,
            527,
            1081,
            12916,
            13,
            407,
            294,
            527,
            50698
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12929312388102213,
          "compression_ratio": 1.896551724137931,
          "no_speech_prob": 0.004692647140473127,
          "confidence": 0.9953073528595269
        },
        {
          "id": 39,
          "start": 180.12,
          "end": 187.0,
          "text": "previous example, we were passing in a dictionary to our format, and within our",
          "tokens": [
            50698,
            3894,
            1365,
            11,
            321,
            645,
            8437,
            294,
            257,
            25890,
            281,
            527,
            7877,
            11,
            293,
            1951,
            527,
            51042
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12929312388102213,
          "compression_ratio": 1.896551724137931,
          "no_speech_prob": 0.004692647140473127,
          "confidence": 0.9953073528595269
        }
      ],
      "duration": 27.0
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 182.0,
      "end_time": 207.72,
      "text": "previous example, we were passing in a dictionary to our format, and within our format we were accessing the name and the age of this dictionary from directly within the format here. But we can actually access these fields from directly within the placeholders. So within the placeholder here for zero, I'm just going to put these brackets here and do name, and for one I'm going to do",
      "original_segments": [
        {
          "id": 40,
          "start": 187.0,
          "end": 192.34,
          "text": "format we were accessing the name and the age of this dictionary from",
          "tokens": [
            51042,
            7877,
            321,
            645,
            26440,
            264,
            1315,
            293,
            264,
            3205,
            295,
            341,
            25890,
            490,
            51309
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12929312388102213,
          "compression_ratio": 1.896551724137931,
          "no_speech_prob": 0.004692647140473127,
          "confidence": 0.9953073528595269
        },
        {
          "id": 41,
          "start": 192.34,
          "end": 197.4,
          "text": "directly within the format here. But we can actually access these fields from",
          "tokens": [
            51309,
            3838,
            1951,
            264,
            7877,
            510,
            13,
            583,
            321,
            393,
            767,
            2105,
            613,
            7909,
            490,
            51562
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12929312388102213,
          "compression_ratio": 1.896551724137931,
          "no_speech_prob": 0.004692647140473127,
          "confidence": 0.9953073528595269
        },
        {
          "id": 42,
          "start": 197.4,
          "end": 202.56,
          "text": "directly within the placeholders. So within the placeholder here for zero, I'm",
          "tokens": [
            51562,
            3838,
            1951,
            264,
            1081,
            12916,
            13,
            407,
            1951,
            264,
            1081,
            20480,
            510,
            337,
            4018,
            11,
            286,
            478,
            51820
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12929312388102213,
          "compression_ratio": 1.896551724137931,
          "no_speech_prob": 0.004692647140473127,
          "confidence": 0.9953073528595269
        },
        {
          "id": 43,
          "start": 202.72,
          "end": 207.72,
          "text": "just going to put these brackets here and do name, and for one I'm going to do",
          "tokens": [
            50372,
            445,
            516,
            281,
            829,
            613,
            26179,
            510,
            293,
            360,
            1315,
            11,
            293,
            337,
            472,
            286,
            478,
            516,
            281,
            360,
            50622
          ],
          "temperature": 0.0,
          "avg_logprob": -0.113296376596583,
          "compression_ratio": 1.8027522935779816,
          "no_speech_prob": 0.011839582584798336,
          "confidence": 0.9881604174152017
        }
      ],
      "duration": 25.72
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 202.72,
      "end_time": 227.04,
      "text": "just going to put these brackets here and do name, and for one I'm going to do age, and then I can take these off of our dictionary here and just pass in the dictionary. So let me save that and run it, and you can see that that still works. Now another thing that you might notice is that now you can see that I'm just passing in this dictionary into format twice. I have person and person. So",
      "original_segments": [
        {
          "id": 44,
          "start": 207.72,
          "end": 214.04,
          "text": "age, and then I can take these off of our dictionary here and just pass in the",
          "tokens": [
            50622,
            3205,
            11,
            293,
            550,
            286,
            393,
            747,
            613,
            766,
            295,
            527,
            25890,
            510,
            293,
            445,
            1320,
            294,
            264,
            50938
          ],
          "temperature": 0.0,
          "avg_logprob": -0.113296376596583,
          "compression_ratio": 1.8027522935779816,
          "no_speech_prob": 0.011839582584798336,
          "confidence": 0.9881604174152017
        },
        {
          "id": 45,
          "start": 214.04,
          "end": 217.68,
          "text": "dictionary. So let me save that and run it, and you can see that that still works.",
          "tokens": [
            50938,
            25890,
            13,
            407,
            718,
            385,
            3155,
            300,
            293,
            1190,
            309,
            11,
            293,
            291,
            393,
            536,
            300,
            300,
            920,
            1985,
            13,
            51120
          ],
          "temperature": 0.0,
          "avg_logprob": -0.113296376596583,
          "compression_ratio": 1.8027522935779816,
          "no_speech_prob": 0.011839582584798336,
          "confidence": 0.9881604174152017
        },
        {
          "id": 46,
          "start": 217.68,
          "end": 221.84,
          "text": "Now another thing that you might notice is that now you can see that I'm just",
          "tokens": [
            51120,
            823,
            1071,
            551,
            300,
            291,
            1062,
            3449,
            307,
            300,
            586,
            291,
            393,
            536,
            300,
            286,
            478,
            445,
            51328
          ],
          "temperature": 0.0,
          "avg_logprob": -0.113296376596583,
          "compression_ratio": 1.8027522935779816,
          "no_speech_prob": 0.011839582584798336,
          "confidence": 0.9881604174152017
        },
        {
          "id": 47,
          "start": 221.84,
          "end": 227.04,
          "text": "passing in this dictionary into format twice. I have person and person. So",
          "tokens": [
            51328,
            8437,
            294,
            341,
            25890,
            666,
            7877,
            6091,
            13,
            286,
            362,
            954,
            293,
            954,
            13,
            407,
            51588
          ],
          "temperature": 0.0,
          "avg_logprob": -0.113296376596583,
          "compression_ratio": 1.8027522935779816,
          "no_speech_prob": 0.011839582584798336,
          "confidence": 0.9881604174152017
        }
      ],
      "duration": 24.319999999999993
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 222.04,
      "end_time": 248.84,
      "text": "passing in this dictionary into format twice. I have person and person. So really what I can do is I can just make both of these a zero index to take the first value from format, and then I can get rid of the second value. And now what this is going to do is it's going to pass the person dictionary to all of our placeholders, and here it's going to access the name, and here it's going to access the age. So if I save that and run it, then you can see that it still works.",
      "original_segments": [
        {
          "id": 48,
          "start": 227.04,
          "end": 232.76,
          "text": "really what I can do is I can just make both of these a zero index to take the",
          "tokens": [
            50364,
            534,
            437,
            286,
            393,
            360,
            307,
            286,
            393,
            445,
            652,
            1293,
            295,
            613,
            257,
            4018,
            8186,
            281,
            747,
            264,
            50650
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08504728170541617,
          "compression_ratio": 1.8494208494208495,
          "no_speech_prob": 0.16984571516513824,
          "confidence": 0.8301542848348618
        },
        {
          "id": 49,
          "start": 232.76,
          "end": 237.72,
          "text": "first value from format, and then I can get rid of the second value. And now what",
          "tokens": [
            50650,
            700,
            2158,
            490,
            7877,
            11,
            293,
            550,
            286,
            393,
            483,
            3973,
            295,
            264,
            1150,
            2158,
            13,
            400,
            586,
            437,
            50898
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08504728170541617,
          "compression_ratio": 1.8494208494208495,
          "no_speech_prob": 0.16984571516513824,
          "confidence": 0.8301542848348618
        },
        {
          "id": 50,
          "start": 237.72,
          "end": 241.92,
          "text": "this is going to do is it's going to pass the person dictionary to all of our",
          "tokens": [
            50898,
            341,
            307,
            516,
            281,
            360,
            307,
            309,
            311,
            516,
            281,
            1320,
            264,
            954,
            25890,
            281,
            439,
            295,
            527,
            51108
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08504728170541617,
          "compression_ratio": 1.8494208494208495,
          "no_speech_prob": 0.16984571516513824,
          "confidence": 0.8301542848348618
        },
        {
          "id": 51,
          "start": 241.92,
          "end": 245.12,
          "text": "placeholders, and here it's going to access the name, and here it's going to",
          "tokens": [
            51108,
            1081,
            12916,
            11,
            293,
            510,
            309,
            311,
            516,
            281,
            2105,
            264,
            1315,
            11,
            293,
            510,
            309,
            311,
            516,
            281,
            51268
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08504728170541617,
          "compression_ratio": 1.8494208494208495,
          "no_speech_prob": 0.16984571516513824,
          "confidence": 0.8301542848348618
        },
        {
          "id": 52,
          "start": 245.12,
          "end": 248.84,
          "text": "access the age. So if I save that and run it, then you can see that it still works.",
          "tokens": [
            51268,
            2105,
            264,
            3205,
            13,
            407,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            11,
            550,
            291,
            393,
            536,
            300,
            309,
            920,
            1985,
            13,
            51454
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08504728170541617,
          "compression_ratio": 1.8494208494208495,
          "no_speech_prob": 0.16984571516513824,
          "confidence": 0.8301542848348618
        }
      ],
      "duration": 26.80000000000001
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 243.84,
      "end_time": 272.8,
      "text": "placeholders, and here it's going to access the name, and here it's going to access the age. So if I save that and run it, then you can see that it still works. Now this is also how you would access values of a list too. So for example, let me do L equals and make a list here, and I'm just going to do the exact same value. So I'm going to do Gen and 23, and here I'm going to pass in that list, and now instead of name, I'm going to grab the first index there and then the next",
      "original_segments": [
        {
          "id": 53,
          "start": 248.84,
          "end": 254.39999999999998,
          "text": "Now this is also how you would access values of a list too. So for example, let",
          "tokens": [
            51454,
            823,
            341,
            307,
            611,
            577,
            291,
            576,
            2105,
            4190,
            295,
            257,
            1329,
            886,
            13,
            407,
            337,
            1365,
            11,
            718,
            51732
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08504728170541617,
          "compression_ratio": 1.8494208494208495,
          "no_speech_prob": 0.16984571516513824,
          "confidence": 0.8301542848348618
        },
        {
          "id": 54,
          "start": 254.4,
          "end": 259.76,
          "text": "me do L equals and make a list here, and I'm just going to do the exact same",
          "tokens": [
            50364,
            385,
            360,
            441,
            6915,
            293,
            652,
            257,
            1329,
            510,
            11,
            293,
            286,
            478,
            445,
            516,
            281,
            360,
            264,
            1900,
            912,
            50632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14165687561035156,
          "compression_ratio": 1.7466666666666666,
          "no_speech_prob": 0.16788655519485474,
          "confidence": 0.8321134448051453
        },
        {
          "id": 55,
          "start": 259.76,
          "end": 265.88,
          "text": "value. So I'm going to do Gen and 23, and here I'm going to pass in that list, and",
          "tokens": [
            50632,
            2158,
            13,
            407,
            286,
            478,
            516,
            281,
            360,
            3632,
            293,
            6673,
            11,
            293,
            510,
            286,
            478,
            516,
            281,
            1320,
            294,
            300,
            1329,
            11,
            293,
            50938
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14165687561035156,
          "compression_ratio": 1.7466666666666666,
          "no_speech_prob": 0.16788655519485474,
          "confidence": 0.8321134448051453
        },
        {
          "id": 56,
          "start": 265.88,
          "end": 272.8,
          "text": "now instead of name, I'm going to grab the first index there and then the next",
          "tokens": [
            50938,
            586,
            2602,
            295,
            1315,
            11,
            286,
            478,
            516,
            281,
            4444,
            264,
            700,
            8186,
            456,
            293,
            550,
            264,
            958,
            51284
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14165687561035156,
          "compression_ratio": 1.7466666666666666,
          "no_speech_prob": 0.16788655519485474,
          "confidence": 0.8321134448051453
        }
      ],
      "duration": 28.960000000000008
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 267.8,
      "end_time": 293.96,
      "text": "now instead of name, I'm going to grab the first index there and then the next index and save that and run it, and you can see that that works also. Okay, so that is how you access values from dictionaries and lists, but you can also access attributes in a similar way. Okay, so I have a small test class here called person, and this has a name attribute and an age attribute, and then here I'm",
      "original_segments": [
        {
          "id": 57,
          "start": 272.8,
          "end": 277.32,
          "text": "index and save that and run it, and you can see that that works also. Okay, so",
          "tokens": [
            51284,
            8186,
            293,
            3155,
            300,
            293,
            1190,
            309,
            11,
            293,
            291,
            393,
            536,
            300,
            300,
            1985,
            611,
            13,
            1033,
            11,
            370,
            51510
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14165687561035156,
          "compression_ratio": 1.7466666666666666,
          "no_speech_prob": 0.16788655519485474,
          "confidence": 0.8321134448051453
        },
        {
          "id": 58,
          "start": 277.32,
          "end": 281.56,
          "text": "that is how you access values from dictionaries and lists, but you can also",
          "tokens": [
            51510,
            300,
            307,
            577,
            291,
            2105,
            4190,
            490,
            22352,
            4889,
            293,
            14511,
            11,
            457,
            291,
            393,
            611,
            51722
          ],
          "temperature": 0.0,
          "avg_logprob": -0.14165687561035156,
          "compression_ratio": 1.7466666666666666,
          "no_speech_prob": 0.16788655519485474,
          "confidence": 0.8321134448051453
        },
        {
          "id": 59,
          "start": 281.56,
          "end": 287.56,
          "text": "access attributes in a similar way. Okay, so I have a small test class here called",
          "tokens": [
            50364,
            2105,
            17212,
            294,
            257,
            2531,
            636,
            13,
            1033,
            11,
            370,
            286,
            362,
            257,
            1359,
            1500,
            1508,
            510,
            1219,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12449032652611826,
          "compression_ratio": 1.703862660944206,
          "no_speech_prob": 0.44848936796188354,
          "confidence": 0.5515106320381165
        },
        {
          "id": 60,
          "start": 287.56,
          "end": 293.96,
          "text": "person, and this has a name attribute and an age attribute, and then here I'm",
          "tokens": [
            50664,
            954,
            11,
            293,
            341,
            575,
            257,
            1315,
            19667,
            293,
            364,
            3205,
            19667,
            11,
            293,
            550,
            510,
            286,
            478,
            50984
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12449032652611826,
          "compression_ratio": 1.703862660944206,
          "no_speech_prob": 0.44848936796188354,
          "confidence": 0.5515106320381165
        }
      ],
      "duration": 26.159999999999968
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 288.96,
      "end_time": 318.44,
      "text": "person, and this has a name attribute and an age attribute, and then here I'm making an instance of this class person with the name Jack and the age 33. Now if I want to print this out, it's almost the same as what we did with the dictionary, but now instead of using the brackets, we're just going to use this dot attribute to grab that value. So you can see here I'm still just passing in this single object into format, and it's going to come in here and grab the name",
      "original_segments": [
        {
          "id": 61,
          "start": 293.96,
          "end": 300.48,
          "text": "making an instance of this class person with the name Jack and the age 33. Now if",
          "tokens": [
            50984,
            1455,
            364,
            5197,
            295,
            341,
            1508,
            954,
            365,
            264,
            1315,
            4718,
            293,
            264,
            3205,
            11816,
            13,
            823,
            498,
            51310
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12449032652611826,
          "compression_ratio": 1.703862660944206,
          "no_speech_prob": 0.44848936796188354,
          "confidence": 0.5515106320381165
        },
        {
          "id": 62,
          "start": 300.48,
          "end": 304.76,
          "text": "I want to print this out, it's almost the same as what we did with the dictionary,",
          "tokens": [
            51310,
            286,
            528,
            281,
            4482,
            341,
            484,
            11,
            309,
            311,
            1920,
            264,
            912,
            382,
            437,
            321,
            630,
            365,
            264,
            25890,
            11,
            51524
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12449032652611826,
          "compression_ratio": 1.703862660944206,
          "no_speech_prob": 0.44848936796188354,
          "confidence": 0.5515106320381165
        },
        {
          "id": 63,
          "start": 304.76,
          "end": 309.4,
          "text": "but now instead of using the brackets, we're just going to use this dot",
          "tokens": [
            51524,
            457,
            586,
            2602,
            295,
            1228,
            264,
            26179,
            11,
            321,
            434,
            445,
            516,
            281,
            764,
            341,
            5893,
            51756
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12449032652611826,
          "compression_ratio": 1.703862660944206,
          "no_speech_prob": 0.44848936796188354,
          "confidence": 0.5515106320381165
        },
        {
          "id": 64,
          "start": 309.4,
          "end": 313.71999999999997,
          "text": "attribute to grab that value. So you can see here I'm still just passing in this",
          "tokens": [
            50364,
            19667,
            281,
            4444,
            300,
            2158,
            13,
            407,
            291,
            393,
            536,
            510,
            286,
            478,
            920,
            445,
            8437,
            294,
            341,
            50580
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08428530091220893,
          "compression_ratio": 1.7533632286995515,
          "no_speech_prob": 0.48273658752441406,
          "confidence": 0.5172634124755859
        },
        {
          "id": 65,
          "start": 313.71999999999997,
          "end": 318.44,
          "text": "single object into format, and it's going to come in here and grab the name",
          "tokens": [
            50580,
            2167,
            2657,
            666,
            7877,
            11,
            293,
            309,
            311,
            516,
            281,
            808,
            294,
            510,
            293,
            4444,
            264,
            1315,
            50816
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08428530091220893,
          "compression_ratio": 1.7533632286995515,
          "no_speech_prob": 0.48273658752441406,
          "confidence": 0.5172634124755859
        }
      ],
      "duration": 29.480000000000018
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 313.44,
      "end_time": 342.04,
      "text": "attribute to grab that value. So you can see here I'm still just passing in this single object into format, and it's going to come in here and grab the name attribute and the age attribute. So if I save that and run it, you can see that that worked. Okay, so we can also pass in keyword arguments to format. So for my example that I have here, I have my placeholders, and I'm just passing in some keywords into the placeholders. Now within format here, instead of passing in",
      "original_segments": [
        {
          "id": 66,
          "start": 318.44,
          "end": 322.67999999999995,
          "text": "attribute and the age attribute. So if I save that and run it, you can see that",
          "tokens": [
            50816,
            19667,
            293,
            264,
            3205,
            19667,
            13,
            407,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            11,
            291,
            393,
            536,
            300,
            51028
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08428530091220893,
          "compression_ratio": 1.7533632286995515,
          "no_speech_prob": 0.48273658752441406,
          "confidence": 0.5172634124755859
        },
        {
          "id": 67,
          "start": 322.67999999999995,
          "end": 330.4,
          "text": "that worked. Okay, so we can also pass in keyword arguments to format. So for my",
          "tokens": [
            51028,
            300,
            2732,
            13,
            1033,
            11,
            370,
            321,
            393,
            611,
            1320,
            294,
            20428,
            12869,
            281,
            7877,
            13,
            407,
            337,
            452,
            51414
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08428530091220893,
          "compression_ratio": 1.7533632286995515,
          "no_speech_prob": 0.48273658752441406,
          "confidence": 0.5172634124755859
        },
        {
          "id": 68,
          "start": 330.4,
          "end": 335.67999999999995,
          "text": "example that I have here, I have my placeholders, and I'm just passing in",
          "tokens": [
            51414,
            1365,
            300,
            286,
            362,
            510,
            11,
            286,
            362,
            452,
            1081,
            12916,
            11,
            293,
            286,
            478,
            445,
            8437,
            294,
            51678
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08428530091220893,
          "compression_ratio": 1.7533632286995515,
          "no_speech_prob": 0.48273658752441406,
          "confidence": 0.5172634124755859
        },
        {
          "id": 69,
          "start": 335.68,
          "end": 342.04,
          "text": "some keywords into the placeholders. Now within format here, instead of passing in",
          "tokens": [
            50364,
            512,
            21009,
            666,
            264,
            1081,
            12916,
            13,
            823,
            1951,
            7877,
            510,
            11,
            2602,
            295,
            8437,
            294,
            50682
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10966917547849145,
          "compression_ratio": 1.706896551724138,
          "no_speech_prob": 0.5145825147628784,
          "confidence": 0.4854174852371216
        }
      ],
      "duration": 28.600000000000023
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 337.04,
      "end_time": 363.32,
      "text": "some keywords into the placeholders. Now within format here, instead of passing in a specific object, I'm setting these keyword values. So I'm setting name equal to gin and the age equal to 23. So now anywhere that it sees a placeholder that matches that keyword, then it'll fill it in with that value. So if I save that and run it, then you can see that that worked right. Now this is the method",
      "original_segments": [
        {
          "id": 70,
          "start": 342.04,
          "end": 347.32,
          "text": "a specific object, I'm setting these keyword values. So I'm setting name",
          "tokens": [
            50682,
            257,
            2685,
            2657,
            11,
            286,
            478,
            3287,
            613,
            20428,
            4190,
            13,
            407,
            286,
            478,
            3287,
            1315,
            50946
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10966917547849145,
          "compression_ratio": 1.706896551724138,
          "no_speech_prob": 0.5145825147628784,
          "confidence": 0.4854174852371216
        },
        {
          "id": 71,
          "start": 347.32,
          "end": 353.84000000000003,
          "text": "equal to gin and the age equal to 23. So now anywhere that it sees a placeholder",
          "tokens": [
            50946,
            2681,
            281,
            36604,
            293,
            264,
            3205,
            2681,
            281,
            6673,
            13,
            407,
            586,
            4992,
            300,
            309,
            8194,
            257,
            1081,
            20480,
            51272
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10966917547849145,
          "compression_ratio": 1.706896551724138,
          "no_speech_prob": 0.5145825147628784,
          "confidence": 0.4854174852371216
        },
        {
          "id": 72,
          "start": 353.84000000000003,
          "end": 359.08,
          "text": "that matches that keyword, then it'll fill it in with that value. So if I save",
          "tokens": [
            51272,
            300,
            10676,
            300,
            20428,
            11,
            550,
            309,
            603,
            2836,
            309,
            294,
            365,
            300,
            2158,
            13,
            407,
            498,
            286,
            3155,
            51534
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10966917547849145,
          "compression_ratio": 1.706896551724138,
          "no_speech_prob": 0.5145825147628784,
          "confidence": 0.4854174852371216
        },
        {
          "id": 73,
          "start": 359.08,
          "end": 363.32,
          "text": "that and run it, then you can see that that worked right. Now this is the method",
          "tokens": [
            51534,
            300,
            293,
            1190,
            309,
            11,
            550,
            291,
            393,
            536,
            300,
            300,
            2732,
            558,
            13,
            823,
            341,
            307,
            264,
            3170,
            51746
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10966917547849145,
          "compression_ratio": 1.706896551724138,
          "no_speech_prob": 0.5145825147628784,
          "confidence": 0.4854174852371216
        }
      ],
      "duration": 26.279999999999973
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 358.32,
      "end_time": 385.52,
      "text": "that matches that keyword, then it'll fill it in with that value. So if I save that and run it, then you can see that that worked right. Now this is the method that I usually use to print out dictionaries, because I think that it is a little bit more readable. Now if you know about unpacking lists and dictionaries, then you'll probably realize here that we can just unpack our dictionary from before into format, and it will find all those keywords for us to use. So I actually accidentally deleted that dictionary that we had from",
      "original_segments": [
        {
          "id": 74,
          "start": 363.32,
          "end": 367.8,
          "text": "that I usually use to print out dictionaries, because I think that it is",
          "tokens": [
            50364,
            300,
            286,
            2673,
            764,
            281,
            4482,
            484,
            22352,
            4889,
            11,
            570,
            286,
            519,
            300,
            309,
            307,
            50588
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10245859300768054,
          "compression_ratio": 1.726235741444867,
          "no_speech_prob": 0.22600698471069336,
          "confidence": 0.7739930152893066
        },
        {
          "id": 75,
          "start": 367.8,
          "end": 372.28,
          "text": "a little bit more readable. Now if you know about unpacking lists and",
          "tokens": [
            50588,
            257,
            707,
            857,
            544,
            49857,
            13,
            823,
            498,
            291,
            458,
            466,
            26699,
            278,
            14511,
            293,
            50812
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10245859300768054,
          "compression_ratio": 1.726235741444867,
          "no_speech_prob": 0.22600698471069336,
          "confidence": 0.7739930152893066
        },
        {
          "id": 76,
          "start": 372.28,
          "end": 376.15999999999997,
          "text": "dictionaries, then you'll probably realize here that we can just unpack our",
          "tokens": [
            50812,
            22352,
            4889,
            11,
            550,
            291,
            603,
            1391,
            4325,
            510,
            300,
            321,
            393,
            445,
            26699,
            527,
            51006
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10245859300768054,
          "compression_ratio": 1.726235741444867,
          "no_speech_prob": 0.22600698471069336,
          "confidence": 0.7739930152893066
        },
        {
          "id": 77,
          "start": 376.15999999999997,
          "end": 380.88,
          "text": "dictionary from before into format, and it will find all those keywords for us",
          "tokens": [
            51006,
            25890,
            490,
            949,
            666,
            7877,
            11,
            293,
            309,
            486,
            915,
            439,
            729,
            21009,
            337,
            505,
            51242
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10245859300768054,
          "compression_ratio": 1.726235741444867,
          "no_speech_prob": 0.22600698471069336,
          "confidence": 0.7739930152893066
        },
        {
          "id": 78,
          "start": 380.88,
          "end": 385.52,
          "text": "to use. So I actually accidentally deleted that dictionary that we had from",
          "tokens": [
            51242,
            281,
            764,
            13,
            407,
            286,
            767,
            15715,
            22981,
            300,
            25890,
            300,
            321,
            632,
            490,
            51474
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10245859300768054,
          "compression_ratio": 1.726235741444867,
          "no_speech_prob": 0.22600698471069336,
          "confidence": 0.7739930152893066
        }
      ],
      "duration": 27.19999999999999
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 380.52,
      "end_time": 406.44,
      "text": "dictionary from before into format, and it will find all those keywords for us to use. So I actually accidentally deleted that dictionary that we had from before, so let me go ahead and make that again. So let's see, that was name, and I'll just do gin, and I'll do the age as 23, and let me fix that curly brace there. Okay, so now in this example here, I'm using these keyword arguments, and if I",
      "original_segments": [
        {
          "id": 79,
          "start": 385.52,
          "end": 391.52,
          "text": "before, so let me go ahead and make that again. So let's see, that was name, and",
          "tokens": [
            51474,
            949,
            11,
            370,
            718,
            385,
            352,
            2286,
            293,
            652,
            300,
            797,
            13,
            407,
            718,
            311,
            536,
            11,
            300,
            390,
            1315,
            11,
            293,
            51774
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10245859300768054,
          "compression_ratio": 1.726235741444867,
          "no_speech_prob": 0.22600698471069336,
          "confidence": 0.7739930152893066
        },
        {
          "id": 80,
          "start": 391.64,
          "end": 400.32,
          "text": "I'll just do gin, and I'll do the age as 23, and let me fix that curly brace there.",
          "tokens": [
            50370,
            286,
            603,
            445,
            360,
            36604,
            11,
            293,
            286,
            603,
            360,
            264,
            3205,
            382,
            6673,
            11,
            293,
            718,
            385,
            3191,
            300,
            32066,
            38458,
            456,
            13,
            50804
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09646279471261161,
          "compression_ratio": 1.7025862068965518,
          "no_speech_prob": 0.08301325142383575,
          "confidence": 0.9169867485761642
        },
        {
          "id": 81,
          "start": 400.32,
          "end": 406.44,
          "text": "Okay, so now in this example here, I'm using these keyword arguments, and if I",
          "tokens": [
            50804,
            1033,
            11,
            370,
            586,
            294,
            341,
            1365,
            510,
            11,
            286,
            478,
            1228,
            613,
            20428,
            12869,
            11,
            293,
            498,
            286,
            51110
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09646279471261161,
          "compression_ratio": 1.7025862068965518,
          "no_speech_prob": 0.08301325142383575,
          "confidence": 0.9169867485761642
        }
      ],
      "duration": 25.920000000000016
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 401.44,
      "end_time": 425.6,
      "text": "Okay, so now in this example here, I'm using these keyword arguments, and if I just unpack that dictionary, then it will fill in those keyword arguments for us. So let me save that and print it, and you can see that that worked. So to me, that's the most readable and most convenient way to print out dictionary values. Okay, so now let's take a look at how we can format and print out numbers.",
      "original_segments": [
        {
          "id": 82,
          "start": 406.44,
          "end": 411.12,
          "text": "just unpack that dictionary, then it will fill in those keyword arguments for us.",
          "tokens": [
            51110,
            445,
            26699,
            300,
            25890,
            11,
            550,
            309,
            486,
            2836,
            294,
            729,
            20428,
            12869,
            337,
            505,
            13,
            51344
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09646279471261161,
          "compression_ratio": 1.7025862068965518,
          "no_speech_prob": 0.08301325142383575,
          "confidence": 0.9169867485761642
        },
        {
          "id": 83,
          "start": 411.12,
          "end": 416.06,
          "text": "So let me save that and print it, and you can see that that worked. So to me,",
          "tokens": [
            51344,
            407,
            718,
            385,
            3155,
            300,
            293,
            4482,
            309,
            11,
            293,
            291,
            393,
            536,
            300,
            300,
            2732,
            13,
            407,
            281,
            385,
            11,
            51591
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09646279471261161,
          "compression_ratio": 1.7025862068965518,
          "no_speech_prob": 0.08301325142383575,
          "confidence": 0.9169867485761642
        },
        {
          "id": 84,
          "start": 416.06,
          "end": 419.59999999999997,
          "text": "that's the most readable and most convenient way to print out dictionary",
          "tokens": [
            51591,
            300,
            311,
            264,
            881,
            49857,
            293,
            881,
            10851,
            636,
            281,
            4482,
            484,
            25890,
            51768
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09646279471261161,
          "compression_ratio": 1.7025862068965518,
          "no_speech_prob": 0.08301325142383575,
          "confidence": 0.9169867485761642
        },
        {
          "id": 85,
          "start": 419.6,
          "end": 425.6,
          "text": "values. Okay, so now let's take a look at how we can format and print out numbers.",
          "tokens": [
            50364,
            4190,
            13,
            1033,
            11,
            370,
            586,
            718,
            311,
            747,
            257,
            574,
            412,
            577,
            321,
            393,
            7877,
            293,
            4482,
            484,
            3547,
            13,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11343306415485886,
          "compression_ratio": 1.6822033898305084,
          "no_speech_prob": 0.07500238716602325,
          "confidence": 0.9249976128339767
        }
      ],
      "duration": 24.160000000000025
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 420.6,
      "end_time": 447.20000000000005,
      "text": "values. Okay, so now let's take a look at how we can format and print out numbers. So in this example that I have here, all I'm doing here is looping through and printing out the numbers 1 through 10. So now what if I wanted all of these numbers to have two digits, and zero pad my single digit values with a zero. Now in order to do this, I'm gonna have to add formatting to our placeholders, and",
      "original_segments": [
        {
          "id": 86,
          "start": 425.6,
          "end": 431.48,
          "text": "So in this example that I have here, all I'm doing here is looping through and",
          "tokens": [
            50664,
            407,
            294,
            341,
            1365,
            300,
            286,
            362,
            510,
            11,
            439,
            286,
            478,
            884,
            510,
            307,
            6367,
            278,
            807,
            293,
            50958
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11343306415485886,
          "compression_ratio": 1.6822033898305084,
          "no_speech_prob": 0.07500238716602325,
          "confidence": 0.9249976128339767
        },
        {
          "id": 87,
          "start": 431.48,
          "end": 437.0,
          "text": "printing out the numbers 1 through 10. So now what if I wanted all of these",
          "tokens": [
            50958,
            14699,
            484,
            264,
            3547,
            502,
            807,
            1266,
            13,
            407,
            586,
            437,
            498,
            286,
            1415,
            439,
            295,
            613,
            51234
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11343306415485886,
          "compression_ratio": 1.6822033898305084,
          "no_speech_prob": 0.07500238716602325,
          "confidence": 0.9249976128339767
        },
        {
          "id": 88,
          "start": 437.0,
          "end": 443.40000000000003,
          "text": "numbers to have two digits, and zero pad my single digit values with a zero. Now",
          "tokens": [
            51234,
            3547,
            281,
            362,
            732,
            27011,
            11,
            293,
            4018,
            6887,
            452,
            2167,
            14293,
            4190,
            365,
            257,
            4018,
            13,
            823,
            51554
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11343306415485886,
          "compression_ratio": 1.6822033898305084,
          "no_speech_prob": 0.07500238716602325,
          "confidence": 0.9249976128339767
        },
        {
          "id": 89,
          "start": 443.40000000000003,
          "end": 447.20000000000005,
          "text": "in order to do this, I'm gonna have to add formatting to our placeholders, and",
          "tokens": [
            51554,
            294,
            1668,
            281,
            360,
            341,
            11,
            286,
            478,
            799,
            362,
            281,
            909,
            39366,
            281,
            527,
            1081,
            12916,
            11,
            293,
            51744
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11343306415485886,
          "compression_ratio": 1.6822033898305084,
          "no_speech_prob": 0.07500238716602325,
          "confidence": 0.9249976128339767
        }
      ],
      "duration": 26.600000000000023
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 442.20000000000005,
      "end_time": 469.2,
      "text": "numbers to have two digits, and zero pad my single digit values with a zero. Now in order to do this, I'm gonna have to add formatting to our placeholders, and we can do that by adding a colon here. So now we can add whatever formatting that we'd like. So I want to zero pad my digits to 2. So we can do that just by doing a 0 2 here, and if I save that and run it, now you can see instead of 1 2 3, it's 0 1 0 2, and then when I get down here to 10, it doesn't pad it because",
      "original_segments": [
        {
          "id": 90,
          "start": 447.24,
          "end": 452.92,
          "text": "we can do that by adding a colon here. So now we can add whatever formatting that",
          "tokens": [
            50366,
            321,
            393,
            360,
            300,
            538,
            5127,
            257,
            8255,
            510,
            13,
            407,
            586,
            321,
            393,
            909,
            2035,
            39366,
            300,
            50650
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0983110490392466,
          "compression_ratio": 1.7260869565217392,
          "no_speech_prob": 0.11399795860052109,
          "confidence": 0.8860020413994789
        },
        {
          "id": 91,
          "start": 452.92,
          "end": 458.32,
          "text": "we'd like. So I want to zero pad my digits to 2. So we can do that just by",
          "tokens": [
            50650,
            321,
            1116,
            411,
            13,
            407,
            286,
            528,
            281,
            4018,
            6887,
            452,
            27011,
            281,
            568,
            13,
            407,
            321,
            393,
            360,
            300,
            445,
            538,
            50920
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0983110490392466,
          "compression_ratio": 1.7260869565217392,
          "no_speech_prob": 0.11399795860052109,
          "confidence": 0.8860020413994789
        },
        {
          "id": 92,
          "start": 458.32,
          "end": 464.24,
          "text": "doing a 0 2 here, and if I save that and run it, now you can see instead of 1 2",
          "tokens": [
            50920,
            884,
            257,
            1958,
            568,
            510,
            11,
            293,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            11,
            586,
            291,
            393,
            536,
            2602,
            295,
            502,
            568,
            51216
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0983110490392466,
          "compression_ratio": 1.7260869565217392,
          "no_speech_prob": 0.11399795860052109,
          "confidence": 0.8860020413994789
        },
        {
          "id": 93,
          "start": 464.24,
          "end": 469.2,
          "text": "3, it's 0 1 0 2, and then when I get down here to 10, it doesn't pad it because",
          "tokens": [
            51216,
            805,
            11,
            309,
            311,
            1958,
            502,
            1958,
            568,
            11,
            293,
            550,
            562,
            286,
            483,
            760,
            510,
            281,
            1266,
            11,
            309,
            1177,
            380,
            6887,
            309,
            570,
            51464
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0983110490392466,
          "compression_ratio": 1.7260869565217392,
          "no_speech_prob": 0.11399795860052109,
          "confidence": 0.8860020413994789
        }
      ],
      "duration": 26.999999999999943
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 464.2,
      "end_time": 490.0,
      "text": "doing a 0 2 here, and if I save that and run it, now you can see instead of 1 2 3, it's 0 1 0 2, and then when I get down here to 10, it doesn't pad it because it's already two digits. Now if I was to make this a 3 and save that and run it, now you can see that it zero pads all the way up to three digits. Okay, so now let's look at using format to do decimal places. So here I have pi written out to eight decimal places. So let's say that I want to print that out, but I only want",
      "original_segments": [
        {
          "id": 94,
          "start": 469.2,
          "end": 474.32,
          "text": "it's already two digits. Now if I was to make this a 3 and save that and run it,",
          "tokens": [
            51464,
            309,
            311,
            1217,
            732,
            27011,
            13,
            823,
            498,
            286,
            390,
            281,
            652,
            341,
            257,
            805,
            293,
            3155,
            300,
            293,
            1190,
            309,
            11,
            51720
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0983110490392466,
          "compression_ratio": 1.7260869565217392,
          "no_speech_prob": 0.11399795860052109,
          "confidence": 0.8860020413994789
        },
        {
          "id": 95,
          "start": 474.32,
          "end": 478.96,
          "text": "now you can see that it zero pads all the way up to three digits. Okay, so now",
          "tokens": [
            50364,
            586,
            291,
            393,
            536,
            300,
            309,
            4018,
            19179,
            439,
            264,
            636,
            493,
            281,
            1045,
            27011,
            13,
            1033,
            11,
            370,
            586,
            50596
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08935761001874816,
          "compression_ratio": 1.8317757009345794,
          "no_speech_prob": 0.09502638131380081,
          "confidence": 0.9049736186861992
        },
        {
          "id": 96,
          "start": 478.96,
          "end": 485.59999999999997,
          "text": "let's look at using format to do decimal places. So here I have pi written out to",
          "tokens": [
            50596,
            718,
            311,
            574,
            412,
            1228,
            7877,
            281,
            360,
            26601,
            3190,
            13,
            407,
            510,
            286,
            362,
            3895,
            3720,
            484,
            281,
            50928
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08935761001874816,
          "compression_ratio": 1.8317757009345794,
          "no_speech_prob": 0.09502638131380081,
          "confidence": 0.9049736186861992
        },
        {
          "id": 97,
          "start": 485.59999999999997,
          "end": 490.0,
          "text": "eight decimal places. So let's say that I want to print that out, but I only want",
          "tokens": [
            50928,
            3180,
            26601,
            3190,
            13,
            407,
            718,
            311,
            584,
            300,
            286,
            528,
            281,
            4482,
            300,
            484,
            11,
            457,
            286,
            787,
            528,
            51148
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08935761001874816,
          "compression_ratio": 1.8317757009345794,
          "no_speech_prob": 0.09502638131380081,
          "confidence": 0.9049736186861992
        }
      ],
      "duration": 25.80000000000001
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 485.0,
      "end_time": 513.3199999999999,
      "text": "let's look at using format to do decimal places. So here I have pi written out to eight decimal places. So let's say that I want to print that out, but I only want to print out to two decimal places. So let me add my colon so that it knows that we want to do some formatting, and now I can specify that I want two decimal places just by doing a 0.2 f. So now if I save that and run it, you can see that it says pi is equal to 3.14, and again if I change that 2 to a 3 and",
      "original_segments": [
        {
          "id": 98,
          "start": 490.0,
          "end": 495.96,
          "text": "to print out to two decimal places. So let me add my colon so that it knows",
          "tokens": [
            51148,
            281,
            4482,
            484,
            281,
            732,
            26601,
            3190,
            13,
            407,
            718,
            385,
            909,
            452,
            8255,
            370,
            300,
            309,
            3255,
            51446
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08935761001874816,
          "compression_ratio": 1.8317757009345794,
          "no_speech_prob": 0.09502638131380081,
          "confidence": 0.9049736186861992
        },
        {
          "id": 99,
          "start": 495.96,
          "end": 499.96,
          "text": "that we want to do some formatting, and now I can specify that I want two",
          "tokens": [
            51446,
            300,
            321,
            528,
            281,
            360,
            512,
            39366,
            11,
            293,
            586,
            286,
            393,
            16500,
            300,
            286,
            528,
            732,
            51646
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08935761001874816,
          "compression_ratio": 1.8317757009345794,
          "no_speech_prob": 0.09502638131380081,
          "confidence": 0.9049736186861992
        },
        {
          "id": 100,
          "start": 499.96,
          "end": 507.12,
          "text": "decimal places just by doing a 0.2 f. So now if I save that and run it, you can",
          "tokens": [
            50364,
            26601,
            3190,
            445,
            538,
            884,
            257,
            1958,
            13,
            17,
            283,
            13,
            407,
            586,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            11,
            291,
            393,
            50722
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1457843780517578,
          "compression_ratio": 1.6382978723404256,
          "no_speech_prob": 0.24572116136550903,
          "confidence": 0.754278838634491
        },
        {
          "id": 101,
          "start": 507.12,
          "end": 513.3199999999999,
          "text": "see that it says pi is equal to 3.14, and again if I change that 2 to a 3 and",
          "tokens": [
            50722,
            536,
            300,
            309,
            1619,
            3895,
            307,
            2681,
            281,
            805,
            13,
            7271,
            11,
            293,
            797,
            498,
            286,
            1319,
            300,
            568,
            281,
            257,
            805,
            293,
            51032
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1457843780517578,
          "compression_ratio": 1.6382978723404256,
          "no_speech_prob": 0.24572116136550903,
          "confidence": 0.754278838634491
        }
      ],
      "duration": 28.319999999999936
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 508.31999999999994,
      "end_time": 535.76,
      "text": "see that it says pi is equal to 3.14, and again if I change that 2 to a 3 and save it and run it, and it does up to three decimal places. Okay, so let's look at an example for say that we wanted to print out a large number and we wanted some comma separators so that it was more easily readable. So we can easily do that just by adding a comma after our colon. So I'll do a colon here",
      "original_segments": [
        {
          "id": 102,
          "start": 513.3199999999999,
          "end": 517.24,
          "text": "save it and run it, and it does up to three decimal places. Okay, so let's look",
          "tokens": [
            51032,
            3155,
            309,
            293,
            1190,
            309,
            11,
            293,
            309,
            775,
            493,
            281,
            1045,
            26601,
            3190,
            13,
            1033,
            11,
            370,
            718,
            311,
            574,
            51228
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1457843780517578,
          "compression_ratio": 1.6382978723404256,
          "no_speech_prob": 0.24572116136550903,
          "confidence": 0.754278838634491
        },
        {
          "id": 103,
          "start": 517.24,
          "end": 523.1999999999999,
          "text": "at an example for say that we wanted to print out a large number and we wanted",
          "tokens": [
            51228,
            412,
            364,
            1365,
            337,
            584,
            300,
            321,
            1415,
            281,
            4482,
            484,
            257,
            2416,
            1230,
            293,
            321,
            1415,
            51526
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1457843780517578,
          "compression_ratio": 1.6382978723404256,
          "no_speech_prob": 0.24572116136550903,
          "confidence": 0.754278838634491
        },
        {
          "id": 104,
          "start": 523.1999999999999,
          "end": 529.76,
          "text": "some comma separators so that it was more easily readable. So we can",
          "tokens": [
            51526,
            512,
            22117,
            3128,
            3391,
            370,
            300,
            309,
            390,
            544,
            3612,
            49857,
            13,
            407,
            321,
            393,
            51854
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1457843780517578,
          "compression_ratio": 1.6382978723404256,
          "no_speech_prob": 0.24572116136550903,
          "confidence": 0.754278838634491
        },
        {
          "id": 105,
          "start": 529.76,
          "end": 535.76,
          "text": "easily do that just by adding a comma after our colon. So I'll do a colon here",
          "tokens": [
            50364,
            3612,
            360,
            300,
            445,
            538,
            5127,
            257,
            22117,
            934,
            527,
            8255,
            13,
            407,
            286,
            603,
            360,
            257,
            8255,
            510,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09992972623954699,
          "compression_ratio": 1.8,
          "no_speech_prob": 0.011849851347506046,
          "confidence": 0.988150148652494
        }
      ],
      "duration": 27.440000000000055
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 530.76,
      "end_time": 555.12,
      "text": "easily do that just by adding a comma after our colon. So I'll do a colon here to specify that we want formatting, and I'll just put in a comma and if I save that and run it, you can see that we have our comma separators here on these large values. And you can chain this formatting together too. So let's say that we wanted the comma separated values and we wanted to display up to two decimal places. So",
      "original_segments": [
        {
          "id": 106,
          "start": 535.76,
          "end": 540.88,
          "text": "to specify that we want formatting, and I'll just put in a comma and if I save",
          "tokens": [
            50664,
            281,
            16500,
            300,
            321,
            528,
            39366,
            11,
            293,
            286,
            603,
            445,
            829,
            294,
            257,
            22117,
            293,
            498,
            286,
            3155,
            50920
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09992972623954699,
          "compression_ratio": 1.8,
          "no_speech_prob": 0.011849851347506046,
          "confidence": 0.988150148652494
        },
        {
          "id": 107,
          "start": 540.88,
          "end": 545.12,
          "text": "that and run it, you can see that we have our comma separators here on these large",
          "tokens": [
            50920,
            300,
            293,
            1190,
            309,
            11,
            291,
            393,
            536,
            300,
            321,
            362,
            527,
            22117,
            3128,
            3391,
            510,
            322,
            613,
            2416,
            51132
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09992972623954699,
          "compression_ratio": 1.8,
          "no_speech_prob": 0.011849851347506046,
          "confidence": 0.988150148652494
        },
        {
          "id": 108,
          "start": 545.12,
          "end": 549.88,
          "text": "values. And you can chain this formatting together too. So let's say that we wanted",
          "tokens": [
            51132,
            4190,
            13,
            400,
            291,
            393,
            5021,
            341,
            39366,
            1214,
            886,
            13,
            407,
            718,
            311,
            584,
            300,
            321,
            1415,
            51370
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09992972623954699,
          "compression_ratio": 1.8,
          "no_speech_prob": 0.011849851347506046,
          "confidence": 0.988150148652494
        },
        {
          "id": 109,
          "start": 549.88,
          "end": 555.12,
          "text": "the comma separated values and we wanted to display up to two decimal places. So",
          "tokens": [
            51370,
            264,
            22117,
            12005,
            4190,
            293,
            321,
            1415,
            281,
            4674,
            493,
            281,
            732,
            26601,
            3190,
            13,
            407,
            51632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09992972623954699,
          "compression_ratio": 1.8,
          "no_speech_prob": 0.011849851347506046,
          "confidence": 0.988150148652494
        }
      ],
      "duration": 24.360000000000014
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 550.12,
      "end_time": 576.96,
      "text": "the comma separated values and we wanted to display up to two decimal places. So right after the comma, I could do my 0.2 f that we did from before, and if I run that, you can see that we have our comma separated values and it added two decimal places on to the end. Okay, so let's take a look at an example for how we can format and print out dates. So I think this is extremely useful if you",
      "original_segments": [
        {
          "id": 110,
          "start": 555.52,
          "end": 561.84,
          "text": "right after the comma, I could do my 0.2 f that we did from before, and if I run",
          "tokens": [
            50384,
            558,
            934,
            264,
            22117,
            11,
            286,
            727,
            360,
            452,
            1958,
            13,
            17,
            283,
            300,
            321,
            630,
            490,
            949,
            11,
            293,
            498,
            286,
            1190,
            50700
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13459471359993647,
          "compression_ratio": 1.617283950617284,
          "no_speech_prob": 0.05134519562125206,
          "confidence": 0.9486548043787479
        },
        {
          "id": 111,
          "start": 561.84,
          "end": 566.48,
          "text": "that, you can see that we have our comma separated values and it added two",
          "tokens": [
            50700,
            300,
            11,
            291,
            393,
            536,
            300,
            321,
            362,
            527,
            22117,
            12005,
            4190,
            293,
            309,
            3869,
            732,
            50932
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13459471359993647,
          "compression_ratio": 1.617283950617284,
          "no_speech_prob": 0.05134519562125206,
          "confidence": 0.9486548043787479
        },
        {
          "id": 112,
          "start": 566.48,
          "end": 571.44,
          "text": "decimal places on to the end. Okay, so let's take a look at an example for how",
          "tokens": [
            50932,
            26601,
            3190,
            322,
            281,
            264,
            917,
            13,
            1033,
            11,
            370,
            718,
            311,
            747,
            257,
            574,
            412,
            364,
            1365,
            337,
            577,
            51180
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13459471359993647,
          "compression_ratio": 1.617283950617284,
          "no_speech_prob": 0.05134519562125206,
          "confidence": 0.9486548043787479
        },
        {
          "id": 113,
          "start": 571.44,
          "end": 576.96,
          "text": "we can format and print out dates. So I think this is extremely useful if you",
          "tokens": [
            51180,
            321,
            393,
            7877,
            293,
            4482,
            484,
            11691,
            13,
            407,
            286,
            519,
            341,
            307,
            4664,
            4420,
            498,
            291,
            51456
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13459471359993647,
          "compression_ratio": 1.617283950617284,
          "no_speech_prob": 0.05134519562125206,
          "confidence": 0.9486548043787479
        }
      ],
      "duration": 26.840000000000032
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 571.96,
      "end_time": 598.04,
      "text": "we can format and print out dates. So I think this is extremely useful if you need to print out date time information. It allows us to display the information in just about any way that we want. So it's especially useful if you're printing out dates for logs or creating reports or anything like that. So I just created a date here for September 24th of 2016. So if I just print out that date",
      "original_segments": [
        {
          "id": 114,
          "start": 576.96,
          "end": 581.88,
          "text": "need to print out date time information. It allows us to display the information",
          "tokens": [
            51456,
            643,
            281,
            4482,
            484,
            4002,
            565,
            1589,
            13,
            467,
            4045,
            505,
            281,
            4674,
            264,
            1589,
            51702
          ],
          "temperature": 0.0,
          "avg_logprob": -0.13459471359993647,
          "compression_ratio": 1.617283950617284,
          "no_speech_prob": 0.05134519562125206,
          "confidence": 0.9486548043787479
        },
        {
          "id": 115,
          "start": 581.88,
          "end": 584.96,
          "text": "in just about any way that we want. So it's especially useful if you're",
          "tokens": [
            50364,
            294,
            445,
            466,
            604,
            636,
            300,
            321,
            528,
            13,
            407,
            309,
            311,
            2318,
            4420,
            498,
            291,
            434,
            50518
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08966307773768345,
          "compression_ratio": 1.6864406779661016,
          "no_speech_prob": 0.02680523507297039,
          "confidence": 0.9731947649270296
        },
        {
          "id": 116,
          "start": 584.96,
          "end": 590.56,
          "text": "printing out dates for logs or creating reports or anything like that. So I just",
          "tokens": [
            50518,
            14699,
            484,
            11691,
            337,
            20820,
            420,
            4084,
            7122,
            420,
            1340,
            411,
            300,
            13,
            407,
            286,
            445,
            50798
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08966307773768345,
          "compression_ratio": 1.6864406779661016,
          "no_speech_prob": 0.02680523507297039,
          "confidence": 0.9731947649270296
        },
        {
          "id": 117,
          "start": 590.56,
          "end": 598.04,
          "text": "created a date here for September 24th of 2016. So if I just print out that date",
          "tokens": [
            50798,
            2942,
            257,
            4002,
            510,
            337,
            7216,
            4022,
            392,
            295,
            6549,
            13,
            407,
            498,
            286,
            445,
            4482,
            484,
            300,
            4002,
            51172
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08966307773768345,
          "compression_ratio": 1.6864406779661016,
          "no_speech_prob": 0.02680523507297039,
          "confidence": 0.9731947649270296
        }
      ],
      "duration": 26.079999999999927
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 593.04,
      "end_time": 617.96,
      "text": "created a date here for September 24th of 2016. So if I just print out that date variable, then you can see that it's not too bad. It's pretty easy to tell what it's doing. It's printing out the year, the month, the day, then the hours, minutes, and seconds. But let's say that we wanted it in this format here. We wanted the month, the day, and then a comma and the year. So let's take out this print",
      "original_segments": [
        {
          "id": 118,
          "start": 598.04,
          "end": 602.0,
          "text": "variable, then you can see that it's not too bad. It's pretty easy to tell what",
          "tokens": [
            51172,
            7006,
            11,
            550,
            291,
            393,
            536,
            300,
            309,
            311,
            406,
            886,
            1578,
            13,
            467,
            311,
            1238,
            1858,
            281,
            980,
            437,
            51370
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08966307773768345,
          "compression_ratio": 1.6864406779661016,
          "no_speech_prob": 0.02680523507297039,
          "confidence": 0.9731947649270296
        },
        {
          "id": 119,
          "start": 602.0,
          "end": 606.96,
          "text": "it's doing. It's printing out the year, the month, the day, then the hours, minutes,",
          "tokens": [
            51370,
            309,
            311,
            884,
            13,
            467,
            311,
            14699,
            484,
            264,
            1064,
            11,
            264,
            1618,
            11,
            264,
            786,
            11,
            550,
            264,
            2496,
            11,
            2077,
            11,
            51618
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08966307773768345,
          "compression_ratio": 1.6864406779661016,
          "no_speech_prob": 0.02680523507297039,
          "confidence": 0.9731947649270296
        },
        {
          "id": 120,
          "start": 607.0400000000001,
          "end": 612.5600000000001,
          "text": "and seconds. But let's say that we wanted it in this format here. We wanted the",
          "tokens": [
            50368,
            293,
            3949,
            13,
            583,
            718,
            311,
            584,
            300,
            321,
            1415,
            309,
            294,
            341,
            7877,
            510,
            13,
            492,
            1415,
            264,
            50644
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08657862761310328,
          "compression_ratio": 1.775229357798165,
          "no_speech_prob": 0.10079546272754669,
          "confidence": 0.8992045372724533
        },
        {
          "id": 121,
          "start": 612.5600000000001,
          "end": 617.96,
          "text": "month, the day, and then a comma and the year. So let's take out this print",
          "tokens": [
            50644,
            1618,
            11,
            264,
            786,
            11,
            293,
            550,
            257,
            22117,
            293,
            264,
            1064,
            13,
            407,
            718,
            311,
            747,
            484,
            341,
            4482,
            50914
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08657862761310328,
          "compression_ratio": 1.775229357798165,
          "no_speech_prob": 0.10079546272754669,
          "confidence": 0.8992045372724533
        }
      ],
      "duration": 24.920000000000073
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 612.96,
      "end_time": 639.5600000000001,
      "text": "month, the day, and then a comma and the year. So let's take out this print statement here and let's try to do that. Okay, so first of all, we're going to want to add our colon here to specify that we want to do some formatting to this. And now I'm going to go to the website and get the values that we want to use here. So we want the full month and we can see here that the full month",
      "original_segments": [
        {
          "id": 122,
          "start": 617.96,
          "end": 623.24,
          "text": "statement here and let's try to do that. Okay, so first of all, we're going to",
          "tokens": [
            50914,
            5629,
            510,
            293,
            718,
            311,
            853,
            281,
            360,
            300,
            13,
            1033,
            11,
            370,
            700,
            295,
            439,
            11,
            321,
            434,
            516,
            281,
            51178
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08657862761310328,
          "compression_ratio": 1.775229357798165,
          "no_speech_prob": 0.10079546272754669,
          "confidence": 0.8992045372724533
        },
        {
          "id": 123,
          "start": 623.24,
          "end": 628.1600000000001,
          "text": "want to add our colon here to specify that we want to do some formatting to",
          "tokens": [
            51178,
            528,
            281,
            909,
            527,
            8255,
            510,
            281,
            16500,
            300,
            321,
            528,
            281,
            360,
            512,
            39366,
            281,
            51424
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08657862761310328,
          "compression_ratio": 1.775229357798165,
          "no_speech_prob": 0.10079546272754669,
          "confidence": 0.8992045372724533
        },
        {
          "id": 124,
          "start": 628.1600000000001,
          "end": 634.08,
          "text": "this. And now I'm going to go to the website and get the values that we want",
          "tokens": [
            51424,
            341,
            13,
            400,
            586,
            286,
            478,
            516,
            281,
            352,
            281,
            264,
            3144,
            293,
            483,
            264,
            4190,
            300,
            321,
            528,
            51720
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08657862761310328,
          "compression_ratio": 1.775229357798165,
          "no_speech_prob": 0.10079546272754669,
          "confidence": 0.8992045372724533
        },
        {
          "id": 125,
          "start": 634.08,
          "end": 639.5600000000001,
          "text": "to use here. So we want the full month and we can see here that the full month",
          "tokens": [
            50364,
            281,
            764,
            510,
            13,
            407,
            321,
            528,
            264,
            1577,
            1618,
            293,
            321,
            393,
            536,
            510,
            300,
            264,
            1577,
            1618,
            50638
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11217971110907127,
          "compression_ratio": 1.9549180327868851,
          "no_speech_prob": 0.5333150029182434,
          "confidence": 0.4666849970817566
        }
      ],
      "duration": 26.600000000000023
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 634.5600000000001,
      "end_time": 661.12,
      "text": "to use here. So we want the full month and we can see here that the full month is percent sign B. And we also want the day of the month and we can see that the day of the month here is percent sign D. And we also want the year here. And there's a couple of options for the year, but we're going to go ahead and just do the four digit one here with the capital Y. So like I said, it's completely fine if you don't know these formatting options. Just whenever you're trying to do",
      "original_segments": [
        {
          "id": 126,
          "start": 639.5600000000001,
          "end": 644.64,
          "text": "is percent sign B. And we also want the day of the month and we can see that the",
          "tokens": [
            50638,
            307,
            3043,
            1465,
            363,
            13,
            400,
            321,
            611,
            528,
            264,
            786,
            295,
            264,
            1618,
            293,
            321,
            393,
            536,
            300,
            264,
            50892
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11217971110907127,
          "compression_ratio": 1.9549180327868851,
          "no_speech_prob": 0.5333150029182434,
          "confidence": 0.4666849970817566
        },
        {
          "id": 127,
          "start": 644.64,
          "end": 649.9200000000001,
          "text": "day of the month here is percent sign D. And we also want the year here. And",
          "tokens": [
            50892,
            786,
            295,
            264,
            1618,
            510,
            307,
            3043,
            1465,
            413,
            13,
            400,
            321,
            611,
            528,
            264,
            1064,
            510,
            13,
            400,
            51156
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11217971110907127,
          "compression_ratio": 1.9549180327868851,
          "no_speech_prob": 0.5333150029182434,
          "confidence": 0.4666849970817566
        },
        {
          "id": 128,
          "start": 649.9200000000001,
          "end": 653.5600000000001,
          "text": "there's a couple of options for the year, but we're going to go ahead and just do",
          "tokens": [
            51156,
            456,
            311,
            257,
            1916,
            295,
            3956,
            337,
            264,
            1064,
            11,
            457,
            321,
            434,
            516,
            281,
            352,
            2286,
            293,
            445,
            360,
            51338
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11217971110907127,
          "compression_ratio": 1.9549180327868851,
          "no_speech_prob": 0.5333150029182434,
          "confidence": 0.4666849970817566
        },
        {
          "id": 129,
          "start": 653.5600000000001,
          "end": 658.2,
          "text": "the four digit one here with the capital Y. So like I said, it's completely fine if",
          "tokens": [
            51338,
            264,
            1451,
            14293,
            472,
            510,
            365,
            264,
            4238,
            398,
            13,
            407,
            411,
            286,
            848,
            11,
            309,
            311,
            2584,
            2489,
            498,
            51570
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11217971110907127,
          "compression_ratio": 1.9549180327868851,
          "no_speech_prob": 0.5333150029182434,
          "confidence": 0.4666849970817566
        },
        {
          "id": 130,
          "start": 658.2,
          "end": 661.12,
          "text": "you don't know these formatting options. Just whenever you're trying to do",
          "tokens": [
            51570,
            291,
            500,
            380,
            458,
            613,
            39366,
            3956,
            13,
            1449,
            5699,
            291,
            434,
            1382,
            281,
            360,
            51716
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11217971110907127,
          "compression_ratio": 1.9549180327868851,
          "no_speech_prob": 0.5333150029182434,
          "confidence": 0.4666849970817566
        }
      ],
      "duration": 26.559999999999945
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 656.12,
      "end_time": 685.2,
      "text": "the four digit one here with the capital Y. So like I said, it's completely fine if you don't know these formatting options. Just whenever you're trying to do something, you can look it up in the documentation and know how to get it done. So let's go ahead and pass these in. So the name of the month was a percent sign B. And then I'm going to do the day as percent sign D. And then I want the comma and then the percent sign capital Y for the year. So let me go ahead and print that out. Okay, so that worked the way that we wanted it to. So you can see",
      "original_segments": [
        {
          "id": 131,
          "start": 661.16,
          "end": 664.96,
          "text": "something, you can look it up in the documentation and know how to get it",
          "tokens": [
            50366,
            746,
            11,
            291,
            393,
            574,
            309,
            493,
            294,
            264,
            14333,
            293,
            458,
            577,
            281,
            483,
            309,
            50556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09331677036900674,
          "compression_ratio": 1.7916666666666667,
          "no_speech_prob": 0.3111652135848999,
          "confidence": 0.6888347864151001
        },
        {
          "id": 132,
          "start": 664.96,
          "end": 670.88,
          "text": "done. So let's go ahead and pass these in. So the name of the month was a percent",
          "tokens": [
            50556,
            1096,
            13,
            407,
            718,
            311,
            352,
            2286,
            293,
            1320,
            613,
            294,
            13,
            407,
            264,
            1315,
            295,
            264,
            1618,
            390,
            257,
            3043,
            50852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09331677036900674,
          "compression_ratio": 1.7916666666666667,
          "no_speech_prob": 0.3111652135848999,
          "confidence": 0.6888347864151001
        },
        {
          "id": 133,
          "start": 670.88,
          "end": 676.44,
          "text": "sign B. And then I'm going to do the day as percent sign D. And then I want the",
          "tokens": [
            50852,
            1465,
            363,
            13,
            400,
            550,
            286,
            478,
            516,
            281,
            360,
            264,
            786,
            382,
            3043,
            1465,
            413,
            13,
            400,
            550,
            286,
            528,
            264,
            51130
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09331677036900674,
          "compression_ratio": 1.7916666666666667,
          "no_speech_prob": 0.3111652135848999,
          "confidence": 0.6888347864151001
        },
        {
          "id": 134,
          "start": 676.44,
          "end": 681.24,
          "text": "comma and then the percent sign capital Y for the year. So let me go ahead and",
          "tokens": [
            51130,
            22117,
            293,
            550,
            264,
            3043,
            1465,
            4238,
            398,
            337,
            264,
            1064,
            13,
            407,
            718,
            385,
            352,
            2286,
            293,
            51370
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09331677036900674,
          "compression_ratio": 1.7916666666666667,
          "no_speech_prob": 0.3111652135848999,
          "confidence": 0.6888347864151001
        },
        {
          "id": 135,
          "start": 681.24,
          "end": 685.2,
          "text": "print that out. Okay, so that worked the way that we wanted it to. So you can see",
          "tokens": [
            51370,
            4482,
            300,
            484,
            13,
            1033,
            11,
            370,
            300,
            2732,
            264,
            636,
            300,
            321,
            1415,
            309,
            281,
            13,
            407,
            291,
            393,
            536,
            51568
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09331677036900674,
          "compression_ratio": 1.7916666666666667,
          "no_speech_prob": 0.3111652135848999,
          "confidence": 0.6888347864151001
        }
      ],
      "duration": 29.08000000000004
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 680.2,
      "end_time": 704.8000000000001,
      "text": "comma and then the percent sign capital Y for the year. So let me go ahead and print that out. Okay, so that worked the way that we wanted it to. So you can see how formatting your strings like this could be extremely useful for printing out dates. So now let's do a slightly more complicated example and let's try to do it in this format here. Let's say that we want the name of the month, the day, the comma, and the year. Then we want to say that it fell on A and then put in",
      "original_segments": [
        {
          "id": 136,
          "start": 685.2,
          "end": 689.44,
          "text": "how formatting your strings like this could be extremely useful for printing",
          "tokens": [
            51568,
            577,
            39366,
            428,
            13985,
            411,
            341,
            727,
            312,
            4664,
            4420,
            337,
            14699,
            51780
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09331677036900674,
          "compression_ratio": 1.7916666666666667,
          "no_speech_prob": 0.3111652135848999,
          "confidence": 0.6888347864151001
        },
        {
          "id": 137,
          "start": 689.44,
          "end": 695.2,
          "text": "out dates. So now let's do a slightly more complicated example and let's try",
          "tokens": [
            50364,
            484,
            11691,
            13,
            407,
            586,
            718,
            311,
            360,
            257,
            4748,
            544,
            6179,
            1365,
            293,
            718,
            311,
            853,
            50652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07164831328810307,
          "compression_ratio": 1.8826291079812207,
          "no_speech_prob": 0.15863655507564545,
          "confidence": 0.8413634449243546
        },
        {
          "id": 138,
          "start": 695.2,
          "end": 699.44,
          "text": "to do it in this format here. Let's say that we want the name of the month, the",
          "tokens": [
            50652,
            281,
            360,
            309,
            294,
            341,
            7877,
            510,
            13,
            961,
            311,
            584,
            300,
            321,
            528,
            264,
            1315,
            295,
            264,
            1618,
            11,
            264,
            50864
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07164831328810307,
          "compression_ratio": 1.8826291079812207,
          "no_speech_prob": 0.15863655507564545,
          "confidence": 0.8413634449243546
        },
        {
          "id": 139,
          "start": 699.44,
          "end": 704.8000000000001,
          "text": "day, the comma, and the year. Then we want to say that it fell on A and then put in",
          "tokens": [
            50864,
            786,
            11,
            264,
            22117,
            11,
            293,
            264,
            1064,
            13,
            1396,
            321,
            528,
            281,
            584,
            300,
            309,
            5696,
            322,
            316,
            293,
            550,
            829,
            294,
            51132
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07164831328810307,
          "compression_ratio": 1.8826291079812207,
          "no_speech_prob": 0.15863655507564545,
          "confidence": 0.8413634449243546
        }
      ],
      "duration": 24.600000000000023
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 699.8000000000001,
      "end_time": 725.4,
      "text": "day, the comma, and the year. Then we want to say that it fell on A and then put in the day of the week and that it was the day of the year. So I want to put the day of the year here. So we want to format our string to where it looks like this. So let me uncomment out what we have here so far. Now we already know how to do this first part here. So that was just a colon and we want our percent sign B,",
      "original_segments": [
        {
          "id": 140,
          "start": 704.8000000000001,
          "end": 711.2,
          "text": "the day of the week and that it was the day of the year. So I want to put the day",
          "tokens": [
            51132,
            264,
            786,
            295,
            264,
            1243,
            293,
            300,
            309,
            390,
            264,
            786,
            295,
            264,
            1064,
            13,
            407,
            286,
            528,
            281,
            829,
            264,
            786,
            51452
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07164831328810307,
          "compression_ratio": 1.8826291079812207,
          "no_speech_prob": 0.15863655507564545,
          "confidence": 0.8413634449243546
        },
        {
          "id": 141,
          "start": 711.2,
          "end": 715.4000000000001,
          "text": "of the year here. So we want to format our string to where it looks like this.",
          "tokens": [
            51452,
            295,
            264,
            1064,
            510,
            13,
            407,
            321,
            528,
            281,
            7877,
            527,
            6798,
            281,
            689,
            309,
            1542,
            411,
            341,
            13,
            51662
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07164831328810307,
          "compression_ratio": 1.8826291079812207,
          "no_speech_prob": 0.15863655507564545,
          "confidence": 0.8413634449243546
        },
        {
          "id": 142,
          "start": 715.76,
          "end": 720.24,
          "text": "So let me uncomment out what we have here so far. Now we already know how to do",
          "tokens": [
            50382,
            407,
            718,
            385,
            8585,
            518,
            484,
            437,
            321,
            362,
            510,
            370,
            1400,
            13,
            823,
            321,
            1217,
            458,
            577,
            281,
            360,
            50606
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11577365228107997,
          "compression_ratio": 1.7876106194690264,
          "no_speech_prob": 0.60118567943573,
          "confidence": 0.39881432056427
        },
        {
          "id": 143,
          "start": 720.24,
          "end": 725.4,
          "text": "this first part here. So that was just a colon and we want our percent sign B,",
          "tokens": [
            50606,
            341,
            700,
            644,
            510,
            13,
            407,
            300,
            390,
            445,
            257,
            8255,
            293,
            321,
            528,
            527,
            3043,
            1465,
            363,
            11,
            50864
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11577365228107997,
          "compression_ratio": 1.7876106194690264,
          "no_speech_prob": 0.60118567943573,
          "confidence": 0.39881432056427
        }
      ],
      "duration": 25.59999999999991
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 720.4,
      "end_time": 745.28,
      "text": "this first part here. So that was just a colon and we want our percent sign B, percent sign D for the day, comma, percent sign capital Y. So now let's also go back to the documentation and find the day of the week and the day of the year. So I'm going to go and grab that. So we can see here that the day of the week is over",
      "original_segments": [
        {
          "id": 144,
          "start": 725.4,
          "end": 731.4399999999999,
          "text": "percent sign D for the day, comma, percent sign capital Y. So now let's also go back",
          "tokens": [
            50864,
            3043,
            1465,
            413,
            337,
            264,
            786,
            11,
            22117,
            11,
            3043,
            1465,
            4238,
            398,
            13,
            407,
            586,
            718,
            311,
            611,
            352,
            646,
            51166
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11577365228107997,
          "compression_ratio": 1.7876106194690264,
          "no_speech_prob": 0.60118567943573,
          "confidence": 0.39881432056427
        },
        {
          "id": 145,
          "start": 731.4399999999999,
          "end": 736.64,
          "text": "to the documentation and find the day of the week and the day of the year. So I'm",
          "tokens": [
            51166,
            281,
            264,
            14333,
            293,
            915,
            264,
            786,
            295,
            264,
            1243,
            293,
            264,
            786,
            295,
            264,
            1064,
            13,
            407,
            286,
            478,
            51426
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11577365228107997,
          "compression_ratio": 1.7876106194690264,
          "no_speech_prob": 0.60118567943573,
          "confidence": 0.39881432056427
        },
        {
          "id": 146,
          "start": 736.64,
          "end": 745.28,
          "text": "going to go and grab that. So we can see here that the day of the week is over",
          "tokens": [
            51426,
            516,
            281,
            352,
            293,
            4444,
            300,
            13,
            407,
            321,
            393,
            536,
            510,
            300,
            264,
            786,
            295,
            264,
            1243,
            307,
            670,
            51858
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11577365228107997,
          "compression_ratio": 1.7876106194690264,
          "no_speech_prob": 0.60118567943573,
          "confidence": 0.39881432056427
        }
      ],
      "duration": 24.879999999999995
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 740.28,
      "end_time": 769.0,
      "text": "going to go and grab that. So we can see here that the day of the week is over here at capital A and the day of the year is this percent sign J. So if I go back here and do our colon and a percent sign with a capital A and then over here I'm going to do the colon with percent sign lowercase J. Now if I just try to run this as is then you can see that we get an error. Now the reason that we got",
      "original_segments": [
        {
          "id": 147,
          "start": 745.28,
          "end": 753.4,
          "text": "here at capital A and the day of the year is this percent sign J. So if I go",
          "tokens": [
            50364,
            510,
            412,
            4238,
            316,
            293,
            264,
            786,
            295,
            264,
            1064,
            307,
            341,
            3043,
            1465,
            508,
            13,
            407,
            498,
            286,
            352,
            50770
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0791796366373698,
          "compression_ratio": 1.7727272727272727,
          "no_speech_prob": 0.006604662165045738,
          "confidence": 0.9933953378349543
        },
        {
          "id": 148,
          "start": 753.4,
          "end": 760.0,
          "text": "back here and do our colon and a percent sign with a capital A and then over here",
          "tokens": [
            50770,
            646,
            510,
            293,
            360,
            527,
            8255,
            293,
            257,
            3043,
            1465,
            365,
            257,
            4238,
            316,
            293,
            550,
            670,
            510,
            51100
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0791796366373698,
          "compression_ratio": 1.7727272727272727,
          "no_speech_prob": 0.006604662165045738,
          "confidence": 0.9933953378349543
        },
        {
          "id": 149,
          "start": 760.0,
          "end": 764.64,
          "text": "I'm going to do the colon with percent sign lowercase J. Now if I just try to",
          "tokens": [
            51100,
            286,
            478,
            516,
            281,
            360,
            264,
            8255,
            365,
            3043,
            1465,
            3126,
            9765,
            508,
            13,
            823,
            498,
            286,
            445,
            853,
            281,
            51332
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0791796366373698,
          "compression_ratio": 1.7727272727272727,
          "no_speech_prob": 0.006604662165045738,
          "confidence": 0.9933953378349543
        },
        {
          "id": 150,
          "start": 764.64,
          "end": 769.0,
          "text": "run this as is then you can see that we get an error. Now the reason that we got",
          "tokens": [
            51332,
            1190,
            341,
            382,
            307,
            550,
            291,
            393,
            536,
            300,
            321,
            483,
            364,
            6713,
            13,
            823,
            264,
            1778,
            300,
            321,
            658,
            51550
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0791796366373698,
          "compression_ratio": 1.7727272727272727,
          "no_speech_prob": 0.006604662165045738,
          "confidence": 0.9933953378349543
        }
      ],
      "duration": 28.720000000000027
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 764.0,
      "end_time": 793.6800000000001,
      "text": "I'm going to do the colon with percent sign lowercase J. Now if I just try to run this as is then you can see that we get an error. Now the reason that we got an error is because we have three placeholders but we're only passing in one value to our format. So if you remember I can just do the index here so I can say that we want this to be the zero index and the first value that we pass in the format. So now even though we have three placeholders it will replace all of those placeholders with our single value that we're passing in to",
      "original_segments": [
        {
          "id": 151,
          "start": 769.0,
          "end": 773.4399999999999,
          "text": "an error is because we have three placeholders but we're only passing in",
          "tokens": [
            51550,
            364,
            6713,
            307,
            570,
            321,
            362,
            1045,
            1081,
            12916,
            457,
            321,
            434,
            787,
            8437,
            294,
            51772
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0791796366373698,
          "compression_ratio": 1.7727272727272727,
          "no_speech_prob": 0.006604662165045738,
          "confidence": 0.9933953378349543
        },
        {
          "id": 152,
          "start": 773.44,
          "end": 780.2,
          "text": "one value to our format. So if you remember I can just do the index here so",
          "tokens": [
            50364,
            472,
            2158,
            281,
            527,
            7877,
            13,
            407,
            498,
            291,
            1604,
            286,
            393,
            445,
            360,
            264,
            8186,
            510,
            370,
            50702
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10181715994170218,
          "compression_ratio": 1.855072463768116,
          "no_speech_prob": 0.43400320410728455,
          "confidence": 0.5659967958927155
        },
        {
          "id": 153,
          "start": 780.2,
          "end": 784.44,
          "text": "I can say that we want this to be the zero index and the first value that we",
          "tokens": [
            50702,
            286,
            393,
            584,
            300,
            321,
            528,
            341,
            281,
            312,
            264,
            4018,
            8186,
            293,
            264,
            700,
            2158,
            300,
            321,
            50914
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10181715994170218,
          "compression_ratio": 1.855072463768116,
          "no_speech_prob": 0.43400320410728455,
          "confidence": 0.5659967958927155
        },
        {
          "id": 154,
          "start": 784.44,
          "end": 789.48,
          "text": "pass in the format. So now even though we have three placeholders it will replace",
          "tokens": [
            50914,
            1320,
            294,
            264,
            7877,
            13,
            407,
            586,
            754,
            1673,
            321,
            362,
            1045,
            1081,
            12916,
            309,
            486,
            7406,
            51166
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10181715994170218,
          "compression_ratio": 1.855072463768116,
          "no_speech_prob": 0.43400320410728455,
          "confidence": 0.5659967958927155
        },
        {
          "id": 155,
          "start": 789.48,
          "end": 793.6800000000001,
          "text": "all of those placeholders with our single value that we're passing in to",
          "tokens": [
            51166,
            439,
            295,
            729,
            1081,
            12916,
            365,
            527,
            2167,
            2158,
            300,
            321,
            434,
            8437,
            294,
            281,
            51376
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10181715994170218,
          "compression_ratio": 1.855072463768116,
          "no_speech_prob": 0.43400320410728455,
          "confidence": 0.5659967958927155
        }
      ],
      "duration": 29.680000000000064
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 788.6800000000001,
      "end_time": 816.96,
      "text": "pass in the format. So now even though we have three placeholders it will replace all of those placeholders with our single value that we're passing in to format. So now if I run that you can see that it gives us the output that we wanted. So now you can see here that it says September 24th 2016 fell on a Saturday and was the 268th day of the year. So I think that's going to do it for this video. I hope it helped in knowing what all is available when it comes to string formatting and also maybe gave you some ideas for how you",
      "original_segments": [
        {
          "id": 156,
          "start": 793.6800000000001,
          "end": 798.24,
          "text": "format. So now if I run that you can see that it gives us the output that we",
          "tokens": [
            51376,
            7877,
            13,
            407,
            586,
            498,
            286,
            1190,
            300,
            291,
            393,
            536,
            300,
            309,
            2709,
            505,
            264,
            5598,
            300,
            321,
            51604
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10181715994170218,
          "compression_ratio": 1.855072463768116,
          "no_speech_prob": 0.43400320410728455,
          "confidence": 0.5659967958927155
        },
        {
          "id": 157,
          "start": 798.24,
          "end": 803.08,
          "text": "wanted. So now you can see here that it says September 24th 2016 fell on a",
          "tokens": [
            50364,
            1415,
            13,
            407,
            586,
            291,
            393,
            536,
            510,
            300,
            309,
            1619,
            7216,
            4022,
            392,
            6549,
            5696,
            322,
            257,
            50606
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12526189422607423,
          "compression_ratio": 1.6456953642384107,
          "no_speech_prob": 0.3333015441894531,
          "confidence": 0.6666984558105469
        },
        {
          "id": 158,
          "start": 803.08,
          "end": 809.08,
          "text": "Saturday and was the 268th day of the year. So I think that's going to do it",
          "tokens": [
            50606,
            8803,
            293,
            390,
            264,
            7551,
            23,
            392,
            786,
            295,
            264,
            1064,
            13,
            407,
            286,
            519,
            300,
            311,
            516,
            281,
            360,
            309,
            50906
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12526189422607423,
          "compression_ratio": 1.6456953642384107,
          "no_speech_prob": 0.3333015441894531,
          "confidence": 0.6666984558105469
        },
        {
          "id": 159,
          "start": 809.08,
          "end": 812.88,
          "text": "for this video. I hope it helped in knowing what all is available when it",
          "tokens": [
            50906,
            337,
            341,
            960,
            13,
            286,
            1454,
            309,
            4254,
            294,
            5276,
            437,
            439,
            307,
            2435,
            562,
            309,
            51096
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12526189422607423,
          "compression_ratio": 1.6456953642384107,
          "no_speech_prob": 0.3333015441894531,
          "confidence": 0.6666984558105469
        },
        {
          "id": 160,
          "start": 812.88,
          "end": 816.96,
          "text": "comes to string formatting and also maybe gave you some ideas for how you",
          "tokens": [
            51096,
            1487,
            281,
            6798,
            39366,
            293,
            611,
            1310,
            2729,
            291,
            512,
            3487,
            337,
            577,
            291,
            51300
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12526189422607423,
          "compression_ratio": 1.6456953642384107,
          "no_speech_prob": 0.3333015441894531,
          "confidence": 0.6666984558105469
        }
      ],
      "duration": 28.279999999999973
    },
    {
      "video_id": "60196303ab8a",
      "video_path": "videos/Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "video_filename": "Python Tutorial- String Formatting - Advanced Operations for Dicts, Lists, Numbers, and Dates (1).mp4",
      "start_time": 811.96,
      "end_time": 827.44,
      "text": "for this video. I hope it helped in knowing what all is available when it comes to string formatting and also maybe gave you some ideas for how you can use this in your own applications. But if you do have any questions just feel free to ask me in the comment section below. Be sure to subscribe for future videos and thank you all for watching.",
      "original_segments": [
        {
          "id": 161,
          "start": 816.96,
          "end": 820.28,
          "text": "can use this in your own applications. But if you do have any questions just",
          "tokens": [
            51300,
            393,
            764,
            341,
            294,
            428,
            1065,
            5821,
            13,
            583,
            498,
            291,
            360,
            362,
            604,
            1651,
            445,
            51466
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12526189422607423,
          "compression_ratio": 1.6456953642384107,
          "no_speech_prob": 0.3333015441894531,
          "confidence": 0.6666984558105469
        },
        {
          "id": 162,
          "start": 820.28,
          "end": 823.64,
          "text": "feel free to ask me in the comment section below. Be sure to subscribe for",
          "tokens": [
            51466,
            841,
            1737,
            281,
            1029,
            385,
            294,
            264,
            2871,
            3541,
            2507,
            13,
            879,
            988,
            281,
            3022,
            337,
            51634
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12526189422607423,
          "compression_ratio": 1.6456953642384107,
          "no_speech_prob": 0.3333015441894531,
          "confidence": 0.6666984558105469
        },
        {
          "id": 163,
          "start": 823.64,
          "end": 827.44,
          "text": "future videos and thank you all for watching.",
          "tokens": [
            51634,
            2027,
            2145,
            293,
            1309,
            291,
            439,
            337,
            1976,
            13,
            51824
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12526189422607423,
          "compression_ratio": 1.6456953642384107,
          "no_speech_prob": 0.3333015441894531,
          "confidence": 0.6666984558105469
        }
      ],
      "duration": 15.480000000000018
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 0.0,
      "end_time": 25.52,
      "text": "Hey there, how's it going everybody? In this series of videos we'll be going over the basics of Python programming. Now I get a lot of messages from people who say that they enjoy my Python videos but that they're either just getting started out in programming or coming from another language and would like a beginner's overview of Python so that they can better understand the more advanced topics. And that's what we're going to do here. We're going to cover how to get up and running with Python, how to work with the different data types, how to work with conditionals and loops and",
      "original_segments": [
        {
          "id": 0,
          "start": 0.0,
          "end": 4.0,
          "text": "Hey there, how's it going everybody? In this series of videos we'll be going over the basics of Python",
          "tokens": [
            50364,
            1911,
            456,
            11,
            577,
            311,
            309,
            516,
            2201,
            30,
            682,
            341,
            2638,
            295,
            2145,
            321,
            603,
            312,
            516,
            670,
            264,
            14688,
            295,
            15329,
            50564
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0720626053986726,
          "compression_ratio": 1.8229813664596273,
          "no_speech_prob": 0.21137353777885437,
          "confidence": 0.7886264622211456
        },
        {
          "id": 1,
          "start": 4.0,
          "end": 8.16,
          "text": "programming. Now I get a lot of messages from people who say that they enjoy my Python videos",
          "tokens": [
            50564,
            9410,
            13,
            823,
            286,
            483,
            257,
            688,
            295,
            7897,
            490,
            561,
            567,
            584,
            300,
            436,
            2103,
            452,
            15329,
            2145,
            50772
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0720626053986726,
          "compression_ratio": 1.8229813664596273,
          "no_speech_prob": 0.21137353777885437,
          "confidence": 0.7886264622211456
        },
        {
          "id": 2,
          "start": 8.16,
          "end": 12.08,
          "text": "but that they're either just getting started out in programming or coming from another language",
          "tokens": [
            50772,
            457,
            300,
            436,
            434,
            2139,
            445,
            1242,
            1409,
            484,
            294,
            9410,
            420,
            1348,
            490,
            1071,
            2856,
            50968
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0720626053986726,
          "compression_ratio": 1.8229813664596273,
          "no_speech_prob": 0.21137353777885437,
          "confidence": 0.7886264622211456
        },
        {
          "id": 3,
          "start": 12.08,
          "end": 16.56,
          "text": "and would like a beginner's overview of Python so that they can better understand the more advanced",
          "tokens": [
            50968,
            293,
            576,
            411,
            257,
            22080,
            311,
            12492,
            295,
            15329,
            370,
            300,
            436,
            393,
            1101,
            1223,
            264,
            544,
            7339,
            51192
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0720626053986726,
          "compression_ratio": 1.8229813664596273,
          "no_speech_prob": 0.21137353777885437,
          "confidence": 0.7886264622211456
        },
        {
          "id": 4,
          "start": 16.56,
          "end": 20.240000000000002,
          "text": "topics. And that's what we're going to do here. We're going to cover how to get up and running",
          "tokens": [
            51192,
            8378,
            13,
            400,
            300,
            311,
            437,
            321,
            434,
            516,
            281,
            360,
            510,
            13,
            492,
            434,
            516,
            281,
            2060,
            577,
            281,
            483,
            493,
            293,
            2614,
            51376
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0720626053986726,
          "compression_ratio": 1.8229813664596273,
          "no_speech_prob": 0.21137353777885437,
          "confidence": 0.7886264622211456
        },
        {
          "id": 5,
          "start": 20.240000000000002,
          "end": 25.52,
          "text": "with Python, how to work with the different data types, how to work with conditionals and loops and",
          "tokens": [
            51376,
            365,
            15329,
            11,
            577,
            281,
            589,
            365,
            264,
            819,
            1412,
            3467,
            11,
            577,
            281,
            589,
            365,
            4188,
            1124,
            293,
            16121,
            293,
            51640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0720626053986726,
          "compression_ratio": 1.8229813664596273,
          "no_speech_prob": 0.21137353777885437,
          "confidence": 0.7886264622211456
        }
      ],
      "duration": 25.52
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 20.52,
      "end_time": 49.120000000000005,
      "text": "with Python, how to work with the different data types, how to work with conditionals and loops and iterations, how to create functions, also importing modules and working with the standard library. So basically everything that you need to know in order to have a firm understanding of the Python fundamentals. Now one thing I do want to point out is that throughout these tutorials I'm going to go over a few topics that I've already made more detailed videos about and anytime that happens I'll touch on the basics of that topic but then reference the more detailed video if you'd like",
      "original_segments": [
        {
          "id": 6,
          "start": 25.52,
          "end": 31.759999999999998,
          "text": "iterations, how to create functions, also importing modules and working with the standard library.",
          "tokens": [
            50364,
            36540,
            11,
            577,
            281,
            1884,
            6828,
            11,
            611,
            43866,
            16679,
            293,
            1364,
            365,
            264,
            3832,
            6405,
            13,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05216399339529184,
          "compression_ratio": 1.7613293051359518,
          "no_speech_prob": 0.12517374753952026,
          "confidence": 0.8748262524604797
        },
        {
          "id": 7,
          "start": 31.759999999999998,
          "end": 35.84,
          "text": "So basically everything that you need to know in order to have a firm understanding of the Python",
          "tokens": [
            50676,
            407,
            1936,
            1203,
            300,
            291,
            643,
            281,
            458,
            294,
            1668,
            281,
            362,
            257,
            6174,
            3701,
            295,
            264,
            15329,
            50880
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05216399339529184,
          "compression_ratio": 1.7613293051359518,
          "no_speech_prob": 0.12517374753952026,
          "confidence": 0.8748262524604797
        },
        {
          "id": 8,
          "start": 35.84,
          "end": 39.92,
          "text": "fundamentals. Now one thing I do want to point out is that throughout these tutorials I'm going",
          "tokens": [
            50880,
            29505,
            13,
            823,
            472,
            551,
            286,
            360,
            528,
            281,
            935,
            484,
            307,
            300,
            3710,
            613,
            17616,
            286,
            478,
            516,
            51084
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05216399339529184,
          "compression_ratio": 1.7613293051359518,
          "no_speech_prob": 0.12517374753952026,
          "confidence": 0.8748262524604797
        },
        {
          "id": 9,
          "start": 39.92,
          "end": 44.879999999999995,
          "text": "to go over a few topics that I've already made more detailed videos about and anytime that happens",
          "tokens": [
            51084,
            281,
            352,
            670,
            257,
            1326,
            8378,
            300,
            286,
            600,
            1217,
            1027,
            544,
            9942,
            2145,
            466,
            293,
            13038,
            300,
            2314,
            51332
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05216399339529184,
          "compression_ratio": 1.7613293051359518,
          "no_speech_prob": 0.12517374753952026,
          "confidence": 0.8748262524604797
        },
        {
          "id": 10,
          "start": 44.879999999999995,
          "end": 49.120000000000005,
          "text": "I'll touch on the basics of that topic but then reference the more detailed video if you'd like",
          "tokens": [
            51332,
            286,
            603,
            2557,
            322,
            264,
            14688,
            295,
            300,
            4829,
            457,
            550,
            6408,
            264,
            544,
            9942,
            960,
            498,
            291,
            1116,
            411,
            51544
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05216399339529184,
          "compression_ratio": 1.7613293051359518,
          "no_speech_prob": 0.12517374753952026,
          "confidence": 0.8748262524604797
        }
      ],
      "duration": 28.600000000000005
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 44.120000000000005,
      "end_time": 70.56,
      "text": "to go over a few topics that I've already made more detailed videos about and anytime that happens I'll touch on the basics of that topic but then reference the more detailed video if you'd like to see more examples and that will allow us to move along at a good pace. So let's go ahead and get started. So first we're going to learn how to install Python and set up our development environment and we're going to look at how to do this on both Mac and Windows and this is pretty straightforward process. So first we'll look at how to do this on a Mac but if you're on a Windows machine then you can look in the description section below and I'll put a link to the time",
      "original_segments": [
        {
          "id": 11,
          "start": 49.120000000000005,
          "end": 53.6,
          "text": "to see more examples and that will allow us to move along at a good pace. So let's go ahead and",
          "tokens": [
            51544,
            281,
            536,
            544,
            5110,
            293,
            300,
            486,
            2089,
            505,
            281,
            1286,
            2051,
            412,
            257,
            665,
            11638,
            13,
            407,
            718,
            311,
            352,
            2286,
            293,
            51768
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05216399339529184,
          "compression_ratio": 1.7613293051359518,
          "no_speech_prob": 0.12517374753952026,
          "confidence": 0.8748262524604797
        },
        {
          "id": 12,
          "start": 53.6,
          "end": 57.84,
          "text": "get started. So first we're going to learn how to install Python and set up our development",
          "tokens": [
            50364,
            483,
            1409,
            13,
            407,
            700,
            321,
            434,
            516,
            281,
            1466,
            577,
            281,
            3625,
            15329,
            293,
            992,
            493,
            527,
            3250,
            50576
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05200441148546007,
          "compression_ratio": 1.9589041095890412,
          "no_speech_prob": 0.09063181281089783,
          "confidence": 0.9093681871891022
        },
        {
          "id": 13,
          "start": 57.84,
          "end": 62.400000000000006,
          "text": "environment and we're going to look at how to do this on both Mac and Windows and this is pretty",
          "tokens": [
            50576,
            2823,
            293,
            321,
            434,
            516,
            281,
            574,
            412,
            577,
            281,
            360,
            341,
            322,
            1293,
            5707,
            293,
            8591,
            293,
            341,
            307,
            1238,
            50804
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05200441148546007,
          "compression_ratio": 1.9589041095890412,
          "no_speech_prob": 0.09063181281089783,
          "confidence": 0.9093681871891022
        },
        {
          "id": 14,
          "start": 62.400000000000006,
          "end": 66.72,
          "text": "straightforward process. So first we'll look at how to do this on a Mac but if you're on a Windows",
          "tokens": [
            50804,
            15325,
            1399,
            13,
            407,
            700,
            321,
            603,
            574,
            412,
            577,
            281,
            360,
            341,
            322,
            257,
            5707,
            457,
            498,
            291,
            434,
            322,
            257,
            8591,
            51020
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05200441148546007,
          "compression_ratio": 1.9589041095890412,
          "no_speech_prob": 0.09063181281089783,
          "confidence": 0.9093681871891022
        },
        {
          "id": 15,
          "start": 66.72,
          "end": 70.56,
          "text": "machine then you can look in the description section below and I'll put a link to the time",
          "tokens": [
            51020,
            3479,
            550,
            291,
            393,
            574,
            294,
            264,
            3855,
            3541,
            2507,
            293,
            286,
            603,
            829,
            257,
            2113,
            281,
            264,
            565,
            51212
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05200441148546007,
          "compression_ratio": 1.9589041095890412,
          "no_speech_prob": 0.09063181281089783,
          "confidence": 0.9093681871891022
        }
      ],
      "duration": 26.439999999999998
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 65.56,
      "end_time": 89.60000000000001,
      "text": "straightforward process. So first we'll look at how to do this on a Mac but if you're on a Windows machine then you can look in the description section below and I'll put a link to the time stamp where we start the installation for Windows and that way you can skip ahead if you want. Or if you already have Python installed for your operating system then I'll also put a link to the time stamp where both of these installations are complete so that you can skip to where we're ready to write some code. So for a Mac Python usually comes pre-installed. To check if Python is",
      "original_segments": [
        {
          "id": 16,
          "start": 70.56,
          "end": 75.76,
          "text": "stamp where we start the installation for Windows and that way you can skip ahead if you want.",
          "tokens": [
            51212,
            9921,
            689,
            321,
            722,
            264,
            13260,
            337,
            8591,
            293,
            300,
            636,
            291,
            393,
            10023,
            2286,
            498,
            291,
            528,
            13,
            51472
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05200441148546007,
          "compression_ratio": 1.9589041095890412,
          "no_speech_prob": 0.09063181281089783,
          "confidence": 0.9093681871891022
        },
        {
          "id": 17,
          "start": 75.76,
          "end": 79.84,
          "text": "Or if you already have Python installed for your operating system then I'll also put a link to the",
          "tokens": [
            51472,
            1610,
            498,
            291,
            1217,
            362,
            15329,
            8899,
            337,
            428,
            7447,
            1185,
            550,
            286,
            603,
            611,
            829,
            257,
            2113,
            281,
            264,
            51676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05200441148546007,
          "compression_ratio": 1.9589041095890412,
          "no_speech_prob": 0.09063181281089783,
          "confidence": 0.9093681871891022
        },
        {
          "id": 18,
          "start": 79.84,
          "end": 83.92,
          "text": "time stamp where both of these installations are complete so that you can skip to where we're ready",
          "tokens": [
            50364,
            565,
            9921,
            689,
            1293,
            295,
            613,
            41932,
            366,
            3566,
            370,
            300,
            291,
            393,
            10023,
            281,
            689,
            321,
            434,
            1919,
            50568
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06215981193210768,
          "compression_ratio": 1.8045112781954886,
          "no_speech_prob": 0.179915651679039,
          "confidence": 0.820084348320961
        },
        {
          "id": 19,
          "start": 83.92,
          "end": 89.60000000000001,
          "text": "to write some code. So for a Mac Python usually comes pre-installed. To check if Python is",
          "tokens": [
            50568,
            281,
            2464,
            512,
            3089,
            13,
            407,
            337,
            257,
            5707,
            15329,
            2673,
            1487,
            659,
            12,
            13911,
            8907,
            13,
            1407,
            1520,
            498,
            15329,
            307,
            50852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06215981193210768,
          "compression_ratio": 1.8045112781954886,
          "no_speech_prob": 0.179915651679039,
          "confidence": 0.820084348320961
        }
      ],
      "duration": 24.040000000000006
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 84.60000000000001,
      "end_time": 112.16,
      "text": "to write some code. So for a Mac Python usually comes pre-installed. To check if Python is pre-installed then we can just open up our terminal and within our terminal we can say python dash dash version. Now we can see here that the default Python is Python 2.7. Now it used to be more controversial as to which version you want to use but almost everyone is moving over to Python 3 and if you're learning Python then you're definitely going to want to go with Python 3",
      "original_segments": [
        {
          "id": 20,
          "start": 89.60000000000001,
          "end": 95.60000000000001,
          "text": "pre-installed then we can just open up our terminal and within our terminal we can say",
          "tokens": [
            50852,
            659,
            12,
            13911,
            8907,
            550,
            321,
            393,
            445,
            1269,
            493,
            527,
            14709,
            293,
            1951,
            527,
            14709,
            321,
            393,
            584,
            51152
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06215981193210768,
          "compression_ratio": 1.8045112781954886,
          "no_speech_prob": 0.179915651679039,
          "confidence": 0.820084348320961
        },
        {
          "id": 21,
          "start": 95.60000000000001,
          "end": 102.16,
          "text": "python dash dash version. Now we can see here that the default Python is Python 2.7. Now it used to",
          "tokens": [
            51152,
            38797,
            8240,
            8240,
            3037,
            13,
            823,
            321,
            393,
            536,
            510,
            300,
            264,
            7576,
            15329,
            307,
            15329,
            568,
            13,
            22,
            13,
            823,
            309,
            1143,
            281,
            51480
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06215981193210768,
          "compression_ratio": 1.8045112781954886,
          "no_speech_prob": 0.179915651679039,
          "confidence": 0.820084348320961
        },
        {
          "id": 22,
          "start": 102.16,
          "end": 107.28,
          "text": "be more controversial as to which version you want to use but almost everyone is moving over to Python",
          "tokens": [
            51480,
            312,
            544,
            17323,
            382,
            281,
            597,
            3037,
            291,
            528,
            281,
            764,
            457,
            1920,
            1518,
            307,
            2684,
            670,
            281,
            15329,
            51736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06215981193210768,
          "compression_ratio": 1.8045112781954886,
          "no_speech_prob": 0.179915651679039,
          "confidence": 0.820084348320961
        },
        {
          "id": 23,
          "start": 107.28,
          "end": 112.16,
          "text": "3 and if you're learning Python then you're definitely going to want to go with Python 3",
          "tokens": [
            50364,
            805,
            293,
            498,
            291,
            434,
            2539,
            15329,
            550,
            291,
            434,
            2138,
            516,
            281,
            528,
            281,
            352,
            365,
            15329,
            805,
            50608
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04613199150353147,
          "compression_ratio": 1.793774319066148,
          "no_speech_prob": 0.2066410630941391,
          "confidence": 0.7933589369058609
        }
      ],
      "duration": 27.559999999999988
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 107.16,
      "end_time": 131.44,
      "text": "be more controversial as to which version you want to use but almost everyone is moving over to Python 3 and if you're learning Python then you're definitely going to want to go with Python 3 unless you have a really good reason to do otherwise. So let's go ahead and install the latest version of Python 3. So to do this we're just going to pull up an internet browser and we're going to go to the Python website which is here at python.org and from here we can go to downloads and we can see that it already detected that we're on a Mac and has offered up either",
      "original_segments": [
        {
          "id": 24,
          "start": 112.16,
          "end": 115.84,
          "text": "unless you have a really good reason to do otherwise. So let's go ahead and install the",
          "tokens": [
            50608,
            5969,
            291,
            362,
            257,
            534,
            665,
            1778,
            281,
            360,
            5911,
            13,
            407,
            718,
            311,
            352,
            2286,
            293,
            3625,
            264,
            50792
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04613199150353147,
          "compression_ratio": 1.793774319066148,
          "no_speech_prob": 0.2066410630941391,
          "confidence": 0.7933589369058609
        },
        {
          "id": 25,
          "start": 115.84,
          "end": 120.72,
          "text": "latest version of Python 3. So to do this we're just going to pull up an internet browser and",
          "tokens": [
            50792,
            6792,
            3037,
            295,
            15329,
            805,
            13,
            407,
            281,
            360,
            341,
            321,
            434,
            445,
            516,
            281,
            2235,
            493,
            364,
            4705,
            11185,
            293,
            51036
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04613199150353147,
          "compression_ratio": 1.793774319066148,
          "no_speech_prob": 0.2066410630941391,
          "confidence": 0.7933589369058609
        },
        {
          "id": 26,
          "start": 120.72,
          "end": 126.32,
          "text": "we're going to go to the Python website which is here at python.org and from here we can go to",
          "tokens": [
            51036,
            321,
            434,
            516,
            281,
            352,
            281,
            264,
            15329,
            3144,
            597,
            307,
            510,
            412,
            38797,
            13,
            4646,
            293,
            490,
            510,
            321,
            393,
            352,
            281,
            51316
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04613199150353147,
          "compression_ratio": 1.793774319066148,
          "no_speech_prob": 0.2066410630941391,
          "confidence": 0.7933589369058609
        },
        {
          "id": 27,
          "start": 126.32,
          "end": 131.44,
          "text": "downloads and we can see that it already detected that we're on a Mac and has offered up either",
          "tokens": [
            51316,
            36553,
            293,
            321,
            393,
            536,
            300,
            309,
            1217,
            21896,
            300,
            321,
            434,
            322,
            257,
            5707,
            293,
            575,
            8059,
            493,
            2139,
            51572
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04613199150353147,
          "compression_ratio": 1.793774319066148,
          "no_speech_prob": 0.2066410630941391,
          "confidence": 0.7933589369058609
        }
      ],
      "duration": 24.28
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 126.44,
      "end_time": 151.92,
      "text": "downloads and we can see that it already detected that we're on a Mac and has offered up either Python 3 or Python 2 and we want to go with the latest version Python 3.6. So that's going to download a PKG file and we will click on this to go ahead and start the installation. Now this is a pretty standard walkthrough here if you've installed software before then all a lot of this will look familiar so we're just going to agree to some terms. You can change the install location",
      "original_segments": [
        {
          "id": 28,
          "start": 131.44,
          "end": 137.76,
          "text": "Python 3 or Python 2 and we want to go with the latest version Python 3.6. So that's going to",
          "tokens": [
            50364,
            15329,
            805,
            420,
            15329,
            568,
            293,
            321,
            528,
            281,
            352,
            365,
            264,
            6792,
            3037,
            15329,
            805,
            13,
            21,
            13,
            407,
            300,
            311,
            516,
            281,
            50680
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06888480146392052,
          "compression_ratio": 1.6971830985915493,
          "no_speech_prob": 0.257073312997818,
          "confidence": 0.742926687002182
        },
        {
          "id": 29,
          "start": 137.76,
          "end": 143.44,
          "text": "download a PKG file and we will click on this to go ahead and start the installation. Now this is",
          "tokens": [
            50680,
            5484,
            257,
            49475,
            38,
            3991,
            293,
            321,
            486,
            2052,
            322,
            341,
            281,
            352,
            2286,
            293,
            722,
            264,
            13260,
            13,
            823,
            341,
            307,
            50964
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06888480146392052,
          "compression_ratio": 1.6971830985915493,
          "no_speech_prob": 0.257073312997818,
          "confidence": 0.742926687002182
        },
        {
          "id": 30,
          "start": 143.44,
          "end": 147.44,
          "text": "a pretty standard walkthrough here if you've installed software before then all a lot of this",
          "tokens": [
            50964,
            257,
            1238,
            3832,
            1792,
            11529,
            510,
            498,
            291,
            600,
            8899,
            4722,
            949,
            550,
            439,
            257,
            688,
            295,
            341,
            51164
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06888480146392052,
          "compression_ratio": 1.6971830985915493,
          "no_speech_prob": 0.257073312997818,
          "confidence": 0.742926687002182
        },
        {
          "id": 31,
          "start": 147.44,
          "end": 151.92,
          "text": "will look familiar so we're just going to agree to some terms. You can change the install location",
          "tokens": [
            51164,
            486,
            574,
            4963,
            370,
            321,
            434,
            445,
            516,
            281,
            3986,
            281,
            512,
            2115,
            13,
            509,
            393,
            1319,
            264,
            3625,
            4914,
            51388
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06888480146392052,
          "compression_ratio": 1.6971830985915493,
          "no_speech_prob": 0.257073312997818,
          "confidence": 0.742926687002182
        }
      ],
      "duration": 25.47999999999999
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 146.92,
      "end_time": 175.20000000000002,
      "text": "a pretty standard walkthrough here if you've installed software before then all a lot of this will look familiar so we're just going to agree to some terms. You can change the install location if you want. I'm just going to leave that as the default and you may need to put in your password to install this. Now once that's finished installing it will place a Python 3.6 directory in your applications folder and if we open up our applications folder and scroll down here a bit then you can see I have an old version of Python 3.5 here but it installed this Python 3.6 and if",
      "original_segments": [
        {
          "id": 32,
          "start": 151.92,
          "end": 156.8,
          "text": "if you want. I'm just going to leave that as the default and you may need to put in your password",
          "tokens": [
            51388,
            498,
            291,
            528,
            13,
            286,
            478,
            445,
            516,
            281,
            1856,
            300,
            382,
            264,
            7576,
            293,
            291,
            815,
            643,
            281,
            829,
            294,
            428,
            11524,
            51632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06888480146392052,
          "compression_ratio": 1.6971830985915493,
          "no_speech_prob": 0.257073312997818,
          "confidence": 0.742926687002182
        },
        {
          "id": 33,
          "start": 156.88000000000002,
          "end": 162.88000000000002,
          "text": "to install this. Now once that's finished installing it will place a Python 3.6 directory",
          "tokens": [
            50368,
            281,
            3625,
            341,
            13,
            823,
            1564,
            300,
            311,
            4335,
            20762,
            309,
            486,
            1081,
            257,
            15329,
            805,
            13,
            21,
            21120,
            50668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045774801572163897,
          "compression_ratio": 1.8858267716535433,
          "no_speech_prob": 0.2710707485675812,
          "confidence": 0.7289292514324188
        },
        {
          "id": 34,
          "start": 162.88000000000002,
          "end": 169.36,
          "text": "in your applications folder and if we open up our applications folder and scroll down here a bit",
          "tokens": [
            50668,
            294,
            428,
            5821,
            10820,
            293,
            498,
            321,
            1269,
            493,
            527,
            5821,
            10820,
            293,
            11369,
            760,
            510,
            257,
            857,
            50992
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045774801572163897,
          "compression_ratio": 1.8858267716535433,
          "no_speech_prob": 0.2710707485675812,
          "confidence": 0.7289292514324188
        },
        {
          "id": 35,
          "start": 169.36,
          "end": 175.20000000000002,
          "text": "then you can see I have an old version of Python 3.5 here but it installed this Python 3.6 and if",
          "tokens": [
            50992,
            550,
            291,
            393,
            536,
            286,
            362,
            364,
            1331,
            3037,
            295,
            15329,
            805,
            13,
            20,
            510,
            457,
            309,
            8899,
            341,
            15329,
            805,
            13,
            21,
            293,
            498,
            51284
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045774801572163897,
          "compression_ratio": 1.8858267716535433,
          "no_speech_prob": 0.2710707485675812,
          "confidence": 0.7289292514324188
        }
      ],
      "duration": 28.28000000000003
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 170.20000000000002,
      "end_time": 197.2,
      "text": "then you can see I have an old version of Python 3.5 here but it installed this Python 3.6 and if we open this up and look inside here then we can see that we have this ID or idle application and we'll come back to that in just a second. So now that we have Python 3.6 installed let's go back to our terminal and check our Python version again. So if I run that actually let me close down the terminal and open this back up just so that we're sure that we're starting with a fresh",
      "original_segments": [
        {
          "id": 36,
          "start": 175.20000000000002,
          "end": 180.96,
          "text": "we open this up and look inside here then we can see that we have this ID or idle application and",
          "tokens": [
            51284,
            321,
            1269,
            341,
            493,
            293,
            574,
            1854,
            510,
            550,
            321,
            393,
            536,
            300,
            321,
            362,
            341,
            7348,
            420,
            30650,
            3861,
            293,
            51572
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045774801572163897,
          "compression_ratio": 1.8858267716535433,
          "no_speech_prob": 0.2710707485675812,
          "confidence": 0.7289292514324188
        },
        {
          "id": 37,
          "start": 180.96,
          "end": 186.32000000000002,
          "text": "we'll come back to that in just a second. So now that we have Python 3.6 installed let's go back",
          "tokens": [
            51572,
            321,
            603,
            808,
            646,
            281,
            300,
            294,
            445,
            257,
            1150,
            13,
            407,
            586,
            300,
            321,
            362,
            15329,
            805,
            13,
            21,
            8899,
            718,
            311,
            352,
            646,
            51840
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045774801572163897,
          "compression_ratio": 1.8858267716535433,
          "no_speech_prob": 0.2710707485675812,
          "confidence": 0.7289292514324188
        },
        {
          "id": 38,
          "start": 186.32,
          "end": 193.12,
          "text": "to our terminal and check our Python version again. So if I run that actually let me close",
          "tokens": [
            50364,
            281,
            527,
            14709,
            293,
            1520,
            527,
            15329,
            3037,
            797,
            13,
            407,
            498,
            286,
            1190,
            300,
            767,
            718,
            385,
            1998,
            50704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0472841057284125,
          "compression_ratio": 1.944,
          "no_speech_prob": 0.0004888895200565457,
          "confidence": 0.9995111104799435
        },
        {
          "id": 39,
          "start": 193.12,
          "end": 197.2,
          "text": "down the terminal and open this back up just so that we're sure that we're starting with a fresh",
          "tokens": [
            50704,
            760,
            264,
            14709,
            293,
            1269,
            341,
            646,
            493,
            445,
            370,
            300,
            321,
            434,
            988,
            300,
            321,
            434,
            2891,
            365,
            257,
            4451,
            50908
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0472841057284125,
          "compression_ratio": 1.944,
          "no_speech_prob": 0.0004888895200565457,
          "confidence": 0.9995111104799435
        }
      ],
      "duration": 26.99999999999997
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 192.2,
      "end_time": 216.07999999999998,
      "text": "to our terminal and check our Python version again. So if I run that actually let me close down the terminal and open this back up just so that we're sure that we're starting with a fresh slate. So now if I run that Python version again then most likely you're going to see that it still says Python 2.7. Now the reason is because when we installed Python 3 it actually uses this Python 3 command instead. So if I instead use this Python 3 command and check that version then we can see",
      "original_segments": [
        {
          "id": 40,
          "start": 197.2,
          "end": 202.56,
          "text": "slate. So now if I run that Python version again then most likely you're going to see that it still",
          "tokens": [
            50908,
            39118,
            13,
            407,
            586,
            498,
            286,
            1190,
            300,
            15329,
            3037,
            797,
            550,
            881,
            3700,
            291,
            434,
            516,
            281,
            536,
            300,
            309,
            920,
            51176
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0472841057284125,
          "compression_ratio": 1.944,
          "no_speech_prob": 0.0004888895200565457,
          "confidence": 0.9995111104799435
        },
        {
          "id": 41,
          "start": 202.56,
          "end": 209.51999999999998,
          "text": "says Python 2.7. Now the reason is because when we installed Python 3 it actually uses this Python",
          "tokens": [
            51176,
            1619,
            15329,
            568,
            13,
            22,
            13,
            823,
            264,
            1778,
            307,
            570,
            562,
            321,
            8899,
            15329,
            805,
            309,
            767,
            4960,
            341,
            15329,
            51524
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0472841057284125,
          "compression_ratio": 1.944,
          "no_speech_prob": 0.0004888895200565457,
          "confidence": 0.9995111104799435
        },
        {
          "id": 42,
          "start": 209.51999999999998,
          "end": 216.07999999999998,
          "text": "3 command instead. So if I instead use this Python 3 command and check that version then we can see",
          "tokens": [
            51524,
            805,
            5622,
            2602,
            13,
            407,
            498,
            286,
            2602,
            764,
            341,
            15329,
            805,
            5622,
            293,
            1520,
            300,
            3037,
            550,
            321,
            393,
            536,
            51852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0472841057284125,
          "compression_ratio": 1.944,
          "no_speech_prob": 0.0004888895200565457,
          "confidence": 0.9995111104799435
        }
      ],
      "duration": 23.879999999999995
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 211.07999999999998,
      "end_time": 240.72000000000003,
      "text": "3 command instead. So if I instead use this Python 3 command and check that version then we can see that we get Python 3.6 that we just installed. Now if we want the Python command to use Python 3 then one way we can do this is to create an alias. Now to do this we can add a line to this dot bash profile file and if you don't know what that is then don't worry about it too much this is just going to allow us to associate the Python command with Python 3. So you can use any editor to edit",
      "original_segments": [
        {
          "id": 43,
          "start": 216.08,
          "end": 222.64000000000001,
          "text": "that we get Python 3.6 that we just installed. Now if we want the Python command to use Python 3",
          "tokens": [
            50364,
            300,
            321,
            483,
            15329,
            805,
            13,
            21,
            300,
            321,
            445,
            8899,
            13,
            823,
            498,
            321,
            528,
            264,
            15329,
            5622,
            281,
            764,
            15329,
            805,
            50692
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05006366968154907,
          "compression_ratio": 1.8426966292134832,
          "no_speech_prob": 0.0006039663567207754,
          "confidence": 0.9993960336432792
        },
        {
          "id": 44,
          "start": 222.64000000000001,
          "end": 230.0,
          "text": "then one way we can do this is to create an alias. Now to do this we can add a line to this dot bash",
          "tokens": [
            50692,
            550,
            472,
            636,
            321,
            393,
            360,
            341,
            307,
            281,
            1884,
            364,
            419,
            4609,
            13,
            823,
            281,
            360,
            341,
            321,
            393,
            909,
            257,
            1622,
            281,
            341,
            5893,
            46183,
            51060
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05006366968154907,
          "compression_ratio": 1.8426966292134832,
          "no_speech_prob": 0.0006039663567207754,
          "confidence": 0.9993960336432792
        },
        {
          "id": 45,
          "start": 230.0,
          "end": 234.56,
          "text": "profile file and if you don't know what that is then don't worry about it too much this is just",
          "tokens": [
            51060,
            7964,
            3991,
            293,
            498,
            291,
            500,
            380,
            458,
            437,
            300,
            307,
            550,
            500,
            380,
            3292,
            466,
            309,
            886,
            709,
            341,
            307,
            445,
            51288
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05006366968154907,
          "compression_ratio": 1.8426966292134832,
          "no_speech_prob": 0.0006039663567207754,
          "confidence": 0.9993960336432792
        },
        {
          "id": 46,
          "start": 234.56,
          "end": 240.72000000000003,
          "text": "going to allow us to associate the Python command with Python 3. So you can use any editor to edit",
          "tokens": [
            51288,
            516,
            281,
            2089,
            505,
            281,
            14644,
            264,
            15329,
            5622,
            365,
            15329,
            805,
            13,
            407,
            291,
            393,
            764,
            604,
            9839,
            281,
            8129,
            51596
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05006366968154907,
          "compression_ratio": 1.8426966292134832,
          "no_speech_prob": 0.0006039663567207754,
          "confidence": 0.9993960336432792
        }
      ],
      "duration": 29.640000000000043
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 235.72000000000003,
      "end_time": 261.92,
      "text": "going to allow us to associate the Python command with Python 3. So you can use any editor to edit this file but since I'm already in the terminal I'm just going to go ahead and use nano and nano is pretty easy for beginners. So I will say nano. Now this is in your home directory so a tilde means your home directory and then a slash. Now this file is called bash underscore profile. So now let's go ahead and open that up. Now within this file you might realize that I have some more",
      "original_segments": [
        {
          "id": 47,
          "start": 240.72000000000003,
          "end": 245.44,
          "text": "this file but since I'm already in the terminal I'm just going to go ahead and use nano and nano is",
          "tokens": [
            51596,
            341,
            3991,
            457,
            1670,
            286,
            478,
            1217,
            294,
            264,
            14709,
            286,
            478,
            445,
            516,
            281,
            352,
            2286,
            293,
            764,
            30129,
            293,
            30129,
            307,
            51832
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05006366968154907,
          "compression_ratio": 1.8426966292134832,
          "no_speech_prob": 0.0006039663567207754,
          "confidence": 0.9993960336432792
        },
        {
          "id": 48,
          "start": 245.44,
          "end": 252.07999999999998,
          "text": "pretty easy for beginners. So I will say nano. Now this is in your home directory so a tilde",
          "tokens": [
            50364,
            1238,
            1858,
            337,
            26992,
            13,
            407,
            286,
            486,
            584,
            30129,
            13,
            823,
            341,
            307,
            294,
            428,
            1280,
            21120,
            370,
            257,
            45046,
            50696
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05733794179455987,
          "compression_ratio": 1.7666666666666666,
          "no_speech_prob": 0.0001582406257512048,
          "confidence": 0.9998417593742488
        },
        {
          "id": 49,
          "start": 252.07999999999998,
          "end": 258.08,
          "text": "means your home directory and then a slash. Now this file is called bash underscore profile. So",
          "tokens": [
            50696,
            1355,
            428,
            1280,
            21120,
            293,
            550,
            257,
            17330,
            13,
            823,
            341,
            3991,
            307,
            1219,
            46183,
            37556,
            7964,
            13,
            407,
            50996
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05733794179455987,
          "compression_ratio": 1.7666666666666666,
          "no_speech_prob": 0.0001582406257512048,
          "confidence": 0.9998417593742488
        },
        {
          "id": 50,
          "start": 258.08,
          "end": 261.92,
          "text": "now let's go ahead and open that up. Now within this file you might realize that I have some more",
          "tokens": [
            50996,
            586,
            718,
            311,
            352,
            2286,
            293,
            1269,
            300,
            493,
            13,
            823,
            1951,
            341,
            3991,
            291,
            1062,
            4325,
            300,
            286,
            362,
            512,
            544,
            51188
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05733794179455987,
          "compression_ratio": 1.7666666666666666,
          "no_speech_prob": 0.0001582406257512048,
          "confidence": 0.9998417593742488
        }
      ],
      "duration": 26.19999999999999
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 256.92,
      "end_time": 285.04,
      "text": "means your home directory and then a slash. Now this file is called bash underscore profile. So now let's go ahead and open that up. Now within this file you might realize that I have some more content here than you do and these are just some personal customizations that I have but don't worry about any of this. If I go to the bottom here and let me like make this just a little bit larger here. Now you should see that whenever you installed Python 3 that it actually added a few lines here at the bottom and you should have these lines also. Now setting this path variable like",
      "original_segments": [
        {
          "id": 51,
          "start": 261.92,
          "end": 267.04,
          "text": "content here than you do and these are just some personal customizations that I have but don't",
          "tokens": [
            51188,
            2701,
            510,
            813,
            291,
            360,
            293,
            613,
            366,
            445,
            512,
            2973,
            2375,
            14455,
            300,
            286,
            362,
            457,
            500,
            380,
            51444
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05733794179455987,
          "compression_ratio": 1.7666666666666666,
          "no_speech_prob": 0.0001582406257512048,
          "confidence": 0.9998417593742488
        },
        {
          "id": 52,
          "start": 267.04,
          "end": 272.56,
          "text": "worry about any of this. If I go to the bottom here and let me like make this just a little bit",
          "tokens": [
            51444,
            3292,
            466,
            604,
            295,
            341,
            13,
            759,
            286,
            352,
            281,
            264,
            2767,
            510,
            293,
            718,
            385,
            411,
            652,
            341,
            445,
            257,
            707,
            857,
            51720
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05733794179455987,
          "compression_ratio": 1.7666666666666666,
          "no_speech_prob": 0.0001582406257512048,
          "confidence": 0.9998417593742488
        },
        {
          "id": 53,
          "start": 272.56,
          "end": 279.04,
          "text": "larger here. Now you should see that whenever you installed Python 3 that it actually added a few",
          "tokens": [
            50364,
            4833,
            510,
            13,
            823,
            291,
            820,
            536,
            300,
            5699,
            291,
            8899,
            15329,
            805,
            300,
            309,
            767,
            3869,
            257,
            1326,
            50688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05201325365292129,
          "compression_ratio": 1.738532110091743,
          "no_speech_prob": 0.022576842457056046,
          "confidence": 0.977423157542944
        },
        {
          "id": 54,
          "start": 279.04,
          "end": 285.04,
          "text": "lines here at the bottom and you should have these lines also. Now setting this path variable like",
          "tokens": [
            50688,
            3876,
            510,
            412,
            264,
            2767,
            293,
            291,
            820,
            362,
            613,
            3876,
            611,
            13,
            823,
            3287,
            341,
            3100,
            7006,
            411,
            50988
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05201325365292129,
          "compression_ratio": 1.738532110091743,
          "no_speech_prob": 0.022576842457056046,
          "confidence": 0.977423157542944
        }
      ],
      "duration": 28.120000000000005
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 280.04,
      "end_time": 305.44,
      "text": "lines here at the bottom and you should have these lines also. Now setting this path variable like it's doing here is what allows the Python 3 command to work. So we'll move down here below to the bottom and add an alias. Now to do this all we have to do is say alias Python equals Python 3 and you want to make sure it looks exactly like this. No space between the equals",
      "original_segments": [
        {
          "id": 55,
          "start": 285.04,
          "end": 291.6,
          "text": "it's doing here is what allows the Python 3 command to work. So we'll move down here below",
          "tokens": [
            50988,
            309,
            311,
            884,
            510,
            307,
            437,
            4045,
            264,
            15329,
            805,
            5622,
            281,
            589,
            13,
            407,
            321,
            603,
            1286,
            760,
            510,
            2507,
            51316
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05201325365292129,
          "compression_ratio": 1.738532110091743,
          "no_speech_prob": 0.022576842457056046,
          "confidence": 0.977423157542944
        },
        {
          "id": 56,
          "start": 292.4,
          "end": 300.24,
          "text": "to the bottom and add an alias. Now to do this all we have to do is say alias Python equals",
          "tokens": [
            51356,
            281,
            264,
            2767,
            293,
            909,
            364,
            419,
            4609,
            13,
            823,
            281,
            360,
            341,
            439,
            321,
            362,
            281,
            360,
            307,
            584,
            419,
            4609,
            15329,
            6915,
            51748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05201325365292129,
          "compression_ratio": 1.738532110091743,
          "no_speech_prob": 0.022576842457056046,
          "confidence": 0.977423157542944
        },
        {
          "id": 57,
          "start": 300.24,
          "end": 305.44,
          "text": "Python 3 and you want to make sure it looks exactly like this. No space between the equals",
          "tokens": [
            50364,
            15329,
            805,
            293,
            291,
            528,
            281,
            652,
            988,
            309,
            1542,
            2293,
            411,
            341,
            13,
            883,
            1901,
            1296,
            264,
            6915,
            50624
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07747918128967285,
          "compression_ratio": 1.6565217391304348,
          "no_speech_prob": 0.024034732952713966,
          "confidence": 0.975965267047286
        }
      ],
      "duration": 25.399999999999977
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 300.44,
      "end_time": 330.08000000000004,
      "text": "Python 3 and you want to make sure it looks exactly like this. No space between the equals or anything like that. So now to save this we can just hit ctrl x to close hit y that to say that we want to save it and then hit enter to keep that same file name. So now if we quit out of our terminal and open this back up and now let's check that Python version again. So I'm going to do Python dash dash version and now we can see that it's using Python 3 6. Now I probably should have",
      "original_segments": [
        {
          "id": 58,
          "start": 305.44,
          "end": 312.16,
          "text": "or anything like that. So now to save this we can just hit ctrl x to close hit y that to say that",
          "tokens": [
            50624,
            420,
            1340,
            411,
            300,
            13,
            407,
            586,
            281,
            3155,
            341,
            321,
            393,
            445,
            2045,
            269,
            28269,
            2031,
            281,
            1998,
            2045,
            288,
            300,
            281,
            584,
            300,
            50960
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07747918128967285,
          "compression_ratio": 1.6565217391304348,
          "no_speech_prob": 0.024034732952713966,
          "confidence": 0.975965267047286
        },
        {
          "id": 59,
          "start": 312.16,
          "end": 317.44,
          "text": "we want to save it and then hit enter to keep that same file name. So now if we quit out of our",
          "tokens": [
            50960,
            321,
            528,
            281,
            3155,
            309,
            293,
            550,
            2045,
            3242,
            281,
            1066,
            300,
            912,
            3991,
            1315,
            13,
            407,
            586,
            498,
            321,
            10366,
            484,
            295,
            527,
            51224
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07747918128967285,
          "compression_ratio": 1.6565217391304348,
          "no_speech_prob": 0.024034732952713966,
          "confidence": 0.975965267047286
        },
        {
          "id": 60,
          "start": 317.44,
          "end": 323.92,
          "text": "terminal and open this back up and now let's check that Python version again. So I'm going to do",
          "tokens": [
            51224,
            14709,
            293,
            1269,
            341,
            646,
            493,
            293,
            586,
            718,
            311,
            1520,
            300,
            15329,
            3037,
            797,
            13,
            407,
            286,
            478,
            516,
            281,
            360,
            51548
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07747918128967285,
          "compression_ratio": 1.6565217391304348,
          "no_speech_prob": 0.024034732952713966,
          "confidence": 0.975965267047286
        },
        {
          "id": 61,
          "start": 323.92,
          "end": 330.08000000000004,
          "text": "Python dash dash version and now we can see that it's using Python 3 6. Now I probably should have",
          "tokens": [
            50364,
            15329,
            8240,
            8240,
            3037,
            293,
            586,
            321,
            393,
            536,
            300,
            309,
            311,
            1228,
            15329,
            805,
            1386,
            13,
            823,
            286,
            1391,
            820,
            362,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08008872761445887,
          "compression_ratio": 1.794776119402985,
          "no_speech_prob": 0.16934724152088165,
          "confidence": 0.8306527584791183
        }
      ],
      "duration": 29.640000000000043
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 325.08000000000004,
      "end_time": 353.04,
      "text": "Python dash dash version and now we can see that it's using Python 3 6. Now I probably should have mentioned this earlier but you do not have to create that Python alias. If you wanted to you could just use that Python 3 command to run all of your scripts but I like to use this Python command so that's why I personally like to create the alias. Okay so now let's walk through how we install Python 3 for Windows. Now if you're on a Mac and want to skip through this part then you",
      "original_segments": [
        {
          "id": 62,
          "start": 330.08000000000004,
          "end": 335.12,
          "text": "mentioned this earlier but you do not have to create that Python alias. If you wanted to you",
          "tokens": [
            50672,
            2835,
            341,
            3071,
            457,
            291,
            360,
            406,
            362,
            281,
            1884,
            300,
            15329,
            419,
            4609,
            13,
            759,
            291,
            1415,
            281,
            291,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08008872761445887,
          "compression_ratio": 1.794776119402985,
          "no_speech_prob": 0.16934724152088165,
          "confidence": 0.8306527584791183
        },
        {
          "id": 63,
          "start": 335.12,
          "end": 341.68,
          "text": "could just use that Python 3 command to run all of your scripts but I like to use this Python command",
          "tokens": [
            50924,
            727,
            445,
            764,
            300,
            15329,
            805,
            5622,
            281,
            1190,
            439,
            295,
            428,
            23294,
            457,
            286,
            411,
            281,
            764,
            341,
            15329,
            5622,
            51252
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08008872761445887,
          "compression_ratio": 1.794776119402985,
          "no_speech_prob": 0.16934724152088165,
          "confidence": 0.8306527584791183
        },
        {
          "id": 64,
          "start": 341.68,
          "end": 346.40000000000003,
          "text": "so that's why I personally like to create the alias. Okay so now let's walk through how we",
          "tokens": [
            51252,
            370,
            300,
            311,
            983,
            286,
            5665,
            411,
            281,
            1884,
            264,
            419,
            4609,
            13,
            1033,
            370,
            586,
            718,
            311,
            1792,
            807,
            577,
            321,
            51488
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08008872761445887,
          "compression_ratio": 1.794776119402985,
          "no_speech_prob": 0.16934724152088165,
          "confidence": 0.8306527584791183
        },
        {
          "id": 65,
          "start": 346.40000000000003,
          "end": 353.04,
          "text": "install Python 3 for Windows. Now if you're on a Mac and want to skip through this part then you",
          "tokens": [
            51488,
            3625,
            15329,
            805,
            337,
            8591,
            13,
            823,
            498,
            291,
            434,
            322,
            257,
            5707,
            293,
            528,
            281,
            10023,
            807,
            341,
            644,
            550,
            291,
            51820
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08008872761445887,
          "compression_ratio": 1.794776119402985,
          "no_speech_prob": 0.16934724152088165,
          "confidence": 0.8306527584791183
        }
      ],
      "duration": 27.95999999999998
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 348.04,
      "end_time": 374.16,
      "text": "install Python 3 for Windows. Now if you're on a Mac and want to skip through this part then you can click on the timestamp in the description below that skips forward to when both of these installations are complete but this install for Windows actually doesn't take very long at all. Okay so to check if Python is already installed we can open up our command prompt by going down here to start and then search for cmd and let's open up that and I'm going to make this font a",
      "original_segments": [
        {
          "id": 66,
          "start": 353.04,
          "end": 357.28000000000003,
          "text": "can click on the timestamp in the description below that skips forward to when both of these",
          "tokens": [
            50364,
            393,
            2052,
            322,
            264,
            49108,
            1215,
            294,
            264,
            3855,
            2507,
            300,
            1110,
            2600,
            2128,
            281,
            562,
            1293,
            295,
            613,
            50576
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038878453405279866,
          "compression_ratio": 1.707142857142857,
          "no_speech_prob": 0.00033807457657530904,
          "confidence": 0.9996619254234247
        },
        {
          "id": 67,
          "start": 357.28000000000003,
          "end": 362.32,
          "text": "installations are complete but this install for Windows actually doesn't take very long at all.",
          "tokens": [
            50576,
            41932,
            366,
            3566,
            457,
            341,
            3625,
            337,
            8591,
            767,
            1177,
            380,
            747,
            588,
            938,
            412,
            439,
            13,
            50828
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038878453405279866,
          "compression_ratio": 1.707142857142857,
          "no_speech_prob": 0.00033807457657530904,
          "confidence": 0.9996619254234247
        },
        {
          "id": 68,
          "start": 362.32,
          "end": 367.44,
          "text": "Okay so to check if Python is already installed we can open up our command prompt by going down",
          "tokens": [
            50828,
            1033,
            370,
            281,
            1520,
            498,
            15329,
            307,
            1217,
            8899,
            321,
            393,
            1269,
            493,
            527,
            5622,
            12391,
            538,
            516,
            760,
            51084
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038878453405279866,
          "compression_ratio": 1.707142857142857,
          "no_speech_prob": 0.00033807457657530904,
          "confidence": 0.9996619254234247
        },
        {
          "id": 69,
          "start": 367.44,
          "end": 374.16,
          "text": "here to start and then search for cmd and let's open up that and I'm going to make this font a",
          "tokens": [
            51084,
            510,
            281,
            722,
            293,
            550,
            3164,
            337,
            14668,
            67,
            293,
            718,
            311,
            1269,
            493,
            300,
            293,
            286,
            478,
            516,
            281,
            652,
            341,
            10703,
            257,
            51420
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038878453405279866,
          "compression_ratio": 1.707142857142857,
          "no_speech_prob": 0.00033807457657530904,
          "confidence": 0.9996619254234247
        }
      ],
      "duration": 26.120000000000005
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 369.16,
      "end_time": 396.32,
      "text": "here to start and then search for cmd and let's open up that and I'm going to make this font a little bit bigger so that we can see here. I think I can click on properties and font and we'll go with something a little bit larger there. Okay now to see if we have access to Python we can just type in python dash dash version and most likely you'll see that this is not yet installed and get this Python is not recognized error. So to install this we can just open up an internet",
      "original_segments": [
        {
          "id": 70,
          "start": 374.16,
          "end": 380.08000000000004,
          "text": "little bit bigger so that we can see here. I think I can click on properties and font and we'll go",
          "tokens": [
            51420,
            707,
            857,
            3801,
            370,
            300,
            321,
            393,
            536,
            510,
            13,
            286,
            519,
            286,
            393,
            2052,
            322,
            7221,
            293,
            10703,
            293,
            321,
            603,
            352,
            51716
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038878453405279866,
          "compression_ratio": 1.707142857142857,
          "no_speech_prob": 0.00033807457657530904,
          "confidence": 0.9996619254234247
        },
        {
          "id": 71,
          "start": 380.08,
          "end": 384.88,
          "text": "with something a little bit larger there. Okay now to see if we have access to Python we can",
          "tokens": [
            50364,
            365,
            746,
            257,
            707,
            857,
            4833,
            456,
            13,
            1033,
            586,
            281,
            536,
            498,
            321,
            362,
            2105,
            281,
            15329,
            321,
            393,
            50604
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06524587751508833,
          "compression_ratio": 1.7703703703703704,
          "no_speech_prob": 0.029589638113975525,
          "confidence": 0.9704103618860245
        },
        {
          "id": 72,
          "start": 384.88,
          "end": 390.96,
          "text": "just type in python dash dash version and most likely you'll see that this is not yet installed",
          "tokens": [
            50604,
            445,
            2010,
            294,
            38797,
            8240,
            8240,
            3037,
            293,
            881,
            3700,
            291,
            603,
            536,
            300,
            341,
            307,
            406,
            1939,
            8899,
            50908
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06524587751508833,
          "compression_ratio": 1.7703703703703704,
          "no_speech_prob": 0.029589638113975525,
          "confidence": 0.9704103618860245
        },
        {
          "id": 73,
          "start": 390.96,
          "end": 396.32,
          "text": "and get this Python is not recognized error. So to install this we can just open up an internet",
          "tokens": [
            50908,
            293,
            483,
            341,
            15329,
            307,
            406,
            9823,
            6713,
            13,
            407,
            281,
            3625,
            341,
            321,
            393,
            445,
            1269,
            493,
            364,
            4705,
            51176
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06524587751508833,
          "compression_ratio": 1.7703703703703704,
          "no_speech_prob": 0.029589638113975525,
          "confidence": 0.9704103618860245
        }
      ],
      "duration": 27.159999999999968
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 391.32,
      "end_time": 417.67999999999995,
      "text": "and get this Python is not recognized error. So to install this we can just open up an internet browser and go to the Python website which is python.org and from here we can click on downloads and from this page you can see that it's already detected that we are on Windows and has offered up either Python 3 or Python 2. Now if you're learning Python then you're definitely going to go want to go with Python 3 unless you have a really good reason to do otherwise. So let's go",
      "original_segments": [
        {
          "id": 74,
          "start": 396.32,
          "end": 402.96,
          "text": "browser and go to the Python website which is python.org and from here we can click on downloads",
          "tokens": [
            51176,
            11185,
            293,
            352,
            281,
            264,
            15329,
            3144,
            597,
            307,
            38797,
            13,
            4646,
            293,
            490,
            510,
            321,
            393,
            2052,
            322,
            36553,
            51508
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06524587751508833,
          "compression_ratio": 1.7703703703703704,
          "no_speech_prob": 0.029589638113975525,
          "confidence": 0.9704103618860245
        },
        {
          "id": 75,
          "start": 403.52,
          "end": 408.4,
          "text": "and from this page you can see that it's already detected that we are on Windows and has offered",
          "tokens": [
            51536,
            293,
            490,
            341,
            3028,
            291,
            393,
            536,
            300,
            309,
            311,
            1217,
            21896,
            300,
            321,
            366,
            322,
            8591,
            293,
            575,
            8059,
            51780
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06524587751508833,
          "compression_ratio": 1.7703703703703704,
          "no_speech_prob": 0.029589638113975525,
          "confidence": 0.9704103618860245
        },
        {
          "id": 76,
          "start": 408.4,
          "end": 412.96,
          "text": "up either Python 3 or Python 2. Now if you're learning Python then you're definitely going",
          "tokens": [
            50364,
            493,
            2139,
            15329,
            805,
            420,
            15329,
            568,
            13,
            823,
            498,
            291,
            434,
            2539,
            15329,
            550,
            291,
            434,
            2138,
            516,
            50592
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06344215453617157,
          "compression_ratio": 1.975206611570248,
          "no_speech_prob": 0.024491557851433754,
          "confidence": 0.9755084421485662
        },
        {
          "id": 77,
          "start": 412.96,
          "end": 417.67999999999995,
          "text": "to go want to go with Python 3 unless you have a really good reason to do otherwise. So let's go",
          "tokens": [
            50592,
            281,
            352,
            528,
            281,
            352,
            365,
            15329,
            805,
            5969,
            291,
            362,
            257,
            534,
            665,
            1778,
            281,
            360,
            5911,
            13,
            407,
            718,
            311,
            352,
            50828
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06344215453617157,
          "compression_ratio": 1.975206611570248,
          "no_speech_prob": 0.024491557851433754,
          "confidence": 0.9755084421485662
        }
      ],
      "duration": 26.359999999999957
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 412.67999999999995,
      "end_time": 441.59999999999997,
      "text": "up either Python 3 or Python 2. Now if you're learning Python then you're definitely going to go want to go with Python 3 unless you have a really good reason to do otherwise. So let's go ahead and go with this download of Python 3.6. So let's go ahead and run this download and we should get this pop-up so I'm going to go ahead and run that. Now this is an important step here one thing that you're going to want to do is click this option to add Python 3.6 to your path. This will allow us to get by without going into the advanced system settings and setting this path",
      "original_segments": [
        {
          "id": 78,
          "start": 417.67999999999995,
          "end": 425.03999999999996,
          "text": "ahead and go with this download of Python 3.6. So let's go ahead and run this download and we",
          "tokens": [
            50828,
            2286,
            293,
            352,
            365,
            341,
            5484,
            295,
            15329,
            805,
            13,
            21,
            13,
            407,
            718,
            311,
            352,
            2286,
            293,
            1190,
            341,
            5484,
            293,
            321,
            51196
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06344215453617157,
          "compression_ratio": 1.975206611570248,
          "no_speech_prob": 0.024491557851433754,
          "confidence": 0.9755084421485662
        },
        {
          "id": 79,
          "start": 425.03999999999996,
          "end": 429.59999999999997,
          "text": "should get this pop-up so I'm going to go ahead and run that. Now this is an important step here",
          "tokens": [
            51196,
            820,
            483,
            341,
            1665,
            12,
            1010,
            370,
            286,
            478,
            516,
            281,
            352,
            2286,
            293,
            1190,
            300,
            13,
            823,
            341,
            307,
            364,
            1021,
            1823,
            510,
            51424
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06344215453617157,
          "compression_ratio": 1.975206611570248,
          "no_speech_prob": 0.024491557851433754,
          "confidence": 0.9755084421485662
        },
        {
          "id": 80,
          "start": 429.59999999999997,
          "end": 435.84,
          "text": "one thing that you're going to want to do is click this option to add Python 3.6 to your path. This",
          "tokens": [
            51424,
            472,
            551,
            300,
            291,
            434,
            516,
            281,
            528,
            281,
            360,
            307,
            2052,
            341,
            3614,
            281,
            909,
            15329,
            805,
            13,
            21,
            281,
            428,
            3100,
            13,
            639,
            51736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06344215453617157,
          "compression_ratio": 1.975206611570248,
          "no_speech_prob": 0.024491557851433754,
          "confidence": 0.9755084421485662
        },
        {
          "id": 81,
          "start": 435.84,
          "end": 441.59999999999997,
          "text": "will allow us to get by without going into the advanced system settings and setting this path",
          "tokens": [
            50364,
            486,
            2089,
            505,
            281,
            483,
            538,
            1553,
            516,
            666,
            264,
            7339,
            1185,
            6257,
            293,
            3287,
            341,
            3100,
            50652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05543114838090915,
          "compression_ratio": 1.8543307086614174,
          "no_speech_prob": 0.00482999999076128,
          "confidence": 0.9951700000092387
        }
      ],
      "duration": 28.920000000000016
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 436.59999999999997,
      "end_time": 464.08,
      "text": "will allow us to get by without going into the advanced system settings and setting this path manually and adding that to your path will allow the Python command to work within the command prompt. So with that selected now let's go ahead and just click through this installation and it says that setup was successful. So now that Python is installed let's come down here to our command prompt and open it back up actually let's close this one down and start from scratch.",
      "original_segments": [
        {
          "id": 82,
          "start": 441.59999999999997,
          "end": 446.15999999999997,
          "text": "manually and adding that to your path will allow the Python command to work within the command",
          "tokens": [
            50652,
            16945,
            293,
            5127,
            300,
            281,
            428,
            3100,
            486,
            2089,
            264,
            15329,
            5622,
            281,
            589,
            1951,
            264,
            5622,
            50880
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05543114838090915,
          "compression_ratio": 1.8543307086614174,
          "no_speech_prob": 0.00482999999076128,
          "confidence": 0.9951700000092387
        },
        {
          "id": 83,
          "start": 446.15999999999997,
          "end": 450.79999999999995,
          "text": "prompt. So with that selected now let's go ahead and just click through this installation",
          "tokens": [
            50880,
            12391,
            13,
            407,
            365,
            300,
            8209,
            586,
            718,
            311,
            352,
            2286,
            293,
            445,
            2052,
            807,
            341,
            13260,
            51112
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05543114838090915,
          "compression_ratio": 1.8543307086614174,
          "no_speech_prob": 0.00482999999076128,
          "confidence": 0.9951700000092387
        },
        {
          "id": 84,
          "start": 453.44,
          "end": 458.55999999999995,
          "text": "and it says that setup was successful. So now that Python is installed let's come down here",
          "tokens": [
            51244,
            293,
            309,
            1619,
            300,
            8657,
            390,
            4406,
            13,
            407,
            586,
            300,
            15329,
            307,
            8899,
            718,
            311,
            808,
            760,
            510,
            51500
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05543114838090915,
          "compression_ratio": 1.8543307086614174,
          "no_speech_prob": 0.00482999999076128,
          "confidence": 0.9951700000092387
        },
        {
          "id": 85,
          "start": 458.55999999999995,
          "end": 464.08,
          "text": "to our command prompt and open it back up actually let's close this one down and start from scratch.",
          "tokens": [
            51500,
            281,
            527,
            5622,
            12391,
            293,
            1269,
            309,
            646,
            493,
            767,
            718,
            311,
            1998,
            341,
            472,
            760,
            293,
            722,
            490,
            8459,
            13,
            51776
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05543114838090915,
          "compression_ratio": 1.8543307086614174,
          "no_speech_prob": 0.00482999999076128,
          "confidence": 0.9951700000092387
        }
      ],
      "duration": 27.480000000000018
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 459.08,
      "end_time": 486.64,
      "text": "to our command prompt and open it back up actually let's close this one down and start from scratch. So we'll open this back up type in cmd and open up that command prompt again and now we can make sure that that installed by typing in Python and then dash dash version. You can see here that it says that we're working with Python 3.6 so that's good. Now if we come down here and click on start and all programs then we'll see that we have this Python 3.6 folder here that was installed with",
      "original_segments": [
        {
          "id": 86,
          "start": 464.08,
          "end": 469.52,
          "text": "So we'll open this back up type in cmd and open up that command prompt again and now we can make",
          "tokens": [
            50364,
            407,
            321,
            603,
            1269,
            341,
            646,
            493,
            2010,
            294,
            14668,
            67,
            293,
            1269,
            493,
            300,
            5622,
            12391,
            797,
            293,
            586,
            321,
            393,
            652,
            50636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.050615969712172096,
          "compression_ratio": 1.8740458015267176,
          "no_speech_prob": 0.0012015338288620114,
          "confidence": 0.998798466171138
        },
        {
          "id": 87,
          "start": 469.52,
          "end": 475.35999999999996,
          "text": "sure that that installed by typing in Python and then dash dash version. You can see here that it",
          "tokens": [
            50636,
            988,
            300,
            300,
            8899,
            538,
            18444,
            294,
            15329,
            293,
            550,
            8240,
            8240,
            3037,
            13,
            509,
            393,
            536,
            510,
            300,
            309,
            50928
          ],
          "temperature": 0.0,
          "avg_logprob": -0.050615969712172096,
          "compression_ratio": 1.8740458015267176,
          "no_speech_prob": 0.0012015338288620114,
          "confidence": 0.998798466171138
        },
        {
          "id": 88,
          "start": 475.35999999999996,
          "end": 481.36,
          "text": "says that we're working with Python 3.6 so that's good. Now if we come down here and click on start",
          "tokens": [
            50928,
            1619,
            300,
            321,
            434,
            1364,
            365,
            15329,
            805,
            13,
            21,
            370,
            300,
            311,
            665,
            13,
            823,
            498,
            321,
            808,
            760,
            510,
            293,
            2052,
            322,
            722,
            51228
          ],
          "temperature": 0.0,
          "avg_logprob": -0.050615969712172096,
          "compression_ratio": 1.8740458015267176,
          "no_speech_prob": 0.0012015338288620114,
          "confidence": 0.998798466171138
        },
        {
          "id": 89,
          "start": 481.36,
          "end": 486.64,
          "text": "and all programs then we'll see that we have this Python 3.6 folder here that was installed with",
          "tokens": [
            51228,
            293,
            439,
            4268,
            550,
            321,
            603,
            536,
            300,
            321,
            362,
            341,
            15329,
            805,
            13,
            21,
            10820,
            510,
            300,
            390,
            8899,
            365,
            51492
          ],
          "temperature": 0.0,
          "avg_logprob": -0.050615969712172096,
          "compression_ratio": 1.8740458015267176,
          "no_speech_prob": 0.0012015338288620114,
          "confidence": 0.998798466171138
        }
      ],
      "duration": 27.560000000000002
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 481.64,
      "end_time": 509.03999999999996,
      "text": "and all programs then we'll see that we have this Python 3.6 folder here that was installed with Python. Within this folder we can see that we have a program called idle and I'm going to come back to this idle program in just a second so when I mention this program then just remember that you can find it here within this Python 3.6 folder. So that is how we install Python for Windows. Now I'm going to switch back to my native operating system on the Mac but from this point on Python",
      "original_segments": [
        {
          "id": 90,
          "start": 486.64,
          "end": 492.64,
          "text": "Python. Within this folder we can see that we have a program called idle and I'm going to come back",
          "tokens": [
            51492,
            15329,
            13,
            15996,
            341,
            10820,
            321,
            393,
            536,
            300,
            321,
            362,
            257,
            1461,
            1219,
            30650,
            293,
            286,
            478,
            516,
            281,
            808,
            646,
            51792
          ],
          "temperature": 0.0,
          "avg_logprob": -0.050615969712172096,
          "compression_ratio": 1.8740458015267176,
          "no_speech_prob": 0.0012015338288620114,
          "confidence": 0.998798466171138
        },
        {
          "id": 91,
          "start": 492.64,
          "end": 497.03999999999996,
          "text": "to this idle program in just a second so when I mention this program then just remember that",
          "tokens": [
            50364,
            281,
            341,
            30650,
            1461,
            294,
            445,
            257,
            1150,
            370,
            562,
            286,
            2152,
            341,
            1461,
            550,
            445,
            1604,
            300,
            50584
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05396930031154467,
          "compression_ratio": 1.7592592592592593,
          "no_speech_prob": 0.00026680112932808697,
          "confidence": 0.9997331988706719
        },
        {
          "id": 92,
          "start": 497.03999999999996,
          "end": 503.12,
          "text": "you can find it here within this Python 3.6 folder. So that is how we install Python for Windows. Now",
          "tokens": [
            50584,
            291,
            393,
            915,
            309,
            510,
            1951,
            341,
            15329,
            805,
            13,
            21,
            10820,
            13,
            407,
            300,
            307,
            577,
            321,
            3625,
            15329,
            337,
            8591,
            13,
            823,
            50888
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05396930031154467,
          "compression_ratio": 1.7592592592592593,
          "no_speech_prob": 0.00026680112932808697,
          "confidence": 0.9997331988706719
        },
        {
          "id": 93,
          "start": 503.12,
          "end": 509.03999999999996,
          "text": "I'm going to switch back to my native operating system on the Mac but from this point on Python",
          "tokens": [
            50888,
            286,
            478,
            516,
            281,
            3679,
            646,
            281,
            452,
            8470,
            7447,
            1185,
            322,
            264,
            5707,
            457,
            490,
            341,
            935,
            322,
            15329,
            51184
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05396930031154467,
          "compression_ratio": 1.7592592592592593,
          "no_speech_prob": 0.00026680112932808697,
          "confidence": 0.9997331988706719
        }
      ],
      "duration": 27.399999999999977
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 504.03999999999996,
      "end_time": 529.5200000000001,
      "text": "I'm going to switch back to my native operating system on the Mac but from this point on Python is going to work the same for both operating systems so everyone is going to be able to follow along. Okay so now I'm just going to go ahead and minimize that. Okay so now that we have Python installed now we can begin and go ahead and write our first bit of code by opening up either our terminal or our command prompt and I'll just close this installation window down in the",
      "original_segments": [
        {
          "id": 94,
          "start": 509.03999999999996,
          "end": 512.8,
          "text": "is going to work the same for both operating systems so everyone is going to be able to",
          "tokens": [
            51184,
            307,
            516,
            281,
            589,
            264,
            912,
            337,
            1293,
            7447,
            3652,
            370,
            1518,
            307,
            516,
            281,
            312,
            1075,
            281,
            51372
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05396930031154467,
          "compression_ratio": 1.7592592592592593,
          "no_speech_prob": 0.00026680112932808697,
          "confidence": 0.9997331988706719
        },
        {
          "id": 95,
          "start": 512.8,
          "end": 518.3199999999999,
          "text": "follow along. Okay so now I'm just going to go ahead and minimize that. Okay so now that we have",
          "tokens": [
            51372,
            1524,
            2051,
            13,
            1033,
            370,
            586,
            286,
            478,
            445,
            516,
            281,
            352,
            2286,
            293,
            17522,
            300,
            13,
            1033,
            370,
            586,
            300,
            321,
            362,
            51648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05396930031154467,
          "compression_ratio": 1.7592592592592593,
          "no_speech_prob": 0.00026680112932808697,
          "confidence": 0.9997331988706719
        },
        {
          "id": 96,
          "start": 518.32,
          "end": 524.48,
          "text": "Python installed now we can begin and go ahead and write our first bit of code by opening up",
          "tokens": [
            50364,
            15329,
            8899,
            586,
            321,
            393,
            1841,
            293,
            352,
            2286,
            293,
            2464,
            527,
            700,
            857,
            295,
            3089,
            538,
            5193,
            493,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0532430115096066,
          "compression_ratio": 1.816793893129771,
          "no_speech_prob": 0.1641923040151596,
          "confidence": 0.8358076959848404
        },
        {
          "id": 97,
          "start": 524.48,
          "end": 529.5200000000001,
          "text": "either our terminal or our command prompt and I'll just close this installation window down in the",
          "tokens": [
            50672,
            2139,
            527,
            14709,
            420,
            527,
            5622,
            12391,
            293,
            286,
            603,
            445,
            1998,
            341,
            13260,
            4910,
            760,
            294,
            264,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0532430115096066,
          "compression_ratio": 1.816793893129771,
          "no_speech_prob": 0.1641923040151596,
          "confidence": 0.8358076959848404
        }
      ],
      "duration": 25.480000000000132
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 524.5200000000001,
      "end_time": 546.72,
      "text": "either our terminal or our command prompt and I'll just close this installation window down in the back here and center this. Okay so now within the terminal or command prompt if we just type in Python then this will open what's called an interactive prompt and we can see that it shows that we're using Python 3.6. Now the interactive prompt allows us to write one line of Python at",
      "original_segments": [
        {
          "id": 98,
          "start": 529.5200000000001,
          "end": 534.88,
          "text": "back here and center this. Okay so now within the terminal or command prompt if we just type in",
          "tokens": [
            50924,
            646,
            510,
            293,
            3056,
            341,
            13,
            1033,
            370,
            586,
            1951,
            264,
            14709,
            420,
            5622,
            12391,
            498,
            321,
            445,
            2010,
            294,
            51192
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0532430115096066,
          "compression_ratio": 1.816793893129771,
          "no_speech_prob": 0.1641923040151596,
          "confidence": 0.8358076959848404
        },
        {
          "id": 99,
          "start": 534.88,
          "end": 540.32,
          "text": "Python then this will open what's called an interactive prompt and we can see that it shows",
          "tokens": [
            51192,
            15329,
            550,
            341,
            486,
            1269,
            437,
            311,
            1219,
            364,
            15141,
            12391,
            293,
            321,
            393,
            536,
            300,
            309,
            3110,
            51464
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0532430115096066,
          "compression_ratio": 1.816793893129771,
          "no_speech_prob": 0.1641923040151596,
          "confidence": 0.8358076959848404
        },
        {
          "id": 100,
          "start": 540.32,
          "end": 546.72,
          "text": "that we're using Python 3.6. Now the interactive prompt allows us to write one line of Python at",
          "tokens": [
            51464,
            300,
            321,
            434,
            1228,
            15329,
            805,
            13,
            21,
            13,
            823,
            264,
            15141,
            12391,
            4045,
            505,
            281,
            2464,
            472,
            1622,
            295,
            15329,
            412,
            51784
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0532430115096066,
          "compression_ratio": 1.816793893129771,
          "no_speech_prob": 0.1641923040151596,
          "confidence": 0.8358076959848404
        }
      ],
      "duration": 22.199999999999932
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 541.72,
      "end_time": 568.5600000000001,
      "text": "that we're using Python 3.6. Now the interactive prompt allows us to write one line of Python at a time so for example for a hello world application then we could simply write print hello world and we can see that it prints that out and we can also set variables so I could say x is equal to equal to 10 and if I print out x then we can see that we get 10. Now this interactive prompt is",
      "original_segments": [
        {
          "id": 101,
          "start": 546.72,
          "end": 555.0400000000001,
          "text": "a time so for example for a hello world application then we could simply write print hello world and",
          "tokens": [
            50364,
            257,
            565,
            370,
            337,
            1365,
            337,
            257,
            7751,
            1002,
            3861,
            550,
            321,
            727,
            2935,
            2464,
            4482,
            7751,
            1002,
            293,
            50780
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06845811657283617,
          "compression_ratio": 1.7813953488372094,
          "no_speech_prob": 0.0029261333402246237,
          "confidence": 0.9970738666597754
        },
        {
          "id": 102,
          "start": 555.0400000000001,
          "end": 560.48,
          "text": "we can see that it prints that out and we can also set variables so I could say x is equal to",
          "tokens": [
            50780,
            321,
            393,
            536,
            300,
            309,
            22305,
            300,
            484,
            293,
            321,
            393,
            611,
            992,
            9102,
            370,
            286,
            727,
            584,
            2031,
            307,
            2681,
            281,
            51052
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06845811657283617,
          "compression_ratio": 1.7813953488372094,
          "no_speech_prob": 0.0029261333402246237,
          "confidence": 0.9970738666597754
        },
        {
          "id": 103,
          "start": 561.44,
          "end": 568.5600000000001,
          "text": "equal to 10 and if I print out x then we can see that we get 10. Now this interactive prompt is",
          "tokens": [
            51100,
            2681,
            281,
            1266,
            293,
            498,
            286,
            4482,
            484,
            2031,
            550,
            321,
            393,
            536,
            300,
            321,
            483,
            1266,
            13,
            823,
            341,
            15141,
            12391,
            307,
            51456
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06845811657283617,
          "compression_ratio": 1.7813953488372094,
          "no_speech_prob": 0.0029261333402246237,
          "confidence": 0.9970738666597754
        }
      ],
      "duration": 26.840000000000032
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 563.5600000000001,
      "end_time": 590.8,
      "text": "equal to 10 and if I print out x then we can see that we get 10. Now this interactive prompt is okay for testing Python commands but we really want to have a Python file where we can write multiple lines and run an entire script so let's exit this interactive prompt and we can do that by typing exit and then opening close parentheses. So to create a Python file we're going to need some kind of plain text editor. When we downloaded Python it came with an editor called idle so let's",
      "original_segments": [
        {
          "id": 104,
          "start": 568.5600000000001,
          "end": 573.28,
          "text": "okay for testing Python commands but we really want to have a Python file where we can write",
          "tokens": [
            51456,
            1392,
            337,
            4997,
            15329,
            16901,
            457,
            321,
            534,
            528,
            281,
            362,
            257,
            15329,
            3991,
            689,
            321,
            393,
            2464,
            51692
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06845811657283617,
          "compression_ratio": 1.7813953488372094,
          "no_speech_prob": 0.0029261333402246237,
          "confidence": 0.9970738666597754
        },
        {
          "id": 105,
          "start": 573.28,
          "end": 578.48,
          "text": "multiple lines and run an entire script so let's exit this interactive prompt and we can do that",
          "tokens": [
            50364,
            3866,
            3876,
            293,
            1190,
            364,
            2302,
            5755,
            370,
            718,
            311,
            11043,
            341,
            15141,
            12391,
            293,
            321,
            393,
            360,
            300,
            50624
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06307271459828252,
          "compression_ratio": 1.6979166666666667,
          "no_speech_prob": 0.2587426006793976,
          "confidence": 0.7412573993206024
        },
        {
          "id": 106,
          "start": 578.48,
          "end": 584.56,
          "text": "by typing exit and then opening close parentheses. So to create a Python file we're going to need",
          "tokens": [
            50624,
            538,
            18444,
            11043,
            293,
            550,
            5193,
            1998,
            34153,
            13,
            407,
            281,
            1884,
            257,
            15329,
            3991,
            321,
            434,
            516,
            281,
            643,
            50928
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06307271459828252,
          "compression_ratio": 1.6979166666666667,
          "no_speech_prob": 0.2587426006793976,
          "confidence": 0.7412573993206024
        },
        {
          "id": 107,
          "start": 584.56,
          "end": 590.8,
          "text": "some kind of plain text editor. When we downloaded Python it came with an editor called idle so let's",
          "tokens": [
            50928,
            512,
            733,
            295,
            11121,
            2487,
            9839,
            13,
            1133,
            321,
            21748,
            15329,
            309,
            1361,
            365,
            364,
            9839,
            1219,
            30650,
            370,
            718,
            311,
            51240
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06307271459828252,
          "compression_ratio": 1.6979166666666667,
          "no_speech_prob": 0.2587426006793976,
          "confidence": 0.7412573993206024
        }
      ],
      "duration": 27.239999999999895
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 585.8,
      "end_time": 614.0,
      "text": "some kind of plain text editor. When we downloaded Python it came with an editor called idle so let's open up that idle program so again on Windows that's in the Python 3.6 folder that we opened up earlier and on the Mac it's just down here in our applications and we can go ahead and open this up. So I'm going to go ahead and make the font a little bit bigger here by going to my preferences just so that everyone can see and I'll bump this up to 18 or so okay I think that's good. Now by",
      "original_segments": [
        {
          "id": 108,
          "start": 590.8,
          "end": 597.04,
          "text": "open up that idle program so again on Windows that's in the Python 3.6 folder that we opened",
          "tokens": [
            51240,
            1269,
            493,
            300,
            30650,
            1461,
            370,
            797,
            322,
            8591,
            300,
            311,
            294,
            264,
            15329,
            805,
            13,
            21,
            10820,
            300,
            321,
            5625,
            51552
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06307271459828252,
          "compression_ratio": 1.6979166666666667,
          "no_speech_prob": 0.2587426006793976,
          "confidence": 0.7412573993206024
        },
        {
          "id": 109,
          "start": 597.04,
          "end": 602.64,
          "text": "up earlier and on the Mac it's just down here in our applications and we can go ahead and open this",
          "tokens": [
            51552,
            493,
            3071,
            293,
            322,
            264,
            5707,
            309,
            311,
            445,
            760,
            510,
            294,
            527,
            5821,
            293,
            321,
            393,
            352,
            2286,
            293,
            1269,
            341,
            51832
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06307271459828252,
          "compression_ratio": 1.6979166666666667,
          "no_speech_prob": 0.2587426006793976,
          "confidence": 0.7412573993206024
        },
        {
          "id": 110,
          "start": 602.64,
          "end": 608.08,
          "text": "up. So I'm going to go ahead and make the font a little bit bigger here by going to my preferences",
          "tokens": [
            50364,
            493,
            13,
            407,
            286,
            478,
            516,
            281,
            352,
            2286,
            293,
            652,
            264,
            10703,
            257,
            707,
            857,
            3801,
            510,
            538,
            516,
            281,
            452,
            21910,
            50636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04576846587756449,
          "compression_ratio": 1.7314487632508835,
          "no_speech_prob": 0.000518626649864018,
          "confidence": 0.999481373350136
        },
        {
          "id": 111,
          "start": 608.08,
          "end": 614.0,
          "text": "just so that everyone can see and I'll bump this up to 18 or so okay I think that's good. Now by",
          "tokens": [
            50636,
            445,
            370,
            300,
            1518,
            393,
            536,
            293,
            286,
            603,
            9961,
            341,
            493,
            281,
            2443,
            420,
            370,
            1392,
            286,
            519,
            300,
            311,
            665,
            13,
            823,
            538,
            50932
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04576846587756449,
          "compression_ratio": 1.7314487632508835,
          "no_speech_prob": 0.000518626649864018,
          "confidence": 0.999481373350136
        }
      ],
      "duration": 28.200000000000045
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 609.0,
      "end_time": 637.12,
      "text": "just so that everyone can see and I'll bump this up to 18 or so okay I think that's good. Now by default when we open up idle this is just another interactive prompt where we can write one line at a time and you can usually tell when you're at an interactive prompt because of these three arrows here. So to create an actual file we can click on file and new file. Now this will create a new file where we can write multiple lines of Python and actually make a script. So for our first script",
      "original_segments": [
        {
          "id": 112,
          "start": 614.0,
          "end": 619.04,
          "text": "default when we open up idle this is just another interactive prompt where we can write one line at",
          "tokens": [
            50932,
            7576,
            562,
            321,
            1269,
            493,
            30650,
            341,
            307,
            445,
            1071,
            15141,
            12391,
            689,
            321,
            393,
            2464,
            472,
            1622,
            412,
            51184
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04576846587756449,
          "compression_ratio": 1.7314487632508835,
          "no_speech_prob": 0.000518626649864018,
          "confidence": 0.999481373350136
        },
        {
          "id": 113,
          "start": 619.04,
          "end": 623.92,
          "text": "a time and you can usually tell when you're at an interactive prompt because of these three arrows",
          "tokens": [
            51184,
            257,
            565,
            293,
            291,
            393,
            2673,
            980,
            562,
            291,
            434,
            412,
            364,
            15141,
            12391,
            570,
            295,
            613,
            1045,
            19669,
            51428
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04576846587756449,
          "compression_ratio": 1.7314487632508835,
          "no_speech_prob": 0.000518626649864018,
          "confidence": 0.999481373350136
        },
        {
          "id": 114,
          "start": 623.92,
          "end": 631.76,
          "text": "here. So to create an actual file we can click on file and new file. Now this will create a new",
          "tokens": [
            51428,
            510,
            13,
            407,
            281,
            1884,
            364,
            3539,
            3991,
            321,
            393,
            2052,
            322,
            3991,
            293,
            777,
            3991,
            13,
            823,
            341,
            486,
            1884,
            257,
            777,
            51820
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04576846587756449,
          "compression_ratio": 1.7314487632508835,
          "no_speech_prob": 0.000518626649864018,
          "confidence": 0.999481373350136
        },
        {
          "id": 115,
          "start": 631.76,
          "end": 637.12,
          "text": "file where we can write multiple lines of Python and actually make a script. So for our first script",
          "tokens": [
            50364,
            3991,
            689,
            321,
            393,
            2464,
            3866,
            3876,
            295,
            15329,
            293,
            767,
            652,
            257,
            5755,
            13,
            407,
            337,
            527,
            700,
            5755,
            50632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03563233490647941,
          "compression_ratio": 1.8587786259541985,
          "no_speech_prob": 0.0011489945463836193,
          "confidence": 0.9988510054536164
        }
      ],
      "duration": 28.120000000000005
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 632.12,
      "end_time": 660.24,
      "text": "file where we can write multiple lines of Python and actually make a script. So for our first script let's just print out hello world like we did before. We can do that by calling the print function and then these opening and closing parentheses and then either single or double quotes and then typing in hello world. Now we're going to want to save this file so we can save this by clicking on file and then save and I'm going to call this intro.py and I'm just going to save this to my",
      "original_segments": [
        {
          "id": 116,
          "start": 637.12,
          "end": 642.0,
          "text": "let's just print out hello world like we did before. We can do that by calling the print function",
          "tokens": [
            50632,
            718,
            311,
            445,
            4482,
            484,
            7751,
            1002,
            411,
            321,
            630,
            949,
            13,
            492,
            393,
            360,
            300,
            538,
            5141,
            264,
            4482,
            2445,
            50876
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03563233490647941,
          "compression_ratio": 1.8587786259541985,
          "no_speech_prob": 0.0011489945463836193,
          "confidence": 0.9988510054536164
        },
        {
          "id": 117,
          "start": 642.0,
          "end": 646.96,
          "text": "and then these opening and closing parentheses and then either single or double quotes and then",
          "tokens": [
            50876,
            293,
            550,
            613,
            5193,
            293,
            10377,
            34153,
            293,
            550,
            2139,
            2167,
            420,
            3834,
            19963,
            293,
            550,
            51124
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03563233490647941,
          "compression_ratio": 1.8587786259541985,
          "no_speech_prob": 0.0011489945463836193,
          "confidence": 0.9988510054536164
        },
        {
          "id": 118,
          "start": 646.96,
          "end": 652.16,
          "text": "typing in hello world. Now we're going to want to save this file so we can save this by clicking",
          "tokens": [
            51124,
            18444,
            294,
            7751,
            1002,
            13,
            823,
            321,
            434,
            516,
            281,
            528,
            281,
            3155,
            341,
            3991,
            370,
            321,
            393,
            3155,
            341,
            538,
            9697,
            51384
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03563233490647941,
          "compression_ratio": 1.8587786259541985,
          "no_speech_prob": 0.0011489945463836193,
          "confidence": 0.9988510054536164
        },
        {
          "id": 119,
          "start": 652.16,
          "end": 660.24,
          "text": "on file and then save and I'm going to call this intro.py and I'm just going to save this to my",
          "tokens": [
            51384,
            322,
            3991,
            293,
            550,
            3155,
            293,
            286,
            478,
            516,
            281,
            818,
            341,
            12897,
            13,
            8200,
            293,
            286,
            478,
            445,
            516,
            281,
            3155,
            341,
            281,
            452,
            51788
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03563233490647941,
          "compression_ratio": 1.8587786259541985,
          "no_speech_prob": 0.0011489945463836193,
          "confidence": 0.9988510054536164
        }
      ],
      "duration": 28.120000000000005
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 655.24,
      "end_time": 683.76,
      "text": "on file and then save and I'm going to call this intro.py and I'm just going to save this to my desktop. So now I'll go ahead and save that. So now to run the Python file that we just created we can go back to our terminal or our command prompt and from here we can type in Python and then we want to type in the name of the file that we want to run. Now this is relative to the directory that we're currently in so if we're in our home folder and you saved it to your desktop then that",
      "original_segments": [
        {
          "id": 120,
          "start": 660.24,
          "end": 666.5600000000001,
          "text": "desktop. So now I'll go ahead and save that. So now to run the Python file that we just created",
          "tokens": [
            50364,
            14502,
            13,
            407,
            586,
            286,
            603,
            352,
            2286,
            293,
            3155,
            300,
            13,
            407,
            586,
            281,
            1190,
            264,
            15329,
            3991,
            300,
            321,
            445,
            2942,
            50680
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04063026809692383,
          "compression_ratio": 1.9058823529411764,
          "no_speech_prob": 0.0005488846800290048,
          "confidence": 0.999451115319971
        },
        {
          "id": 121,
          "start": 666.5600000000001,
          "end": 672.96,
          "text": "we can go back to our terminal or our command prompt and from here we can type in Python and",
          "tokens": [
            50680,
            321,
            393,
            352,
            646,
            281,
            527,
            14709,
            420,
            527,
            5622,
            12391,
            293,
            490,
            510,
            321,
            393,
            2010,
            294,
            15329,
            293,
            51000
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04063026809692383,
          "compression_ratio": 1.9058823529411764,
          "no_speech_prob": 0.0005488846800290048,
          "confidence": 0.999451115319971
        },
        {
          "id": 122,
          "start": 672.96,
          "end": 678.16,
          "text": "then we want to type in the name of the file that we want to run. Now this is relative to the directory",
          "tokens": [
            51000,
            550,
            321,
            528,
            281,
            2010,
            294,
            264,
            1315,
            295,
            264,
            3991,
            300,
            321,
            528,
            281,
            1190,
            13,
            823,
            341,
            307,
            4972,
            281,
            264,
            21120,
            51260
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04063026809692383,
          "compression_ratio": 1.9058823529411764,
          "no_speech_prob": 0.0005488846800290048,
          "confidence": 0.999451115319971
        },
        {
          "id": 123,
          "start": 678.16,
          "end": 683.76,
          "text": "that we're currently in so if we're in our home folder and you saved it to your desktop then that",
          "tokens": [
            51260,
            300,
            321,
            434,
            4362,
            294,
            370,
            498,
            321,
            434,
            294,
            527,
            1280,
            10820,
            293,
            291,
            6624,
            309,
            281,
            428,
            14502,
            550,
            300,
            51540
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04063026809692383,
          "compression_ratio": 1.9058823529411764,
          "no_speech_prob": 0.0005488846800290048,
          "confidence": 0.999451115319971
        }
      ],
      "duration": 28.519999999999982
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 678.76,
      "end_time": 706.24,
      "text": "that we're currently in so if we're in our home folder and you saved it to your desktop then that should be in desktop and then the name of that file is intro.py. So if we run that then you can see that it printed out hello world. So we just ran our first Python program. Now I still have this Python file up over here and real quick let me show you how to do a single inline comment in Python because I'll be using these inline comments throughout these tutorials and don't want them",
      "original_segments": [
        {
          "id": 124,
          "start": 683.76,
          "end": 690.0,
          "text": "should be in desktop and then the name of that file is intro.py. So if we run that then you can",
          "tokens": [
            51540,
            820,
            312,
            294,
            14502,
            293,
            550,
            264,
            1315,
            295,
            300,
            3991,
            307,
            12897,
            13,
            8200,
            13,
            407,
            498,
            321,
            1190,
            300,
            550,
            291,
            393,
            51852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04063026809692383,
          "compression_ratio": 1.9058823529411764,
          "no_speech_prob": 0.0005488846800290048,
          "confidence": 0.999451115319971
        },
        {
          "id": 125,
          "start": 690.0,
          "end": 695.92,
          "text": "see that it printed out hello world. So we just ran our first Python program. Now I still have this",
          "tokens": [
            50364,
            536,
            300,
            309,
            13567,
            484,
            7751,
            1002,
            13,
            407,
            321,
            445,
            5872,
            527,
            700,
            15329,
            1461,
            13,
            823,
            286,
            920,
            362,
            341,
            50660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038928643862406416,
          "compression_ratio": 1.7285714285714286,
          "no_speech_prob": 0.00021249336714390665,
          "confidence": 0.9997875066328561
        },
        {
          "id": 126,
          "start": 695.92,
          "end": 702.24,
          "text": "Python file up over here and real quick let me show you how to do a single inline comment in Python",
          "tokens": [
            50660,
            15329,
            3991,
            493,
            670,
            510,
            293,
            957,
            1702,
            718,
            385,
            855,
            291,
            577,
            281,
            360,
            257,
            2167,
            294,
            1889,
            2871,
            294,
            15329,
            50976
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038928643862406416,
          "compression_ratio": 1.7285714285714286,
          "no_speech_prob": 0.00021249336714390665,
          "confidence": 0.9997875066328561
        },
        {
          "id": 127,
          "start": 702.24,
          "end": 706.24,
          "text": "because I'll be using these inline comments throughout these tutorials and don't want them",
          "tokens": [
            50976,
            570,
            286,
            603,
            312,
            1228,
            613,
            294,
            1889,
            3053,
            3710,
            613,
            17616,
            293,
            500,
            380,
            528,
            552,
            51176
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038928643862406416,
          "compression_ratio": 1.7285714285714286,
          "no_speech_prob": 0.00021249336714390665,
          "confidence": 0.9997875066328561
        }
      ],
      "duration": 27.480000000000018
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 701.24,
      "end_time": 730.4,
      "text": "Python file up over here and real quick let me show you how to do a single inline comment in Python because I'll be using these inline comments throughout these tutorials and don't want them to throw you off. So in my script here if I wanted to write a description of what's going on then I could add a comment and to do this we can just start up here at the top line and I'm going to go ahead and write a comment of what we're doing. So it starts with the pound sign and then our comment so I'll just say print welcome message. Now if I go ahead and save that file and then run",
      "original_segments": [
        {
          "id": 128,
          "start": 706.24,
          "end": 712.08,
          "text": "to throw you off. So in my script here if I wanted to write a description of what's going on then I",
          "tokens": [
            51176,
            281,
            3507,
            291,
            766,
            13,
            407,
            294,
            452,
            5755,
            510,
            498,
            286,
            1415,
            281,
            2464,
            257,
            3855,
            295,
            437,
            311,
            516,
            322,
            550,
            286,
            51468
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038928643862406416,
          "compression_ratio": 1.7285714285714286,
          "no_speech_prob": 0.00021249336714390665,
          "confidence": 0.9997875066328561
        },
        {
          "id": 129,
          "start": 712.08,
          "end": 717.92,
          "text": "could add a comment and to do this we can just start up here at the top line and I'm going to",
          "tokens": [
            51468,
            727,
            909,
            257,
            2871,
            293,
            281,
            360,
            341,
            321,
            393,
            445,
            722,
            493,
            510,
            412,
            264,
            1192,
            1622,
            293,
            286,
            478,
            516,
            281,
            51760
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038928643862406416,
          "compression_ratio": 1.7285714285714286,
          "no_speech_prob": 0.00021249336714390665,
          "confidence": 0.9997875066328561
        },
        {
          "id": 130,
          "start": 717.92,
          "end": 723.12,
          "text": "go ahead and write a comment of what we're doing. So it starts with the pound sign and then our",
          "tokens": [
            50364,
            352,
            2286,
            293,
            2464,
            257,
            2871,
            295,
            437,
            321,
            434,
            884,
            13,
            407,
            309,
            3719,
            365,
            264,
            12013,
            1465,
            293,
            550,
            527,
            50624
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05820804834365845,
          "compression_ratio": 1.7389705882352942,
          "no_speech_prob": 0.01606486737728119,
          "confidence": 0.9839351326227188
        },
        {
          "id": 131,
          "start": 723.12,
          "end": 730.4,
          "text": "comment so I'll just say print welcome message. Now if I go ahead and save that file and then run",
          "tokens": [
            50624,
            2871,
            370,
            286,
            603,
            445,
            584,
            4482,
            2928,
            3636,
            13,
            823,
            498,
            286,
            352,
            2286,
            293,
            3155,
            300,
            3991,
            293,
            550,
            1190,
            50988
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05820804834365845,
          "compression_ratio": 1.7389705882352942,
          "no_speech_prob": 0.01606486737728119,
          "confidence": 0.9839351326227188
        }
      ],
      "duration": 29.159999999999968
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 725.4,
      "end_time": 751.36,
      "text": "comment so I'll just say print welcome message. Now if I go ahead and save that file and then run this again from my desktop then you can see that it didn't do anything to our script it still just prints out hello world. So when we actually run our Python programs these comments are ignored it's only there for the developer and the programmer to actually see what's going on. Now you don't need anything fancy to run these Python scripts so if you wanted to then you could",
      "original_segments": [
        {
          "id": 132,
          "start": 730.4,
          "end": 735.5999999999999,
          "text": "this again from my desktop then you can see that it didn't do anything to our script it still just",
          "tokens": [
            50988,
            341,
            797,
            490,
            452,
            14502,
            550,
            291,
            393,
            536,
            300,
            309,
            994,
            380,
            360,
            1340,
            281,
            527,
            5755,
            309,
            920,
            445,
            51248
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05820804834365845,
          "compression_ratio": 1.7389705882352942,
          "no_speech_prob": 0.01606486737728119,
          "confidence": 0.9839351326227188
        },
        {
          "id": 133,
          "start": 735.5999999999999,
          "end": 741.92,
          "text": "prints out hello world. So when we actually run our Python programs these comments are ignored",
          "tokens": [
            51248,
            22305,
            484,
            7751,
            1002,
            13,
            407,
            562,
            321,
            767,
            1190,
            527,
            15329,
            4268,
            613,
            3053,
            366,
            19735,
            51564
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05820804834365845,
          "compression_ratio": 1.7389705882352942,
          "no_speech_prob": 0.01606486737728119,
          "confidence": 0.9839351326227188
        },
        {
          "id": 134,
          "start": 741.92,
          "end": 746.0,
          "text": "it's only there for the developer and the programmer to actually see what's going on.",
          "tokens": [
            51564,
            309,
            311,
            787,
            456,
            337,
            264,
            10754,
            293,
            264,
            32116,
            281,
            767,
            536,
            437,
            311,
            516,
            322,
            13,
            51768
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05820804834365845,
          "compression_ratio": 1.7389705882352942,
          "no_speech_prob": 0.01606486737728119,
          "confidence": 0.9839351326227188
        },
        {
          "id": 135,
          "start": 746.56,
          "end": 751.36,
          "text": "Now you don't need anything fancy to run these Python scripts so if you wanted to then you could",
          "tokens": [
            50392,
            823,
            291,
            500,
            380,
            643,
            1340,
            10247,
            281,
            1190,
            613,
            15329,
            23294,
            370,
            498,
            291,
            1415,
            281,
            550,
            291,
            727,
            50632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05111028497869318,
          "compression_ratio": 1.7992424242424243,
          "no_speech_prob": 0.0009388217586092651,
          "confidence": 0.9990611782413907
        }
      ],
      "duration": 25.960000000000036
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 746.36,
      "end_time": 772.24,
      "text": "Now you don't need anything fancy to run these Python scripts so if you wanted to then you could follow through all of my videos using this idle application like we have running here and then running the script from the command line but if you plan on doing a lot of Python programming then you'll likely want to upgrade to a better editor. Now you can use any kind of plain text text editor that you want you can even use some command line editors like vim or emacs if you'd",
      "original_segments": [
        {
          "id": 136,
          "start": 751.36,
          "end": 757.2,
          "text": "follow through all of my videos using this idle application like we have running here and then",
          "tokens": [
            50632,
            1524,
            807,
            439,
            295,
            452,
            2145,
            1228,
            341,
            30650,
            3861,
            411,
            321,
            362,
            2614,
            510,
            293,
            550,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05111028497869318,
          "compression_ratio": 1.7992424242424243,
          "no_speech_prob": 0.0009388217586092651,
          "confidence": 0.9990611782413907
        },
        {
          "id": 137,
          "start": 757.2,
          "end": 762.24,
          "text": "running the script from the command line but if you plan on doing a lot of Python programming",
          "tokens": [
            50924,
            2614,
            264,
            5755,
            490,
            264,
            5622,
            1622,
            457,
            498,
            291,
            1393,
            322,
            884,
            257,
            688,
            295,
            15329,
            9410,
            51176
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05111028497869318,
          "compression_ratio": 1.7992424242424243,
          "no_speech_prob": 0.0009388217586092651,
          "confidence": 0.9990611782413907
        },
        {
          "id": 138,
          "start": 762.24,
          "end": 767.04,
          "text": "then you'll likely want to upgrade to a better editor. Now you can use any kind of plain text",
          "tokens": [
            51176,
            550,
            291,
            603,
            3700,
            528,
            281,
            11484,
            281,
            257,
            1101,
            9839,
            13,
            823,
            291,
            393,
            764,
            604,
            733,
            295,
            11121,
            2487,
            51416
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05111028497869318,
          "compression_ratio": 1.7992424242424243,
          "no_speech_prob": 0.0009388217586092651,
          "confidence": 0.9990611782413907
        },
        {
          "id": 139,
          "start": 767.04,
          "end": 772.24,
          "text": "text editor that you want you can even use some command line editors like vim or emacs if you'd",
          "tokens": [
            51416,
            2487,
            9839,
            300,
            291,
            528,
            291,
            393,
            754,
            764,
            512,
            5622,
            1622,
            31446,
            411,
            371,
            332,
            420,
            846,
            44937,
            498,
            291,
            1116,
            51676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05111028497869318,
          "compression_ratio": 1.7992424242424243,
          "no_speech_prob": 0.0009388217586092651,
          "confidence": 0.9990611782413907
        }
      ],
      "duration": 25.879999999999995
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 767.24,
      "end_time": 795.36,
      "text": "text editor that you want you can even use some command line editors like vim or emacs if you'd like. Some of the most popular editors and I have some of these pulled up in the browser here. So one very popular editor is Sublime Text and that's at sublimetext.com. Another popular text editor is Atom and that's at atom.io and a very popular IDE is the JetBrains PyCharm IDE. So Sublime Text and",
      "original_segments": [
        {
          "id": 140,
          "start": 772.24,
          "end": 778.48,
          "text": "like. Some of the most popular editors and I have some of these pulled up in the browser here. So",
          "tokens": [
            50364,
            411,
            13,
            2188,
            295,
            264,
            881,
            3743,
            31446,
            293,
            286,
            362,
            512,
            295,
            613,
            7373,
            493,
            294,
            264,
            11185,
            510,
            13,
            407,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11313433165943951,
          "compression_ratio": 1.81651376146789,
          "no_speech_prob": 0.054271046072244644,
          "confidence": 0.9457289539277554
        },
        {
          "id": 141,
          "start": 778.48,
          "end": 785.44,
          "text": "one very popular editor is Sublime Text and that's at sublimetext.com. Another popular text editor is",
          "tokens": [
            50676,
            472,
            588,
            3743,
            9839,
            307,
            8511,
            40941,
            18643,
            293,
            300,
            311,
            412,
            1422,
            4197,
            3498,
            734,
            13,
            1112,
            13,
            3996,
            3743,
            2487,
            9839,
            307,
            51024
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11313433165943951,
          "compression_ratio": 1.81651376146789,
          "no_speech_prob": 0.054271046072244644,
          "confidence": 0.9457289539277554
        },
        {
          "id": 142,
          "start": 785.44,
          "end": 795.36,
          "text": "Atom and that's at atom.io and a very popular IDE is the JetBrains PyCharm IDE. So Sublime Text and",
          "tokens": [
            51024,
            1711,
            298,
            293,
            300,
            311,
            412,
            12018,
            13,
            1004,
            293,
            257,
            588,
            3743,
            40930,
            307,
            264,
            28730,
            45606,
            1292,
            9953,
            6546,
            4452,
            40930,
            13,
            407,
            8511,
            40941,
            18643,
            293,
            51520
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11313433165943951,
          "compression_ratio": 1.81651376146789,
          "no_speech_prob": 0.054271046072244644,
          "confidence": 0.9457289539277554
        }
      ],
      "duration": 28.120000000000005
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 790.36,
      "end_time": 818.0799999999999,
      "text": "Atom and that's at atom.io and a very popular IDE is the JetBrains PyCharm IDE. So Sublime Text and Atom are text editors but with a lot of extra functionality built in and PyCharm is a full-blown IDE and that will give you a lot of extra features that you might not find in other editors like the ability to debug a running application and things like that. Now in this series of videos I'm going to be using Sublime Text. Now I have a full video on how I set up and customize my",
      "original_segments": [
        {
          "id": 143,
          "start": 795.36,
          "end": 802.16,
          "text": "Atom are text editors but with a lot of extra functionality built in and PyCharm is a full-blown",
          "tokens": [
            51520,
            1711,
            298,
            366,
            2487,
            31446,
            457,
            365,
            257,
            688,
            295,
            2857,
            14980,
            3094,
            294,
            293,
            9953,
            6546,
            4452,
            307,
            257,
            1577,
            12,
            5199,
            648,
            51860
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11313433165943951,
          "compression_ratio": 1.81651376146789,
          "no_speech_prob": 0.054271046072244644,
          "confidence": 0.9457289539277554
        },
        {
          "id": 144,
          "start": 802.16,
          "end": 807.4399999999999,
          "text": "IDE and that will give you a lot of extra features that you might not find in other editors",
          "tokens": [
            50364,
            40930,
            293,
            300,
            486,
            976,
            291,
            257,
            688,
            295,
            2857,
            4122,
            300,
            291,
            1062,
            406,
            915,
            294,
            661,
            31446,
            50628
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03663592419381869,
          "compression_ratio": 1.7925925925925925,
          "no_speech_prob": 0.00046208154526539147,
          "confidence": 0.9995379184547346
        },
        {
          "id": 145,
          "start": 807.4399999999999,
          "end": 813.04,
          "text": "like the ability to debug a running application and things like that. Now in this series of videos",
          "tokens": [
            50628,
            411,
            264,
            3485,
            281,
            24083,
            257,
            2614,
            3861,
            293,
            721,
            411,
            300,
            13,
            823,
            294,
            341,
            2638,
            295,
            2145,
            50908
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03663592419381869,
          "compression_ratio": 1.7925925925925925,
          "no_speech_prob": 0.00046208154526539147,
          "confidence": 0.9995379184547346
        },
        {
          "id": 146,
          "start": 813.04,
          "end": 818.0799999999999,
          "text": "I'm going to be using Sublime Text. Now I have a full video on how I set up and customize my",
          "tokens": [
            50908,
            286,
            478,
            516,
            281,
            312,
            1228,
            8511,
            40941,
            18643,
            13,
            823,
            286,
            362,
            257,
            1577,
            960,
            322,
            577,
            286,
            992,
            493,
            293,
            19734,
            452,
            51160
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03663592419381869,
          "compression_ratio": 1.7925925925925925,
          "no_speech_prob": 0.00046208154526539147,
          "confidence": 0.9995379184547346
        }
      ],
      "duration": 27.719999999999914
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 813.0799999999999,
      "end_time": 839.28,
      "text": "I'm going to be using Sublime Text. Now I have a full video on how I set up and customize my Sublime Text and I also have a full video on how to set up and customize Atom. So if you want to use either of those editors then I highly recommend watching those videos and I'll leave links to those in the description section below. Now one nice thing about using one of these editors is that you can run Python from directly within the editor. So I have the same intro.py file that",
      "original_segments": [
        {
          "id": 147,
          "start": 818.0799999999999,
          "end": 823.8399999999999,
          "text": "Sublime Text and I also have a full video on how to set up and customize Atom. So if you want to",
          "tokens": [
            51160,
            8511,
            40941,
            18643,
            293,
            286,
            611,
            362,
            257,
            1577,
            960,
            322,
            577,
            281,
            992,
            493,
            293,
            19734,
            1711,
            298,
            13,
            407,
            498,
            291,
            528,
            281,
            51448
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03663592419381869,
          "compression_ratio": 1.7925925925925925,
          "no_speech_prob": 0.00046208154526539147,
          "confidence": 0.9995379184547346
        },
        {
          "id": 148,
          "start": 823.8399999999999,
          "end": 828.8,
          "text": "use either of those editors then I highly recommend watching those videos and I'll leave links to those",
          "tokens": [
            51448,
            764,
            2139,
            295,
            729,
            31446,
            550,
            286,
            5405,
            2748,
            1976,
            729,
            2145,
            293,
            286,
            603,
            1856,
            6123,
            281,
            729,
            51696
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03663592419381869,
          "compression_ratio": 1.7925925925925925,
          "no_speech_prob": 0.00046208154526539147,
          "confidence": 0.9995379184547346
        },
        {
          "id": 149,
          "start": 828.8,
          "end": 833.92,
          "text": "in the description section below. Now one nice thing about using one of these editors is that",
          "tokens": [
            50364,
            294,
            264,
            3855,
            3541,
            2507,
            13,
            823,
            472,
            1481,
            551,
            466,
            1228,
            472,
            295,
            613,
            31446,
            307,
            300,
            50620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04970469095010673,
          "compression_ratio": 1.7518518518518518,
          "no_speech_prob": 0.24806207418441772,
          "confidence": 0.7519379258155823
        },
        {
          "id": 150,
          "start": 833.92,
          "end": 839.28,
          "text": "you can run Python from directly within the editor. So I have the same intro.py file that",
          "tokens": [
            50620,
            291,
            393,
            1190,
            15329,
            490,
            3838,
            1951,
            264,
            9839,
            13,
            407,
            286,
            362,
            264,
            912,
            12897,
            13,
            8200,
            3991,
            300,
            50888
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04970469095010673,
          "compression_ratio": 1.7518518518518518,
          "no_speech_prob": 0.24806207418441772,
          "confidence": 0.7519379258155823
        }
      ],
      "duration": 26.200000000000045
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 834.28,
      "end_time": 862.72,
      "text": "you can run Python from directly within the editor. So I have the same intro.py file that we just created pulled up here in Sublime Text and I can run this by going to tools and build or we could have just used that keyboard shortcut but you can see that if we run that then we get the same hello world output that we got when we ran this file from our command line. So to follow along with these videos you can use the idle application and use the command line to run those",
      "original_segments": [
        {
          "id": 151,
          "start": 839.28,
          "end": 847.12,
          "text": "we just created pulled up here in Sublime Text and I can run this by going to tools and build",
          "tokens": [
            50888,
            321,
            445,
            2942,
            7373,
            493,
            510,
            294,
            8511,
            40941,
            18643,
            293,
            286,
            393,
            1190,
            341,
            538,
            516,
            281,
            3873,
            293,
            1322,
            51280
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04970469095010673,
          "compression_ratio": 1.7518518518518518,
          "no_speech_prob": 0.24806207418441772,
          "confidence": 0.7519379258155823
        },
        {
          "id": 152,
          "start": 847.12,
          "end": 851.76,
          "text": "or we could have just used that keyboard shortcut but you can see that if we run that then we get",
          "tokens": [
            51280,
            420,
            321,
            727,
            362,
            445,
            1143,
            300,
            10186,
            24822,
            457,
            291,
            393,
            536,
            300,
            498,
            321,
            1190,
            300,
            550,
            321,
            483,
            51512
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04970469095010673,
          "compression_ratio": 1.7518518518518518,
          "no_speech_prob": 0.24806207418441772,
          "confidence": 0.7519379258155823
        },
        {
          "id": 153,
          "start": 851.76,
          "end": 857.8399999999999,
          "text": "the same hello world output that we got when we ran this file from our command line. So to follow",
          "tokens": [
            51512,
            264,
            912,
            7751,
            1002,
            5598,
            300,
            321,
            658,
            562,
            321,
            5872,
            341,
            3991,
            490,
            527,
            5622,
            1622,
            13,
            407,
            281,
            1524,
            51816
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04970469095010673,
          "compression_ratio": 1.7518518518518518,
          "no_speech_prob": 0.24806207418441772,
          "confidence": 0.7519379258155823
        },
        {
          "id": 154,
          "start": 857.84,
          "end": 862.72,
          "text": "along with these videos you can use the idle application and use the command line to run those",
          "tokens": [
            50364,
            2051,
            365,
            613,
            2145,
            291,
            393,
            764,
            264,
            30650,
            3861,
            293,
            764,
            264,
            5622,
            1622,
            281,
            1190,
            729,
            50608
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048077217368192454,
          "compression_ratio": 1.7816455696202531,
          "no_speech_prob": 0.004900321830064058,
          "confidence": 0.9950996781699359
        }
      ],
      "duration": 28.440000000000055
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 857.72,
      "end_time": 887.2,
      "text": "the same hello world output that we got when we ran this file from our command line. So to follow along with these videos you can use the idle application and use the command line to run those scripts or you can set up one of these other text editors. The choice is completely up to you. Okay so I think that is going to do it for this video. In this video we walked through how to install Python on both Mac and Windows. We looked at how to run Python interactively within the terminal or command line and we also saw how to create a Python file and execute that script. So in the next video we'll start learning about variables and data types and specifically",
      "original_segments": [
        {
          "id": 155,
          "start": 862.72,
          "end": 867.2800000000001,
          "text": "scripts or you can set up one of these other text editors. The choice is completely up to you.",
          "tokens": [
            50608,
            23294,
            420,
            291,
            393,
            992,
            493,
            472,
            295,
            613,
            661,
            2487,
            31446,
            13,
            440,
            3922,
            307,
            2584,
            493,
            281,
            291,
            13,
            50836
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048077217368192454,
          "compression_ratio": 1.7816455696202531,
          "no_speech_prob": 0.004900321830064058,
          "confidence": 0.9950996781699359
        },
        {
          "id": 156,
          "start": 867.84,
          "end": 871.12,
          "text": "Okay so I think that is going to do it for this video. In this video we walked through",
          "tokens": [
            50864,
            1033,
            370,
            286,
            519,
            300,
            307,
            516,
            281,
            360,
            309,
            337,
            341,
            960,
            13,
            682,
            341,
            960,
            321,
            7628,
            807,
            51028
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048077217368192454,
          "compression_ratio": 1.7816455696202531,
          "no_speech_prob": 0.004900321830064058,
          "confidence": 0.9950996781699359
        },
        {
          "id": 157,
          "start": 871.12,
          "end": 876.48,
          "text": "how to install Python on both Mac and Windows. We looked at how to run Python interactively",
          "tokens": [
            51028,
            577,
            281,
            3625,
            15329,
            322,
            1293,
            5707,
            293,
            8591,
            13,
            492,
            2956,
            412,
            577,
            281,
            1190,
            15329,
            4648,
            3413,
            51296
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048077217368192454,
          "compression_ratio": 1.7816455696202531,
          "no_speech_prob": 0.004900321830064058,
          "confidence": 0.9950996781699359
        },
        {
          "id": 158,
          "start": 876.48,
          "end": 881.9200000000001,
          "text": "within the terminal or command line and we also saw how to create a Python file and execute that",
          "tokens": [
            51296,
            1951,
            264,
            14709,
            420,
            5622,
            1622,
            293,
            321,
            611,
            1866,
            577,
            281,
            1884,
            257,
            15329,
            3991,
            293,
            14483,
            300,
            51568
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048077217368192454,
          "compression_ratio": 1.7816455696202531,
          "no_speech_prob": 0.004900321830064058,
          "confidence": 0.9950996781699359
        },
        {
          "id": 159,
          "start": 881.9200000000001,
          "end": 887.2,
          "text": "script. So in the next video we'll start learning about variables and data types and specifically",
          "tokens": [
            51568,
            5755,
            13,
            407,
            294,
            264,
            958,
            960,
            321,
            603,
            722,
            2539,
            466,
            9102,
            293,
            1412,
            3467,
            293,
            4682,
            51832
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048077217368192454,
          "compression_ratio": 1.7816455696202531,
          "no_speech_prob": 0.004900321830064058,
          "confidence": 0.9950996781699359
        }
      ],
      "duration": 29.480000000000018
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 882.2,
      "end_time": 909.6800000000001,
      "text": "script. So in the next video we'll start learning about variables and data types and specifically we're going to look at the string data type and everything that we can do with those. But if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those. Now if you enjoy these tutorials and would like to support them then there are several ways you can do that. The easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute",
      "original_segments": [
        {
          "id": 160,
          "start": 887.2,
          "end": 890.88,
          "text": "we're going to look at the string data type and everything that we can do with those.",
          "tokens": [
            50364,
            321,
            434,
            516,
            281,
            574,
            412,
            264,
            6798,
            1412,
            2010,
            293,
            1203,
            300,
            321,
            393,
            360,
            365,
            729,
            13,
            50548
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03902736987942964,
          "compression_ratio": 1.818941504178273,
          "no_speech_prob": 0.0005897643277421594,
          "confidence": 0.9994102356722578
        },
        {
          "id": 161,
          "start": 890.88,
          "end": 894.5600000000001,
          "text": "But if anyone has any questions about what we covered in this video then feel free to ask in",
          "tokens": [
            50548,
            583,
            498,
            2878,
            575,
            604,
            1651,
            466,
            437,
            321,
            5343,
            294,
            341,
            960,
            550,
            841,
            1737,
            281,
            1029,
            294,
            50732
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03902736987942964,
          "compression_ratio": 1.818941504178273,
          "no_speech_prob": 0.0005897643277421594,
          "confidence": 0.9994102356722578
        },
        {
          "id": 162,
          "start": 894.5600000000001,
          "end": 898.48,
          "text": "the comment section below and I'll do my best to answer those. Now if you enjoy these tutorials",
          "tokens": [
            50732,
            264,
            2871,
            3541,
            2507,
            293,
            286,
            603,
            360,
            452,
            1151,
            281,
            1867,
            729,
            13,
            823,
            498,
            291,
            2103,
            613,
            17616,
            50928
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03902736987942964,
          "compression_ratio": 1.818941504178273,
          "no_speech_prob": 0.0005897643277421594,
          "confidence": 0.9994102356722578
        },
        {
          "id": 163,
          "start": 898.48,
          "end": 902.0,
          "text": "and would like to support them then there are several ways you can do that. The easiest way is",
          "tokens": [
            50928,
            293,
            576,
            411,
            281,
            1406,
            552,
            550,
            456,
            366,
            2940,
            2098,
            291,
            393,
            360,
            300,
            13,
            440,
            12889,
            636,
            307,
            51104
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03902736987942964,
          "compression_ratio": 1.818941504178273,
          "no_speech_prob": 0.0005897643277421594,
          "confidence": 0.9994102356722578
        },
        {
          "id": 164,
          "start": 902.0,
          "end": 906.0,
          "text": "to simply like the video and give it a thumbs up and also it's a huge help to share these videos",
          "tokens": [
            51104,
            281,
            2935,
            411,
            264,
            960,
            293,
            976,
            309,
            257,
            8838,
            493,
            293,
            611,
            309,
            311,
            257,
            2603,
            854,
            281,
            2073,
            613,
            2145,
            51304
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03902736987942964,
          "compression_ratio": 1.818941504178273,
          "no_speech_prob": 0.0005897643277421594,
          "confidence": 0.9994102356722578
        },
        {
          "id": 165,
          "start": 906.0,
          "end": 909.6800000000001,
          "text": "with anyone who you think would find them useful and if you have the means you can contribute",
          "tokens": [
            51304,
            365,
            2878,
            567,
            291,
            519,
            576,
            915,
            552,
            4420,
            293,
            498,
            291,
            362,
            264,
            1355,
            291,
            393,
            10586,
            51488
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03902736987942964,
          "compression_ratio": 1.818941504178273,
          "no_speech_prob": 0.0005897643277421594,
          "confidence": 0.9994102356722578
        }
      ],
      "duration": 27.480000000000018
    },
    {
      "video_id": "540b2d2dd944",
      "video_path": "videos/Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "video_filename": "Python Tutorial for Beginners 1_ Install and Setup for Mac and Windows.mp4",
      "start_time": 904.6800000000001,
      "end_time": 920.24,
      "text": "to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through Patreon and there's a link to that page in the description section below. Be sure to subscribe for future videos and thank you all for watching.",
      "original_segments": [
        {
          "id": 166,
          "start": 909.6800000000001,
          "end": 913.44,
          "text": "through Patreon and there's a link to that page in the description section below. Be sure to",
          "tokens": [
            51488,
            807,
            15692,
            293,
            456,
            311,
            257,
            2113,
            281,
            300,
            3028,
            294,
            264,
            3855,
            3541,
            2507,
            13,
            879,
            988,
            281,
            51676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03902736987942964,
          "compression_ratio": 1.818941504178273,
          "no_speech_prob": 0.0005897643277421594,
          "confidence": 0.9994102356722578
        },
        {
          "id": 167,
          "start": 913.44,
          "end": 920.24,
          "text": "subscribe for future videos and thank you all for watching.",
          "tokens": [
            50364,
            3022,
            337,
            2027,
            2145,
            293,
            1309,
            291,
            439,
            337,
            1976,
            13,
            50704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.25689119952065603,
          "compression_ratio": 0.921875,
          "no_speech_prob": 0.16658905148506165,
          "confidence": 0.8334109485149384
        }
      ],
      "duration": 15.559999999999945
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 0.0,
      "end_time": 29.14,
      "text": "Hey there. How's it going, everybody? In this video, we'll be learning about dictionaries and how we can work with them in Python. So dictionaries allow us to work with key value pairs. And if you're coming from another programming language, then you may have heard these called hash maps or associative arrays. So when I say that we'll be working with key value pairs, these are two linked values where the key is a unique identifier where we can find our data, and the value is that data. So we can actually think of that almost like a real physical dictionary where we look up word definitions.",
      "original_segments": [
        {
          "id": 0,
          "start": 0.0,
          "end": 0.5,
          "text": "Hey there.",
          "tokens": [
            50364,
            1911,
            456,
            13,
            50389
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 1,
          "start": 0.5,
          "end": 1.6600000000000001,
          "text": "How's it going, everybody?",
          "tokens": [
            50389,
            1012,
            311,
            309,
            516,
            11,
            2201,
            30,
            50447
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 2,
          "start": 1.6600000000000001,
          "end": 3.74,
          "text": "In this video, we'll be learning about dictionaries",
          "tokens": [
            50447,
            682,
            341,
            960,
            11,
            321,
            603,
            312,
            2539,
            466,
            22352,
            4889,
            50551
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 3,
          "start": 3.74,
          "end": 5.66,
          "text": "and how we can work with them in Python.",
          "tokens": [
            50551,
            293,
            577,
            321,
            393,
            589,
            365,
            552,
            294,
            15329,
            13,
            50647
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 4,
          "start": 5.66,
          "end": 8.08,
          "text": "So dictionaries allow us to work with key value pairs.",
          "tokens": [
            50647,
            407,
            22352,
            4889,
            2089,
            505,
            281,
            589,
            365,
            2141,
            2158,
            15494,
            13,
            50768
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 5,
          "start": 8.08,
          "end": 10.46,
          "text": "And if you're coming from another programming language,",
          "tokens": [
            50768,
            400,
            498,
            291,
            434,
            1348,
            490,
            1071,
            9410,
            2856,
            11,
            50887
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 6,
          "start": 10.46,
          "end": 12.34,
          "text": "then you may have heard these called hash maps",
          "tokens": [
            50887,
            550,
            291,
            815,
            362,
            2198,
            613,
            1219,
            22019,
            11317,
            50981
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 7,
          "start": 12.34,
          "end": 13.780000000000001,
          "text": "or associative arrays.",
          "tokens": [
            50981,
            420,
            4180,
            1166,
            41011,
            13,
            51053
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 8,
          "start": 13.780000000000001,
          "end": 16.580000000000002,
          "text": "So when I say that we'll be working with key value pairs,",
          "tokens": [
            51053,
            407,
            562,
            286,
            584,
            300,
            321,
            603,
            312,
            1364,
            365,
            2141,
            2158,
            15494,
            11,
            51193
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 9,
          "start": 16.580000000000002,
          "end": 18.18,
          "text": "these are two linked values where",
          "tokens": [
            51193,
            613,
            366,
            732,
            9408,
            4190,
            689,
            51273
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 10,
          "start": 18.18,
          "end": 21.900000000000002,
          "text": "the key is a unique identifier where we can find our data,",
          "tokens": [
            51273,
            264,
            2141,
            307,
            257,
            3845,
            45690,
            689,
            321,
            393,
            915,
            527,
            1412,
            11,
            51459
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 11,
          "start": 21.900000000000002,
          "end": 23.740000000000002,
          "text": "and the value is that data.",
          "tokens": [
            51459,
            293,
            264,
            2158,
            307,
            300,
            1412,
            13,
            51551
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 12,
          "start": 23.740000000000002,
          "end": 26.7,
          "text": "So we can actually think of that almost like a real physical",
          "tokens": [
            51551,
            407,
            321,
            393,
            767,
            519,
            295,
            300,
            1920,
            411,
            257,
            957,
            4001,
            51699
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        },
        {
          "id": 13,
          "start": 26.7,
          "end": 29.14,
          "text": "dictionary where we look up word definitions.",
          "tokens": [
            51699,
            25890,
            689,
            321,
            574,
            493,
            1349,
            21988,
            13,
            51821
          ],
          "temperature": 0.0,
          "avg_logprob": -0.126294591624266,
          "compression_ratio": 1.7981927710843373,
          "no_speech_prob": 0.1597478836774826,
          "confidence": 0.8402521163225174
        }
      ],
      "duration": 29.14
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 24.14,
      "end_time": 52.32,
      "text": "So we can actually think of that almost like a real physical dictionary where we look up word definitions. So in that example, each word that we look up would be the key, and the definition of that word would be the value. So let's go ahead and take a look at some examples. So let's say that we wanted to represent a student using a dictionary. So to do this, we could just create a student variable and set this equal to these curly braces, and that's how we start our dictionary. Now within our curly braces here, we will first put in our key.",
      "original_segments": [
        {
          "id": 14,
          "start": 29.16,
          "end": 31.560000000000002,
          "text": "So in that example, each word that we look up",
          "tokens": [
            50365,
            407,
            294,
            300,
            1365,
            11,
            1184,
            1349,
            300,
            321,
            574,
            493,
            50485
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        },
        {
          "id": 15,
          "start": 31.560000000000002,
          "end": 34.160000000000004,
          "text": "would be the key, and the definition of that word",
          "tokens": [
            50485,
            576,
            312,
            264,
            2141,
            11,
            293,
            264,
            7123,
            295,
            300,
            1349,
            50615
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        },
        {
          "id": 16,
          "start": 34.160000000000004,
          "end": 35.36,
          "text": "would be the value.",
          "tokens": [
            50615,
            576,
            312,
            264,
            2158,
            13,
            50675
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        },
        {
          "id": 17,
          "start": 35.36,
          "end": 37.760000000000005,
          "text": "So let's go ahead and take a look at some examples.",
          "tokens": [
            50675,
            407,
            718,
            311,
            352,
            2286,
            293,
            747,
            257,
            574,
            412,
            512,
            5110,
            13,
            50795
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        },
        {
          "id": 18,
          "start": 37.760000000000005,
          "end": 40.5,
          "text": "So let's say that we wanted to represent a student using",
          "tokens": [
            50795,
            407,
            718,
            311,
            584,
            300,
            321,
            1415,
            281,
            2906,
            257,
            3107,
            1228,
            50932
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        },
        {
          "id": 19,
          "start": 40.5,
          "end": 41.4,
          "text": "a dictionary.",
          "tokens": [
            50932,
            257,
            25890,
            13,
            50977
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        },
        {
          "id": 20,
          "start": 41.4,
          "end": 44.32,
          "text": "So to do this, we could just create a student variable",
          "tokens": [
            50977,
            407,
            281,
            360,
            341,
            11,
            321,
            727,
            445,
            1884,
            257,
            3107,
            7006,
            51123
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        },
        {
          "id": 21,
          "start": 44.32,
          "end": 47.0,
          "text": "and set this equal to these curly braces,",
          "tokens": [
            51123,
            293,
            992,
            341,
            2681,
            281,
            613,
            32066,
            41537,
            11,
            51257
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        },
        {
          "id": 22,
          "start": 47.0,
          "end": 48.96,
          "text": "and that's how we start our dictionary.",
          "tokens": [
            51257,
            293,
            300,
            311,
            577,
            321,
            722,
            527,
            25890,
            13,
            51355
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        },
        {
          "id": 23,
          "start": 48.96,
          "end": 50.760000000000005,
          "text": "Now within our curly braces here,",
          "tokens": [
            51355,
            823,
            1951,
            527,
            32066,
            41537,
            510,
            11,
            51445
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        },
        {
          "id": 24,
          "start": 50.760000000000005,
          "end": 52.32,
          "text": "we will first put in our key.",
          "tokens": [
            51445,
            321,
            486,
            700,
            829,
            294,
            527,
            2141,
            13,
            51523
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        }
      ],
      "duration": 28.18
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 47.32,
      "end_time": 76.9,
      "text": "and that's how we start our dictionary. Now within our curly braces here, we will first put in our key. So let's say that we want a key of name. Now we're going to put in a colon to separate our key from our value. And for the name here, we'll just start off with John. And now let's add some more keys and values. And to separate these keys and values, we're going to put in a comma. So next, let's put in a key of age and a value of 25. And lastly, we'll put in a key of courses.",
      "original_segments": [
        {
          "id": 25,
          "start": 52.32,
          "end": 55.56,
          "text": "So let's say that we want a key of name.",
          "tokens": [
            51523,
            407,
            718,
            311,
            584,
            300,
            321,
            528,
            257,
            2141,
            295,
            1315,
            13,
            51685
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        },
        {
          "id": 26,
          "start": 55.56,
          "end": 57.28,
          "text": "Now we're going to put in a colon",
          "tokens": [
            51685,
            823,
            321,
            434,
            516,
            281,
            829,
            294,
            257,
            8255,
            51771
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11803995682889183,
          "compression_ratio": 1.9250936329588015,
          "no_speech_prob": 0.0010423356434330344,
          "confidence": 0.998957664356567
        },
        {
          "id": 27,
          "start": 57.28,
          "end": 59.58,
          "text": "to separate our key from our value.",
          "tokens": [
            50364,
            281,
            4994,
            527,
            2141,
            490,
            527,
            2158,
            13,
            50479
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08455798296424431,
          "compression_ratio": 1.849056603773585,
          "no_speech_prob": 0.02925518900156021,
          "confidence": 0.9707448109984398
        },
        {
          "id": 28,
          "start": 59.58,
          "end": 62.300000000000004,
          "text": "And for the name here, we'll just start off with John.",
          "tokens": [
            50479,
            400,
            337,
            264,
            1315,
            510,
            11,
            321,
            603,
            445,
            722,
            766,
            365,
            2619,
            13,
            50615
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08455798296424431,
          "compression_ratio": 1.849056603773585,
          "no_speech_prob": 0.02925518900156021,
          "confidence": 0.9707448109984398
        },
        {
          "id": 29,
          "start": 62.300000000000004,
          "end": 64.1,
          "text": "And now let's add some more keys and values.",
          "tokens": [
            50615,
            400,
            586,
            718,
            311,
            909,
            512,
            544,
            9317,
            293,
            4190,
            13,
            50705
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08455798296424431,
          "compression_ratio": 1.849056603773585,
          "no_speech_prob": 0.02925518900156021,
          "confidence": 0.9707448109984398
        },
        {
          "id": 30,
          "start": 64.1,
          "end": 66.02,
          "text": "And to separate these keys and values,",
          "tokens": [
            50705,
            400,
            281,
            4994,
            613,
            9317,
            293,
            4190,
            11,
            50801
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08455798296424431,
          "compression_ratio": 1.849056603773585,
          "no_speech_prob": 0.02925518900156021,
          "confidence": 0.9707448109984398
        },
        {
          "id": 31,
          "start": 66.02,
          "end": 67.58,
          "text": "we're going to put in a comma.",
          "tokens": [
            50801,
            321,
            434,
            516,
            281,
            829,
            294,
            257,
            22117,
            13,
            50879
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08455798296424431,
          "compression_ratio": 1.849056603773585,
          "no_speech_prob": 0.02925518900156021,
          "confidence": 0.9707448109984398
        },
        {
          "id": 32,
          "start": 67.58,
          "end": 72.58,
          "text": "So next, let's put in a key of age and a value of 25.",
          "tokens": [
            50879,
            407,
            958,
            11,
            718,
            311,
            829,
            294,
            257,
            2141,
            295,
            3205,
            293,
            257,
            2158,
            295,
            3552,
            13,
            51129
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08455798296424431,
          "compression_ratio": 1.849056603773585,
          "no_speech_prob": 0.02925518900156021,
          "confidence": 0.9707448109984398
        },
        {
          "id": 33,
          "start": 73.34,
          "end": 76.9,
          "text": "And lastly, we'll put in a key of courses.",
          "tokens": [
            51167,
            400,
            16386,
            11,
            321,
            603,
            829,
            294,
            257,
            2141,
            295,
            7712,
            13,
            51345
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08455798296424431,
          "compression_ratio": 1.849056603773585,
          "no_speech_prob": 0.02925518900156021,
          "confidence": 0.9707448109984398
        }
      ],
      "duration": 29.580000000000005
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 71.9,
      "end_time": 100.12,
      "text": "So next, let's put in a key of age and a value of 25. And lastly, we'll put in a key of courses. And for this value, we'll pass in a list of courses here. So we'll say math and comp sci. So now let's print out our student and see how that looks. So if we save that and run it, then we can see that it prints out all of our keys and values. Now let's just get a value of one key. So to do this, we can add square brackets after our dictionary",
      "original_segments": [
        {
          "id": 34,
          "start": 76.9,
          "end": 80.82,
          "text": "And for this value, we'll pass in a list of courses here.",
          "tokens": [
            51345,
            400,
            337,
            341,
            2158,
            11,
            321,
            603,
            1320,
            294,
            257,
            1329,
            295,
            7712,
            510,
            13,
            51541
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08455798296424431,
          "compression_ratio": 1.849056603773585,
          "no_speech_prob": 0.02925518900156021,
          "confidence": 0.9707448109984398
        },
        {
          "id": 35,
          "start": 80.82,
          "end": 83.76,
          "text": "So we'll say math and comp sci.",
          "tokens": [
            51541,
            407,
            321,
            603,
            584,
            5221,
            293,
            715,
            2180,
            13,
            51688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08455798296424431,
          "compression_ratio": 1.849056603773585,
          "no_speech_prob": 0.02925518900156021,
          "confidence": 0.9707448109984398
        },
        {
          "id": 36,
          "start": 83.76,
          "end": 87.52000000000001,
          "text": "So now let's print out our student and see how that looks.",
          "tokens": [
            50364,
            407,
            586,
            718,
            311,
            4482,
            484,
            527,
            3107,
            293,
            536,
            577,
            300,
            1542,
            13,
            50552
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10124882719570533,
          "compression_ratio": 1.9211618257261411,
          "no_speech_prob": 0.0008097267709672451,
          "confidence": 0.9991902732290328
        },
        {
          "id": 37,
          "start": 87.52000000000001,
          "end": 89.76,
          "text": "So if we save that and run it, then we",
          "tokens": [
            50552,
            407,
            498,
            321,
            3155,
            300,
            293,
            1190,
            309,
            11,
            550,
            321,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10124882719570533,
          "compression_ratio": 1.9211618257261411,
          "no_speech_prob": 0.0008097267709672451,
          "confidence": 0.9991902732290328
        },
        {
          "id": 38,
          "start": 89.76,
          "end": 92.66000000000001,
          "text": "can see that it prints out all of our keys and values.",
          "tokens": [
            50664,
            393,
            536,
            300,
            309,
            22305,
            484,
            439,
            295,
            527,
            9317,
            293,
            4190,
            13,
            50809
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10124882719570533,
          "compression_ratio": 1.9211618257261411,
          "no_speech_prob": 0.0008097267709672451,
          "confidence": 0.9991902732290328
        },
        {
          "id": 39,
          "start": 92.66000000000001,
          "end": 96.32000000000001,
          "text": "Now let's just get a value of one key.",
          "tokens": [
            50809,
            823,
            718,
            311,
            445,
            483,
            257,
            2158,
            295,
            472,
            2141,
            13,
            50992
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10124882719570533,
          "compression_ratio": 1.9211618257261411,
          "no_speech_prob": 0.0008097267709672451,
          "confidence": 0.9991902732290328
        },
        {
          "id": 40,
          "start": 96.32000000000001,
          "end": 100.12,
          "text": "So to do this, we can add square brackets after our dictionary",
          "tokens": [
            50992,
            407,
            281,
            360,
            341,
            11,
            321,
            393,
            909,
            3732,
            26179,
            934,
            527,
            25890,
            51182
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10124882719570533,
          "compression_ratio": 1.9211618257261411,
          "no_speech_prob": 0.0008097267709672451,
          "confidence": 0.9991902732290328
        }
      ],
      "duration": 28.22
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 95.12,
      "end_time": 124.2,
      "text": "Now let's just get a value of one key. So to do this, we can add square brackets after our dictionary and then specify the key that we want to access. So I can put in square brackets here. And let's say that we want to access the name of that student dictionary. So I'll just pass in the name key and run that. And we can see that that gave us that value of that name key. Now if I wanted the courses instead, then I could just pass in that courses for the key. If I run that, then you can see that we got this list of math and comp sci.",
      "original_segments": [
        {
          "id": 41,
          "start": 100.12,
          "end": 102.68,
          "text": "and then specify the key that we want to access.",
          "tokens": [
            51182,
            293,
            550,
            16500,
            264,
            2141,
            300,
            321,
            528,
            281,
            2105,
            13,
            51310
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10124882719570533,
          "compression_ratio": 1.9211618257261411,
          "no_speech_prob": 0.0008097267709672451,
          "confidence": 0.9991902732290328
        },
        {
          "id": 42,
          "start": 102.68,
          "end": 104.56,
          "text": "So I can put in square brackets here.",
          "tokens": [
            51310,
            407,
            286,
            393,
            829,
            294,
            3732,
            26179,
            510,
            13,
            51404
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10124882719570533,
          "compression_ratio": 1.9211618257261411,
          "no_speech_prob": 0.0008097267709672451,
          "confidence": 0.9991902732290328
        },
        {
          "id": 43,
          "start": 104.56,
          "end": 107.52000000000001,
          "text": "And let's say that we want to access the name of that student",
          "tokens": [
            51404,
            400,
            718,
            311,
            584,
            300,
            321,
            528,
            281,
            2105,
            264,
            1315,
            295,
            300,
            3107,
            51552
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10124882719570533,
          "compression_ratio": 1.9211618257261411,
          "no_speech_prob": 0.0008097267709672451,
          "confidence": 0.9991902732290328
        },
        {
          "id": 44,
          "start": 107.52000000000001,
          "end": 108.26,
          "text": "dictionary.",
          "tokens": [
            51552,
            25890,
            13,
            51589
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10124882719570533,
          "compression_ratio": 1.9211618257261411,
          "no_speech_prob": 0.0008097267709672451,
          "confidence": 0.9991902732290328
        },
        {
          "id": 45,
          "start": 108.26,
          "end": 111.12,
          "text": "So I'll just pass in the name key and run that.",
          "tokens": [
            51589,
            407,
            286,
            603,
            445,
            1320,
            294,
            264,
            1315,
            2141,
            293,
            1190,
            300,
            13,
            51732
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10124882719570533,
          "compression_ratio": 1.9211618257261411,
          "no_speech_prob": 0.0008097267709672451,
          "confidence": 0.9991902732290328
        },
        {
          "id": 46,
          "start": 111.12,
          "end": 114.44,
          "text": "And we can see that that gave us that value of that name key.",
          "tokens": [
            50364,
            400,
            321,
            393,
            536,
            300,
            300,
            2729,
            505,
            300,
            2158,
            295,
            300,
            1315,
            2141,
            13,
            50530
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07250479797818768,
          "compression_ratio": 1.828793774319066,
          "no_speech_prob": 0.0025650637689977884,
          "confidence": 0.9974349362310022
        },
        {
          "id": 47,
          "start": 114.44,
          "end": 116.76,
          "text": "Now if I wanted the courses instead,",
          "tokens": [
            50530,
            823,
            498,
            286,
            1415,
            264,
            7712,
            2602,
            11,
            50646
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07250479797818768,
          "compression_ratio": 1.828793774319066,
          "no_speech_prob": 0.0025650637689977884,
          "confidence": 0.9974349362310022
        },
        {
          "id": 48,
          "start": 116.76,
          "end": 120.08000000000001,
          "text": "then I could just pass in that courses for the key.",
          "tokens": [
            50646,
            550,
            286,
            727,
            445,
            1320,
            294,
            300,
            7712,
            337,
            264,
            2141,
            13,
            50812
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07250479797818768,
          "compression_ratio": 1.828793774319066,
          "no_speech_prob": 0.0025650637689977884,
          "confidence": 0.9974349362310022
        },
        {
          "id": 49,
          "start": 120.08000000000001,
          "end": 121.88000000000001,
          "text": "If I run that, then you can see that we",
          "tokens": [
            50812,
            759,
            286,
            1190,
            300,
            11,
            550,
            291,
            393,
            536,
            300,
            321,
            50902
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07250479797818768,
          "compression_ratio": 1.828793774319066,
          "no_speech_prob": 0.0025650637689977884,
          "confidence": 0.9974349362310022
        },
        {
          "id": 50,
          "start": 121.88000000000001,
          "end": 124.2,
          "text": "got this list of math and comp sci.",
          "tokens": [
            50902,
            658,
            341,
            1329,
            295,
            5221,
            293,
            715,
            2180,
            13,
            51018
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07250479797818768,
          "compression_ratio": 1.828793774319066,
          "no_speech_prob": 0.0025650637689977884,
          "confidence": 0.9974349362310022
        }
      ],
      "duration": 29.08
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 119.2,
      "end_time": 148.64,
      "text": "then I could just pass in that courses for the key. If I run that, then you can see that we got this list of math and comp sci. So we can see that these values in our dictionary can be just about anything. Our name is a string, our age is an integer, and the courses are a list. Now all of our keys are currently strings, but they can actually be any immutable data type. So usually, these will either be strings or integers, but there are a few more data types that they can be as well. So for example, instead of name as our key here,",
      "original_segments": [
        {
          "id": 51,
          "start": 124.2,
          "end": 126.56,
          "text": "So we can see that these values in our dictionary",
          "tokens": [
            51018,
            407,
            321,
            393,
            536,
            300,
            613,
            4190,
            294,
            527,
            25890,
            51136
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07250479797818768,
          "compression_ratio": 1.828793774319066,
          "no_speech_prob": 0.0025650637689977884,
          "confidence": 0.9974349362310022
        },
        {
          "id": 52,
          "start": 126.56,
          "end": 128.20000000000002,
          "text": "can be just about anything.",
          "tokens": [
            51136,
            393,
            312,
            445,
            466,
            1340,
            13,
            51218
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07250479797818768,
          "compression_ratio": 1.828793774319066,
          "no_speech_prob": 0.0025650637689977884,
          "confidence": 0.9974349362310022
        },
        {
          "id": 53,
          "start": 128.20000000000002,
          "end": 132.12,
          "text": "Our name is a string, our age is an integer,",
          "tokens": [
            51218,
            2621,
            1315,
            307,
            257,
            6798,
            11,
            527,
            3205,
            307,
            364,
            24922,
            11,
            51414
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07250479797818768,
          "compression_ratio": 1.828793774319066,
          "no_speech_prob": 0.0025650637689977884,
          "confidence": 0.9974349362310022
        },
        {
          "id": 54,
          "start": 132.12,
          "end": 134.44,
          "text": "and the courses are a list.",
          "tokens": [
            51414,
            293,
            264,
            7712,
            366,
            257,
            1329,
            13,
            51530
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07250479797818768,
          "compression_ratio": 1.828793774319066,
          "no_speech_prob": 0.0025650637689977884,
          "confidence": 0.9974349362310022
        },
        {
          "id": 55,
          "start": 134.44,
          "end": 137.24,
          "text": "Now all of our keys are currently strings,",
          "tokens": [
            51530,
            823,
            439,
            295,
            527,
            9317,
            366,
            4362,
            13985,
            11,
            51670
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07250479797818768,
          "compression_ratio": 1.828793774319066,
          "no_speech_prob": 0.0025650637689977884,
          "confidence": 0.9974349362310022
        },
        {
          "id": 56,
          "start": 137.24,
          "end": 140.04000000000002,
          "text": "but they can actually be any immutable data type.",
          "tokens": [
            51670,
            457,
            436,
            393,
            767,
            312,
            604,
            3397,
            32148,
            1412,
            2010,
            13,
            51810
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07250479797818768,
          "compression_ratio": 1.828793774319066,
          "no_speech_prob": 0.0025650637689977884,
          "confidence": 0.9974349362310022
        },
        {
          "id": 57,
          "start": 140.04,
          "end": 142.64,
          "text": "So usually, these will either be strings or integers,",
          "tokens": [
            50364,
            407,
            2673,
            11,
            613,
            486,
            2139,
            312,
            13985,
            420,
            41674,
            11,
            50494
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11310615248352517,
          "compression_ratio": 1.6926070038910506,
          "no_speech_prob": 0.0021671277936547995,
          "confidence": 0.9978328722063452
        },
        {
          "id": 58,
          "start": 142.64,
          "end": 145.44,
          "text": "but there are a few more data types that they can be as well.",
          "tokens": [
            50494,
            457,
            456,
            366,
            257,
            1326,
            544,
            1412,
            3467,
            300,
            436,
            393,
            312,
            382,
            731,
            13,
            50634
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11310615248352517,
          "compression_ratio": 1.6926070038910506,
          "no_speech_prob": 0.0021671277936547995,
          "confidence": 0.9978328722063452
        },
        {
          "id": 59,
          "start": 145.44,
          "end": 148.64,
          "text": "So for example, instead of name as our key here,",
          "tokens": [
            50634,
            407,
            337,
            1365,
            11,
            2602,
            295,
            1315,
            382,
            527,
            2141,
            510,
            11,
            50794
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11310615248352517,
          "compression_ratio": 1.6926070038910506,
          "no_speech_prob": 0.0021671277936547995,
          "confidence": 0.9978328722063452
        }
      ],
      "duration": 29.439999999999984
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 143.64,
      "end_time": 173.16,
      "text": "but there are a few more data types that they can be as well. So for example, instead of name as our key here, if for some reason we wanted this to be an integer, so I'll just pass in one. So a one is a valid key. And now if I access that key of one and run that, then you can see that that gave us John. But I'm going to set that back to be a string for now and keep that as name. So what happens if we try to access a key that doesn't exist? So for example, I'll try to access the key of phone",
      "original_segments": [
        {
          "id": 60,
          "start": 148.64,
          "end": 151.48,
          "text": "if for some reason we wanted this to be an integer,",
          "tokens": [
            50794,
            498,
            337,
            512,
            1778,
            321,
            1415,
            341,
            281,
            312,
            364,
            24922,
            11,
            50936
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11310615248352517,
          "compression_ratio": 1.6926070038910506,
          "no_speech_prob": 0.0021671277936547995,
          "confidence": 0.9978328722063452
        },
        {
          "id": 61,
          "start": 151.48,
          "end": 153.28,
          "text": "so I'll just pass in one.",
          "tokens": [
            50936,
            370,
            286,
            603,
            445,
            1320,
            294,
            472,
            13,
            51026
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11310615248352517,
          "compression_ratio": 1.6926070038910506,
          "no_speech_prob": 0.0021671277936547995,
          "confidence": 0.9978328722063452
        },
        {
          "id": 62,
          "start": 153.28,
          "end": 155.2,
          "text": "So a one is a valid key.",
          "tokens": [
            51026,
            407,
            257,
            472,
            307,
            257,
            7363,
            2141,
            13,
            51122
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11310615248352517,
          "compression_ratio": 1.6926070038910506,
          "no_speech_prob": 0.0021671277936547995,
          "confidence": 0.9978328722063452
        },
        {
          "id": 63,
          "start": 155.2,
          "end": 158.6,
          "text": "And now if I access that key of one and run that,",
          "tokens": [
            51122,
            400,
            586,
            498,
            286,
            2105,
            300,
            2141,
            295,
            472,
            293,
            1190,
            300,
            11,
            51292
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11310615248352517,
          "compression_ratio": 1.6926070038910506,
          "no_speech_prob": 0.0021671277936547995,
          "confidence": 0.9978328722063452
        },
        {
          "id": 64,
          "start": 158.6,
          "end": 160.76,
          "text": "then you can see that that gave us John.",
          "tokens": [
            51292,
            550,
            291,
            393,
            536,
            300,
            300,
            2729,
            505,
            2619,
            13,
            51400
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11310615248352517,
          "compression_ratio": 1.6926070038910506,
          "no_speech_prob": 0.0021671277936547995,
          "confidence": 0.9978328722063452
        },
        {
          "id": 65,
          "start": 160.76,
          "end": 165.16,
          "text": "But I'm going to set that back to be a string for now",
          "tokens": [
            51400,
            583,
            286,
            478,
            516,
            281,
            992,
            300,
            646,
            281,
            312,
            257,
            6798,
            337,
            586,
            51620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11310615248352517,
          "compression_ratio": 1.6926070038910506,
          "no_speech_prob": 0.0021671277936547995,
          "confidence": 0.9978328722063452
        },
        {
          "id": 66,
          "start": 165.16,
          "end": 166.72,
          "text": "and keep that as name.",
          "tokens": [
            51620,
            293,
            1066,
            300,
            382,
            1315,
            13,
            51698
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11310615248352517,
          "compression_ratio": 1.6926070038910506,
          "no_speech_prob": 0.0021671277936547995,
          "confidence": 0.9978328722063452
        },
        {
          "id": 67,
          "start": 166.72,
          "end": 168.28,
          "text": "So what happens if we try to access",
          "tokens": [
            50364,
            407,
            437,
            2314,
            498,
            321,
            853,
            281,
            2105,
            50442
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08771425053693246,
          "compression_ratio": 1.8666666666666667,
          "no_speech_prob": 0.0010653826175257564,
          "confidence": 0.9989346173824742
        },
        {
          "id": 68,
          "start": 168.28,
          "end": 170.12,
          "text": "a key that doesn't exist?",
          "tokens": [
            50442,
            257,
            2141,
            300,
            1177,
            380,
            2514,
            30,
            50534
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08771425053693246,
          "compression_ratio": 1.8666666666666667,
          "no_speech_prob": 0.0010653826175257564,
          "confidence": 0.9989346173824742
        },
        {
          "id": 69,
          "start": 170.12,
          "end": 173.16,
          "text": "So for example, I'll try to access the key of phone",
          "tokens": [
            50534,
            407,
            337,
            1365,
            11,
            286,
            603,
            853,
            281,
            2105,
            264,
            2141,
            295,
            2593,
            50686
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08771425053693246,
          "compression_ratio": 1.8666666666666667,
          "no_speech_prob": 0.0010653826175257564,
          "confidence": 0.9989346173824742
        }
      ],
      "duration": 29.52000000000001
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 168.16,
      "end_time": 196.34,
      "text": "So what happens if we try to access a key that doesn't exist? So for example, I'll try to access the key of phone for a phone number. So if we run this, then we can see that we get a key error because that phone key doesn't exist. Now throwing an error when a key doesn't exist might not always be what we want. So sometimes we might just want to return none or a default value. So to do this, we can use the dictionary's get method. So instead of accessing this key this way,",
      "original_segments": [
        {
          "id": 70,
          "start": 173.16,
          "end": 174.56,
          "text": "for a phone number.",
          "tokens": [
            50686,
            337,
            257,
            2593,
            1230,
            13,
            50756
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08771425053693246,
          "compression_ratio": 1.8666666666666667,
          "no_speech_prob": 0.0010653826175257564,
          "confidence": 0.9989346173824742
        },
        {
          "id": 71,
          "start": 174.56,
          "end": 177.72,
          "text": "So if we run this, then we can see that we get a key error",
          "tokens": [
            50756,
            407,
            498,
            321,
            1190,
            341,
            11,
            550,
            321,
            393,
            536,
            300,
            321,
            483,
            257,
            2141,
            6713,
            50914
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08771425053693246,
          "compression_ratio": 1.8666666666666667,
          "no_speech_prob": 0.0010653826175257564,
          "confidence": 0.9989346173824742
        },
        {
          "id": 72,
          "start": 177.72,
          "end": 180.4,
          "text": "because that phone key doesn't exist.",
          "tokens": [
            50914,
            570,
            300,
            2593,
            2141,
            1177,
            380,
            2514,
            13,
            51048
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08771425053693246,
          "compression_ratio": 1.8666666666666667,
          "no_speech_prob": 0.0010653826175257564,
          "confidence": 0.9989346173824742
        },
        {
          "id": 73,
          "start": 180.4,
          "end": 183.16,
          "text": "Now throwing an error when a key doesn't exist",
          "tokens": [
            51048,
            823,
            10238,
            364,
            6713,
            562,
            257,
            2141,
            1177,
            380,
            2514,
            51186
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08771425053693246,
          "compression_ratio": 1.8666666666666667,
          "no_speech_prob": 0.0010653826175257564,
          "confidence": 0.9989346173824742
        },
        {
          "id": 74,
          "start": 183.16,
          "end": 185.07999999999998,
          "text": "might not always be what we want.",
          "tokens": [
            51186,
            1062,
            406,
            1009,
            312,
            437,
            321,
            528,
            13,
            51282
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08771425053693246,
          "compression_ratio": 1.8666666666666667,
          "no_speech_prob": 0.0010653826175257564,
          "confidence": 0.9989346173824742
        },
        {
          "id": 75,
          "start": 185.07999999999998,
          "end": 187.2,
          "text": "So sometimes we might just want to return",
          "tokens": [
            51282,
            407,
            2171,
            321,
            1062,
            445,
            528,
            281,
            2736,
            51388
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08771425053693246,
          "compression_ratio": 1.8666666666666667,
          "no_speech_prob": 0.0010653826175257564,
          "confidence": 0.9989346173824742
        },
        {
          "id": 76,
          "start": 187.2,
          "end": 189.16,
          "text": "none or a default value.",
          "tokens": [
            51388,
            6022,
            420,
            257,
            7576,
            2158,
            13,
            51486
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08771425053693246,
          "compression_ratio": 1.8666666666666667,
          "no_speech_prob": 0.0010653826175257564,
          "confidence": 0.9989346173824742
        },
        {
          "id": 77,
          "start": 189.16,
          "end": 192.52,
          "text": "So to do this, we can use the dictionary's get method.",
          "tokens": [
            51486,
            407,
            281,
            360,
            341,
            11,
            321,
            393,
            764,
            264,
            25890,
            311,
            483,
            3170,
            13,
            51654
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08771425053693246,
          "compression_ratio": 1.8666666666666667,
          "no_speech_prob": 0.0010653826175257564,
          "confidence": 0.9989346173824742
        },
        {
          "id": 78,
          "start": 192.52,
          "end": 196.34,
          "text": "So instead of accessing this key this way,",
          "tokens": [
            51654,
            407,
            2602,
            295,
            26440,
            341,
            2141,
            341,
            636,
            11,
            51845
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08771425053693246,
          "compression_ratio": 1.8666666666666667,
          "no_speech_prob": 0.0010653826175257564,
          "confidence": 0.9989346173824742
        }
      ],
      "duration": 28.180000000000007
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 191.34,
      "end_time": 218.54,
      "text": "So to do this, we can use the dictionary's get method. So instead of accessing this key this way, if we were instead to say .get and use the get method. So let's just go ahead and get the name since we know that that key already exists. So if I run that, then we could see that that works just like before and gave us the value of John. But if I try to access a key that doesn't exist, so we'll try to access that phone key again, if I save that and run it, then by default,",
      "original_segments": [
        {
          "id": 79,
          "start": 196.34,
          "end": 201.14000000000001,
          "text": "if we were instead to say .get and use the get method.",
          "tokens": [
            50364,
            498,
            321,
            645,
            2602,
            281,
            584,
            2411,
            847,
            293,
            764,
            264,
            483,
            3170,
            13,
            50604
          ],
          "temperature": 0.0,
          "avg_logprob": -0.079481024137685,
          "compression_ratio": 1.8191881918819188,
          "no_speech_prob": 0.00011941515549551696,
          "confidence": 0.9998805848445045
        },
        {
          "id": 80,
          "start": 201.14000000000001,
          "end": 202.94,
          "text": "So let's just go ahead and get the name",
          "tokens": [
            50604,
            407,
            718,
            311,
            445,
            352,
            2286,
            293,
            483,
            264,
            1315,
            50694
          ],
          "temperature": 0.0,
          "avg_logprob": -0.079481024137685,
          "compression_ratio": 1.8191881918819188,
          "no_speech_prob": 0.00011941515549551696,
          "confidence": 0.9998805848445045
        },
        {
          "id": 81,
          "start": 202.94,
          "end": 205.14000000000001,
          "text": "since we know that that key already exists.",
          "tokens": [
            50694,
            1670,
            321,
            458,
            300,
            300,
            2141,
            1217,
            8198,
            13,
            50804
          ],
          "temperature": 0.0,
          "avg_logprob": -0.079481024137685,
          "compression_ratio": 1.8191881918819188,
          "no_speech_prob": 0.00011941515549551696,
          "confidence": 0.9998805848445045
        },
        {
          "id": 82,
          "start": 205.14000000000001,
          "end": 207.54,
          "text": "So if I run that, then we could see that that works",
          "tokens": [
            50804,
            407,
            498,
            286,
            1190,
            300,
            11,
            550,
            321,
            727,
            536,
            300,
            300,
            1985,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.079481024137685,
          "compression_ratio": 1.8191881918819188,
          "no_speech_prob": 0.00011941515549551696,
          "confidence": 0.9998805848445045
        },
        {
          "id": 83,
          "start": 207.54,
          "end": 210.38,
          "text": "just like before and gave us the value of John.",
          "tokens": [
            50924,
            445,
            411,
            949,
            293,
            2729,
            505,
            264,
            2158,
            295,
            2619,
            13,
            51066
          ],
          "temperature": 0.0,
          "avg_logprob": -0.079481024137685,
          "compression_ratio": 1.8191881918819188,
          "no_speech_prob": 0.00011941515549551696,
          "confidence": 0.9998805848445045
        },
        {
          "id": 84,
          "start": 210.38,
          "end": 212.9,
          "text": "But if I try to access a key that doesn't exist,",
          "tokens": [
            51066,
            583,
            498,
            286,
            853,
            281,
            2105,
            257,
            2141,
            300,
            1177,
            380,
            2514,
            11,
            51192
          ],
          "temperature": 0.0,
          "avg_logprob": -0.079481024137685,
          "compression_ratio": 1.8191881918819188,
          "no_speech_prob": 0.00011941515549551696,
          "confidence": 0.9998805848445045
        },
        {
          "id": 85,
          "start": 212.9,
          "end": 215.38,
          "text": "so we'll try to access that phone key again,",
          "tokens": [
            51192,
            370,
            321,
            603,
            853,
            281,
            2105,
            300,
            2593,
            2141,
            797,
            11,
            51316
          ],
          "temperature": 0.0,
          "avg_logprob": -0.079481024137685,
          "compression_ratio": 1.8191881918819188,
          "no_speech_prob": 0.00011941515549551696,
          "confidence": 0.9998805848445045
        },
        {
          "id": 86,
          "start": 215.38,
          "end": 218.54,
          "text": "if I save that and run it, then by default,",
          "tokens": [
            51316,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            11,
            550,
            538,
            7576,
            11,
            51474
          ],
          "temperature": 0.0,
          "avg_logprob": -0.079481024137685,
          "compression_ratio": 1.8191881918819188,
          "no_speech_prob": 0.00011941515549551696,
          "confidence": 0.9998805848445045
        }
      ],
      "duration": 27.19999999999999
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 213.54,
      "end_time": 242.85999999999999,
      "text": "so we'll try to access that phone key again, if I save that and run it, then by default, this get method returns none instead of an error. And we can also specify a default value for keys that don't exist. So to do this, we can just pass the default value that we want as a second argument to this get method. So I'll just put in a comma here and we'll put in a string that just says not found. So if I save that and run it, now we can see that for keys that don't exist, it returns not found.",
      "original_segments": [
        {
          "id": 87,
          "start": 218.54,
          "end": 221.7,
          "text": "this get method returns none instead of an error.",
          "tokens": [
            51474,
            341,
            483,
            3170,
            11247,
            6022,
            2602,
            295,
            364,
            6713,
            13,
            51632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.079481024137685,
          "compression_ratio": 1.8191881918819188,
          "no_speech_prob": 0.00011941515549551696,
          "confidence": 0.9998805848445045
        },
        {
          "id": 88,
          "start": 221.7,
          "end": 224.02,
          "text": "And we can also specify a default value",
          "tokens": [
            51632,
            400,
            321,
            393,
            611,
            16500,
            257,
            7576,
            2158,
            51748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.079481024137685,
          "compression_ratio": 1.8191881918819188,
          "no_speech_prob": 0.00011941515549551696,
          "confidence": 0.9998805848445045
        },
        {
          "id": 89,
          "start": 224.02,
          "end": 225.66,
          "text": "for keys that don't exist.",
          "tokens": [
            51748,
            337,
            9317,
            300,
            500,
            380,
            2514,
            13,
            51830
          ],
          "temperature": 0.0,
          "avg_logprob": -0.079481024137685,
          "compression_ratio": 1.8191881918819188,
          "no_speech_prob": 0.00011941515549551696,
          "confidence": 0.9998805848445045
        },
        {
          "id": 90,
          "start": 225.66,
          "end": 228.26,
          "text": "So to do this, we can just pass the default value",
          "tokens": [
            50364,
            407,
            281,
            360,
            341,
            11,
            321,
            393,
            445,
            1320,
            264,
            7576,
            2158,
            50494
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06145185273269127,
          "compression_ratio": 1.8088235294117647,
          "no_speech_prob": 0.00028537854086607695,
          "confidence": 0.9997146214591339
        },
        {
          "id": 91,
          "start": 228.26,
          "end": 231.62,
          "text": "that we want as a second argument to this get method.",
          "tokens": [
            50494,
            300,
            321,
            528,
            382,
            257,
            1150,
            6770,
            281,
            341,
            483,
            3170,
            13,
            50662
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06145185273269127,
          "compression_ratio": 1.8088235294117647,
          "no_speech_prob": 0.00028537854086607695,
          "confidence": 0.9997146214591339
        },
        {
          "id": 92,
          "start": 231.62,
          "end": 233.28,
          "text": "So I'll just put in a comma here",
          "tokens": [
            50662,
            407,
            286,
            603,
            445,
            829,
            294,
            257,
            22117,
            510,
            50745
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06145185273269127,
          "compression_ratio": 1.8088235294117647,
          "no_speech_prob": 0.00028537854086607695,
          "confidence": 0.9997146214591339
        },
        {
          "id": 93,
          "start": 233.28,
          "end": 236.96,
          "text": "and we'll put in a string that just says not found.",
          "tokens": [
            50745,
            293,
            321,
            603,
            829,
            294,
            257,
            6798,
            300,
            445,
            1619,
            406,
            1352,
            13,
            50929
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06145185273269127,
          "compression_ratio": 1.8088235294117647,
          "no_speech_prob": 0.00028537854086607695,
          "confidence": 0.9997146214591339
        },
        {
          "id": 94,
          "start": 236.96,
          "end": 238.74,
          "text": "So if I save that and run it,",
          "tokens": [
            50929,
            407,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            11,
            51018
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06145185273269127,
          "compression_ratio": 1.8088235294117647,
          "no_speech_prob": 0.00028537854086607695,
          "confidence": 0.9997146214591339
        },
        {
          "id": 95,
          "start": 238.74,
          "end": 240.78,
          "text": "now we can see that for keys that don't exist,",
          "tokens": [
            51018,
            586,
            321,
            393,
            536,
            300,
            337,
            9317,
            300,
            500,
            380,
            2514,
            11,
            51120
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06145185273269127,
          "compression_ratio": 1.8088235294117647,
          "no_speech_prob": 0.00028537854086607695,
          "confidence": 0.9997146214591339
        },
        {
          "id": 96,
          "start": 240.78,
          "end": 242.85999999999999,
          "text": "it returns not found.",
          "tokens": [
            51120,
            309,
            11247,
            406,
            1352,
            13,
            51224
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06145185273269127,
          "compression_ratio": 1.8088235294117647,
          "no_speech_prob": 0.00028537854086607695,
          "confidence": 0.9997146214591339
        }
      ],
      "duration": 29.319999999999993
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 237.85999999999999,
      "end_time": 265.86,
      "text": "So if I save that and run it, now we can see that for keys that don't exist, it returns not found. Okay, so let's look at how we can add a new entry to our dictionary. So let's say that we wanted to add that phone number to our student dictionary. And we'll set this just above our print statement here. So to do this, it's just as easy as saying student, and then we will set the key that we wanna set and set this equal to, and we'll just set this equal to a string of 555, 5555.",
      "original_segments": [
        {
          "id": 97,
          "start": 242.85999999999999,
          "end": 245.51999999999998,
          "text": "Okay, so let's look at how we can add a new entry",
          "tokens": [
            51224,
            1033,
            11,
            370,
            718,
            311,
            574,
            412,
            577,
            321,
            393,
            909,
            257,
            777,
            8729,
            51357
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06145185273269127,
          "compression_ratio": 1.8088235294117647,
          "no_speech_prob": 0.00028537854086607695,
          "confidence": 0.9997146214591339
        },
        {
          "id": 98,
          "start": 245.51999999999998,
          "end": 246.57999999999998,
          "text": "to our dictionary.",
          "tokens": [
            51357,
            281,
            527,
            25890,
            13,
            51410
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06145185273269127,
          "compression_ratio": 1.8088235294117647,
          "no_speech_prob": 0.00028537854086607695,
          "confidence": 0.9997146214591339
        },
        {
          "id": 99,
          "start": 246.57999999999998,
          "end": 248.98,
          "text": "So let's say that we wanted to add that phone number",
          "tokens": [
            51410,
            407,
            718,
            311,
            584,
            300,
            321,
            1415,
            281,
            909,
            300,
            2593,
            1230,
            51530
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06145185273269127,
          "compression_ratio": 1.8088235294117647,
          "no_speech_prob": 0.00028537854086607695,
          "confidence": 0.9997146214591339
        },
        {
          "id": 100,
          "start": 248.98,
          "end": 250.38,
          "text": "to our student dictionary.",
          "tokens": [
            51530,
            281,
            527,
            3107,
            25890,
            13,
            51600
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06145185273269127,
          "compression_ratio": 1.8088235294117647,
          "no_speech_prob": 0.00028537854086607695,
          "confidence": 0.9997146214591339
        },
        {
          "id": 101,
          "start": 250.38,
          "end": 253.42,
          "text": "And we'll set this just above our print statement here.",
          "tokens": [
            51600,
            400,
            321,
            603,
            992,
            341,
            445,
            3673,
            527,
            4482,
            5629,
            510,
            13,
            51752
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06145185273269127,
          "compression_ratio": 1.8088235294117647,
          "no_speech_prob": 0.00028537854086607695,
          "confidence": 0.9997146214591339
        },
        {
          "id": 102,
          "start": 253.42,
          "end": 256.74,
          "text": "So to do this, it's just as easy as saying student,",
          "tokens": [
            50364,
            407,
            281,
            360,
            341,
            11,
            309,
            311,
            445,
            382,
            1858,
            382,
            1566,
            3107,
            11,
            50530
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06977769206551944,
          "compression_ratio": 1.76,
          "no_speech_prob": 0.0014477088116109371,
          "confidence": 0.9985522911883891
        },
        {
          "id": 103,
          "start": 256.74,
          "end": 259.78,
          "text": "and then we will set the key that we wanna set",
          "tokens": [
            50530,
            293,
            550,
            321,
            486,
            992,
            264,
            2141,
            300,
            321,
            1948,
            992,
            50682
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06977769206551944,
          "compression_ratio": 1.76,
          "no_speech_prob": 0.0014477088116109371,
          "confidence": 0.9985522911883891
        },
        {
          "id": 104,
          "start": 259.78,
          "end": 262.18,
          "text": "and set this equal to, and we'll just set this equal",
          "tokens": [
            50682,
            293,
            992,
            341,
            2681,
            281,
            11,
            293,
            321,
            603,
            445,
            992,
            341,
            2681,
            50802
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06977769206551944,
          "compression_ratio": 1.76,
          "no_speech_prob": 0.0014477088116109371,
          "confidence": 0.9985522911883891
        },
        {
          "id": 105,
          "start": 262.18,
          "end": 265.86,
          "text": "to a string of 555, 5555.",
          "tokens": [
            50802,
            281,
            257,
            6798,
            295,
            12330,
            20,
            11,
            12330,
            13622,
            13,
            50986
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06977769206551944,
          "compression_ratio": 1.76,
          "no_speech_prob": 0.0014477088116109371,
          "confidence": 0.9985522911883891
        }
      ],
      "duration": 28.00000000000003
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 260.86,
      "end_time": 288.7,
      "text": "and set this equal to, and we'll just set this equal to a string of 555, 5555. And if I save that and run it, then we can see that it found that value of the phone key when we ran our print statement. Now, if a key already exists, if we set its value like this, then it will update the value of that key. So for example, if right below this, I was to say student and name is equal to, and we'll just pass in Jane.",
      "original_segments": [
        {
          "id": 106,
          "start": 265.86,
          "end": 267.97999999999996,
          "text": "And if I save that and run it,",
          "tokens": [
            50986,
            400,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            11,
            51092
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06977769206551944,
          "compression_ratio": 1.76,
          "no_speech_prob": 0.0014477088116109371,
          "confidence": 0.9985522911883891
        },
        {
          "id": 107,
          "start": 267.97999999999996,
          "end": 269.91999999999996,
          "text": "then we can see that it found that value of the phone key",
          "tokens": [
            51092,
            550,
            321,
            393,
            536,
            300,
            309,
            1352,
            300,
            2158,
            295,
            264,
            2593,
            2141,
            51189
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06977769206551944,
          "compression_ratio": 1.76,
          "no_speech_prob": 0.0014477088116109371,
          "confidence": 0.9985522911883891
        },
        {
          "id": 108,
          "start": 269.91999999999996,
          "end": 271.62,
          "text": "when we ran our print statement.",
          "tokens": [
            51189,
            562,
            321,
            5872,
            527,
            4482,
            5629,
            13,
            51274
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06977769206551944,
          "compression_ratio": 1.76,
          "no_speech_prob": 0.0014477088116109371,
          "confidence": 0.9985522911883891
        },
        {
          "id": 109,
          "start": 271.62,
          "end": 273.94,
          "text": "Now, if a key already exists,",
          "tokens": [
            51274,
            823,
            11,
            498,
            257,
            2141,
            1217,
            8198,
            11,
            51390
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06977769206551944,
          "compression_ratio": 1.76,
          "no_speech_prob": 0.0014477088116109371,
          "confidence": 0.9985522911883891
        },
        {
          "id": 110,
          "start": 273.94,
          "end": 276.18,
          "text": "if we set its value like this,",
          "tokens": [
            51390,
            498,
            321,
            992,
            1080,
            2158,
            411,
            341,
            11,
            51502
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06977769206551944,
          "compression_ratio": 1.76,
          "no_speech_prob": 0.0014477088116109371,
          "confidence": 0.9985522911883891
        },
        {
          "id": 111,
          "start": 276.18,
          "end": 278.65999999999997,
          "text": "then it will update the value of that key.",
          "tokens": [
            51502,
            550,
            309,
            486,
            5623,
            264,
            2158,
            295,
            300,
            2141,
            13,
            51626
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06977769206551944,
          "compression_ratio": 1.76,
          "no_speech_prob": 0.0014477088116109371,
          "confidence": 0.9985522911883891
        },
        {
          "id": 112,
          "start": 278.65999999999997,
          "end": 281.34,
          "text": "So for example, if right below this,",
          "tokens": [
            51626,
            407,
            337,
            1365,
            11,
            498,
            558,
            2507,
            341,
            11,
            51760
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06977769206551944,
          "compression_ratio": 1.76,
          "no_speech_prob": 0.0014477088116109371,
          "confidence": 0.9985522911883891
        },
        {
          "id": 113,
          "start": 281.34,
          "end": 286.09999999999997,
          "text": "I was to say student and name is equal to,",
          "tokens": [
            50364,
            286,
            390,
            281,
            584,
            3107,
            293,
            1315,
            307,
            2681,
            281,
            11,
            50602
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08066027624565258,
          "compression_ratio": 1.8169642857142858,
          "no_speech_prob": 0.0005099169793538749,
          "confidence": 0.9994900830206461
        },
        {
          "id": 114,
          "start": 286.09999999999997,
          "end": 288.7,
          "text": "and we'll just pass in Jane.",
          "tokens": [
            50602,
            293,
            321,
            603,
            445,
            1320,
            294,
            13048,
            13,
            50732
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08066027624565258,
          "compression_ratio": 1.8169642857142858,
          "no_speech_prob": 0.0005099169793538749,
          "confidence": 0.9994900830206461
        }
      ],
      "duration": 27.839999999999975
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 283.7,
      "end_time": 311.78,
      "text": "I was to say student and name is equal to, and we'll just pass in Jane. If I save that and then print out, I'll comment out that for now. If I print out our entire student variable, then we can see down here that the value for name was updated when we assigned it to Jane. Now we can also update values using the update method. Now this is especially useful when we want to update multiple values at a time. So for example, let's say that we wanted",
      "original_segments": [
        {
          "id": 115,
          "start": 288.7,
          "end": 291.14,
          "text": "If I save that and then print out,",
          "tokens": [
            50732,
            759,
            286,
            3155,
            300,
            293,
            550,
            4482,
            484,
            11,
            50854
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08066027624565258,
          "compression_ratio": 1.8169642857142858,
          "no_speech_prob": 0.0005099169793538749,
          "confidence": 0.9994900830206461
        },
        {
          "id": 116,
          "start": 291.14,
          "end": 292.65999999999997,
          "text": "I'll comment out that for now.",
          "tokens": [
            50854,
            286,
            603,
            2871,
            484,
            300,
            337,
            586,
            13,
            50930
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08066027624565258,
          "compression_ratio": 1.8169642857142858,
          "no_speech_prob": 0.0005099169793538749,
          "confidence": 0.9994900830206461
        },
        {
          "id": 117,
          "start": 292.65999999999997,
          "end": 295.56,
          "text": "If I print out our entire student variable,",
          "tokens": [
            50930,
            759,
            286,
            4482,
            484,
            527,
            2302,
            3107,
            7006,
            11,
            51075
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08066027624565258,
          "compression_ratio": 1.8169642857142858,
          "no_speech_prob": 0.0005099169793538749,
          "confidence": 0.9994900830206461
        },
        {
          "id": 118,
          "start": 296.64,
          "end": 299.21999999999997,
          "text": "then we can see down here that the value for name",
          "tokens": [
            51129,
            550,
            321,
            393,
            536,
            760,
            510,
            300,
            264,
            2158,
            337,
            1315,
            51258
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08066027624565258,
          "compression_ratio": 1.8169642857142858,
          "no_speech_prob": 0.0005099169793538749,
          "confidence": 0.9994900830206461
        },
        {
          "id": 119,
          "start": 299.21999999999997,
          "end": 302.02,
          "text": "was updated when we assigned it to Jane.",
          "tokens": [
            51258,
            390,
            10588,
            562,
            321,
            13279,
            309,
            281,
            13048,
            13,
            51398
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08066027624565258,
          "compression_ratio": 1.8169642857142858,
          "no_speech_prob": 0.0005099169793538749,
          "confidence": 0.9994900830206461
        },
        {
          "id": 120,
          "start": 302.02,
          "end": 305.53999999999996,
          "text": "Now we can also update values using the update method.",
          "tokens": [
            51398,
            823,
            321,
            393,
            611,
            5623,
            4190,
            1228,
            264,
            5623,
            3170,
            13,
            51574
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08066027624565258,
          "compression_ratio": 1.8169642857142858,
          "no_speech_prob": 0.0005099169793538749,
          "confidence": 0.9994900830206461
        },
        {
          "id": 121,
          "start": 305.53999999999996,
          "end": 306.97999999999996,
          "text": "Now this is especially useful",
          "tokens": [
            51574,
            823,
            341,
            307,
            2318,
            4420,
            51646
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08066027624565258,
          "compression_ratio": 1.8169642857142858,
          "no_speech_prob": 0.0005099169793538749,
          "confidence": 0.9994900830206461
        },
        {
          "id": 122,
          "start": 306.97999999999996,
          "end": 310.02,
          "text": "when we want to update multiple values at a time.",
          "tokens": [
            51646,
            562,
            321,
            528,
            281,
            5623,
            3866,
            4190,
            412,
            257,
            565,
            13,
            51798
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08066027624565258,
          "compression_ratio": 1.8169642857142858,
          "no_speech_prob": 0.0005099169793538749,
          "confidence": 0.9994900830206461
        },
        {
          "id": 123,
          "start": 310.02,
          "end": 311.78,
          "text": "So for example, let's say that we wanted",
          "tokens": [
            50364,
            407,
            337,
            1365,
            11,
            718,
            311,
            584,
            300,
            321,
            1415,
            50452
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08227958517559504,
          "compression_ratio": 1.8009049773755657,
          "no_speech_prob": 9.89844193099998e-05,
          "confidence": 0.99990101558069
        }
      ],
      "duration": 28.079999999999984
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 306.78,
      "end_time": 332.59999999999997,
      "text": "Now this is especially useful when we want to update multiple values at a time. So for example, let's say that we wanted to add this phone number, update this name, and also update the age as well. So to do this all in one shot, we could say student.update, and this takes in a dictionary as an argument. And the dictionary is just everything that we either wanna add or update. So we can say that we wanna update that name to Jane,",
      "original_segments": [
        {
          "id": 124,
          "start": 311.78,
          "end": 315.02,
          "text": "to add this phone number, update this name,",
          "tokens": [
            50452,
            281,
            909,
            341,
            2593,
            1230,
            11,
            5623,
            341,
            1315,
            11,
            50614
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08227958517559504,
          "compression_ratio": 1.8009049773755657,
          "no_speech_prob": 9.89844193099998e-05,
          "confidence": 0.99990101558069
        },
        {
          "id": 125,
          "start": 315.02,
          "end": 317.38,
          "text": "and also update the age as well.",
          "tokens": [
            50614,
            293,
            611,
            5623,
            264,
            3205,
            382,
            731,
            13,
            50732
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08227958517559504,
          "compression_ratio": 1.8009049773755657,
          "no_speech_prob": 9.89844193099998e-05,
          "confidence": 0.99990101558069
        },
        {
          "id": 126,
          "start": 317.38,
          "end": 319.7,
          "text": "So to do this all in one shot,",
          "tokens": [
            50732,
            407,
            281,
            360,
            341,
            439,
            294,
            472,
            3347,
            11,
            50848
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08227958517559504,
          "compression_ratio": 1.8009049773755657,
          "no_speech_prob": 9.89844193099998e-05,
          "confidence": 0.99990101558069
        },
        {
          "id": 127,
          "start": 319.7,
          "end": 322.32,
          "text": "we could say student.update,",
          "tokens": [
            50848,
            321,
            727,
            584,
            3107,
            13,
            1010,
            17393,
            11,
            50979
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08227958517559504,
          "compression_ratio": 1.8009049773755657,
          "no_speech_prob": 9.89844193099998e-05,
          "confidence": 0.99990101558069
        },
        {
          "id": 128,
          "start": 322.32,
          "end": 325.29999999999995,
          "text": "and this takes in a dictionary as an argument.",
          "tokens": [
            50979,
            293,
            341,
            2516,
            294,
            257,
            25890,
            382,
            364,
            6770,
            13,
            51128
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08227958517559504,
          "compression_ratio": 1.8009049773755657,
          "no_speech_prob": 9.89844193099998e-05,
          "confidence": 0.99990101558069
        },
        {
          "id": 129,
          "start": 325.29999999999995,
          "end": 326.94,
          "text": "And the dictionary is just everything",
          "tokens": [
            51128,
            400,
            264,
            25890,
            307,
            445,
            1203,
            51210
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08227958517559504,
          "compression_ratio": 1.8009049773755657,
          "no_speech_prob": 9.89844193099998e-05,
          "confidence": 0.99990101558069
        },
        {
          "id": 130,
          "start": 326.94,
          "end": 328.97999999999996,
          "text": "that we either wanna add or update.",
          "tokens": [
            51210,
            300,
            321,
            2139,
            1948,
            909,
            420,
            5623,
            13,
            51312
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08227958517559504,
          "compression_ratio": 1.8009049773755657,
          "no_speech_prob": 9.89844193099998e-05,
          "confidence": 0.99990101558069
        },
        {
          "id": 131,
          "start": 328.97999999999996,
          "end": 332.59999999999997,
          "text": "So we can say that we wanna update that name to Jane,",
          "tokens": [
            51312,
            407,
            321,
            393,
            584,
            300,
            321,
            1948,
            5623,
            300,
            1315,
            281,
            13048,
            11,
            51493
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08227958517559504,
          "compression_ratio": 1.8009049773755657,
          "no_speech_prob": 9.89844193099998e-05,
          "confidence": 0.99990101558069
        }
      ],
      "duration": 25.819999999999993
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 327.59999999999997,
      "end_time": 357.14,
      "text": "that we either wanna add or update. So we can say that we wanna update that name to Jane, and we will update the age to, let's say, 26. And we also want to add this phone key, and that phone key will just set as what we had before, 555, 5555. Now if I save that and run it, then we can see that just by running this one statement, we updated the name to Jane, the age is now 26, and it has this new key of phone number.",
      "original_segments": [
        {
          "id": 132,
          "start": 332.59999999999997,
          "end": 337.0,
          "text": "and we will update the age to, let's say, 26.",
          "tokens": [
            51493,
            293,
            321,
            486,
            5623,
            264,
            3205,
            281,
            11,
            718,
            311,
            584,
            11,
            7551,
            13,
            51713
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08227958517559504,
          "compression_ratio": 1.8009049773755657,
          "no_speech_prob": 9.89844193099998e-05,
          "confidence": 0.99990101558069
        },
        {
          "id": 133,
          "start": 337.0,
          "end": 340.06,
          "text": "And we also want to add this phone key,",
          "tokens": [
            50364,
            400,
            321,
            611,
            528,
            281,
            909,
            341,
            2593,
            2141,
            11,
            50517
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08939431925288967,
          "compression_ratio": 1.672340425531915,
          "no_speech_prob": 0.0011178539134562016,
          "confidence": 0.9988821460865438
        },
        {
          "id": 134,
          "start": 340.06,
          "end": 342.8,
          "text": "and that phone key will just set as what we had before,",
          "tokens": [
            50517,
            293,
            300,
            2593,
            2141,
            486,
            445,
            992,
            382,
            437,
            321,
            632,
            949,
            11,
            50654
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08939431925288967,
          "compression_ratio": 1.672340425531915,
          "no_speech_prob": 0.0011178539134562016,
          "confidence": 0.9988821460865438
        },
        {
          "id": 135,
          "start": 342.8,
          "end": 344.72,
          "text": "555, 5555.",
          "tokens": [
            50654,
            12330,
            20,
            11,
            12330,
            13622,
            13,
            50750
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08939431925288967,
          "compression_ratio": 1.672340425531915,
          "no_speech_prob": 0.0011178539134562016,
          "confidence": 0.9988821460865438
        },
        {
          "id": 136,
          "start": 344.72,
          "end": 346.72,
          "text": "Now if I save that and run it,",
          "tokens": [
            50750,
            823,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            11,
            50850
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08939431925288967,
          "compression_ratio": 1.672340425531915,
          "no_speech_prob": 0.0011178539134562016,
          "confidence": 0.9988821460865438
        },
        {
          "id": 137,
          "start": 346.72,
          "end": 350.12,
          "text": "then we can see that just by running this one statement,",
          "tokens": [
            50850,
            550,
            321,
            393,
            536,
            300,
            445,
            538,
            2614,
            341,
            472,
            5629,
            11,
            51020
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08939431925288967,
          "compression_ratio": 1.672340425531915,
          "no_speech_prob": 0.0011178539134562016,
          "confidence": 0.9988821460865438
        },
        {
          "id": 138,
          "start": 350.12,
          "end": 354.52,
          "text": "we updated the name to Jane, the age is now 26,",
          "tokens": [
            51020,
            321,
            10588,
            264,
            1315,
            281,
            13048,
            11,
            264,
            3205,
            307,
            586,
            7551,
            11,
            51240
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08939431925288967,
          "compression_ratio": 1.672340425531915,
          "no_speech_prob": 0.0011178539134562016,
          "confidence": 0.9988821460865438
        },
        {
          "id": 139,
          "start": 354.52,
          "end": 357.14,
          "text": "and it has this new key of phone number.",
          "tokens": [
            51240,
            293,
            309,
            575,
            341,
            777,
            2141,
            295,
            2593,
            1230,
            13,
            51371
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08939431925288967,
          "compression_ratio": 1.672340425531915,
          "no_speech_prob": 0.0011178539134562016,
          "confidence": 0.9988821460865438
        }
      ],
      "duration": 29.54000000000002
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 352.14,
      "end_time": 379.23999999999995,
      "text": "we updated the name to Jane, the age is now 26, and it has this new key of phone number. Okay, so now let's say that we wanted to delete a specific key and its value. Now one way that we can do this is by using the del keyword, which stands for delete. So let me just remove these updates here, and then we can say, so let's say that we wanted to delete the student's age. So it's as easy as just saying del student age,",
      "original_segments": [
        {
          "id": 140,
          "start": 357.14,
          "end": 359.0,
          "text": "Okay, so now let's say that we wanted",
          "tokens": [
            51371,
            1033,
            11,
            370,
            586,
            718,
            311,
            584,
            300,
            321,
            1415,
            51464
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08939431925288967,
          "compression_ratio": 1.672340425531915,
          "no_speech_prob": 0.0011178539134562016,
          "confidence": 0.9988821460865438
        },
        {
          "id": 141,
          "start": 359.0,
          "end": 361.8,
          "text": "to delete a specific key and its value.",
          "tokens": [
            51464,
            281,
            12097,
            257,
            2685,
            2141,
            293,
            1080,
            2158,
            13,
            51604
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08939431925288967,
          "compression_ratio": 1.672340425531915,
          "no_speech_prob": 0.0011178539134562016,
          "confidence": 0.9988821460865438
        },
        {
          "id": 142,
          "start": 361.8,
          "end": 363.4,
          "text": "Now one way that we can do this",
          "tokens": [
            51604,
            823,
            472,
            636,
            300,
            321,
            393,
            360,
            341,
            51684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08939431925288967,
          "compression_ratio": 1.672340425531915,
          "no_speech_prob": 0.0011178539134562016,
          "confidence": 0.9988821460865438
        },
        {
          "id": 143,
          "start": 363.4,
          "end": 367.21999999999997,
          "text": "is by using the del keyword, which stands for delete.",
          "tokens": [
            50364,
            307,
            538,
            1228,
            264,
            1103,
            20428,
            11,
            597,
            7382,
            337,
            12097,
            13,
            50555
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09905671361667007,
          "compression_ratio": 1.81640625,
          "no_speech_prob": 0.03852177411317825,
          "confidence": 0.9614782258868217
        },
        {
          "id": 144,
          "start": 367.21999999999997,
          "end": 370.52,
          "text": "So let me just remove these updates here,",
          "tokens": [
            50555,
            407,
            718,
            385,
            445,
            4159,
            613,
            9205,
            510,
            11,
            50720
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09905671361667007,
          "compression_ratio": 1.81640625,
          "no_speech_prob": 0.03852177411317825,
          "confidence": 0.9614782258868217
        },
        {
          "id": 145,
          "start": 370.52,
          "end": 372.15999999999997,
          "text": "and then we can say,",
          "tokens": [
            50720,
            293,
            550,
            321,
            393,
            584,
            11,
            50802
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09905671361667007,
          "compression_ratio": 1.81640625,
          "no_speech_prob": 0.03852177411317825,
          "confidence": 0.9614782258868217
        },
        {
          "id": 146,
          "start": 372.15999999999997,
          "end": 375.64,
          "text": "so let's say that we wanted to delete the student's age.",
          "tokens": [
            50802,
            370,
            718,
            311,
            584,
            300,
            321,
            1415,
            281,
            12097,
            264,
            3107,
            311,
            3205,
            13,
            50976
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09905671361667007,
          "compression_ratio": 1.81640625,
          "no_speech_prob": 0.03852177411317825,
          "confidence": 0.9614782258868217
        },
        {
          "id": 147,
          "start": 375.64,
          "end": 379.23999999999995,
          "text": "So it's as easy as just saying del student age,",
          "tokens": [
            50976,
            407,
            309,
            311,
            382,
            1858,
            382,
            445,
            1566,
            1103,
            3107,
            3205,
            11,
            51156
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09905671361667007,
          "compression_ratio": 1.81640625,
          "no_speech_prob": 0.03852177411317825,
          "confidence": 0.9614782258868217
        }
      ],
      "duration": 27.099999999999966
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 374.23999999999995,
      "end_time": 404.2,
      "text": "so let's say that we wanted to delete the student's age. So it's as easy as just saying del student age, and now if we run this, then we can see that now the only keys that exist are name and courses, so that age key was deleted. Now another way that we can remove a key and value is with the pop method. So if you remember from our video on lists, the pop method will remove, but also return that value. So that allows us to grab the removed value with a variable. So we could say age is equal to,",
      "original_segments": [
        {
          "id": 148,
          "start": 379.23999999999995,
          "end": 382.17999999999995,
          "text": "and now if we run this, then we can see that now",
          "tokens": [
            51156,
            293,
            586,
            498,
            321,
            1190,
            341,
            11,
            550,
            321,
            393,
            536,
            300,
            586,
            51303
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09905671361667007,
          "compression_ratio": 1.81640625,
          "no_speech_prob": 0.03852177411317825,
          "confidence": 0.9614782258868217
        },
        {
          "id": 149,
          "start": 382.17999999999995,
          "end": 384.47999999999996,
          "text": "the only keys that exist are name and courses,",
          "tokens": [
            51303,
            264,
            787,
            9317,
            300,
            2514,
            366,
            1315,
            293,
            7712,
            11,
            51418
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09905671361667007,
          "compression_ratio": 1.81640625,
          "no_speech_prob": 0.03852177411317825,
          "confidence": 0.9614782258868217
        },
        {
          "id": 150,
          "start": 384.47999999999996,
          "end": 386.32,
          "text": "so that age key was deleted.",
          "tokens": [
            51418,
            370,
            300,
            3205,
            2141,
            390,
            22981,
            13,
            51510
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09905671361667007,
          "compression_ratio": 1.81640625,
          "no_speech_prob": 0.03852177411317825,
          "confidence": 0.9614782258868217
        },
        {
          "id": 151,
          "start": 386.32,
          "end": 388.79999999999995,
          "text": "Now another way that we can remove a key and value",
          "tokens": [
            51510,
            823,
            1071,
            636,
            300,
            321,
            393,
            4159,
            257,
            2141,
            293,
            2158,
            51634
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09905671361667007,
          "compression_ratio": 1.81640625,
          "no_speech_prob": 0.03852177411317825,
          "confidence": 0.9614782258868217
        },
        {
          "id": 152,
          "start": 388.79999999999995,
          "end": 390.32,
          "text": "is with the pop method.",
          "tokens": [
            51634,
            307,
            365,
            264,
            1665,
            3170,
            13,
            51710
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09905671361667007,
          "compression_ratio": 1.81640625,
          "no_speech_prob": 0.03852177411317825,
          "confidence": 0.9614782258868217
        },
        {
          "id": 153,
          "start": 390.32,
          "end": 392.64,
          "text": "So if you remember from our video on lists,",
          "tokens": [
            51710,
            407,
            498,
            291,
            1604,
            490,
            527,
            960,
            322,
            14511,
            11,
            51826
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09905671361667007,
          "compression_ratio": 1.81640625,
          "no_speech_prob": 0.03852177411317825,
          "confidence": 0.9614782258868217
        },
        {
          "id": 154,
          "start": 392.68,
          "end": 396.15999999999997,
          "text": "the pop method will remove, but also return that value.",
          "tokens": [
            50366,
            264,
            1665,
            3170,
            486,
            4159,
            11,
            457,
            611,
            2736,
            300,
            2158,
            13,
            50540
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10000892888719791,
          "compression_ratio": 1.736842105263158,
          "no_speech_prob": 0.00015412612992804497,
          "confidence": 0.999845873870072
        },
        {
          "id": 155,
          "start": 396.15999999999997,
          "end": 399.68,
          "text": "So that allows us to grab the removed value with a variable.",
          "tokens": [
            50540,
            407,
            300,
            4045,
            505,
            281,
            4444,
            264,
            7261,
            2158,
            365,
            257,
            7006,
            13,
            50716
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10000892888719791,
          "compression_ratio": 1.736842105263158,
          "no_speech_prob": 0.00015412612992804497,
          "confidence": 0.999845873870072
        },
        {
          "id": 156,
          "start": 399.68,
          "end": 404.2,
          "text": "So we could say age is equal to,",
          "tokens": [
            50716,
            407,
            321,
            727,
            584,
            3205,
            307,
            2681,
            281,
            11,
            50942
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10000892888719791,
          "compression_ratio": 1.736842105263158,
          "no_speech_prob": 0.00015412612992804497,
          "confidence": 0.999845873870072
        }
      ],
      "duration": 29.960000000000036
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 399.2,
      "end_time": 427.74,
      "text": "So that allows us to grab the removed value with a variable. So we could say age is equal to, and do a student.pop, and what we wanna pop is that age. So if I save that, then we'll also print the age here below student. If I run that, then we can see that the age and value were removed from our dictionary, but we also created that age variable that contained the value that we popped off. So that popped off 25.",
      "original_segments": [
        {
          "id": 157,
          "start": 404.2,
          "end": 407.32,
          "text": "and do a student.pop,",
          "tokens": [
            50942,
            293,
            360,
            257,
            3107,
            13,
            13872,
            11,
            51098
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10000892888719791,
          "compression_ratio": 1.736842105263158,
          "no_speech_prob": 0.00015412612992804497,
          "confidence": 0.999845873870072
        },
        {
          "id": 158,
          "start": 407.32,
          "end": 410.0,
          "text": "and what we wanna pop is that age.",
          "tokens": [
            51098,
            293,
            437,
            321,
            1948,
            1665,
            307,
            300,
            3205,
            13,
            51232
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10000892888719791,
          "compression_ratio": 1.736842105263158,
          "no_speech_prob": 0.00015412612992804497,
          "confidence": 0.999845873870072
        },
        {
          "id": 159,
          "start": 410.0,
          "end": 414.56,
          "text": "So if I save that, then we'll also print the age",
          "tokens": [
            51232,
            407,
            498,
            286,
            3155,
            300,
            11,
            550,
            321,
            603,
            611,
            4482,
            264,
            3205,
            51460
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10000892888719791,
          "compression_ratio": 1.736842105263158,
          "no_speech_prob": 0.00015412612992804497,
          "confidence": 0.999845873870072
        },
        {
          "id": 160,
          "start": 414.56,
          "end": 416.12,
          "text": "here below student.",
          "tokens": [
            51460,
            510,
            2507,
            3107,
            13,
            51538
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10000892888719791,
          "compression_ratio": 1.736842105263158,
          "no_speech_prob": 0.00015412612992804497,
          "confidence": 0.999845873870072
        },
        {
          "id": 161,
          "start": 416.12,
          "end": 419.14,
          "text": "If I run that, then we can see that the age and value",
          "tokens": [
            51538,
            759,
            286,
            1190,
            300,
            11,
            550,
            321,
            393,
            536,
            300,
            264,
            3205,
            293,
            2158,
            51689
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10000892888719791,
          "compression_ratio": 1.736842105263158,
          "no_speech_prob": 0.00015412612992804497,
          "confidence": 0.999845873870072
        },
        {
          "id": 162,
          "start": 419.14,
          "end": 421.02,
          "text": "were removed from our dictionary,",
          "tokens": [
            51689,
            645,
            7261,
            490,
            527,
            25890,
            11,
            51783
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10000892888719791,
          "compression_ratio": 1.736842105263158,
          "no_speech_prob": 0.00015412612992804497,
          "confidence": 0.999845873870072
        },
        {
          "id": 163,
          "start": 421.02,
          "end": 423.65999999999997,
          "text": "but we also created that age variable",
          "tokens": [
            50364,
            457,
            321,
            611,
            2942,
            300,
            3205,
            7006,
            50496
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0670266631961793,
          "compression_ratio": 1.83984375,
          "no_speech_prob": 0.0002700034820009023,
          "confidence": 0.9997299965179991
        },
        {
          "id": 164,
          "start": 423.65999999999997,
          "end": 425.94,
          "text": "that contained the value that we popped off.",
          "tokens": [
            50496,
            300,
            16212,
            264,
            2158,
            300,
            321,
            21545,
            766,
            13,
            50610
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0670266631961793,
          "compression_ratio": 1.83984375,
          "no_speech_prob": 0.0002700034820009023,
          "confidence": 0.9997299965179991
        },
        {
          "id": 165,
          "start": 425.94,
          "end": 427.74,
          "text": "So that popped off 25.",
          "tokens": [
            50610,
            407,
            300,
            21545,
            766,
            3552,
            13,
            50700
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0670266631961793,
          "compression_ratio": 1.83984375,
          "no_speech_prob": 0.0002700034820009023,
          "confidence": 0.9997299965179991
        }
      ],
      "duration": 28.54000000000002
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 422.74,
      "end_time": 452.5,
      "text": "but we also created that age variable that contained the value that we popped off. So that popped off 25. Okay, now let's look at how we can loop through all the keys and values of our dictionary. So first, if we wanna see how many keys we have in our dictionary, then we can just print out its length with the len function. So if I was to say print len of student and run that, then we can see that it returns three, because we have three keys in our student dictionary. Now, if we wanted to see all of these keys,",
      "original_segments": [
        {
          "id": 166,
          "start": 427.74,
          "end": 430.18,
          "text": "Okay, now let's look at how we can loop through",
          "tokens": [
            50700,
            1033,
            11,
            586,
            718,
            311,
            574,
            412,
            577,
            321,
            393,
            6367,
            807,
            50822
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0670266631961793,
          "compression_ratio": 1.83984375,
          "no_speech_prob": 0.0002700034820009023,
          "confidence": 0.9997299965179991
        },
        {
          "id": 167,
          "start": 430.18,
          "end": 432.97999999999996,
          "text": "all the keys and values of our dictionary.",
          "tokens": [
            50822,
            439,
            264,
            9317,
            293,
            4190,
            295,
            527,
            25890,
            13,
            50962
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0670266631961793,
          "compression_ratio": 1.83984375,
          "no_speech_prob": 0.0002700034820009023,
          "confidence": 0.9997299965179991
        },
        {
          "id": 168,
          "start": 432.97999999999996,
          "end": 435.5,
          "text": "So first, if we wanna see how many keys",
          "tokens": [
            50962,
            407,
            700,
            11,
            498,
            321,
            1948,
            536,
            577,
            867,
            9317,
            51088
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0670266631961793,
          "compression_ratio": 1.83984375,
          "no_speech_prob": 0.0002700034820009023,
          "confidence": 0.9997299965179991
        },
        {
          "id": 169,
          "start": 435.5,
          "end": 436.85999999999996,
          "text": "we have in our dictionary,",
          "tokens": [
            51088,
            321,
            362,
            294,
            527,
            25890,
            11,
            51156
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0670266631961793,
          "compression_ratio": 1.83984375,
          "no_speech_prob": 0.0002700034820009023,
          "confidence": 0.9997299965179991
        },
        {
          "id": 170,
          "start": 436.85999999999996,
          "end": 440.7,
          "text": "then we can just print out its length with the len function.",
          "tokens": [
            51156,
            550,
            321,
            393,
            445,
            4482,
            484,
            1080,
            4641,
            365,
            264,
            40116,
            2445,
            13,
            51348
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0670266631961793,
          "compression_ratio": 1.83984375,
          "no_speech_prob": 0.0002700034820009023,
          "confidence": 0.9997299965179991
        },
        {
          "id": 171,
          "start": 440.7,
          "end": 445.7,
          "text": "So if I was to say print len of student and run that,",
          "tokens": [
            51348,
            407,
            498,
            286,
            390,
            281,
            584,
            4482,
            40116,
            295,
            3107,
            293,
            1190,
            300,
            11,
            51598
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0670266631961793,
          "compression_ratio": 1.83984375,
          "no_speech_prob": 0.0002700034820009023,
          "confidence": 0.9997299965179991
        },
        {
          "id": 172,
          "start": 445.82,
          "end": 447.46,
          "text": "then we can see that it returns three,",
          "tokens": [
            51604,
            550,
            321,
            393,
            536,
            300,
            309,
            11247,
            1045,
            11,
            51686
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0670266631961793,
          "compression_ratio": 1.83984375,
          "no_speech_prob": 0.0002700034820009023,
          "confidence": 0.9997299965179991
        },
        {
          "id": 173,
          "start": 447.46,
          "end": 450.21999999999997,
          "text": "because we have three keys in our student dictionary.",
          "tokens": [
            51686,
            570,
            321,
            362,
            1045,
            9317,
            294,
            527,
            3107,
            25890,
            13,
            51824
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0670266631961793,
          "compression_ratio": 1.83984375,
          "no_speech_prob": 0.0002700034820009023,
          "confidence": 0.9997299965179991
        },
        {
          "id": 174,
          "start": 450.22,
          "end": 452.5,
          "text": "Now, if we wanted to see all of these keys,",
          "tokens": [
            50364,
            823,
            11,
            498,
            321,
            1415,
            281,
            536,
            439,
            295,
            613,
            9317,
            11,
            50478
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07361827530227341,
          "compression_ratio": 2.3482587064676617,
          "no_speech_prob": 0.00013843319902662188,
          "confidence": 0.9998615668009734
        }
      ],
      "duration": 29.75999999999999
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 447.5,
      "end_time": 473.1,
      "text": "because we have three keys in our student dictionary. Now, if we wanted to see all of these keys, then we could just print out student.keys. If I run that, then we can see that that gave us all of the keys of our dictionary. If we wanted all of our values, then we could print out student.values. If I run that, you can see that that gives us only the values. Now, if we wanted to see the keys and values, then we could use this items method.",
      "original_segments": [
        {
          "id": 175,
          "start": 452.5,
          "end": 456.06,
          "text": "then we could just print out student.keys.",
          "tokens": [
            50478,
            550,
            321,
            727,
            445,
            4482,
            484,
            3107,
            13,
            18847,
            13,
            50656
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07361827530227341,
          "compression_ratio": 2.3482587064676617,
          "no_speech_prob": 0.00013843319902662188,
          "confidence": 0.9998615668009734
        },
        {
          "id": 176,
          "start": 456.06,
          "end": 458.5,
          "text": "If I run that, then we can see that that gave us",
          "tokens": [
            50656,
            759,
            286,
            1190,
            300,
            11,
            550,
            321,
            393,
            536,
            300,
            300,
            2729,
            505,
            50778
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07361827530227341,
          "compression_ratio": 2.3482587064676617,
          "no_speech_prob": 0.00013843319902662188,
          "confidence": 0.9998615668009734
        },
        {
          "id": 177,
          "start": 458.5,
          "end": 460.46000000000004,
          "text": "all of the keys of our dictionary.",
          "tokens": [
            50778,
            439,
            295,
            264,
            9317,
            295,
            527,
            25890,
            13,
            50876
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07361827530227341,
          "compression_ratio": 2.3482587064676617,
          "no_speech_prob": 0.00013843319902662188,
          "confidence": 0.9998615668009734
        },
        {
          "id": 178,
          "start": 460.46000000000004,
          "end": 461.88000000000005,
          "text": "If we wanted all of our values,",
          "tokens": [
            50876,
            759,
            321,
            1415,
            439,
            295,
            527,
            4190,
            11,
            50947
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07361827530227341,
          "compression_ratio": 2.3482587064676617,
          "no_speech_prob": 0.00013843319902662188,
          "confidence": 0.9998615668009734
        },
        {
          "id": 179,
          "start": 461.88000000000005,
          "end": 464.22,
          "text": "then we could print out student.values.",
          "tokens": [
            50947,
            550,
            321,
            727,
            4482,
            484,
            3107,
            13,
            46033,
            13,
            51064
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07361827530227341,
          "compression_ratio": 2.3482587064676617,
          "no_speech_prob": 0.00013843319902662188,
          "confidence": 0.9998615668009734
        },
        {
          "id": 180,
          "start": 464.22,
          "end": 466.5,
          "text": "If I run that, you can see that that gives us",
          "tokens": [
            51064,
            759,
            286,
            1190,
            300,
            11,
            291,
            393,
            536,
            300,
            300,
            2709,
            505,
            51178
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07361827530227341,
          "compression_ratio": 2.3482587064676617,
          "no_speech_prob": 0.00013843319902662188,
          "confidence": 0.9998615668009734
        },
        {
          "id": 181,
          "start": 466.5,
          "end": 467.74,
          "text": "only the values.",
          "tokens": [
            51178,
            787,
            264,
            4190,
            13,
            51240
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07361827530227341,
          "compression_ratio": 2.3482587064676617,
          "no_speech_prob": 0.00013843319902662188,
          "confidence": 0.9998615668009734
        },
        {
          "id": 182,
          "start": 467.74,
          "end": 470.22,
          "text": "Now, if we wanted to see the keys and values,",
          "tokens": [
            51240,
            823,
            11,
            498,
            321,
            1415,
            281,
            536,
            264,
            9317,
            293,
            4190,
            11,
            51364
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07361827530227341,
          "compression_ratio": 2.3482587064676617,
          "no_speech_prob": 0.00013843319902662188,
          "confidence": 0.9998615668009734
        },
        {
          "id": 183,
          "start": 470.22,
          "end": 473.1,
          "text": "then we could use this items method.",
          "tokens": [
            51364,
            550,
            321,
            727,
            764,
            341,
            4754,
            3170,
            13,
            51508
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07361827530227341,
          "compression_ratio": 2.3482587064676617,
          "no_speech_prob": 0.00013843319902662188,
          "confidence": 0.9998615668009734
        }
      ],
      "duration": 25.600000000000023
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 468.1,
      "end_time": 496.94,
      "text": "Now, if we wanted to see the keys and values, then we could use this items method. If I run this, then we can see that now we have these pairs of key and value pairs. So we have name John, age 25, courses with the list. And we'll be coming back to these pairs in just one second. So if we wanted to loop through all of the keys and values in our dictionary, we might be tempted to loop through the same way we loop through our list. But if we just loop through our list",
      "original_segments": [
        {
          "id": 184,
          "start": 473.1,
          "end": 477.58000000000004,
          "text": "If I run this, then we can see that now we have these pairs",
          "tokens": [
            51508,
            759,
            286,
            1190,
            341,
            11,
            550,
            321,
            393,
            536,
            300,
            586,
            321,
            362,
            613,
            15494,
            51732
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07361827530227341,
          "compression_ratio": 2.3482587064676617,
          "no_speech_prob": 0.00013843319902662188,
          "confidence": 0.9998615668009734
        },
        {
          "id": 185,
          "start": 477.58000000000004,
          "end": 479.18,
          "text": "of key and value pairs.",
          "tokens": [
            51732,
            295,
            2141,
            293,
            2158,
            15494,
            13,
            51812
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07361827530227341,
          "compression_ratio": 2.3482587064676617,
          "no_speech_prob": 0.00013843319902662188,
          "confidence": 0.9998615668009734
        },
        {
          "id": 186,
          "start": 479.18,
          "end": 484.18,
          "text": "So we have name John, age 25, courses with the list.",
          "tokens": [
            50364,
            407,
            321,
            362,
            1315,
            2619,
            11,
            3205,
            3552,
            11,
            7712,
            365,
            264,
            1329,
            13,
            50614
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08056908294934184,
          "compression_ratio": 1.7698744769874477,
          "no_speech_prob": 0.0003430257784202695,
          "confidence": 0.9996569742215797
        },
        {
          "id": 187,
          "start": 484.2,
          "end": 487.18,
          "text": "And we'll be coming back to these pairs in just one second.",
          "tokens": [
            50615,
            400,
            321,
            603,
            312,
            1348,
            646,
            281,
            613,
            15494,
            294,
            445,
            472,
            1150,
            13,
            50764
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08056908294934184,
          "compression_ratio": 1.7698744769874477,
          "no_speech_prob": 0.0003430257784202695,
          "confidence": 0.9996569742215797
        },
        {
          "id": 188,
          "start": 487.18,
          "end": 489.76,
          "text": "So if we wanted to loop through all of the keys",
          "tokens": [
            50764,
            407,
            498,
            321,
            1415,
            281,
            6367,
            807,
            439,
            295,
            264,
            9317,
            50893
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08056908294934184,
          "compression_ratio": 1.7698744769874477,
          "no_speech_prob": 0.0003430257784202695,
          "confidence": 0.9996569742215797
        },
        {
          "id": 189,
          "start": 489.76,
          "end": 491.3,
          "text": "and values in our dictionary,",
          "tokens": [
            50893,
            293,
            4190,
            294,
            527,
            25890,
            11,
            50970
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08056908294934184,
          "compression_ratio": 1.7698744769874477,
          "no_speech_prob": 0.0003430257784202695,
          "confidence": 0.9996569742215797
        },
        {
          "id": 190,
          "start": 491.3,
          "end": 493.5,
          "text": "we might be tempted to loop through the same way",
          "tokens": [
            50970,
            321,
            1062,
            312,
            29941,
            281,
            6367,
            807,
            264,
            912,
            636,
            51080
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08056908294934184,
          "compression_ratio": 1.7698744769874477,
          "no_speech_prob": 0.0003430257784202695,
          "confidence": 0.9996569742215797
        },
        {
          "id": 191,
          "start": 493.5,
          "end": 495.06,
          "text": "we loop through our list.",
          "tokens": [
            51080,
            321,
            6367,
            807,
            527,
            1329,
            13,
            51158
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08056908294934184,
          "compression_ratio": 1.7698744769874477,
          "no_speech_prob": 0.0003430257784202695,
          "confidence": 0.9996569742215797
        },
        {
          "id": 192,
          "start": 495.06,
          "end": 496.94,
          "text": "But if we just loop through our list",
          "tokens": [
            51158,
            583,
            498,
            321,
            445,
            6367,
            807,
            527,
            1329,
            51252
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08056908294934184,
          "compression_ratio": 1.7698744769874477,
          "no_speech_prob": 0.0003430257784202695,
          "confidence": 0.9996569742215797
        }
      ],
      "duration": 28.839999999999975
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 491.94,
      "end_time": 520.38,
      "text": "we might be tempted to loop through the same way we loop through our list. But if we just loop through our list without using any method, then it'll just loop through the keys. So for example, if you were to say four key in student, and then print out that key, if we run this, then we can see that it just looped through and printed out all of those keys. Now, in order to loop through the keys and values, we'll need to use that items method that we just saw a second ago.",
      "original_segments": [
        {
          "id": 193,
          "start": 496.94,
          "end": 499.06,
          "text": "without using any method,",
          "tokens": [
            51252,
            1553,
            1228,
            604,
            3170,
            11,
            51358
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08056908294934184,
          "compression_ratio": 1.7698744769874477,
          "no_speech_prob": 0.0003430257784202695,
          "confidence": 0.9996569742215797
        },
        {
          "id": 194,
          "start": 499.06,
          "end": 500.98,
          "text": "then it'll just loop through the keys.",
          "tokens": [
            51358,
            550,
            309,
            603,
            445,
            6367,
            807,
            264,
            9317,
            13,
            51454
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08056908294934184,
          "compression_ratio": 1.7698744769874477,
          "no_speech_prob": 0.0003430257784202695,
          "confidence": 0.9996569742215797
        },
        {
          "id": 195,
          "start": 500.98,
          "end": 505.7,
          "text": "So for example, if you were to say four key in student,",
          "tokens": [
            51454,
            407,
            337,
            1365,
            11,
            498,
            291,
            645,
            281,
            584,
            1451,
            2141,
            294,
            3107,
            11,
            51690
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08056908294934184,
          "compression_ratio": 1.7698744769874477,
          "no_speech_prob": 0.0003430257784202695,
          "confidence": 0.9996569742215797
        },
        {
          "id": 196,
          "start": 505.7,
          "end": 510.0,
          "text": "and then print out that key, if we run this,",
          "tokens": [
            50364,
            293,
            550,
            4482,
            484,
            300,
            2141,
            11,
            498,
            321,
            1190,
            341,
            11,
            50579
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07297539375197719,
          "compression_ratio": 1.8300395256916997,
          "no_speech_prob": 0.0011639171279966831,
          "confidence": 0.9988360828720033
        },
        {
          "id": 197,
          "start": 510.0,
          "end": 511.78,
          "text": "then we can see that it just looped through",
          "tokens": [
            50579,
            550,
            321,
            393,
            536,
            300,
            309,
            445,
            6367,
            292,
            807,
            50668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07297539375197719,
          "compression_ratio": 1.8300395256916997,
          "no_speech_prob": 0.0011639171279966831,
          "confidence": 0.9988360828720033
        },
        {
          "id": 198,
          "start": 511.78,
          "end": 513.68,
          "text": "and printed out all of those keys.",
          "tokens": [
            50668,
            293,
            13567,
            484,
            439,
            295,
            729,
            9317,
            13,
            50763
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07297539375197719,
          "compression_ratio": 1.8300395256916997,
          "no_speech_prob": 0.0011639171279966831,
          "confidence": 0.9988360828720033
        },
        {
          "id": 199,
          "start": 513.68,
          "end": 516.52,
          "text": "Now, in order to loop through the keys and values,",
          "tokens": [
            50763,
            823,
            11,
            294,
            1668,
            281,
            6367,
            807,
            264,
            9317,
            293,
            4190,
            11,
            50905
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07297539375197719,
          "compression_ratio": 1.8300395256916997,
          "no_speech_prob": 0.0011639171279966831,
          "confidence": 0.9988360828720033
        },
        {
          "id": 200,
          "start": 516.52,
          "end": 518.66,
          "text": "we'll need to use that items method",
          "tokens": [
            50905,
            321,
            603,
            643,
            281,
            764,
            300,
            4754,
            3170,
            51012
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07297539375197719,
          "compression_ratio": 1.8300395256916997,
          "no_speech_prob": 0.0011639171279966831,
          "confidence": 0.9988360828720033
        },
        {
          "id": 201,
          "start": 518.66,
          "end": 520.38,
          "text": "that we just saw a second ago.",
          "tokens": [
            51012,
            300,
            321,
            445,
            1866,
            257,
            1150,
            2057,
            13,
            51098
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07297539375197719,
          "compression_ratio": 1.8300395256916997,
          "no_speech_prob": 0.0011639171279966831,
          "confidence": 0.9988360828720033
        }
      ],
      "duration": 28.439999999999998
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 515.38,
      "end_time": 542.44,
      "text": "Now, in order to loop through the keys and values, we'll need to use that items method that we just saw a second ago. And so we'll just plug that in there. We'll say student.items. And now these come in a pair of two values. So instead of just key, we're also gonna have to access the value. So we can say four key value and student.items. And now we'll print out the key and that value. So if I run that, so we can see that each loop through this key variable was equal to each key.",
      "original_segments": [
        {
          "id": 202,
          "start": 520.38,
          "end": 522.76,
          "text": "And so we'll just plug that in there.",
          "tokens": [
            51098,
            400,
            370,
            321,
            603,
            445,
            5452,
            300,
            294,
            456,
            13,
            51217
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07297539375197719,
          "compression_ratio": 1.8300395256916997,
          "no_speech_prob": 0.0011639171279966831,
          "confidence": 0.9988360828720033
        },
        {
          "id": 203,
          "start": 522.76,
          "end": 524.58,
          "text": "We'll say student.items.",
          "tokens": [
            51217,
            492,
            603,
            584,
            3107,
            13,
            270,
            9097,
            13,
            51308
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07297539375197719,
          "compression_ratio": 1.8300395256916997,
          "no_speech_prob": 0.0011639171279966831,
          "confidence": 0.9988360828720033
        },
        {
          "id": 204,
          "start": 524.58,
          "end": 527.86,
          "text": "And now these come in a pair of two values.",
          "tokens": [
            51308,
            400,
            586,
            613,
            808,
            294,
            257,
            6119,
            295,
            732,
            4190,
            13,
            51472
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07297539375197719,
          "compression_ratio": 1.8300395256916997,
          "no_speech_prob": 0.0011639171279966831,
          "confidence": 0.9988360828720033
        },
        {
          "id": 205,
          "start": 527.86,
          "end": 529.22,
          "text": "So instead of just key,",
          "tokens": [
            51472,
            407,
            2602,
            295,
            445,
            2141,
            11,
            51540
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07297539375197719,
          "compression_ratio": 1.8300395256916997,
          "no_speech_prob": 0.0011639171279966831,
          "confidence": 0.9988360828720033
        },
        {
          "id": 206,
          "start": 529.22,
          "end": 531.4,
          "text": "we're also gonna have to access the value.",
          "tokens": [
            51540,
            321,
            434,
            611,
            799,
            362,
            281,
            2105,
            264,
            2158,
            13,
            51649
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07297539375197719,
          "compression_ratio": 1.8300395256916997,
          "no_speech_prob": 0.0011639171279966831,
          "confidence": 0.9988360828720033
        },
        {
          "id": 207,
          "start": 531.4,
          "end": 534.7,
          "text": "So we can say four key value and student.items.",
          "tokens": [
            51649,
            407,
            321,
            393,
            584,
            1451,
            2141,
            2158,
            293,
            3107,
            13,
            270,
            9097,
            13,
            51814
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07297539375197719,
          "compression_ratio": 1.8300395256916997,
          "no_speech_prob": 0.0011639171279966831,
          "confidence": 0.9988360828720033
        },
        {
          "id": 208,
          "start": 534.74,
          "end": 537.1800000000001,
          "text": "And now we'll print out the key and that value.",
          "tokens": [
            50366,
            400,
            586,
            321,
            603,
            4482,
            484,
            264,
            2141,
            293,
            300,
            2158,
            13,
            50488
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 209,
          "start": 537.1800000000001,
          "end": 538.4000000000001,
          "text": "So if I run that,",
          "tokens": [
            50488,
            407,
            498,
            286,
            1190,
            300,
            11,
            50549
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 210,
          "start": 538.4000000000001,
          "end": 540.98,
          "text": "so we can see that each loop through this key variable",
          "tokens": [
            50549,
            370,
            321,
            393,
            536,
            300,
            1184,
            6367,
            807,
            341,
            2141,
            7006,
            50678
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 211,
          "start": 540.98,
          "end": 542.44,
          "text": "was equal to each key.",
          "tokens": [
            50678,
            390,
            2681,
            281,
            1184,
            2141,
            13,
            50751
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        }
      ],
      "duration": 27.06000000000006
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 537.44,
      "end_time": 567.16,
      "text": "So if I run that, so we can see that each loop through this key variable was equal to each key. And this value variable was equal to each value. Okay, so I think that's gonna do it for this video. I hope that now everyone feels comfortable working with dictionaries and the functionality that's available to us. And in the next video, we'll be going over conditionals and how to write if, else, and elif statements. We'll also be learning more about bullions and Boolean operators. Now, if anyone has any questions about what we covered in this video, then feel free to ask in the comment section below",
      "original_segments": [
        {
          "id": 212,
          "start": 542.44,
          "end": 545.72,
          "text": "And this value variable was equal to each value.",
          "tokens": [
            50751,
            400,
            341,
            2158,
            7006,
            390,
            2681,
            281,
            1184,
            2158,
            13,
            50915
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 213,
          "start": 545.72,
          "end": 547.9200000000001,
          "text": "Okay, so I think that's gonna do it for this video.",
          "tokens": [
            50915,
            1033,
            11,
            370,
            286,
            519,
            300,
            311,
            799,
            360,
            309,
            337,
            341,
            960,
            13,
            51025
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 214,
          "start": 547.9200000000001,
          "end": 549.62,
          "text": "I hope that now everyone feels comfortable",
          "tokens": [
            51025,
            286,
            1454,
            300,
            586,
            1518,
            3417,
            4619,
            51110
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 215,
          "start": 549.62,
          "end": 550.76,
          "text": "working with dictionaries",
          "tokens": [
            51110,
            1364,
            365,
            22352,
            4889,
            51167
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 216,
          "start": 550.76,
          "end": 552.72,
          "text": "and the functionality that's available to us.",
          "tokens": [
            51167,
            293,
            264,
            14980,
            300,
            311,
            2435,
            281,
            505,
            13,
            51265
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 217,
          "start": 552.72,
          "end": 555.4200000000001,
          "text": "And in the next video, we'll be going over conditionals",
          "tokens": [
            51265,
            400,
            294,
            264,
            958,
            960,
            11,
            321,
            603,
            312,
            516,
            670,
            4188,
            1124,
            51400
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 218,
          "start": 555.4200000000001,
          "end": 558.8000000000001,
          "text": "and how to write if, else, and elif statements.",
          "tokens": [
            51400,
            293,
            577,
            281,
            2464,
            498,
            11,
            1646,
            11,
            293,
            806,
            351,
            12363,
            13,
            51569
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 219,
          "start": 558.8000000000001,
          "end": 561.0200000000001,
          "text": "We'll also be learning more about bullions",
          "tokens": [
            51569,
            492,
            603,
            611,
            312,
            2539,
            544,
            466,
            4693,
            626,
            51680
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 220,
          "start": 561.0200000000001,
          "end": 562.5,
          "text": "and Boolean operators.",
          "tokens": [
            51680,
            293,
            23351,
            28499,
            19077,
            13,
            51754
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 221,
          "start": 562.5,
          "end": 563.76,
          "text": "Now, if anyone has any questions",
          "tokens": [
            51754,
            823,
            11,
            498,
            2878,
            575,
            604,
            1651,
            51817
          ],
          "temperature": 0.0,
          "avg_logprob": -0.10218391662988907,
          "compression_ratio": 1.8070739549839228,
          "no_speech_prob": 0.000158286900841631,
          "confidence": 0.9998417130991584
        },
        {
          "id": 222,
          "start": 563.76,
          "end": 565.3199999999999,
          "text": "about what we covered in this video,",
          "tokens": [
            50364,
            466,
            437,
            321,
            5343,
            294,
            341,
            960,
            11,
            50442
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 223,
          "start": 565.3199999999999,
          "end": 567.16,
          "text": "then feel free to ask in the comment section below",
          "tokens": [
            50442,
            550,
            841,
            1737,
            281,
            1029,
            294,
            264,
            2871,
            3541,
            2507,
            50534
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        }
      ],
      "duration": 29.719999999999914
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 562.16,
      "end_time": 586.84,
      "text": "and Boolean operators. Now, if anyone has any questions about what we covered in this video, then feel free to ask in the comment section below and I'll do my best to answer those. And if you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest way is to simply like the video and give it a thumbs up. And also it's a huge help to share these videos with anyone who you think would find them useful. And if you have the means, you can contribute through Patreon. And there's a link to that page in the description section below. Be sure to subscribe for future videos and thank you all for watching.",
      "original_segments": [
        {
          "id": 224,
          "start": 567.16,
          "end": 568.6,
          "text": "and I'll do my best to answer those.",
          "tokens": [
            50534,
            293,
            286,
            603,
            360,
            452,
            1151,
            281,
            1867,
            729,
            13,
            50606
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 225,
          "start": 568.6,
          "end": 569.96,
          "text": "And if you enjoy these tutorials",
          "tokens": [
            50606,
            400,
            498,
            291,
            2103,
            613,
            17616,
            50674
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 226,
          "start": 569.96,
          "end": 570.9399999999999,
          "text": "and would like to support them,",
          "tokens": [
            50674,
            293,
            576,
            411,
            281,
            1406,
            552,
            11,
            50723
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 227,
          "start": 570.9399999999999,
          "end": 572.46,
          "text": "then there are several ways you can do that.",
          "tokens": [
            50723,
            550,
            456,
            366,
            2940,
            2098,
            291,
            393,
            360,
            300,
            13,
            50799
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 228,
          "start": 572.46,
          "end": 574.2,
          "text": "The easiest way is to simply like the video",
          "tokens": [
            50799,
            440,
            12889,
            636,
            307,
            281,
            2935,
            411,
            264,
            960,
            50886
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 229,
          "start": 574.2,
          "end": 575.24,
          "text": "and give it a thumbs up.",
          "tokens": [
            50886,
            293,
            976,
            309,
            257,
            8838,
            493,
            13,
            50938
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 230,
          "start": 575.24,
          "end": 577.0,
          "text": "And also it's a huge help to share these videos",
          "tokens": [
            50938,
            400,
            611,
            309,
            311,
            257,
            2603,
            854,
            281,
            2073,
            613,
            2145,
            51026
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 231,
          "start": 577.0,
          "end": 578.84,
          "text": "with anyone who you think would find them useful.",
          "tokens": [
            51026,
            365,
            2878,
            567,
            291,
            519,
            576,
            915,
            552,
            4420,
            13,
            51118
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 232,
          "start": 578.84,
          "end": 579.72,
          "text": "And if you have the means,",
          "tokens": [
            51118,
            400,
            498,
            291,
            362,
            264,
            1355,
            11,
            51162
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 233,
          "start": 579.72,
          "end": 581.08,
          "text": "you can contribute through Patreon.",
          "tokens": [
            51162,
            291,
            393,
            10586,
            807,
            15692,
            13,
            51230
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 234,
          "start": 581.08,
          "end": 582.16,
          "text": "And there's a link to that page",
          "tokens": [
            51230,
            400,
            456,
            311,
            257,
            2113,
            281,
            300,
            3028,
            51284
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 235,
          "start": 582.16,
          "end": 583.72,
          "text": "in the description section below.",
          "tokens": [
            51284,
            294,
            264,
            3855,
            3541,
            2507,
            13,
            51362
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 236,
          "start": 583.72,
          "end": 585.28,
          "text": "Be sure to subscribe for future videos",
          "tokens": [
            51362,
            879,
            988,
            281,
            3022,
            337,
            2027,
            2145,
            51440
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        },
        {
          "id": 237,
          "start": 585.28,
          "end": 586.84,
          "text": "and thank you all for watching.",
          "tokens": [
            51440,
            293,
            1309,
            291,
            439,
            337,
            1976,
            13,
            51518
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12592221483772184,
          "compression_ratio": 1.7940298507462686,
          "no_speech_prob": 0.08559481054544449,
          "confidence": 0.9144051894545555
        }
      ],
      "duration": 24.680000000000064
    },
    {
      "video_id": "b11edbc0f738",
      "video_path": "videos/Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "video_filename": "Python Tutorial for Beginners 5- Dictionaries - Working with Key-Value Pairs.mp4",
      "start_time": 581.84,
      "end_time": 594.6,
      "text": "And there's a link to that page in the description section below. Be sure to subscribe for future videos and thank you all for watching. Thank you.",
      "original_segments": [
        {
          "id": 238,
          "start": 593.76,
          "end": 594.6,
          "text": "Thank you.",
          "tokens": [
            50364,
            1044,
            291,
            13,
            50406
          ],
          "temperature": 0.0,
          "avg_logprob": -0.7865039507548014,
          "compression_ratio": 0.5555555555555556,
          "no_speech_prob": 0.9149637222290039,
          "confidence": 0.0850362777709961
        }
      ],
      "duration": 12.759999999999991
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 0.0,
      "end_time": 26.8,
      "text": "Hey there how's it going everybody? In this video we'll be learning about functions. Now functions are basically some instructions packaged together that perform a specific task. So let's create our first function and see why these are so beneficial. Now to create a function we'll use the def keyword which I believe stands for definition. And let's just make a simple function here to get started. I'll call this hello func. Now we have parentheses there because that is where our parameters will go",
      "original_segments": [
        {
          "id": 0,
          "start": 0.0,
          "end": 4.48,
          "text": "Hey there how's it going everybody? In this video we'll be learning about functions. Now functions",
          "tokens": [
            50364,
            1911,
            456,
            577,
            311,
            309,
            516,
            2201,
            30,
            682,
            341,
            960,
            321,
            603,
            312,
            2539,
            466,
            6828,
            13,
            823,
            6828,
            50588
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09000859819017015,
          "compression_ratio": 1.7275862068965517,
          "no_speech_prob": 0.07668141275644302,
          "confidence": 0.923318587243557
        },
        {
          "id": 1,
          "start": 4.48,
          "end": 10.16,
          "text": "are basically some instructions packaged together that perform a specific task. So let's create our",
          "tokens": [
            50588,
            366,
            1936,
            512,
            9415,
            38162,
            1214,
            300,
            2042,
            257,
            2685,
            5633,
            13,
            407,
            718,
            311,
            1884,
            527,
            50872
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09000859819017015,
          "compression_ratio": 1.7275862068965517,
          "no_speech_prob": 0.07668141275644302,
          "confidence": 0.923318587243557
        },
        {
          "id": 2,
          "start": 10.16,
          "end": 16.16,
          "text": "first function and see why these are so beneficial. Now to create a function we'll use the def keyword",
          "tokens": [
            50872,
            700,
            2445,
            293,
            536,
            983,
            613,
            366,
            370,
            14072,
            13,
            823,
            281,
            1884,
            257,
            2445,
            321,
            603,
            764,
            264,
            1060,
            20428,
            51172
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09000859819017015,
          "compression_ratio": 1.7275862068965517,
          "no_speech_prob": 0.07668141275644302,
          "confidence": 0.923318587243557
        },
        {
          "id": 3,
          "start": 16.16,
          "end": 21.12,
          "text": "which I believe stands for definition. And let's just make a simple function here to get started.",
          "tokens": [
            51172,
            597,
            286,
            1697,
            7382,
            337,
            7123,
            13,
            400,
            718,
            311,
            445,
            652,
            257,
            2199,
            2445,
            510,
            281,
            483,
            1409,
            13,
            51420
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09000859819017015,
          "compression_ratio": 1.7275862068965517,
          "no_speech_prob": 0.07668141275644302,
          "confidence": 0.923318587243557
        },
        {
          "id": 4,
          "start": 21.12,
          "end": 26.8,
          "text": "I'll call this hello func. Now we have parentheses there because that is where our parameters will go",
          "tokens": [
            51420,
            286,
            603,
            818,
            341,
            7751,
            1019,
            66,
            13,
            823,
            321,
            362,
            34153,
            456,
            570,
            300,
            307,
            689,
            527,
            9834,
            486,
            352,
            51704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09000859819017015,
          "compression_ratio": 1.7275862068965517,
          "no_speech_prob": 0.07668141275644302,
          "confidence": 0.923318587243557
        }
      ],
      "duration": 26.8
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 21.8,
      "end_time": 48.08,
      "text": "I'll call this hello func. Now we have parentheses there because that is where our parameters will go when we add those in but we don't have any parameters just yet so that will be empty for now. Now it is possible to write a function and not have any code in it but we can't leave it completely blank. But if we want to fill this function in later then we can use this pass keyword. And basically that pass keyword is saying that we don't want to do anything with this for",
      "original_segments": [
        {
          "id": 5,
          "start": 26.8,
          "end": 31.6,
          "text": "when we add those in but we don't have any parameters just yet so that will be empty for",
          "tokens": [
            50364,
            562,
            321,
            909,
            729,
            294,
            457,
            321,
            500,
            380,
            362,
            604,
            9834,
            445,
            1939,
            370,
            300,
            486,
            312,
            6707,
            337,
            50604
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04810947026961889,
          "compression_ratio": 1.83203125,
          "no_speech_prob": 0.20537801086902618,
          "confidence": 0.7946219891309738
        },
        {
          "id": 6,
          "start": 31.6,
          "end": 36.88,
          "text": "now. Now it is possible to write a function and not have any code in it but we can't leave it",
          "tokens": [
            50604,
            586,
            13,
            823,
            309,
            307,
            1944,
            281,
            2464,
            257,
            2445,
            293,
            406,
            362,
            604,
            3089,
            294,
            309,
            457,
            321,
            393,
            380,
            1856,
            309,
            50868
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04810947026961889,
          "compression_ratio": 1.83203125,
          "no_speech_prob": 0.20537801086902618,
          "confidence": 0.7946219891309738
        },
        {
          "id": 7,
          "start": 36.88,
          "end": 43.68,
          "text": "completely blank. But if we want to fill this function in later then we can use this pass",
          "tokens": [
            50868,
            2584,
            8247,
            13,
            583,
            498,
            321,
            528,
            281,
            2836,
            341,
            2445,
            294,
            1780,
            550,
            321,
            393,
            764,
            341,
            1320,
            51208
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04810947026961889,
          "compression_ratio": 1.83203125,
          "no_speech_prob": 0.20537801086902618,
          "confidence": 0.7946219891309738
        },
        {
          "id": 8,
          "start": 43.68,
          "end": 48.08,
          "text": "keyword. And basically that pass keyword is saying that we don't want to do anything with this for",
          "tokens": [
            51208,
            20428,
            13,
            400,
            1936,
            300,
            1320,
            20428,
            307,
            1566,
            300,
            321,
            500,
            380,
            528,
            281,
            360,
            1340,
            365,
            341,
            337,
            51428
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04810947026961889,
          "compression_ratio": 1.83203125,
          "no_speech_prob": 0.20537801086902618,
          "confidence": 0.7946219891309738
        }
      ],
      "duration": 26.279999999999998
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 43.08,
      "end_time": 71.75999999999999,
      "text": "completely blank. But if we want to fill this function in later then we can use this pass keyword. And basically that pass keyword is saying that we don't want to do anything with this for now but it won't throw any errors for leaving it blank. So if we want to run our function then we can just say hello underscore func and put in these parentheses. And we need to add those parentheses after the function in order to execute it. If we don't have those parentheses there then it'll be equal to the function itself. So let's actually see what that looks like. So I'm",
      "original_segments": [
        {
          "id": 9,
          "start": 48.08,
          "end": 55.040000000000006,
          "text": "now but it won't throw any errors for leaving it blank. So if we want to run our function then we",
          "tokens": [
            51428,
            586,
            457,
            309,
            1582,
            380,
            3507,
            604,
            13603,
            337,
            5012,
            309,
            8247,
            13,
            407,
            498,
            321,
            528,
            281,
            1190,
            527,
            2445,
            550,
            321,
            51776
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04810947026961889,
          "compression_ratio": 1.83203125,
          "no_speech_prob": 0.20537801086902618,
          "confidence": 0.7946219891309738
        },
        {
          "id": 10,
          "start": 55.04,
          "end": 60.08,
          "text": "can just say hello underscore func and put in these parentheses. And we need to add those",
          "tokens": [
            50364,
            393,
            445,
            584,
            7751,
            37556,
            1019,
            66,
            293,
            829,
            294,
            613,
            34153,
            13,
            400,
            321,
            643,
            281,
            909,
            729,
            50616
          ],
          "temperature": 0.0,
          "avg_logprob": -0.037486664883725276,
          "compression_ratio": 1.900398406374502,
          "no_speech_prob": 0.0019560172222554684,
          "confidence": 0.9980439827777445
        },
        {
          "id": 11,
          "start": 60.08,
          "end": 65.36,
          "text": "parentheses after the function in order to execute it. If we don't have those parentheses there",
          "tokens": [
            50616,
            34153,
            934,
            264,
            2445,
            294,
            1668,
            281,
            14483,
            309,
            13,
            759,
            321,
            500,
            380,
            362,
            729,
            34153,
            456,
            50880
          ],
          "temperature": 0.0,
          "avg_logprob": -0.037486664883725276,
          "compression_ratio": 1.900398406374502,
          "no_speech_prob": 0.0019560172222554684,
          "confidence": 0.9980439827777445
        },
        {
          "id": 12,
          "start": 65.36,
          "end": 71.75999999999999,
          "text": "then it'll be equal to the function itself. So let's actually see what that looks like. So I'm",
          "tokens": [
            50880,
            550,
            309,
            603,
            312,
            2681,
            281,
            264,
            2445,
            2564,
            13,
            407,
            718,
            311,
            767,
            536,
            437,
            300,
            1542,
            411,
            13,
            407,
            286,
            478,
            51200
          ],
          "temperature": 0.0,
          "avg_logprob": -0.037486664883725276,
          "compression_ratio": 1.900398406374502,
          "no_speech_prob": 0.0019560172222554684,
          "confidence": 0.9980439827777445
        }
      ],
      "duration": 28.679999999999993
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 66.75999999999999,
      "end_time": 95.6,
      "text": "then it'll be equal to the function itself. So let's actually see what that looks like. So I'm going to print out that hello function without the parentheses in place which means that we're not executing the function. So let me run that and we can see when we printed that out that it prints out that this is a function in a certain location in memory but it didn't execute the function. So to execute it then we add in these parentheses. So now if I run this then now it just gives us",
      "original_segments": [
        {
          "id": 13,
          "start": 71.75999999999999,
          "end": 77.68,
          "text": "going to print out that hello function without the parentheses in place which means that we're not",
          "tokens": [
            51200,
            516,
            281,
            4482,
            484,
            300,
            7751,
            2445,
            1553,
            264,
            34153,
            294,
            1081,
            597,
            1355,
            300,
            321,
            434,
            406,
            51496
          ],
          "temperature": 0.0,
          "avg_logprob": -0.037486664883725276,
          "compression_ratio": 1.900398406374502,
          "no_speech_prob": 0.0019560172222554684,
          "confidence": 0.9980439827777445
        },
        {
          "id": 14,
          "start": 77.68,
          "end": 82.72,
          "text": "executing the function. So let me run that and we can see when we printed that out that it prints",
          "tokens": [
            51496,
            32368,
            264,
            2445,
            13,
            407,
            718,
            385,
            1190,
            300,
            293,
            321,
            393,
            536,
            562,
            321,
            13567,
            300,
            484,
            300,
            309,
            22305,
            51748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.037486664883725276,
          "compression_ratio": 1.900398406374502,
          "no_speech_prob": 0.0019560172222554684,
          "confidence": 0.9980439827777445
        },
        {
          "id": 15,
          "start": 82.72,
          "end": 88.4,
          "text": "out that this is a function in a certain location in memory but it didn't execute the function.",
          "tokens": [
            50364,
            484,
            300,
            341,
            307,
            257,
            2445,
            294,
            257,
            1629,
            4914,
            294,
            4675,
            457,
            309,
            994,
            380,
            14483,
            264,
            2445,
            13,
            50648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.031621062128167406,
          "compression_ratio": 1.735159817351598,
          "no_speech_prob": 0.01589944213628769,
          "confidence": 0.9841005578637123
        },
        {
          "id": 16,
          "start": 88.4,
          "end": 95.6,
          "text": "So to execute it then we add in these parentheses. So now if I run this then now it just gives us",
          "tokens": [
            50648,
            407,
            281,
            14483,
            309,
            550,
            321,
            909,
            294,
            613,
            34153,
            13,
            407,
            586,
            498,
            286,
            1190,
            341,
            550,
            586,
            309,
            445,
            2709,
            505,
            51008
          ],
          "temperature": 0.0,
          "avg_logprob": -0.031621062128167406,
          "compression_ratio": 1.735159817351598,
          "no_speech_prob": 0.01589944213628769,
          "confidence": 0.9841005578637123
        }
      ],
      "duration": 28.840000000000003
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 90.6,
      "end_time": 118.72,
      "text": "So to execute it then we add in these parentheses. So now if I run this then now it just gives us none because we're not doing anything with this function yet and it doesn't have a return value. So let's go ahead and put some code into our function. So first we'll just put in a print statement and we'll just print out some text that says hello function with an exclamation point. And now that we're actually running that print statement from within the function we don't need to print",
      "original_segments": [
        {
          "id": 17,
          "start": 95.6,
          "end": 100.72,
          "text": "none because we're not doing anything with this function yet and it doesn't have a return value.",
          "tokens": [
            51008,
            6022,
            570,
            321,
            434,
            406,
            884,
            1340,
            365,
            341,
            2445,
            1939,
            293,
            309,
            1177,
            380,
            362,
            257,
            2736,
            2158,
            13,
            51264
          ],
          "temperature": 0.0,
          "avg_logprob": -0.031621062128167406,
          "compression_ratio": 1.735159817351598,
          "no_speech_prob": 0.01589944213628769,
          "confidence": 0.9841005578637123
        },
        {
          "id": 18,
          "start": 100.72,
          "end": 106.64,
          "text": "So let's go ahead and put some code into our function. So first we'll just put in a print",
          "tokens": [
            51264,
            407,
            718,
            311,
            352,
            2286,
            293,
            829,
            512,
            3089,
            666,
            527,
            2445,
            13,
            407,
            700,
            321,
            603,
            445,
            829,
            294,
            257,
            4482,
            51560
          ],
          "temperature": 0.0,
          "avg_logprob": -0.031621062128167406,
          "compression_ratio": 1.735159817351598,
          "no_speech_prob": 0.01589944213628769,
          "confidence": 0.9841005578637123
        },
        {
          "id": 19,
          "start": 106.64,
          "end": 113.52,
          "text": "statement and we'll just print out some text that says hello function with an exclamation point. And",
          "tokens": [
            50364,
            5629,
            293,
            321,
            603,
            445,
            4482,
            484,
            512,
            2487,
            300,
            1619,
            7751,
            2445,
            365,
            364,
            1624,
            43233,
            935,
            13,
            400,
            50708
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042430002754981364,
          "compression_ratio": 2.0466101694915255,
          "no_speech_prob": 0.25022372603416443,
          "confidence": 0.7497762739658356
        },
        {
          "id": 20,
          "start": 113.52,
          "end": 118.72,
          "text": "now that we're actually running that print statement from within the function we don't need to print",
          "tokens": [
            50708,
            586,
            300,
            321,
            434,
            767,
            2614,
            300,
            4482,
            5629,
            490,
            1951,
            264,
            2445,
            321,
            500,
            380,
            643,
            281,
            4482,
            50968
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042430002754981364,
          "compression_ratio": 2.0466101694915255,
          "no_speech_prob": 0.25022372603416443,
          "confidence": 0.7497762739658356
        }
      ],
      "duration": 28.120000000000005
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 113.72,
      "end_time": 140.24,
      "text": "now that we're actually running that print statement from within the function we don't need to print out that executed function. We can just execute that function and it should run that print statement. So we'll run that. So we can see that we executed our function here. It came within our function and ran our print statement. Now one benefit of functions is that they allow us to reuse code without repeating ourselves. So let's say for example that we had to print out some text",
      "original_segments": [
        {
          "id": 21,
          "start": 118.72,
          "end": 124.48,
          "text": "out that executed function. We can just execute that function and it should run that print",
          "tokens": [
            50968,
            484,
            300,
            17577,
            2445,
            13,
            492,
            393,
            445,
            14483,
            300,
            2445,
            293,
            309,
            820,
            1190,
            300,
            4482,
            51256
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042430002754981364,
          "compression_ratio": 2.0466101694915255,
          "no_speech_prob": 0.25022372603416443,
          "confidence": 0.7497762739658356
        },
        {
          "id": 22,
          "start": 124.48,
          "end": 129.92000000000002,
          "text": "statement. So we'll run that. So we can see that we executed our function here. It came within our",
          "tokens": [
            51256,
            5629,
            13,
            407,
            321,
            603,
            1190,
            300,
            13,
            407,
            321,
            393,
            536,
            300,
            321,
            17577,
            527,
            2445,
            510,
            13,
            467,
            1361,
            1951,
            527,
            51528
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042430002754981364,
          "compression_ratio": 2.0466101694915255,
          "no_speech_prob": 0.25022372603416443,
          "confidence": 0.7497762739658356
        },
        {
          "id": 23,
          "start": 129.92000000000002,
          "end": 134.8,
          "text": "function and ran our print statement. Now one benefit of functions is that they allow us to",
          "tokens": [
            51528,
            2445,
            293,
            5872,
            527,
            4482,
            5629,
            13,
            823,
            472,
            5121,
            295,
            6828,
            307,
            300,
            436,
            2089,
            505,
            281,
            51772
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042430002754981364,
          "compression_ratio": 2.0466101694915255,
          "no_speech_prob": 0.25022372603416443,
          "confidence": 0.7497762739658356
        },
        {
          "id": 24,
          "start": 134.8,
          "end": 140.24,
          "text": "reuse code without repeating ourselves. So let's say for example that we had to print out some text",
          "tokens": [
            50364,
            26225,
            3089,
            1553,
            18617,
            4175,
            13,
            407,
            718,
            311,
            584,
            337,
            1365,
            300,
            321,
            632,
            281,
            4482,
            484,
            512,
            2487,
            50636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04857662345180992,
          "compression_ratio": 1.7678571428571428,
          "no_speech_prob": 0.024029120802879333,
          "confidence": 0.9759708791971207
        }
      ],
      "duration": 26.52000000000001
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 135.24,
      "end_time": 163.84,
      "text": "reuse code without repeating ourselves. So let's say for example that we had to print out some text in several locations throughout our program. So it might look something like this. So let me copy this and I'll comment out our function execution for now and I'm just going to paste this in about four times. So now if we run this then as we expect it prints out our four messages. Now imagine our boss came to us and told us that the text was a little bit off and that we didn't want to have an",
      "original_segments": [
        {
          "id": 25,
          "start": 140.24,
          "end": 145.76000000000002,
          "text": "in several locations throughout our program. So it might look something like this. So let me copy this",
          "tokens": [
            50636,
            294,
            2940,
            9253,
            3710,
            527,
            1461,
            13,
            407,
            309,
            1062,
            574,
            746,
            411,
            341,
            13,
            407,
            718,
            385,
            5055,
            341,
            50912
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04857662345180992,
          "compression_ratio": 1.7678571428571428,
          "no_speech_prob": 0.024029120802879333,
          "confidence": 0.9759708791971207
        },
        {
          "id": 26,
          "start": 145.76000000000002,
          "end": 151.60000000000002,
          "text": "and I'll comment out our function execution for now and I'm just going to paste this in about four",
          "tokens": [
            50912,
            293,
            286,
            603,
            2871,
            484,
            527,
            2445,
            15058,
            337,
            586,
            293,
            286,
            478,
            445,
            516,
            281,
            9163,
            341,
            294,
            466,
            1451,
            51204
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04857662345180992,
          "compression_ratio": 1.7678571428571428,
          "no_speech_prob": 0.024029120802879333,
          "confidence": 0.9759708791971207
        },
        {
          "id": 27,
          "start": 151.60000000000002,
          "end": 158.88000000000002,
          "text": "times. So now if we run this then as we expect it prints out our four messages. Now imagine our boss",
          "tokens": [
            51204,
            1413,
            13,
            407,
            586,
            498,
            321,
            1190,
            341,
            550,
            382,
            321,
            2066,
            309,
            22305,
            484,
            527,
            1451,
            7897,
            13,
            823,
            3811,
            527,
            5741,
            51568
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04857662345180992,
          "compression_ratio": 1.7678571428571428,
          "no_speech_prob": 0.024029120802879333,
          "confidence": 0.9759708791971207
        },
        {
          "id": 28,
          "start": 158.88000000000002,
          "end": 163.84,
          "text": "came to us and told us that the text was a little bit off and that we didn't want to have an",
          "tokens": [
            51568,
            1361,
            281,
            505,
            293,
            1907,
            505,
            300,
            264,
            2487,
            390,
            257,
            707,
            857,
            766,
            293,
            300,
            321,
            994,
            380,
            528,
            281,
            362,
            364,
            51816
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04857662345180992,
          "compression_ratio": 1.7678571428571428,
          "no_speech_prob": 0.024029120802879333,
          "confidence": 0.9759708791971207
        }
      ],
      "duration": 28.599999999999994
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 158.84,
      "end_time": 186.48000000000002,
      "text": "times. So now if we run this then as we expect it prints out our four messages. Now imagine our boss came to us and told us that the text was a little bit off and that we didn't want to have an exclamation point at the end of the string. Well the way that we have it now we'd have to come in here and change all of those manually. So I'd come in and change all these messages to have a period instead. Now that was only four changes to make there but in some instances that can be in hundreds of locations in multiple different files. So that's the first benefit of functions.",
      "original_segments": [
        {
          "id": 29,
          "start": 163.84,
          "end": 168.88,
          "text": "exclamation point at the end of the string. Well the way that we have it now we'd have to come in",
          "tokens": [
            50364,
            1624,
            43233,
            935,
            412,
            264,
            917,
            295,
            264,
            6798,
            13,
            1042,
            264,
            636,
            300,
            321,
            362,
            309,
            586,
            321,
            1116,
            362,
            281,
            808,
            294,
            50616
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03902062694583319,
          "compression_ratio": 1.750915750915751,
          "no_speech_prob": 0.0010852073319256306,
          "confidence": 0.9989147926680744
        },
        {
          "id": 30,
          "start": 168.88,
          "end": 175.04,
          "text": "here and change all of those manually. So I'd come in and change all these messages to have",
          "tokens": [
            50616,
            510,
            293,
            1319,
            439,
            295,
            729,
            16945,
            13,
            407,
            286,
            1116,
            808,
            294,
            293,
            1319,
            439,
            613,
            7897,
            281,
            362,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03902062694583319,
          "compression_ratio": 1.750915750915751,
          "no_speech_prob": 0.0010852073319256306,
          "confidence": 0.9989147926680744
        },
        {
          "id": 31,
          "start": 175.04,
          "end": 180.72,
          "text": "a period instead. Now that was only four changes to make there but in some instances that can be",
          "tokens": [
            50924,
            257,
            2896,
            2602,
            13,
            823,
            300,
            390,
            787,
            1451,
            2962,
            281,
            652,
            456,
            457,
            294,
            512,
            14519,
            300,
            393,
            312,
            51208
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03902062694583319,
          "compression_ratio": 1.750915750915751,
          "no_speech_prob": 0.0010852073319256306,
          "confidence": 0.9989147926680744
        },
        {
          "id": 32,
          "start": 180.72,
          "end": 186.48000000000002,
          "text": "in hundreds of locations in multiple different files. So that's the first benefit of functions.",
          "tokens": [
            51208,
            294,
            6779,
            295,
            9253,
            294,
            3866,
            819,
            7098,
            13,
            407,
            300,
            311,
            264,
            700,
            5121,
            295,
            6828,
            13,
            51496
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03902062694583319,
          "compression_ratio": 1.750915750915751,
          "no_speech_prob": 0.0010852073319256306,
          "confidence": 0.9989147926680744
        }
      ],
      "duration": 27.640000000000015
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 181.48000000000002,
      "end_time": 206.16000000000003,
      "text": "in hundreds of locations in multiple different files. So that's the first benefit of functions. It allows us to put code with a specific purpose into a single location. So instead of printing those four statements what we can instead do is run our function four times. So I will remove that and uncomment our function and we're going to execute this four different times. So now if we",
      "original_segments": [
        {
          "id": 33,
          "start": 186.48000000000002,
          "end": 192.8,
          "text": "It allows us to put code with a specific purpose into a single location. So instead of printing",
          "tokens": [
            51496,
            467,
            4045,
            505,
            281,
            829,
            3089,
            365,
            257,
            2685,
            4334,
            666,
            257,
            2167,
            4914,
            13,
            407,
            2602,
            295,
            14699,
            51812
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03902062694583319,
          "compression_ratio": 1.750915750915751,
          "no_speech_prob": 0.0010852073319256306,
          "confidence": 0.9989147926680744
        },
        {
          "id": 34,
          "start": 192.8,
          "end": 200.48000000000002,
          "text": "those four statements what we can instead do is run our function four times. So I will remove that",
          "tokens": [
            50364,
            729,
            1451,
            12363,
            437,
            321,
            393,
            2602,
            360,
            307,
            1190,
            527,
            2445,
            1451,
            1413,
            13,
            407,
            286,
            486,
            4159,
            300,
            50748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03128203261982311,
          "compression_ratio": 2.042194092827004,
          "no_speech_prob": 0.007043235935270786,
          "confidence": 0.9929567640647292
        },
        {
          "id": 35,
          "start": 200.48000000000002,
          "end": 206.16000000000003,
          "text": "and uncomment our function and we're going to execute this four different times. So now if we",
          "tokens": [
            50748,
            293,
            8585,
            518,
            527,
            2445,
            293,
            321,
            434,
            516,
            281,
            14483,
            341,
            1451,
            819,
            1413,
            13,
            407,
            586,
            498,
            321,
            51032
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03128203261982311,
          "compression_ratio": 2.042194092827004,
          "no_speech_prob": 0.007043235935270786,
          "confidence": 0.9929567640647292
        }
      ],
      "duration": 24.680000000000007
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 201.16000000000003,
      "end_time": 228.0,
      "text": "and uncomment our function and we're going to execute this four different times. So now if we run that then we can see that it ran our function four times and executed our print statement four different times. But now if our boss came to us and asked us to remove that exclamation point then it doesn't matter if this is spread out over a hundred different lines or a hundred different locations. We can just update it in this one spot so I can change this to a period and now if we run",
      "original_segments": [
        {
          "id": 36,
          "start": 206.16000000000003,
          "end": 211.52,
          "text": "run that then we can see that it ran our function four times and executed our print statement four",
          "tokens": [
            51032,
            1190,
            300,
            550,
            321,
            393,
            536,
            300,
            309,
            5872,
            527,
            2445,
            1451,
            1413,
            293,
            17577,
            527,
            4482,
            5629,
            1451,
            51300
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03128203261982311,
          "compression_ratio": 2.042194092827004,
          "no_speech_prob": 0.007043235935270786,
          "confidence": 0.9929567640647292
        },
        {
          "id": 37,
          "start": 211.52,
          "end": 216.64000000000001,
          "text": "different times. But now if our boss came to us and asked us to remove that exclamation point",
          "tokens": [
            51300,
            819,
            1413,
            13,
            583,
            586,
            498,
            527,
            5741,
            1361,
            281,
            505,
            293,
            2351,
            505,
            281,
            4159,
            300,
            1624,
            43233,
            935,
            51556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03128203261982311,
          "compression_ratio": 2.042194092827004,
          "no_speech_prob": 0.007043235935270786,
          "confidence": 0.9929567640647292
        },
        {
          "id": 38,
          "start": 216.64000000000001,
          "end": 221.36,
          "text": "then it doesn't matter if this is spread out over a hundred different lines or a hundred different",
          "tokens": [
            51556,
            550,
            309,
            1177,
            380,
            1871,
            498,
            341,
            307,
            3974,
            484,
            670,
            257,
            3262,
            819,
            3876,
            420,
            257,
            3262,
            819,
            51792
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03128203261982311,
          "compression_ratio": 2.042194092827004,
          "no_speech_prob": 0.007043235935270786,
          "confidence": 0.9929567640647292
        },
        {
          "id": 39,
          "start": 221.36,
          "end": 228.0,
          "text": "locations. We can just update it in this one spot so I can change this to a period and now if we run",
          "tokens": [
            50364,
            9253,
            13,
            492,
            393,
            445,
            5623,
            309,
            294,
            341,
            472,
            4008,
            370,
            286,
            393,
            1319,
            341,
            281,
            257,
            2896,
            293,
            586,
            498,
            321,
            1190,
            50696
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04460702248669546,
          "compression_ratio": 1.7545126353790614,
          "no_speech_prob": 0.008787344209849834,
          "confidence": 0.9912126557901502
        }
      ],
      "duration": 26.839999999999975
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 223.0,
      "end_time": 249.52,
      "text": "locations. We can just update it in this one spot so I can change this to a period and now if we run this then we can see that those changes are seen everywhere that the function is called. Now this is called keeping your code dry which stands for don't repeat yourself. It's a common mistake for people new to programming to repeat the same things throughout their code when really they could either put their code into certain variables or functions so that it's in a single location.",
      "original_segments": [
        {
          "id": 40,
          "start": 228.0,
          "end": 232.88000000000002,
          "text": "this then we can see that those changes are seen everywhere that the function is called. Now this",
          "tokens": [
            50696,
            341,
            550,
            321,
            393,
            536,
            300,
            729,
            2962,
            366,
            1612,
            5315,
            300,
            264,
            2445,
            307,
            1219,
            13,
            823,
            341,
            50940
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04460702248669546,
          "compression_ratio": 1.7545126353790614,
          "no_speech_prob": 0.008787344209849834,
          "confidence": 0.9912126557901502
        },
        {
          "id": 41,
          "start": 232.88000000000002,
          "end": 239.36,
          "text": "is called keeping your code dry which stands for don't repeat yourself. It's a common mistake for",
          "tokens": [
            50940,
            307,
            1219,
            5145,
            428,
            3089,
            4016,
            597,
            7382,
            337,
            500,
            380,
            7149,
            1803,
            13,
            467,
            311,
            257,
            2689,
            6146,
            337,
            51264
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04460702248669546,
          "compression_ratio": 1.7545126353790614,
          "no_speech_prob": 0.008787344209849834,
          "confidence": 0.9912126557901502
        },
        {
          "id": 42,
          "start": 239.36,
          "end": 243.68,
          "text": "people new to programming to repeat the same things throughout their code when really they",
          "tokens": [
            51264,
            561,
            777,
            281,
            9410,
            281,
            7149,
            264,
            912,
            721,
            3710,
            641,
            3089,
            562,
            534,
            436,
            51480
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04460702248669546,
          "compression_ratio": 1.7545126353790614,
          "no_speech_prob": 0.008787344209849834,
          "confidence": 0.9912126557901502
        },
        {
          "id": 43,
          "start": 243.68,
          "end": 249.52,
          "text": "could either put their code into certain variables or functions so that it's in a single location.",
          "tokens": [
            51480,
            727,
            2139,
            829,
            641,
            3089,
            666,
            1629,
            9102,
            420,
            6828,
            370,
            300,
            309,
            311,
            294,
            257,
            2167,
            4914,
            13,
            51772
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04460702248669546,
          "compression_ratio": 1.7545126353790614,
          "no_speech_prob": 0.008787344209849834,
          "confidence": 0.9912126557901502
        }
      ],
      "duration": 26.52000000000001
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 244.52,
      "end_time": 274.08000000000004,
      "text": "could either put their code into certain variables or functions so that it's in a single location. So we saw earlier that since we aren't returning anything from our function it was actually equal to none. So what does it mean for our function to return something? Now this is where functions become really powerful because it allows us to operate on some data and then pass the result to whatever called our function. So instead of printing this string hello function within here let's instead",
      "original_segments": [
        {
          "id": 44,
          "start": 249.52,
          "end": 255.52,
          "text": "So we saw earlier that since we aren't returning anything from our function it was actually equal",
          "tokens": [
            50364,
            407,
            321,
            1866,
            3071,
            300,
            1670,
            321,
            3212,
            380,
            12678,
            1340,
            490,
            527,
            2445,
            309,
            390,
            767,
            2681,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038848525001889185,
          "compression_ratio": 1.747787610619469,
          "no_speech_prob": 0.0012916570995002985,
          "confidence": 0.9987083429004997
        },
        {
          "id": 45,
          "start": 255.52,
          "end": 262.40000000000003,
          "text": "to none. So what does it mean for our function to return something? Now this is where functions become",
          "tokens": [
            50664,
            281,
            6022,
            13,
            407,
            437,
            775,
            309,
            914,
            337,
            527,
            2445,
            281,
            2736,
            746,
            30,
            823,
            341,
            307,
            689,
            6828,
            1813,
            51008
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038848525001889185,
          "compression_ratio": 1.747787610619469,
          "no_speech_prob": 0.0012916570995002985,
          "confidence": 0.9987083429004997
        },
        {
          "id": 46,
          "start": 262.40000000000003,
          "end": 267.92,
          "text": "really powerful because it allows us to operate on some data and then pass the result to whatever",
          "tokens": [
            51008,
            534,
            4005,
            570,
            309,
            4045,
            505,
            281,
            9651,
            322,
            512,
            1412,
            293,
            550,
            1320,
            264,
            1874,
            281,
            2035,
            51284
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038848525001889185,
          "compression_ratio": 1.747787610619469,
          "no_speech_prob": 0.0012916570995002985,
          "confidence": 0.9987083429004997
        },
        {
          "id": 47,
          "start": 267.92,
          "end": 274.08000000000004,
          "text": "called our function. So instead of printing this string hello function within here let's instead",
          "tokens": [
            51284,
            1219,
            527,
            2445,
            13,
            407,
            2602,
            295,
            14699,
            341,
            6798,
            7751,
            2445,
            1951,
            510,
            718,
            311,
            2602,
            51592
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038848525001889185,
          "compression_ratio": 1.747787610619469,
          "no_speech_prob": 0.0012916570995002985,
          "confidence": 0.9987083429004997
        }
      ],
      "duration": 29.56000000000003
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 269.08000000000004,
      "end_time": 292.4,
      "text": "called our function. So instead of printing this string hello function within here let's instead return this. Okay so what does this mean exactly? This means that when we execute our function it's actually going to be equal to our return value so these executed functions here are actually equal to the string hello function. So right now if we run this then it doesn't give us any results",
      "original_segments": [
        {
          "id": 48,
          "start": 274.15999999999997,
          "end": 279.76,
          "text": "return this. Okay so what does this mean exactly? This means that when we execute our function",
          "tokens": [
            50368,
            2736,
            341,
            13,
            1033,
            370,
            437,
            775,
            341,
            914,
            2293,
            30,
            639,
            1355,
            300,
            562,
            321,
            14483,
            527,
            2445,
            50648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07102263375614466,
          "compression_ratio": 1.7309417040358743,
          "no_speech_prob": 0.19809363782405853,
          "confidence": 0.8019063621759415
        },
        {
          "id": 49,
          "start": 279.76,
          "end": 285.59999999999997,
          "text": "it's actually going to be equal to our return value so these executed functions here are actually",
          "tokens": [
            50648,
            309,
            311,
            767,
            516,
            281,
            312,
            2681,
            281,
            527,
            2736,
            2158,
            370,
            613,
            17577,
            6828,
            510,
            366,
            767,
            50940
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07102263375614466,
          "compression_ratio": 1.7309417040358743,
          "no_speech_prob": 0.19809363782405853,
          "confidence": 0.8019063621759415
        },
        {
          "id": 50,
          "start": 285.59999999999997,
          "end": 292.4,
          "text": "equal to the string hello function. So right now if we run this then it doesn't give us any results",
          "tokens": [
            50940,
            2681,
            281,
            264,
            6798,
            7751,
            2445,
            13,
            407,
            558,
            586,
            498,
            321,
            1190,
            341,
            550,
            309,
            1177,
            380,
            976,
            505,
            604,
            3542,
            51280
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07102263375614466,
          "compression_ratio": 1.7309417040358743,
          "no_speech_prob": 0.19809363782405853,
          "confidence": 0.8019063621759415
        }
      ],
      "duration": 23.319999999999936
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 287.4,
      "end_time": 312.96,
      "text": "equal to the string hello function. So right now if we run this then it doesn't give us any results because it's just a string that we're not doing anything with but if instead we print this so let me print that executed function and if we run that then we can see that it prints out our string. So basically think of a function as a machine that takes input and produces a result.",
      "original_segments": [
        {
          "id": 51,
          "start": 292.4,
          "end": 299.52,
          "text": "because it's just a string that we're not doing anything with but if instead we print this so",
          "tokens": [
            51280,
            570,
            309,
            311,
            445,
            257,
            6798,
            300,
            321,
            434,
            406,
            884,
            1340,
            365,
            457,
            498,
            2602,
            321,
            4482,
            341,
            370,
            51636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07102263375614466,
          "compression_ratio": 1.7309417040358743,
          "no_speech_prob": 0.19809363782405853,
          "confidence": 0.8019063621759415
        },
        {
          "id": 52,
          "start": 299.52,
          "end": 306.0,
          "text": "let me print that executed function and if we run that then we can see that it prints out our",
          "tokens": [
            50364,
            718,
            385,
            4482,
            300,
            17577,
            2445,
            293,
            498,
            321,
            1190,
            300,
            550,
            321,
            393,
            536,
            300,
            309,
            22305,
            484,
            527,
            50688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05079028899209541,
          "compression_ratio": 1.8968253968253967,
          "no_speech_prob": 0.001529182307422161,
          "confidence": 0.9984708176925778
        },
        {
          "id": 53,
          "start": 306.0,
          "end": 312.96,
          "text": "string. So basically think of a function as a machine that takes input and produces a result.",
          "tokens": [
            50688,
            6798,
            13,
            407,
            1936,
            519,
            295,
            257,
            2445,
            382,
            257,
            3479,
            300,
            2516,
            4846,
            293,
            14725,
            257,
            1874,
            13,
            51036
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05079028899209541,
          "compression_ratio": 1.8968253968253967,
          "no_speech_prob": 0.001529182307422161,
          "confidence": 0.9984708176925778
        }
      ],
      "duration": 25.560000000000002
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 307.96,
      "end_time": 334.15999999999997,
      "text": "string. So basically think of a function as a machine that takes input and produces a result. When you execute a function you can think of it almost like a black box you don't need to know exactly how it's doing what it's doing you're mainly concerned about the input and the return value. So in this simple example here we don't have any input and we can see that the return value is a string. Now don't get me wrong it's useful to know what a function is doing but when you're",
      "original_segments": [
        {
          "id": 54,
          "start": 312.96,
          "end": 317.91999999999996,
          "text": "When you execute a function you can think of it almost like a black box you don't need to know",
          "tokens": [
            51036,
            1133,
            291,
            14483,
            257,
            2445,
            291,
            393,
            519,
            295,
            309,
            1920,
            411,
            257,
            2211,
            2424,
            291,
            500,
            380,
            643,
            281,
            458,
            51284
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05079028899209541,
          "compression_ratio": 1.8968253968253967,
          "no_speech_prob": 0.001529182307422161,
          "confidence": 0.9984708176925778
        },
        {
          "id": 55,
          "start": 317.91999999999996,
          "end": 323.12,
          "text": "exactly how it's doing what it's doing you're mainly concerned about the input and the return",
          "tokens": [
            51284,
            2293,
            577,
            309,
            311,
            884,
            437,
            309,
            311,
            884,
            291,
            434,
            8704,
            5922,
            466,
            264,
            4846,
            293,
            264,
            2736,
            51544
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05079028899209541,
          "compression_ratio": 1.8968253968253967,
          "no_speech_prob": 0.001529182307422161,
          "confidence": 0.9984708176925778
        },
        {
          "id": 56,
          "start": 323.12,
          "end": 329.28,
          "text": "value. So in this simple example here we don't have any input and we can see that the return value is",
          "tokens": [
            51544,
            2158,
            13,
            407,
            294,
            341,
            2199,
            1365,
            510,
            321,
            500,
            380,
            362,
            604,
            4846,
            293,
            321,
            393,
            536,
            300,
            264,
            2736,
            2158,
            307,
            51852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05079028899209541,
          "compression_ratio": 1.8968253968253967,
          "no_speech_prob": 0.001529182307422161,
          "confidence": 0.9984708176925778
        },
        {
          "id": 57,
          "start": 329.28,
          "end": 334.15999999999997,
          "text": "a string. Now don't get me wrong it's useful to know what a function is doing but when you're",
          "tokens": [
            50364,
            257,
            6798,
            13,
            823,
            500,
            380,
            483,
            385,
            2085,
            309,
            311,
            4420,
            281,
            458,
            437,
            257,
            2445,
            307,
            884,
            457,
            562,
            291,
            434,
            50608
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03944789856038195,
          "compression_ratio": 1.670995670995671,
          "no_speech_prob": 0.0003137614985462278,
          "confidence": 0.9996862385014538
        }
      ],
      "duration": 26.19999999999999
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 329.15999999999997,
      "end_time": 356.47999999999996,
      "text": "value. So in this simple example here we don't have any input and we can see that the return value is a string. Now don't get me wrong it's useful to know what a function is doing but when you're first getting started don't get caught up on understanding every detail of what every function does just focus on the input and what's returned. So for example when we call the len function on a string so if I print out len of this string test if I run this then as we saw in a previous video",
      "original_segments": [
        {
          "id": 58,
          "start": 334.15999999999997,
          "end": 340.08,
          "text": "first getting started don't get caught up on understanding every detail of what every function",
          "tokens": [
            50608,
            700,
            1242,
            1409,
            500,
            380,
            483,
            5415,
            493,
            322,
            3701,
            633,
            2607,
            295,
            437,
            633,
            2445,
            50904
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03944789856038195,
          "compression_ratio": 1.670995670995671,
          "no_speech_prob": 0.0003137614985462278,
          "confidence": 0.9996862385014538
        },
        {
          "id": 59,
          "start": 340.08,
          "end": 347.44,
          "text": "does just focus on the input and what's returned. So for example when we call the len function on",
          "tokens": [
            50904,
            775,
            445,
            1879,
            322,
            264,
            4846,
            293,
            437,
            311,
            8752,
            13,
            407,
            337,
            1365,
            562,
            321,
            818,
            264,
            40116,
            2445,
            322,
            51272
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03944789856038195,
          "compression_ratio": 1.670995670995671,
          "no_speech_prob": 0.0003137614985462278,
          "confidence": 0.9996862385014538
        },
        {
          "id": 60,
          "start": 347.44,
          "end": 356.47999999999996,
          "text": "a string so if I print out len of this string test if I run this then as we saw in a previous video",
          "tokens": [
            51272,
            257,
            6798,
            370,
            498,
            286,
            4482,
            484,
            40116,
            295,
            341,
            6798,
            1500,
            498,
            286,
            1190,
            341,
            550,
            382,
            321,
            1866,
            294,
            257,
            3894,
            960,
            51724
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03944789856038195,
          "compression_ratio": 1.670995670995671,
          "no_speech_prob": 0.0003137614985462278,
          "confidence": 0.9996862385014538
        }
      ],
      "duration": 27.319999999999993
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 351.47999999999996,
      "end_time": 380.0,
      "text": "a string so if I print out len of this string test if I run this then as we saw in a previous video this just returns an integer that is the number of characters in our string so we have no idea what the code that produces that result looks like but we do know that we passed in a string and that it returned this integer and we'll see why here in a bit why looking at functions in this way will help you become better when working with python because we can treat the return value just",
      "original_segments": [
        {
          "id": 61,
          "start": 356.48,
          "end": 362.88,
          "text": "this just returns an integer that is the number of characters in our string so we have no idea",
          "tokens": [
            50364,
            341,
            445,
            11247,
            364,
            24922,
            300,
            307,
            264,
            1230,
            295,
            4342,
            294,
            527,
            6798,
            370,
            321,
            362,
            572,
            1558,
            50684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0419254572886341,
          "compression_ratio": 1.8206106870229009,
          "no_speech_prob": 0.017706597223877907,
          "confidence": 0.9822934027761221
        },
        {
          "id": 62,
          "start": 362.88,
          "end": 368.0,
          "text": "what the code that produces that result looks like but we do know that we passed in a string",
          "tokens": [
            50684,
            437,
            264,
            3089,
            300,
            14725,
            300,
            1874,
            1542,
            411,
            457,
            321,
            360,
            458,
            300,
            321,
            4678,
            294,
            257,
            6798,
            50940
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0419254572886341,
          "compression_ratio": 1.8206106870229009,
          "no_speech_prob": 0.017706597223877907,
          "confidence": 0.9822934027761221
        },
        {
          "id": 63,
          "start": 368.0,
          "end": 373.68,
          "text": "and that it returned this integer and we'll see why here in a bit why looking at functions in this",
          "tokens": [
            50940,
            293,
            300,
            309,
            8752,
            341,
            24922,
            293,
            321,
            603,
            536,
            983,
            510,
            294,
            257,
            857,
            983,
            1237,
            412,
            6828,
            294,
            341,
            51224
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0419254572886341,
          "compression_ratio": 1.8206106870229009,
          "no_speech_prob": 0.017706597223877907,
          "confidence": 0.9822934027761221
        },
        {
          "id": 64,
          "start": 373.68,
          "end": 380.0,
          "text": "way will help you become better when working with python because we can treat the return value just",
          "tokens": [
            51224,
            636,
            486,
            854,
            291,
            1813,
            1101,
            562,
            1364,
            365,
            38797,
            570,
            321,
            393,
            2387,
            264,
            2736,
            2158,
            445,
            51540
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0419254572886341,
          "compression_ratio": 1.8206106870229009,
          "no_speech_prob": 0.017706597223877907,
          "confidence": 0.9822934027761221
        }
      ],
      "duration": 28.52000000000004
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 375.0,
      "end_time": 404.0,
      "text": "way will help you become better when working with python because we can treat the return value just like the data type that it is and understanding this will allow you to chain together some functionality so we know our hello function returns a string so we can treat that executed function just like a string so if we remember back to our string methods remember that we can uppercase a string with dot upper so really we can take this executed function and just chain",
      "original_segments": [
        {
          "id": 65,
          "start": 380.0,
          "end": 384.64000000000004,
          "text": "like the data type that it is and understanding this will allow you to chain together some",
          "tokens": [
            51540,
            411,
            264,
            1412,
            2010,
            300,
            309,
            307,
            293,
            3701,
            341,
            486,
            2089,
            291,
            281,
            5021,
            1214,
            512,
            51772
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0419254572886341,
          "compression_ratio": 1.8206106870229009,
          "no_speech_prob": 0.017706597223877907,
          "confidence": 0.9822934027761221
        },
        {
          "id": 66,
          "start": 384.64,
          "end": 391.44,
          "text": "functionality so we know our hello function returns a string so we can treat that executed",
          "tokens": [
            50364,
            14980,
            370,
            321,
            458,
            527,
            7751,
            2445,
            11247,
            257,
            6798,
            370,
            321,
            393,
            2387,
            300,
            17577,
            50704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05474996005787569,
          "compression_ratio": 2.0552486187845305,
          "no_speech_prob": 0.012594996951520443,
          "confidence": 0.9874050030484796
        },
        {
          "id": 67,
          "start": 391.44,
          "end": 396.96,
          "text": "function just like a string so if we remember back to our string methods remember that we can",
          "tokens": [
            50704,
            2445,
            445,
            411,
            257,
            6798,
            370,
            498,
            321,
            1604,
            646,
            281,
            527,
            6798,
            7150,
            1604,
            300,
            321,
            393,
            50980
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05474996005787569,
          "compression_ratio": 2.0552486187845305,
          "no_speech_prob": 0.012594996951520443,
          "confidence": 0.9874050030484796
        },
        {
          "id": 68,
          "start": 396.96,
          "end": 404.0,
          "text": "uppercase a string with dot upper so really we can take this executed function and just chain",
          "tokens": [
            50980,
            11775,
            2869,
            651,
            257,
            6798,
            365,
            5893,
            6597,
            370,
            534,
            321,
            393,
            747,
            341,
            17577,
            2445,
            293,
            445,
            5021,
            51332
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05474996005787569,
          "compression_ratio": 2.0552486187845305,
          "no_speech_prob": 0.012594996951520443,
          "confidence": 0.9874050030484796
        }
      ],
      "duration": 29.0
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 399.0,
      "end_time": 428.79999999999995,
      "text": "uppercase a string with dot upper so really we can take this executed function and just chain dot upper on to the end of it so now if we run this now we can see that our executed function returned the string hello function and then we were able to use the string method upper on that returned value to uppercase the string okay so now let's look at how we can pass arguments to our function and real quick I'm going to remove that dot upper method so to be",
      "original_segments": [
        {
          "id": 69,
          "start": 404.0,
          "end": 410.4,
          "text": "dot upper on to the end of it so now if we run this now we can see that our executed function",
          "tokens": [
            51332,
            5893,
            6597,
            322,
            281,
            264,
            917,
            295,
            309,
            370,
            586,
            498,
            321,
            1190,
            341,
            586,
            321,
            393,
            536,
            300,
            527,
            17577,
            2445,
            51652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05474996005787569,
          "compression_ratio": 2.0552486187845305,
          "no_speech_prob": 0.012594996951520443,
          "confidence": 0.9874050030484796
        },
        {
          "id": 70,
          "start": 410.4,
          "end": 416.0,
          "text": "returned the string hello function and then we were able to use the string method upper",
          "tokens": [
            50364,
            8752,
            264,
            6798,
            7751,
            2445,
            293,
            550,
            321,
            645,
            1075,
            281,
            764,
            264,
            6798,
            3170,
            6597,
            50644
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03744360243920052,
          "compression_ratio": 1.9824561403508771,
          "no_speech_prob": 0.025017308071255684,
          "confidence": 0.9749826919287443
        },
        {
          "id": 71,
          "start": 416.0,
          "end": 422.56,
          "text": "on that returned value to uppercase the string okay so now let's look at how we can pass",
          "tokens": [
            50644,
            322,
            300,
            8752,
            2158,
            281,
            11775,
            2869,
            651,
            264,
            6798,
            1392,
            370,
            586,
            718,
            311,
            574,
            412,
            577,
            321,
            393,
            1320,
            50972
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03744360243920052,
          "compression_ratio": 1.9824561403508771,
          "no_speech_prob": 0.025017308071255684,
          "confidence": 0.9749826919287443
        },
        {
          "id": 72,
          "start": 422.56,
          "end": 428.79999999999995,
          "text": "arguments to our function and real quick I'm going to remove that dot upper method so to be",
          "tokens": [
            50972,
            12869,
            281,
            527,
            2445,
            293,
            957,
            1702,
            286,
            478,
            516,
            281,
            4159,
            300,
            5893,
            6597,
            3170,
            370,
            281,
            312,
            51284
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03744360243920052,
          "compression_ratio": 1.9824561403508771,
          "no_speech_prob": 0.025017308071255684,
          "confidence": 0.9749826919287443
        }
      ],
      "duration": 29.799999999999955
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 423.79999999999995,
      "end_time": 446.64,
      "text": "arguments to our function and real quick I'm going to remove that dot upper method so to be able to pass arguments to our function we'll need to create some parameters here within our parentheses so let's say that we wanted to customize the greeting that our function returns so let's create a parameter called greeting and now within our function we'll return a string",
      "original_segments": [
        {
          "id": 73,
          "start": 428.79999999999995,
          "end": 433.76,
          "text": "able to pass arguments to our function we'll need to create some parameters here within our",
          "tokens": [
            51284,
            1075,
            281,
            1320,
            12869,
            281,
            527,
            2445,
            321,
            603,
            643,
            281,
            1884,
            512,
            9834,
            510,
            1951,
            527,
            51532
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03744360243920052,
          "compression_ratio": 1.9824561403508771,
          "no_speech_prob": 0.025017308071255684,
          "confidence": 0.9749826919287443
        },
        {
          "id": 74,
          "start": 433.76,
          "end": 439.52,
          "text": "parentheses so let's say that we wanted to customize the greeting that our function returns",
          "tokens": [
            51532,
            34153,
            370,
            718,
            311,
            584,
            300,
            321,
            1415,
            281,
            19734,
            264,
            28174,
            300,
            527,
            2445,
            11247,
            51820
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03744360243920052,
          "compression_ratio": 1.9824561403508771,
          "no_speech_prob": 0.025017308071255684,
          "confidence": 0.9749826919287443
        },
        {
          "id": 75,
          "start": 439.52,
          "end": 446.64,
          "text": "so let's create a parameter called greeting and now within our function we'll return a string",
          "tokens": [
            50364,
            370,
            718,
            311,
            1884,
            257,
            13075,
            1219,
            28174,
            293,
            586,
            1951,
            527,
            2445,
            321,
            603,
            2736,
            257,
            6798,
            50720
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036223695519265166,
          "compression_ratio": 1.7677725118483412,
          "no_speech_prob": 0.0001917242188937962,
          "confidence": 0.9998082757811062
        }
      ],
      "duration": 22.840000000000032
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 441.64,
      "end_time": 465.68,
      "text": "so let's create a parameter called greeting and now within our function we'll return a string where we use that greeting instead of our hello text that we had before so now I'll just pass this in with a dot format so now before we run this we have to pass in that greeting argument when we execute our function if we don't then we'll get an error so actually let's go ahead",
      "original_segments": [
        {
          "id": 76,
          "start": 446.64,
          "end": 453.91999999999996,
          "text": "where we use that greeting instead of our hello text that we had before so now I'll just pass",
          "tokens": [
            50720,
            689,
            321,
            764,
            300,
            28174,
            2602,
            295,
            527,
            7751,
            2487,
            300,
            321,
            632,
            949,
            370,
            586,
            286,
            603,
            445,
            1320,
            51084
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036223695519265166,
          "compression_ratio": 1.7677725118483412,
          "no_speech_prob": 0.0001917242188937962,
          "confidence": 0.9998082757811062
        },
        {
          "id": 77,
          "start": 453.91999999999996,
          "end": 460.56,
          "text": "this in with a dot format so now before we run this we have to pass in that greeting argument",
          "tokens": [
            51084,
            341,
            294,
            365,
            257,
            5893,
            7877,
            370,
            586,
            949,
            321,
            1190,
            341,
            321,
            362,
            281,
            1320,
            294,
            300,
            28174,
            6770,
            51416
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036223695519265166,
          "compression_ratio": 1.7677725118483412,
          "no_speech_prob": 0.0001917242188937962,
          "confidence": 0.9998082757811062
        },
        {
          "id": 78,
          "start": 460.56,
          "end": 465.68,
          "text": "when we execute our function if we don't then we'll get an error so actually let's go ahead",
          "tokens": [
            51416,
            562,
            321,
            14483,
            527,
            2445,
            498,
            321,
            500,
            380,
            550,
            321,
            603,
            483,
            364,
            6713,
            370,
            767,
            718,
            311,
            352,
            2286,
            51672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036223695519265166,
          "compression_ratio": 1.7677725118483412,
          "no_speech_prob": 0.0001917242188937962,
          "confidence": 0.9998082757811062
        }
      ],
      "duration": 24.04000000000002
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 460.68,
      "end_time": 484.72,
      "text": "when we execute our function if we don't then we'll get an error so actually let's go ahead and run this and see this error so we can see that when we ran that it says that hello func is missing one required positional argument greeting so let's pass in that greeting argument to our hello function and to do that we can just pass it in directly here when we call our function",
      "original_segments": [
        {
          "id": 79,
          "start": 465.68,
          "end": 472.16,
          "text": "and run this and see this error so we can see that when we ran that it says that hello func",
          "tokens": [
            50364,
            293,
            1190,
            341,
            293,
            536,
            341,
            6713,
            370,
            321,
            393,
            536,
            300,
            562,
            321,
            5872,
            300,
            309,
            1619,
            300,
            7751,
            1019,
            66,
            50688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05567088178409043,
          "compression_ratio": 1.958762886597938,
          "no_speech_prob": 0.34223228693008423,
          "confidence": 0.6577677130699158
        },
        {
          "id": 80,
          "start": 472.16,
          "end": 478.32,
          "text": "is missing one required positional argument greeting so let's pass in that greeting argument",
          "tokens": [
            50688,
            307,
            5361,
            472,
            4739,
            2535,
            304,
            6770,
            28174,
            370,
            718,
            311,
            1320,
            294,
            300,
            28174,
            6770,
            50996
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05567088178409043,
          "compression_ratio": 1.958762886597938,
          "no_speech_prob": 0.34223228693008423,
          "confidence": 0.6577677130699158
        },
        {
          "id": 81,
          "start": 478.32,
          "end": 484.72,
          "text": "to our hello function and to do that we can just pass it in directly here when we call our function",
          "tokens": [
            50996,
            281,
            527,
            7751,
            2445,
            293,
            281,
            360,
            300,
            321,
            393,
            445,
            1320,
            309,
            294,
            3838,
            510,
            562,
            321,
            818,
            527,
            2445,
            51316
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05567088178409043,
          "compression_ratio": 1.958762886597938,
          "no_speech_prob": 0.34223228693008423,
          "confidence": 0.6577677130699158
        }
      ],
      "duration": 24.04000000000002
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 479.72,
      "end_time": 504.48,
      "text": "to our hello function and to do that we can just pass it in directly here when we call our function so I'm just going to pass in high as our string so now if we run this then we can see that when we passed in that string high into our function that it set that greeting variable equal to the string high and then returned the string high function now this greeting variable doesn't",
      "original_segments": [
        {
          "id": 82,
          "start": 484.72,
          "end": 491.2,
          "text": "so I'm just going to pass in high as our string so now if we run this then we can see that when",
          "tokens": [
            51316,
            370,
            286,
            478,
            445,
            516,
            281,
            1320,
            294,
            1090,
            382,
            527,
            6798,
            370,
            586,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            562,
            51640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05567088178409043,
          "compression_ratio": 1.958762886597938,
          "no_speech_prob": 0.34223228693008423,
          "confidence": 0.6577677130699158
        },
        {
          "id": 83,
          "start": 491.2,
          "end": 498.0,
          "text": "we passed in that string high into our function that it set that greeting variable equal to the",
          "tokens": [
            50364,
            321,
            4678,
            294,
            300,
            6798,
            1090,
            666,
            527,
            2445,
            300,
            309,
            992,
            300,
            28174,
            7006,
            2681,
            281,
            264,
            50704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.028077616749039615,
          "compression_ratio": 1.9591836734693877,
          "no_speech_prob": 0.08833174407482147,
          "confidence": 0.9116682559251785
        },
        {
          "id": 84,
          "start": 498.0,
          "end": 504.48,
          "text": "string high and then returned the string high function now this greeting variable doesn't",
          "tokens": [
            50704,
            6798,
            1090,
            293,
            550,
            8752,
            264,
            6798,
            1090,
            2445,
            586,
            341,
            28174,
            7006,
            1177,
            380,
            51028
          ],
          "temperature": 0.0,
          "avg_logprob": -0.028077616749039615,
          "compression_ratio": 1.9591836734693877,
          "no_speech_prob": 0.08833174407482147,
          "confidence": 0.9116682559251785
        }
      ],
      "duration": 24.75999999999999
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 499.48,
      "end_time": 527.52,
      "text": "string high and then returned the string high function now this greeting variable doesn't affect any variables outside of the function its scope is only local to the function which is nice because we don't have to worry about it affecting anything we don't want it to affect so and if you want to learn more about python scope then I do have a detailed video going in depth as to how that works exactly and I'll leave a link to that video in the description section below okay so",
      "original_segments": [
        {
          "id": 85,
          "start": 504.48,
          "end": 510.64,
          "text": "affect any variables outside of the function its scope is only local to the function which is nice",
          "tokens": [
            51028,
            3345,
            604,
            9102,
            2380,
            295,
            264,
            2445,
            1080,
            11923,
            307,
            787,
            2654,
            281,
            264,
            2445,
            597,
            307,
            1481,
            51336
          ],
          "temperature": 0.0,
          "avg_logprob": -0.028077616749039615,
          "compression_ratio": 1.9591836734693877,
          "no_speech_prob": 0.08833174407482147,
          "confidence": 0.9116682559251785
        },
        {
          "id": 86,
          "start": 510.64,
          "end": 516.88,
          "text": "because we don't have to worry about it affecting anything we don't want it to affect so and if you",
          "tokens": [
            51336,
            570,
            321,
            500,
            380,
            362,
            281,
            3292,
            466,
            309,
            17476,
            1340,
            321,
            500,
            380,
            528,
            309,
            281,
            3345,
            370,
            293,
            498,
            291,
            51648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.028077616749039615,
          "compression_ratio": 1.9591836734693877,
          "no_speech_prob": 0.08833174407482147,
          "confidence": 0.9116682559251785
        },
        {
          "id": 87,
          "start": 516.88,
          "end": 522.56,
          "text": "want to learn more about python scope then I do have a detailed video going in depth as to how",
          "tokens": [
            50364,
            528,
            281,
            1466,
            544,
            466,
            38797,
            11923,
            550,
            286,
            360,
            362,
            257,
            9942,
            960,
            516,
            294,
            7161,
            382,
            281,
            577,
            50648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03087679974667661,
          "compression_ratio": 1.7835820895522387,
          "no_speech_prob": 0.19512805342674255,
          "confidence": 0.8048719465732574
        },
        {
          "id": 88,
          "start": 522.56,
          "end": 527.52,
          "text": "that works exactly and I'll leave a link to that video in the description section below okay so",
          "tokens": [
            50648,
            300,
            1985,
            2293,
            293,
            286,
            603,
            1856,
            257,
            2113,
            281,
            300,
            960,
            294,
            264,
            3855,
            3541,
            2507,
            1392,
            370,
            50896
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03087679974667661,
          "compression_ratio": 1.7835820895522387,
          "no_speech_prob": 0.19512805342674255,
          "confidence": 0.8048719465732574
        }
      ],
      "duration": 28.039999999999964
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 522.52,
      "end_time": 550.8000000000001,
      "text": "want to learn more about python scope then I do have a detailed video going in depth as to how that works exactly and I'll leave a link to that video in the description section below okay so right now this greeting parameter is a required argument and that is because it doesn't have a default value now if we had a default value then it would just fall back to the default value whenever we didn't pass that argument in so let's see an example of this so let's say that we also want to be able to pass a name to our hello function and it will return a greeting and the",
      "original_segments": [
        {
          "id": 89,
          "start": 527.52,
          "end": 533.12,
          "text": "right now this greeting parameter is a required argument and that is because it doesn't have a",
          "tokens": [
            50896,
            558,
            586,
            341,
            28174,
            13075,
            307,
            257,
            4739,
            6770,
            293,
            300,
            307,
            570,
            309,
            1177,
            380,
            362,
            257,
            51176
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03087679974667661,
          "compression_ratio": 1.7835820895522387,
          "no_speech_prob": 0.19512805342674255,
          "confidence": 0.8048719465732574
        },
        {
          "id": 90,
          "start": 533.12,
          "end": 538.8,
          "text": "default value now if we had a default value then it would just fall back to the default value",
          "tokens": [
            51176,
            7576,
            2158,
            586,
            498,
            321,
            632,
            257,
            7576,
            2158,
            550,
            309,
            576,
            445,
            2100,
            646,
            281,
            264,
            7576,
            2158,
            51460
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03087679974667661,
          "compression_ratio": 1.7835820895522387,
          "no_speech_prob": 0.19512805342674255,
          "confidence": 0.8048719465732574
        },
        {
          "id": 91,
          "start": 538.8,
          "end": 545.36,
          "text": "whenever we didn't pass that argument in so let's see an example of this so let's say that we also",
          "tokens": [
            51460,
            5699,
            321,
            994,
            380,
            1320,
            300,
            6770,
            294,
            370,
            718,
            311,
            536,
            364,
            1365,
            295,
            341,
            370,
            718,
            311,
            584,
            300,
            321,
            611,
            51788
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03087679974667661,
          "compression_ratio": 1.7835820895522387,
          "no_speech_prob": 0.19512805342674255,
          "confidence": 0.8048719465732574
        },
        {
          "id": 92,
          "start": 545.36,
          "end": 550.8000000000001,
          "text": "want to be able to pass a name to our hello function and it will return a greeting and the",
          "tokens": [
            50364,
            528,
            281,
            312,
            1075,
            281,
            1320,
            257,
            1315,
            281,
            527,
            7751,
            2445,
            293,
            309,
            486,
            2736,
            257,
            28174,
            293,
            264,
            50636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03290792057911555,
          "compression_ratio": 1.8805970149253732,
          "no_speech_prob": 0.036332063376903534,
          "confidence": 0.9636679366230965
        }
      ],
      "duration": 28.280000000000086
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 545.8000000000001,
      "end_time": 572.8000000000001,
      "text": "want to be able to pass a name to our hello function and it will return a greeting and the name so we can add that to our parameters by putting in a comma here and saying that we also want to accept this name parameter but let's say that if no name is passed in then we want to have a default value of u so we can just say name is equal to u and now let's add that to our return",
      "original_segments": [
        {
          "id": 93,
          "start": 550.8000000000001,
          "end": 557.76,
          "text": "name so we can add that to our parameters by putting in a comma here and saying that we also",
          "tokens": [
            50636,
            1315,
            370,
            321,
            393,
            909,
            300,
            281,
            527,
            9834,
            538,
            3372,
            294,
            257,
            22117,
            510,
            293,
            1566,
            300,
            321,
            611,
            50984
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03290792057911555,
          "compression_ratio": 1.8805970149253732,
          "no_speech_prob": 0.036332063376903534,
          "confidence": 0.9636679366230965
        },
        {
          "id": 94,
          "start": 557.76,
          "end": 564.32,
          "text": "want to accept this name parameter but let's say that if no name is passed in then we want to have",
          "tokens": [
            50984,
            528,
            281,
            3241,
            341,
            1315,
            13075,
            457,
            718,
            311,
            584,
            300,
            498,
            572,
            1315,
            307,
            4678,
            294,
            550,
            321,
            528,
            281,
            362,
            51312
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03290792057911555,
          "compression_ratio": 1.8805970149253732,
          "no_speech_prob": 0.036332063376903534,
          "confidence": 0.9636679366230965
        },
        {
          "id": 95,
          "start": 564.32,
          "end": 572.8000000000001,
          "text": "a default value of u so we can just say name is equal to u and now let's add that to our return",
          "tokens": [
            51312,
            257,
            7576,
            2158,
            295,
            344,
            370,
            321,
            393,
            445,
            584,
            1315,
            307,
            2681,
            281,
            344,
            293,
            586,
            718,
            311,
            909,
            300,
            281,
            527,
            2736,
            51736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03290792057911555,
          "compression_ratio": 1.8805970149253732,
          "no_speech_prob": 0.036332063376903534,
          "confidence": 0.9636679366230965
        }
      ],
      "duration": 27.0
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 567.8000000000001,
      "end_time": 592.0,
      "text": "a default value of u so we can just say name is equal to u and now let's add that to our return string so I'll put in a comma space and then another placeholder and we'll pass in that name so what this is going to do is it will return a greeting and a name separated by a comma and a space so if we run this then we can see that even though we didn't pass in a value for the name",
      "original_segments": [
        {
          "id": 96,
          "start": 572.8,
          "end": 579.5999999999999,
          "text": "string so I'll put in a comma space and then another placeholder and we'll pass in that",
          "tokens": [
            50364,
            6798,
            370,
            286,
            603,
            829,
            294,
            257,
            22117,
            1901,
            293,
            550,
            1071,
            1081,
            20480,
            293,
            321,
            603,
            1320,
            294,
            300,
            50704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04778400380560692,
          "compression_ratio": 1.7934272300469483,
          "no_speech_prob": 0.12480124831199646,
          "confidence": 0.8751987516880035
        },
        {
          "id": 97,
          "start": 579.5999999999999,
          "end": 585.4399999999999,
          "text": "name so what this is going to do is it will return a greeting and a name separated by a comma and a",
          "tokens": [
            50704,
            1315,
            370,
            437,
            341,
            307,
            516,
            281,
            360,
            307,
            309,
            486,
            2736,
            257,
            28174,
            293,
            257,
            1315,
            12005,
            538,
            257,
            22117,
            293,
            257,
            50996
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04778400380560692,
          "compression_ratio": 1.7934272300469483,
          "no_speech_prob": 0.12480124831199646,
          "confidence": 0.8751987516880035
        },
        {
          "id": 98,
          "start": 585.4399999999999,
          "end": 592.0,
          "text": "space so if we run this then we can see that even though we didn't pass in a value for the name",
          "tokens": [
            50996,
            1901,
            370,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            754,
            1673,
            321,
            994,
            380,
            1320,
            294,
            257,
            2158,
            337,
            264,
            1315,
            51324
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04778400380560692,
          "compression_ratio": 1.7934272300469483,
          "no_speech_prob": 0.12480124831199646,
          "confidence": 0.8751987516880035
        }
      ],
      "duration": 24.199999999999932
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 587.0,
      "end_time": 612.4799999999999,
      "text": "space so if we run this then we can see that even though we didn't pass in a value for the name argument when we executed this function it didn't throw an error and instead use the default value that we specified as u but if we want to pass in a value then it will use that value instead so when we execute this function if I was to say name is equal to and we'll say corey and run that then now",
      "original_segments": [
        {
          "id": 99,
          "start": 592.0,
          "end": 597.92,
          "text": "argument when we executed this function it didn't throw an error and instead use the default value",
          "tokens": [
            51324,
            6770,
            562,
            321,
            17577,
            341,
            2445,
            309,
            994,
            380,
            3507,
            364,
            6713,
            293,
            2602,
            764,
            264,
            7576,
            2158,
            51620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04778400380560692,
          "compression_ratio": 1.7934272300469483,
          "no_speech_prob": 0.12480124831199646,
          "confidence": 0.8751987516880035
        },
        {
          "id": 100,
          "start": 597.92,
          "end": 605.04,
          "text": "that we specified as u but if we want to pass in a value then it will use that value instead so when",
          "tokens": [
            50364,
            300,
            321,
            22206,
            382,
            344,
            457,
            498,
            321,
            528,
            281,
            1320,
            294,
            257,
            2158,
            550,
            309,
            486,
            764,
            300,
            2158,
            2602,
            370,
            562,
            50720
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08180314561595088,
          "compression_ratio": 1.7522935779816513,
          "no_speech_prob": 0.32454293966293335,
          "confidence": 0.6754570603370667
        },
        {
          "id": 101,
          "start": 605.04,
          "end": 612.4799999999999,
          "text": "we execute this function if I was to say name is equal to and we'll say corey and run that then now",
          "tokens": [
            50720,
            321,
            14483,
            341,
            2445,
            498,
            286,
            390,
            281,
            584,
            1315,
            307,
            2681,
            281,
            293,
            321,
            603,
            584,
            4965,
            88,
            293,
            1190,
            300,
            550,
            586,
            51092
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08180314561595088,
          "compression_ratio": 1.7522935779816513,
          "no_speech_prob": 0.32454293966293335,
          "confidence": 0.6754570603370667
        }
      ],
      "duration": 25.479999999999905
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 607.4799999999999,
      "end_time": 633.9200000000001,
      "text": "we execute this function if I was to say name is equal to and we'll say corey and run that then now we can see that printed out the greeting with the name that we passed in now your required positional arguments have to come before your keyword arguments now if you try to create a function with those out of order then it's going to give you an error now this is a little more advanced topic that tripped a lot of people up but at some point you'll probably run across a",
      "original_segments": [
        {
          "id": 102,
          "start": 612.4799999999999,
          "end": 618.0799999999999,
          "text": "we can see that printed out the greeting with the name that we passed in now your required",
          "tokens": [
            51092,
            321,
            393,
            536,
            300,
            13567,
            484,
            264,
            28174,
            365,
            264,
            1315,
            300,
            321,
            4678,
            294,
            586,
            428,
            4739,
            51372
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08180314561595088,
          "compression_ratio": 1.7522935779816513,
          "no_speech_prob": 0.32454293966293335,
          "confidence": 0.6754570603370667
        },
        {
          "id": 103,
          "start": 618.0799999999999,
          "end": 624.0799999999999,
          "text": "positional arguments have to come before your keyword arguments now if you try to create a",
          "tokens": [
            51372,
            2535,
            304,
            12869,
            362,
            281,
            808,
            949,
            428,
            20428,
            12869,
            586,
            498,
            291,
            853,
            281,
            1884,
            257,
            51672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08180314561595088,
          "compression_ratio": 1.7522935779816513,
          "no_speech_prob": 0.32454293966293335,
          "confidence": 0.6754570603370667
        },
        {
          "id": 104,
          "start": 624.08,
          "end": 628.64,
          "text": "function with those out of order then it's going to give you an error now this is a little more",
          "tokens": [
            50364,
            2445,
            365,
            729,
            484,
            295,
            1668,
            550,
            309,
            311,
            516,
            281,
            976,
            291,
            364,
            6713,
            586,
            341,
            307,
            257,
            707,
            544,
            50592
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04019886255264282,
          "compression_ratio": 1.6812227074235808,
          "no_speech_prob": 0.26485133171081543,
          "confidence": 0.7351486682891846
        },
        {
          "id": 105,
          "start": 628.64,
          "end": 633.9200000000001,
          "text": "advanced topic that tripped a lot of people up but at some point you'll probably run across a",
          "tokens": [
            50592,
            7339,
            4829,
            300,
            1376,
            3320,
            257,
            688,
            295,
            561,
            493,
            457,
            412,
            512,
            935,
            291,
            603,
            1391,
            1190,
            2108,
            257,
            50856
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04019886255264282,
          "compression_ratio": 1.6812227074235808,
          "no_speech_prob": 0.26485133171081543,
          "confidence": 0.7351486682891846
        }
      ],
      "duration": 26.44000000000017
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 628.9200000000001,
      "end_time": 657.6800000000001,
      "text": "advanced topic that tripped a lot of people up but at some point you'll probably run across a function in python that looks something like this so I'll say def student info and you might see something where you see this star args and star star quarks and so let me just go ahead and within this new function here I will print out args and I'll also print out quarks so let's not really",
      "original_segments": [
        {
          "id": 106,
          "start": 633.9200000000001,
          "end": 642.0,
          "text": "function in python that looks something like this so I'll say def student info and you might see",
          "tokens": [
            50856,
            2445,
            294,
            38797,
            300,
            1542,
            746,
            411,
            341,
            370,
            286,
            603,
            584,
            1060,
            3107,
            13614,
            293,
            291,
            1062,
            536,
            51260
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04019886255264282,
          "compression_ratio": 1.6812227074235808,
          "no_speech_prob": 0.26485133171081543,
          "confidence": 0.7351486682891846
        },
        {
          "id": 107,
          "start": 642.0,
          "end": 650.08,
          "text": "something where you see this star args and star star quarks and so let me just go ahead and within",
          "tokens": [
            51260,
            746,
            689,
            291,
            536,
            341,
            3543,
            3882,
            82,
            293,
            3543,
            3543,
            421,
            20851,
            293,
            370,
            718,
            385,
            445,
            352,
            2286,
            293,
            1951,
            51664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04019886255264282,
          "compression_ratio": 1.6812227074235808,
          "no_speech_prob": 0.26485133171081543,
          "confidence": 0.7351486682891846
        },
        {
          "id": 108,
          "start": 650.1600000000001,
          "end": 657.6800000000001,
          "text": "this new function here I will print out args and I'll also print out quarks so let's not really",
          "tokens": [
            50368,
            341,
            777,
            2445,
            510,
            286,
            486,
            4482,
            484,
            3882,
            82,
            293,
            286,
            603,
            611,
            4482,
            484,
            421,
            20851,
            370,
            718,
            311,
            406,
            534,
            50744
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0377525376236957,
          "compression_ratio": 1.742081447963801,
          "no_speech_prob": 0.358419805765152,
          "confidence": 0.641580194234848
        }
      ],
      "duration": 28.75999999999999
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 652.6800000000001,
      "end_time": 682.48,
      "text": "this new function here I will print out args and I'll also print out quarks so let's not really worry about this function name for now it's the arguments that I want to focus on so seeing this star args and star star quarks can seem confusing at first but basically all it's doing is allowing us to accept an arbitrary number of positional or keyword arguments so for example let's say that this student info function takes positional arguments that represent the classes that the",
      "original_segments": [
        {
          "id": 109,
          "start": 657.6800000000001,
          "end": 663.0400000000001,
          "text": "worry about this function name for now it's the arguments that I want to focus on so seeing this",
          "tokens": [
            50744,
            3292,
            466,
            341,
            2445,
            1315,
            337,
            586,
            309,
            311,
            264,
            12869,
            300,
            286,
            528,
            281,
            1879,
            322,
            370,
            2577,
            341,
            51012
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0377525376236957,
          "compression_ratio": 1.742081447963801,
          "no_speech_prob": 0.358419805765152,
          "confidence": 0.641580194234848
        },
        {
          "id": 110,
          "start": 663.0400000000001,
          "end": 670.1600000000001,
          "text": "star args and star star quarks can seem confusing at first but basically all it's doing is allowing",
          "tokens": [
            51012,
            3543,
            3882,
            82,
            293,
            3543,
            3543,
            421,
            20851,
            393,
            1643,
            13181,
            412,
            700,
            457,
            1936,
            439,
            309,
            311,
            884,
            307,
            8293,
            51368
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0377525376236957,
          "compression_ratio": 1.742081447963801,
          "no_speech_prob": 0.358419805765152,
          "confidence": 0.641580194234848
        },
        {
          "id": 111,
          "start": 670.1600000000001,
          "end": 676.72,
          "text": "us to accept an arbitrary number of positional or keyword arguments so for example let's say",
          "tokens": [
            51368,
            505,
            281,
            3241,
            364,
            23211,
            1230,
            295,
            2535,
            304,
            420,
            20428,
            12869,
            370,
            337,
            1365,
            718,
            311,
            584,
            51696
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0377525376236957,
          "compression_ratio": 1.742081447963801,
          "no_speech_prob": 0.358419805765152,
          "confidence": 0.641580194234848
        },
        {
          "id": 112,
          "start": 676.72,
          "end": 682.48,
          "text": "that this student info function takes positional arguments that represent the classes that the",
          "tokens": [
            50364,
            300,
            341,
            3107,
            13614,
            2445,
            2516,
            2535,
            304,
            12869,
            300,
            2906,
            264,
            5359,
            300,
            264,
            50652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034653252025820175,
          "compression_ratio": 1.9205020920502092,
          "no_speech_prob": 0.09625077247619629,
          "confidence": 0.9037492275238037
        }
      ],
      "duration": 29.799999999999955
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 677.48,
      "end_time": 705.6800000000001,
      "text": "that this student info function takes positional arguments that represent the classes that the student is taking plus the keyword arguments passed in will be random information about the student so you can see in both of those examples we don't know how many of these positional or keyword arguments there will be and that's why we use star args and star star quarks and the names don't have to be args and quarks but that's a convention that you'll see a lot",
      "original_segments": [
        {
          "id": 113,
          "start": 682.48,
          "end": 688.24,
          "text": "student is taking plus the keyword arguments passed in will be random information about",
          "tokens": [
            50652,
            3107,
            307,
            1940,
            1804,
            264,
            20428,
            12869,
            4678,
            294,
            486,
            312,
            4974,
            1589,
            466,
            50940
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034653252025820175,
          "compression_ratio": 1.9205020920502092,
          "no_speech_prob": 0.09625077247619629,
          "confidence": 0.9037492275238037
        },
        {
          "id": 114,
          "start": 688.24,
          "end": 693.28,
          "text": "the student so you can see in both of those examples we don't know how many of these",
          "tokens": [
            50940,
            264,
            3107,
            370,
            291,
            393,
            536,
            294,
            1293,
            295,
            729,
            5110,
            321,
            500,
            380,
            458,
            577,
            867,
            295,
            613,
            51192
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034653252025820175,
          "compression_ratio": 1.9205020920502092,
          "no_speech_prob": 0.09625077247619629,
          "confidence": 0.9037492275238037
        },
        {
          "id": 115,
          "start": 693.28,
          "end": 700.0,
          "text": "positional or keyword arguments there will be and that's why we use star args and star star quarks",
          "tokens": [
            51192,
            2535,
            304,
            420,
            20428,
            12869,
            456,
            486,
            312,
            293,
            300,
            311,
            983,
            321,
            764,
            3543,
            3882,
            82,
            293,
            3543,
            3543,
            421,
            20851,
            51528
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034653252025820175,
          "compression_ratio": 1.9205020920502092,
          "no_speech_prob": 0.09625077247619629,
          "confidence": 0.9037492275238037
        },
        {
          "id": 116,
          "start": 700.0,
          "end": 705.6800000000001,
          "text": "and the names don't have to be args and quarks but that's a convention that you'll see a lot",
          "tokens": [
            51528,
            293,
            264,
            5288,
            500,
            380,
            362,
            281,
            312,
            3882,
            82,
            293,
            421,
            20851,
            457,
            300,
            311,
            257,
            10286,
            300,
            291,
            603,
            536,
            257,
            688,
            51812
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034653252025820175,
          "compression_ratio": 1.9205020920502092,
          "no_speech_prob": 0.09625077247619629,
          "confidence": 0.9037492275238037
        }
      ],
      "duration": 28.200000000000045
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 700.6800000000001,
      "end_time": 728.64,
      "text": "and the names don't have to be args and quarks but that's a convention that you'll see a lot so it's always good to stick with convention so that people can understand your code so let's call this function with some random values so I'm going to say student info and first we want to pass in some positional arguments of the classes that they're taking so we'll say math and art and now for our keyword arguments we'll pass in some random information about the student",
      "original_segments": [
        {
          "id": 117,
          "start": 705.68,
          "end": 710.2399999999999,
          "text": "so it's always good to stick with convention so that people can understand your code",
          "tokens": [
            50364,
            370,
            309,
            311,
            1009,
            665,
            281,
            2897,
            365,
            10286,
            370,
            300,
            561,
            393,
            1223,
            428,
            3089,
            50592
          ],
          "temperature": 0.0,
          "avg_logprob": -0.047685791464412916,
          "compression_ratio": 1.7201834862385321,
          "no_speech_prob": 0.00029124642605893314,
          "confidence": 0.9997087535739411
        },
        {
          "id": 118,
          "start": 710.2399999999999,
          "end": 716.88,
          "text": "so let's call this function with some random values so I'm going to say student info and first",
          "tokens": [
            50592,
            370,
            718,
            311,
            818,
            341,
            2445,
            365,
            512,
            4974,
            4190,
            370,
            286,
            478,
            516,
            281,
            584,
            3107,
            13614,
            293,
            700,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.047685791464412916,
          "compression_ratio": 1.7201834862385321,
          "no_speech_prob": 0.00029124642605893314,
          "confidence": 0.9997087535739411
        },
        {
          "id": 119,
          "start": 716.88,
          "end": 722.4,
          "text": "we want to pass in some positional arguments of the classes that they're taking so we'll say math",
          "tokens": [
            50924,
            321,
            528,
            281,
            1320,
            294,
            512,
            2535,
            304,
            12869,
            295,
            264,
            5359,
            300,
            436,
            434,
            1940,
            370,
            321,
            603,
            584,
            5221,
            51200
          ],
          "temperature": 0.0,
          "avg_logprob": -0.047685791464412916,
          "compression_ratio": 1.7201834862385321,
          "no_speech_prob": 0.00029124642605893314,
          "confidence": 0.9997087535739411
        },
        {
          "id": 120,
          "start": 722.4,
          "end": 728.64,
          "text": "and art and now for our keyword arguments we'll pass in some random information about the student",
          "tokens": [
            51200,
            293,
            1523,
            293,
            586,
            337,
            527,
            20428,
            12869,
            321,
            603,
            1320,
            294,
            512,
            4974,
            1589,
            466,
            264,
            3107,
            51512
          ],
          "temperature": 0.0,
          "avg_logprob": -0.047685791464412916,
          "compression_ratio": 1.7201834862385321,
          "no_speech_prob": 0.00029124642605893314,
          "confidence": 0.9997087535739411
        }
      ],
      "duration": 27.959999999999923
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 723.64,
      "end_time": 751.4399999999999,
      "text": "and art and now for our keyword arguments we'll pass in some random information about the student so we'll say name is equal to john and age is equal to 22 so now if we run this then we can see that when we printed the args it's actually a tuple with all of our positional arguments and our quarks are a dictionary with all of our keyword values so once you have that tuple and",
      "original_segments": [
        {
          "id": 121,
          "start": 728.64,
          "end": 737.12,
          "text": "so we'll say name is equal to john and age is equal to 22 so now if we run this then we can see",
          "tokens": [
            50364,
            370,
            321,
            603,
            584,
            1315,
            307,
            2681,
            281,
            35097,
            293,
            3205,
            307,
            2681,
            281,
            5853,
            370,
            586,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            50788
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03413518692584748,
          "compression_ratio": 1.7710280373831775,
          "no_speech_prob": 0.37756890058517456,
          "confidence": 0.6224310994148254
        },
        {
          "id": 122,
          "start": 737.12,
          "end": 743.92,
          "text": "that when we printed the args it's actually a tuple with all of our positional arguments",
          "tokens": [
            50788,
            300,
            562,
            321,
            13567,
            264,
            3882,
            82,
            309,
            311,
            767,
            257,
            2604,
            781,
            365,
            439,
            295,
            527,
            2535,
            304,
            12869,
            51128
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03413518692584748,
          "compression_ratio": 1.7710280373831775,
          "no_speech_prob": 0.37756890058517456,
          "confidence": 0.6224310994148254
        },
        {
          "id": 123,
          "start": 743.92,
          "end": 751.4399999999999,
          "text": "and our quarks are a dictionary with all of our keyword values so once you have that tuple and",
          "tokens": [
            51128,
            293,
            527,
            421,
            20851,
            366,
            257,
            25890,
            365,
            439,
            295,
            527,
            20428,
            4190,
            370,
            1564,
            291,
            362,
            300,
            2604,
            781,
            293,
            51504
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03413518692584748,
          "compression_ratio": 1.7710280373831775,
          "no_speech_prob": 0.37756890058517456,
          "confidence": 0.6224310994148254
        }
      ],
      "duration": 27.799999999999955
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 746.4399999999999,
      "end_time": 774.48,
      "text": "and our quarks are a dictionary with all of our keyword values so once you have that tuple and that dictionary then you'll be able to do whatever you want with that information now sometimes you might see a function call with arguments using the star or double star now when it's used in that context it will actually unpack a sequence or dictionary and pass those values into the function individually so to see what I mean let's make a list in a dictionary of everything that",
      "original_segments": [
        {
          "id": 124,
          "start": 751.4399999999999,
          "end": 756.0,
          "text": "that dictionary then you'll be able to do whatever you want with that information now sometimes you",
          "tokens": [
            51504,
            300,
            25890,
            550,
            291,
            603,
            312,
            1075,
            281,
            360,
            2035,
            291,
            528,
            365,
            300,
            1589,
            586,
            2171,
            291,
            51732
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03413518692584748,
          "compression_ratio": 1.7710280373831775,
          "no_speech_prob": 0.37756890058517456,
          "confidence": 0.6224310994148254
        },
        {
          "id": 125,
          "start": 756.0,
          "end": 762.16,
          "text": "might see a function call with arguments using the star or double star now when it's used in",
          "tokens": [
            50364,
            1062,
            536,
            257,
            2445,
            818,
            365,
            12869,
            1228,
            264,
            3543,
            420,
            3834,
            3543,
            586,
            562,
            309,
            311,
            1143,
            294,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0222418044888696,
          "compression_ratio": 1.7066666666666668,
          "no_speech_prob": 0.05140417069196701,
          "confidence": 0.948595829308033
        },
        {
          "id": 126,
          "start": 762.16,
          "end": 768.8,
          "text": "that context it will actually unpack a sequence or dictionary and pass those values into the",
          "tokens": [
            50672,
            300,
            4319,
            309,
            486,
            767,
            26699,
            257,
            8310,
            420,
            25890,
            293,
            1320,
            729,
            4190,
            666,
            264,
            51004
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0222418044888696,
          "compression_ratio": 1.7066666666666668,
          "no_speech_prob": 0.05140417069196701,
          "confidence": 0.948595829308033
        },
        {
          "id": 127,
          "start": 768.8,
          "end": 774.48,
          "text": "function individually so to see what I mean let's make a list in a dictionary of everything that",
          "tokens": [
            51004,
            2445,
            16652,
            370,
            281,
            536,
            437,
            286,
            914,
            718,
            311,
            652,
            257,
            1329,
            294,
            257,
            25890,
            295,
            1203,
            300,
            51288
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0222418044888696,
          "compression_ratio": 1.7066666666666668,
          "no_speech_prob": 0.05140417069196701,
          "confidence": 0.948595829308033
        }
      ],
      "duration": 28.040000000000077
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 769.48,
      "end_time": 797.6,
      "text": "function individually so to see what I mean let's make a list in a dictionary of everything that we just passed into our function and just to clear up some room here I'm going to go ahead and delete the hello function that we started off with so now I'm going to create a list called courses and I'm going to set this equal to math and art that we passed in before and instead of a tuple I'm going to make that a list so now for the student info I'm going to create a dictionary",
      "original_segments": [
        {
          "id": 128,
          "start": 774.48,
          "end": 779.2,
          "text": "we just passed into our function and just to clear up some room here I'm going to go ahead and delete",
          "tokens": [
            51288,
            321,
            445,
            4678,
            666,
            527,
            2445,
            293,
            445,
            281,
            1850,
            493,
            512,
            1808,
            510,
            286,
            478,
            516,
            281,
            352,
            2286,
            293,
            12097,
            51524
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0222418044888696,
          "compression_ratio": 1.7066666666666668,
          "no_speech_prob": 0.05140417069196701,
          "confidence": 0.948595829308033
        },
        {
          "id": 129,
          "start": 779.2,
          "end": 786.08,
          "text": "the hello function that we started off with so now I'm going to create a list called courses",
          "tokens": [
            50364,
            264,
            7751,
            2445,
            300,
            321,
            1409,
            766,
            365,
            370,
            586,
            286,
            478,
            516,
            281,
            1884,
            257,
            1329,
            1219,
            7712,
            50708
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03658344668726767,
          "compression_ratio": 1.8686868686868687,
          "no_speech_prob": 0.5032730102539062,
          "confidence": 0.49672698974609375
        },
        {
          "id": 130,
          "start": 786.08,
          "end": 791.44,
          "text": "and I'm going to set this equal to math and art that we passed in before and instead of a tuple",
          "tokens": [
            50708,
            293,
            286,
            478,
            516,
            281,
            992,
            341,
            2681,
            281,
            5221,
            293,
            1523,
            300,
            321,
            4678,
            294,
            949,
            293,
            2602,
            295,
            257,
            2604,
            781,
            50976
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03658344668726767,
          "compression_ratio": 1.8686868686868687,
          "no_speech_prob": 0.5032730102539062,
          "confidence": 0.49672698974609375
        },
        {
          "id": 131,
          "start": 791.44,
          "end": 797.6,
          "text": "I'm going to make that a list so now for the student info I'm going to create a dictionary",
          "tokens": [
            50976,
            286,
            478,
            516,
            281,
            652,
            300,
            257,
            1329,
            370,
            586,
            337,
            264,
            3107,
            13614,
            286,
            478,
            516,
            281,
            1884,
            257,
            25890,
            51284
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03658344668726767,
          "compression_ratio": 1.8686868686868687,
          "no_speech_prob": 0.5032730102539062,
          "confidence": 0.49672698974609375
        }
      ],
      "duration": 28.120000000000005
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 792.6,
      "end_time": 817.6,
      "text": "I'm going to make that a list so now for the student info I'm going to create a dictionary called info and set that equal to those values so now let me get rid of our positional and arguments here so let's say that we wanted to pass all of these courses in as our positional arguments and the info dictionary as our keyword arguments so if we just pass these in as is and",
      "original_segments": [
        {
          "id": 132,
          "start": 797.6,
          "end": 804.08,
          "text": "called info and set that equal to those values so now let me get rid of our positional and",
          "tokens": [
            51284,
            1219,
            13614,
            293,
            992,
            300,
            2681,
            281,
            729,
            4190,
            370,
            586,
            718,
            385,
            483,
            3973,
            295,
            527,
            2535,
            304,
            293,
            51608
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03658344668726767,
          "compression_ratio": 1.8686868686868687,
          "no_speech_prob": 0.5032730102539062,
          "confidence": 0.49672698974609375
        },
        {
          "id": 133,
          "start": 804.72,
          "end": 810.32,
          "text": "arguments here so let's say that we wanted to pass all of these courses in as our positional",
          "tokens": [
            50396,
            12869,
            510,
            370,
            718,
            311,
            584,
            300,
            321,
            1415,
            281,
            1320,
            439,
            295,
            613,
            7712,
            294,
            382,
            527,
            2535,
            304,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03946374183477357,
          "compression_ratio": 1.8495145631067962,
          "no_speech_prob": 0.2885417938232422,
          "confidence": 0.7114582061767578
        },
        {
          "id": 134,
          "start": 810.32,
          "end": 817.6,
          "text": "arguments and the info dictionary as our keyword arguments so if we just pass these in as is and",
          "tokens": [
            50676,
            12869,
            293,
            264,
            13614,
            25890,
            382,
            527,
            20428,
            12869,
            370,
            498,
            321,
            445,
            1320,
            613,
            294,
            382,
            307,
            293,
            51040
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03946374183477357,
          "compression_ratio": 1.8495145631067962,
          "no_speech_prob": 0.2885417938232422,
          "confidence": 0.7114582061767578
        }
      ],
      "duration": 25.0
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 812.6,
      "end_time": 838.0,
      "text": "arguments and the info dictionary as our keyword arguments so if we just pass these in as is and I passed in courses and info now if we run this then we can see that this might not be exactly what we thought instead of passing the values in individually and instead passed in the complete list and the complete dictionary as positional arguments so if we use the single star in front",
      "original_segments": [
        {
          "id": 135,
          "start": 817.6,
          "end": 824.96,
          "text": "I passed in courses and info now if we run this then we can see that this might not be exactly",
          "tokens": [
            51040,
            286,
            4678,
            294,
            7712,
            293,
            13614,
            586,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            341,
            1062,
            406,
            312,
            2293,
            51408
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03946374183477357,
          "compression_ratio": 1.8495145631067962,
          "no_speech_prob": 0.2885417938232422,
          "confidence": 0.7114582061767578
        },
        {
          "id": 136,
          "start": 824.96,
          "end": 831.6,
          "text": "what we thought instead of passing the values in individually and instead passed in the complete",
          "tokens": [
            51408,
            437,
            321,
            1194,
            2602,
            295,
            8437,
            264,
            4190,
            294,
            16652,
            293,
            2602,
            4678,
            294,
            264,
            3566,
            51740
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03946374183477357,
          "compression_ratio": 1.8495145631067962,
          "no_speech_prob": 0.2885417938232422,
          "confidence": 0.7114582061767578
        },
        {
          "id": 137,
          "start": 831.6,
          "end": 838.0,
          "text": "list and the complete dictionary as positional arguments so if we use the single star in front",
          "tokens": [
            50364,
            1329,
            293,
            264,
            3566,
            25890,
            382,
            2535,
            304,
            12869,
            370,
            498,
            321,
            764,
            264,
            2167,
            3543,
            294,
            1868,
            50684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042519911597756775,
          "compression_ratio": 1.916256157635468,
          "no_speech_prob": 0.14969190955162048,
          "confidence": 0.8503080904483795
        }
      ],
      "duration": 25.399999999999977
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 833.0,
      "end_time": 856.64,
      "text": "list and the complete dictionary as positional arguments so if we use the single star in front of our list and the double star in front of our dictionary then it will actually unpack these values and pass them in individually so basically it will be the equivalent to our previous execution where we pass them in individually so to see what I mean let's add a star in front of this courses",
      "original_segments": [
        {
          "id": 138,
          "start": 838.0,
          "end": 843.6,
          "text": "of our list and the double star in front of our dictionary then it will actually unpack these",
          "tokens": [
            50684,
            295,
            527,
            1329,
            293,
            264,
            3834,
            3543,
            294,
            1868,
            295,
            527,
            25890,
            550,
            309,
            486,
            767,
            26699,
            613,
            50964
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042519911597756775,
          "compression_ratio": 1.916256157635468,
          "no_speech_prob": 0.14969190955162048,
          "confidence": 0.8503080904483795
        },
        {
          "id": 139,
          "start": 843.6,
          "end": 850.5600000000001,
          "text": "values and pass them in individually so basically it will be the equivalent to our previous execution",
          "tokens": [
            50964,
            4190,
            293,
            1320,
            552,
            294,
            16652,
            370,
            1936,
            309,
            486,
            312,
            264,
            10344,
            281,
            527,
            3894,
            15058,
            51312
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042519911597756775,
          "compression_ratio": 1.916256157635468,
          "no_speech_prob": 0.14969190955162048,
          "confidence": 0.8503080904483795
        },
        {
          "id": 140,
          "start": 850.5600000000001,
          "end": 856.64,
          "text": "where we pass them in individually so to see what I mean let's add a star in front of this courses",
          "tokens": [
            51312,
            689,
            321,
            1320,
            552,
            294,
            16652,
            370,
            281,
            536,
            437,
            286,
            914,
            718,
            311,
            909,
            257,
            3543,
            294,
            1868,
            295,
            341,
            7712,
            51616
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042519911597756775,
          "compression_ratio": 1.916256157635468,
          "no_speech_prob": 0.14969190955162048,
          "confidence": 0.8503080904483795
        }
      ],
      "duration": 23.639999999999986
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 851.64,
      "end_time": 877.12,
      "text": "where we pass them in individually so to see what I mean let's add a star in front of this courses to unpack those values and a star star in front of our dictionary to unpack those keyword values so now if we run this and we can see that we got what we had before we can see that when our function prints args it's the values from our list that we unpacked and our quarks is equal to the dictionary",
      "original_segments": [
        {
          "id": 141,
          "start": 856.64,
          "end": 864.3199999999999,
          "text": "to unpack those values and a star star in front of our dictionary to unpack those keyword values",
          "tokens": [
            50364,
            281,
            26699,
            729,
            4190,
            293,
            257,
            3543,
            3543,
            294,
            1868,
            295,
            527,
            25890,
            281,
            26699,
            729,
            20428,
            4190,
            50748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04542664190133413,
          "compression_ratio": 1.9371980676328502,
          "no_speech_prob": 0.22390811145305634,
          "confidence": 0.7760918885469437
        },
        {
          "id": 142,
          "start": 864.3199999999999,
          "end": 870.56,
          "text": "so now if we run this and we can see that we got what we had before we can see that when our function",
          "tokens": [
            50748,
            370,
            586,
            498,
            321,
            1190,
            341,
            293,
            321,
            393,
            536,
            300,
            321,
            658,
            437,
            321,
            632,
            949,
            321,
            393,
            536,
            300,
            562,
            527,
            2445,
            51060
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04542664190133413,
          "compression_ratio": 1.9371980676328502,
          "no_speech_prob": 0.22390811145305634,
          "confidence": 0.7760918885469437
        },
        {
          "id": 143,
          "start": 870.56,
          "end": 877.12,
          "text": "prints args it's the values from our list that we unpacked and our quarks is equal to the dictionary",
          "tokens": [
            51060,
            22305,
            3882,
            82,
            309,
            311,
            264,
            4190,
            490,
            527,
            1329,
            300,
            321,
            26699,
            292,
            293,
            527,
            421,
            20851,
            307,
            2681,
            281,
            264,
            25890,
            51388
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04542664190133413,
          "compression_ratio": 1.9371980676328502,
          "no_speech_prob": 0.22390811145305634,
          "confidence": 0.7760918885469437
        }
      ],
      "duration": 25.480000000000018
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 872.12,
      "end_time": 899.12,
      "text": "prints args it's the values from our list that we unpacked and our quarks is equal to the dictionary values that we unpacked now I know that's a little confusing especially to you know get the idea that whenever you're passing these in that it unpacks the values and within here it's for accepting an arbitrary number of positional or keyword values but it's a little more advanced of a topic and I know it's confusing but hopefully it makes some sense and you'll be able to better understand",
      "original_segments": [
        {
          "id": 144,
          "start": 877.12,
          "end": 882.8,
          "text": "values that we unpacked now I know that's a little confusing especially to you know get the idea that",
          "tokens": [
            51388,
            4190,
            300,
            321,
            26699,
            292,
            586,
            286,
            458,
            300,
            311,
            257,
            707,
            13181,
            2318,
            281,
            291,
            458,
            483,
            264,
            1558,
            300,
            51672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04542664190133413,
          "compression_ratio": 1.9371980676328502,
          "no_speech_prob": 0.22390811145305634,
          "confidence": 0.7760918885469437
        },
        {
          "id": 145,
          "start": 882.8,
          "end": 888.4799999999999,
          "text": "whenever you're passing these in that it unpacks the values and within here it's for accepting an",
          "tokens": [
            50364,
            5699,
            291,
            434,
            8437,
            613,
            294,
            300,
            309,
            20994,
            7424,
            264,
            4190,
            293,
            1951,
            510,
            309,
            311,
            337,
            17391,
            364,
            50648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03586757948639196,
          "compression_ratio": 1.7031802120141342,
          "no_speech_prob": 0.1724940687417984,
          "confidence": 0.8275059312582016
        },
        {
          "id": 146,
          "start": 888.4799999999999,
          "end": 894.9599999999999,
          "text": "arbitrary number of positional or keyword values but it's a little more advanced of a topic and I",
          "tokens": [
            50648,
            23211,
            1230,
            295,
            2535,
            304,
            420,
            20428,
            4190,
            457,
            309,
            311,
            257,
            707,
            544,
            7339,
            295,
            257,
            4829,
            293,
            286,
            50972
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03586757948639196,
          "compression_ratio": 1.7031802120141342,
          "no_speech_prob": 0.1724940687417984,
          "confidence": 0.8275059312582016
        },
        {
          "id": 147,
          "start": 894.9599999999999,
          "end": 899.12,
          "text": "know it's confusing but hopefully it makes some sense and you'll be able to better understand",
          "tokens": [
            50972,
            458,
            309,
            311,
            13181,
            457,
            4696,
            309,
            1669,
            512,
            2020,
            293,
            291,
            603,
            312,
            1075,
            281,
            1101,
            1223,
            51180
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03586757948639196,
          "compression_ratio": 1.7031802120141342,
          "no_speech_prob": 0.1724940687417984,
          "confidence": 0.8275059312582016
        }
      ],
      "duration": 27.0
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 894.12,
      "end_time": 921.36,
      "text": "arbitrary number of positional or keyword values but it's a little more advanced of a topic and I know it's confusing but hopefully it makes some sense and you'll be able to better understand what's going on if you ever run into something like that okay so lastly I wanted to run through an example that ties together everything we've learned so far in this series of videos so I have some code here in my snippets file that I'm going to grab real quick and paste into the file that we've been working with so now let me lower this output a little bit so that we can see everything",
      "original_segments": [
        {
          "id": 148,
          "start": 899.12,
          "end": 904.24,
          "text": "what's going on if you ever run into something like that okay so lastly I wanted to run through",
          "tokens": [
            51180,
            437,
            311,
            516,
            322,
            498,
            291,
            1562,
            1190,
            666,
            746,
            411,
            300,
            1392,
            370,
            16386,
            286,
            1415,
            281,
            1190,
            807,
            51436
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03586757948639196,
          "compression_ratio": 1.7031802120141342,
          "no_speech_prob": 0.1724940687417984,
          "confidence": 0.8275059312582016
        },
        {
          "id": 149,
          "start": 904.24,
          "end": 909.52,
          "text": "an example that ties together everything we've learned so far in this series of videos so I have",
          "tokens": [
            51436,
            364,
            1365,
            300,
            14039,
            1214,
            1203,
            321,
            600,
            3264,
            370,
            1400,
            294,
            341,
            2638,
            295,
            2145,
            370,
            286,
            362,
            51700
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03586757948639196,
          "compression_ratio": 1.7031802120141342,
          "no_speech_prob": 0.1724940687417984,
          "confidence": 0.8275059312582016
        },
        {
          "id": 150,
          "start": 909.52,
          "end": 916.0799999999999,
          "text": "some code here in my snippets file that I'm going to grab real quick and paste into the file that",
          "tokens": [
            50364,
            512,
            3089,
            510,
            294,
            452,
            35623,
            1385,
            3991,
            300,
            286,
            478,
            516,
            281,
            4444,
            957,
            1702,
            293,
            9163,
            666,
            264,
            3991,
            300,
            50692
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02191488677208577,
          "compression_ratio": 1.702127659574468,
          "no_speech_prob": 0.36889564990997314,
          "confidence": 0.6311043500900269
        },
        {
          "id": 151,
          "start": 916.0799999999999,
          "end": 921.36,
          "text": "we've been working with so now let me lower this output a little bit so that we can see everything",
          "tokens": [
            50692,
            321,
            600,
            668,
            1364,
            365,
            370,
            586,
            718,
            385,
            3126,
            341,
            5598,
            257,
            707,
            857,
            370,
            300,
            321,
            393,
            536,
            1203,
            50956
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02191488677208577,
          "compression_ratio": 1.702127659574468,
          "no_speech_prob": 0.36889564990997314,
          "confidence": 0.6311043500900269
        }
      ],
      "duration": 27.24000000000001
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 916.36,
      "end_time": 941.12,
      "text": "we've been working with so now let me lower this output a little bit so that we can see everything here now these are actually a couple of functions that I grabbed from the python standard library I modified them very slightly but it's basically the same and I wanted to show that even though we've only gone over the fundamentals we're already able to look at some code from within the standard library itself and understand what's going on so at the top here we have a list called",
      "original_segments": [
        {
          "id": 152,
          "start": 921.36,
          "end": 925.92,
          "text": "here now these are actually a couple of functions that I grabbed from the python standard library",
          "tokens": [
            50956,
            510,
            586,
            613,
            366,
            767,
            257,
            1916,
            295,
            6828,
            300,
            286,
            18607,
            490,
            264,
            38797,
            3832,
            6405,
            51184
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02191488677208577,
          "compression_ratio": 1.702127659574468,
          "no_speech_prob": 0.36889564990997314,
          "confidence": 0.6311043500900269
        },
        {
          "id": 153,
          "start": 925.92,
          "end": 930.56,
          "text": "I modified them very slightly but it's basically the same and I wanted to show that even though",
          "tokens": [
            51184,
            286,
            15873,
            552,
            588,
            4748,
            457,
            309,
            311,
            1936,
            264,
            912,
            293,
            286,
            1415,
            281,
            855,
            300,
            754,
            1673,
            51416
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02191488677208577,
          "compression_ratio": 1.702127659574468,
          "no_speech_prob": 0.36889564990997314,
          "confidence": 0.6311043500900269
        },
        {
          "id": 154,
          "start": 930.56,
          "end": 934.96,
          "text": "we've only gone over the fundamentals we're already able to look at some code from within",
          "tokens": [
            51416,
            321,
            600,
            787,
            2780,
            670,
            264,
            29505,
            321,
            434,
            1217,
            1075,
            281,
            574,
            412,
            512,
            3089,
            490,
            1951,
            51636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02191488677208577,
          "compression_ratio": 1.702127659574468,
          "no_speech_prob": 0.36889564990997314,
          "confidence": 0.6311043500900269
        },
        {
          "id": 155,
          "start": 934.96,
          "end": 941.12,
          "text": "the standard library itself and understand what's going on so at the top here we have a list called",
          "tokens": [
            50364,
            264,
            3832,
            6405,
            2564,
            293,
            1223,
            437,
            311,
            516,
            322,
            370,
            412,
            264,
            1192,
            510,
            321,
            362,
            257,
            1329,
            1219,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07643879110162909,
          "compression_ratio": 1.8171206225680934,
          "no_speech_prob": 0.6535133719444275,
          "confidence": 0.3464866280555725
        }
      ],
      "duration": 24.75999999999999
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 936.12,
      "end_time": 964.1600000000001,
      "text": "the standard library itself and understand what's going on so at the top here we have a list called month days and this has the number of days and each month now the first index here is just a placeholder that's not going to get used we're only going to be accessing indexes 1 through 12 since those are the months and then we have a function here called is leap which determines if a year is a leap year it takes a single argument that is the year that it's checking",
      "original_segments": [
        {
          "id": 156,
          "start": 941.12,
          "end": 947.6,
          "text": "month days and this has the number of days and each month now the first index here is just a",
          "tokens": [
            50672,
            1618,
            1708,
            293,
            341,
            575,
            264,
            1230,
            295,
            1708,
            293,
            1184,
            1618,
            586,
            264,
            700,
            8186,
            510,
            307,
            445,
            257,
            50996
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07643879110162909,
          "compression_ratio": 1.8171206225680934,
          "no_speech_prob": 0.6535133719444275,
          "confidence": 0.3464866280555725
        },
        {
          "id": 157,
          "start": 947.6,
          "end": 953.52,
          "text": "placeholder that's not going to get used we're only going to be accessing indexes 1 through 12",
          "tokens": [
            50996,
            1081,
            20480,
            300,
            311,
            406,
            516,
            281,
            483,
            1143,
            321,
            434,
            787,
            516,
            281,
            312,
            26440,
            8186,
            279,
            502,
            807,
            2272,
            51292
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07643879110162909,
          "compression_ratio": 1.8171206225680934,
          "no_speech_prob": 0.6535133719444275,
          "confidence": 0.3464866280555725
        },
        {
          "id": 158,
          "start": 953.52,
          "end": 958.8000000000001,
          "text": "since those are the months and then we have a function here called is leap which determines",
          "tokens": [
            51292,
            1670,
            729,
            366,
            264,
            2493,
            293,
            550,
            321,
            362,
            257,
            2445,
            510,
            1219,
            307,
            19438,
            597,
            24799,
            51556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07643879110162909,
          "compression_ratio": 1.8171206225680934,
          "no_speech_prob": 0.6535133719444275,
          "confidence": 0.3464866280555725
        },
        {
          "id": 159,
          "start": 958.8000000000001,
          "end": 964.1600000000001,
          "text": "if a year is a leap year it takes a single argument that is the year that it's checking",
          "tokens": [
            51556,
            498,
            257,
            1064,
            307,
            257,
            19438,
            1064,
            309,
            2516,
            257,
            2167,
            6770,
            300,
            307,
            264,
            1064,
            300,
            309,
            311,
            8568,
            51824
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07643879110162909,
          "compression_ratio": 1.8171206225680934,
          "no_speech_prob": 0.6535133719444275,
          "confidence": 0.3464866280555725
        }
      ],
      "duration": 28.040000000000077
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 959.1600000000001,
      "end_time": 986.88,
      "text": "if a year is a leap year it takes a single argument that is the year that it's checking and we can see that there's this string after the function definition with three quotes and this is called a doc string and doc strings help document what a function or a class is supposed to do so it's a good practice anytime you write a function to write a doc string that goes along with it explaining what that function is supposed to do now this part here can seem a little",
      "original_segments": [
        {
          "id": 160,
          "start": 964.16,
          "end": 970.88,
          "text": "and we can see that there's this string after the function definition with three quotes and this",
          "tokens": [
            50364,
            293,
            321,
            393,
            536,
            300,
            456,
            311,
            341,
            6798,
            934,
            264,
            2445,
            7123,
            365,
            1045,
            19963,
            293,
            341,
            50700
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03727554587217478,
          "compression_ratio": 1.9344262295081966,
          "no_speech_prob": 0.007643042132258415,
          "confidence": 0.9923569578677416
        },
        {
          "id": 161,
          "start": 970.88,
          "end": 976.64,
          "text": "is called a doc string and doc strings help document what a function or a class is supposed",
          "tokens": [
            50700,
            307,
            1219,
            257,
            3211,
            6798,
            293,
            3211,
            13985,
            854,
            4166,
            437,
            257,
            2445,
            420,
            257,
            1508,
            307,
            3442,
            50988
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03727554587217478,
          "compression_ratio": 1.9344262295081966,
          "no_speech_prob": 0.007643042132258415,
          "confidence": 0.9923569578677416
        },
        {
          "id": 162,
          "start": 976.64,
          "end": 981.76,
          "text": "to do so it's a good practice anytime you write a function to write a doc string that goes along",
          "tokens": [
            50988,
            281,
            360,
            370,
            309,
            311,
            257,
            665,
            3124,
            13038,
            291,
            2464,
            257,
            2445,
            281,
            2464,
            257,
            3211,
            6798,
            300,
            1709,
            2051,
            51244
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03727554587217478,
          "compression_ratio": 1.9344262295081966,
          "no_speech_prob": 0.007643042132258415,
          "confidence": 0.9923569578677416
        },
        {
          "id": 163,
          "start": 981.76,
          "end": 986.88,
          "text": "with it explaining what that function is supposed to do now this part here can seem a little",
          "tokens": [
            51244,
            365,
            309,
            13468,
            437,
            300,
            2445,
            307,
            3442,
            281,
            360,
            586,
            341,
            644,
            510,
            393,
            1643,
            257,
            707,
            51500
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03727554587217478,
          "compression_ratio": 1.9344262295081966,
          "no_speech_prob": 0.007643042132258415,
          "confidence": 0.9923569578677416
        }
      ],
      "duration": 27.719999999999914
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 981.88,
      "end_time": 1009.6800000000001,
      "text": "with it explaining what that function is supposed to do now this part here can seem a little intimidating but it's not important that you understand how a leap year is calculated there's not a lot of people who know that off the top of their head but for various reasons this is how a leap year is calculated and it's not important but you could probably figure out what this conditional is doing so we're saying that if the year is divisible by four and it's not divisible",
      "original_segments": [
        {
          "id": 164,
          "start": 986.88,
          "end": 991.4399999999999,
          "text": "intimidating but it's not important that you understand how a leap year is calculated there's",
          "tokens": [
            51500,
            29714,
            457,
            309,
            311,
            406,
            1021,
            300,
            291,
            1223,
            577,
            257,
            19438,
            1064,
            307,
            15598,
            456,
            311,
            51728
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03727554587217478,
          "compression_ratio": 1.9344262295081966,
          "no_speech_prob": 0.007643042132258415,
          "confidence": 0.9923569578677416
        },
        {
          "id": 165,
          "start": 991.44,
          "end": 996.4000000000001,
          "text": "not a lot of people who know that off the top of their head but for various reasons this is how a",
          "tokens": [
            50364,
            406,
            257,
            688,
            295,
            561,
            567,
            458,
            300,
            766,
            264,
            1192,
            295,
            641,
            1378,
            457,
            337,
            3683,
            4112,
            341,
            307,
            577,
            257,
            50612
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051021179266735515,
          "compression_ratio": 1.8464566929133859,
          "no_speech_prob": 0.07097463309764862,
          "confidence": 0.9290253669023514
        },
        {
          "id": 166,
          "start": 996.4000000000001,
          "end": 1001.6800000000001,
          "text": "leap year is calculated and it's not important but you could probably figure out what this",
          "tokens": [
            50612,
            19438,
            1064,
            307,
            15598,
            293,
            309,
            311,
            406,
            1021,
            457,
            291,
            727,
            1391,
            2573,
            484,
            437,
            341,
            50876
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051021179266735515,
          "compression_ratio": 1.8464566929133859,
          "no_speech_prob": 0.07097463309764862,
          "confidence": 0.9290253669023514
        },
        {
          "id": 167,
          "start": 1001.6800000000001,
          "end": 1009.6800000000001,
          "text": "conditional is doing so we're saying that if the year is divisible by four and it's not divisible",
          "tokens": [
            50876,
            27708,
            307,
            884,
            370,
            321,
            434,
            1566,
            300,
            498,
            264,
            1064,
            307,
            25974,
            964,
            538,
            1451,
            293,
            309,
            311,
            406,
            25974,
            964,
            51276
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051021179266735515,
          "compression_ratio": 1.8464566929133859,
          "no_speech_prob": 0.07097463309764862,
          "confidence": 0.9290253669023514
        }
      ],
      "duration": 27.800000000000068
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1004.6800000000001,
      "end_time": 1032.56,
      "text": "conditional is doing so we're saying that if the year is divisible by four and it's not divisible by a hundred or it's divisible by 400 so like i was saying there's a lot of different reasons why leap years are determined this way and if you don't know that that's completely fine but this function here is going to return true if a year is a leap year and false if it's a non-leap year and down here we have a days in month function that takes a year and a month as arguments",
      "original_segments": [
        {
          "id": 168,
          "start": 1009.6800000000001,
          "end": 1015.44,
          "text": "by a hundred or it's divisible by 400 so like i was saying there's a lot of different reasons why",
          "tokens": [
            51276,
            538,
            257,
            3262,
            420,
            309,
            311,
            25974,
            964,
            538,
            8423,
            370,
            411,
            741,
            390,
            1566,
            456,
            311,
            257,
            688,
            295,
            819,
            4112,
            983,
            51564
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051021179266735515,
          "compression_ratio": 1.8464566929133859,
          "no_speech_prob": 0.07097463309764862,
          "confidence": 0.9290253669023514
        },
        {
          "id": 169,
          "start": 1016.08,
          "end": 1020.24,
          "text": "leap years are determined this way and if you don't know that that's completely fine",
          "tokens": [
            51596,
            19438,
            924,
            366,
            9540,
            341,
            636,
            293,
            498,
            291,
            500,
            380,
            458,
            300,
            300,
            311,
            2584,
            2489,
            51804
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051021179266735515,
          "compression_ratio": 1.8464566929133859,
          "no_speech_prob": 0.07097463309764862,
          "confidence": 0.9290253669023514
        },
        {
          "id": 170,
          "start": 1020.24,
          "end": 1025.68,
          "text": "but this function here is going to return true if a year is a leap year and false if it's a non-leap",
          "tokens": [
            50364,
            457,
            341,
            2445,
            510,
            307,
            516,
            281,
            2736,
            2074,
            498,
            257,
            1064,
            307,
            257,
            19438,
            1064,
            293,
            7908,
            498,
            309,
            311,
            257,
            2107,
            12,
            306,
            569,
            50636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.043240718841552735,
          "compression_ratio": 1.883495145631068,
          "no_speech_prob": 0.0004926527035422623,
          "confidence": 0.9995073472964577
        },
        {
          "id": 171,
          "start": 1025.68,
          "end": 1032.56,
          "text": "year and down here we have a days in month function that takes a year and a month as arguments",
          "tokens": [
            50636,
            1064,
            293,
            760,
            510,
            321,
            362,
            257,
            1708,
            294,
            1618,
            2445,
            300,
            2516,
            257,
            1064,
            293,
            257,
            1618,
            382,
            12869,
            50980
          ],
          "temperature": 0.0,
          "avg_logprob": -0.043240718841552735,
          "compression_ratio": 1.883495145631068,
          "no_speech_prob": 0.0004926527035422623,
          "confidence": 0.9995073472964577
        }
      ],
      "duration": 27.87999999999988
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1027.56,
      "end_time": 1051.28,
      "text": "year and down here we have a days in month function that takes a year and a month as arguments and it'll return the number of days in that month so if we look at how this function works we can see that it first checks if a month is between one and 12 and if it's not then it returns that it's an invalid month and then it checks if the month that we're working with is the second month",
      "original_segments": [
        {
          "id": 172,
          "start": 1032.56,
          "end": 1038.88,
          "text": "and it'll return the number of days in that month so if we look at how this function works we can",
          "tokens": [
            50980,
            293,
            309,
            603,
            2736,
            264,
            1230,
            295,
            1708,
            294,
            300,
            1618,
            370,
            498,
            321,
            574,
            412,
            577,
            341,
            2445,
            1985,
            321,
            393,
            51296
          ],
          "temperature": 0.0,
          "avg_logprob": -0.043240718841552735,
          "compression_ratio": 1.883495145631068,
          "no_speech_prob": 0.0004926527035422623,
          "confidence": 0.9995073472964577
        },
        {
          "id": 173,
          "start": 1038.88,
          "end": 1046.24,
          "text": "see that it first checks if a month is between one and 12 and if it's not then it returns that",
          "tokens": [
            51296,
            536,
            300,
            309,
            700,
            13834,
            498,
            257,
            1618,
            307,
            1296,
            472,
            293,
            2272,
            293,
            498,
            309,
            311,
            406,
            550,
            309,
            11247,
            300,
            51664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.043240718841552735,
          "compression_ratio": 1.883495145631068,
          "no_speech_prob": 0.0004926527035422623,
          "confidence": 0.9995073472964577
        },
        {
          "id": 174,
          "start": 1046.24,
          "end": 1051.28,
          "text": "it's an invalid month and then it checks if the month that we're working with is the second month",
          "tokens": [
            50364,
            309,
            311,
            364,
            34702,
            1618,
            293,
            550,
            309,
            13834,
            498,
            264,
            1618,
            300,
            321,
            434,
            1364,
            365,
            307,
            264,
            1150,
            1618,
            50616
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04680490493774414,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.28134724497795105,
          "confidence": 0.718652755022049
        }
      ],
      "duration": 23.720000000000027
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1046.28,
      "end_time": 1071.44,
      "text": "it's an invalid month and then it checks if the month that we're working with is the second month which would mean that it's february and is a leap year using our function up here at the top then it returns 29 if both of those are true and lastly if it makes it to the end without having returned anything yet then it will index into our month days and list up here at the top and return the",
      "original_segments": [
        {
          "id": 175,
          "start": 1051.28,
          "end": 1057.76,
          "text": "which would mean that it's february and is a leap year using our function up here at the top then",
          "tokens": [
            50616,
            597,
            576,
            914,
            300,
            309,
            311,
            579,
            7294,
            822,
            293,
            307,
            257,
            19438,
            1064,
            1228,
            527,
            2445,
            493,
            510,
            412,
            264,
            1192,
            550,
            50940
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04680490493774414,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.28134724497795105,
          "confidence": 0.718652755022049
        },
        {
          "id": 176,
          "start": 1057.76,
          "end": 1064.16,
          "text": "it returns 29 if both of those are true and lastly if it makes it to the end without having returned",
          "tokens": [
            50940,
            309,
            11247,
            9413,
            498,
            1293,
            295,
            729,
            366,
            2074,
            293,
            16386,
            498,
            309,
            1669,
            309,
            281,
            264,
            917,
            1553,
            1419,
            8752,
            51260
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04680490493774414,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.28134724497795105,
          "confidence": 0.718652755022049
        },
        {
          "id": 177,
          "start": 1064.16,
          "end": 1071.44,
          "text": "anything yet then it will index into our month days and list up here at the top and return the",
          "tokens": [
            51260,
            1340,
            1939,
            550,
            309,
            486,
            8186,
            666,
            527,
            1618,
            1708,
            293,
            1329,
            493,
            510,
            412,
            264,
            1192,
            293,
            2736,
            264,
            51624
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04680490493774414,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.28134724497795105,
          "confidence": 0.718652755022049
        }
      ],
      "duration": 25.160000000000082
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1066.44,
      "end_time": 1093.28,
      "text": "anything yet then it will index into our month days and list up here at the top and return the value of our month so let's just run through this one time and see how these functions work so outside of both of the functions we're going to go ahead and first use this is leap year function so we'll say is leap 2017 so if we run this then it returns false so we ran this function is leap",
      "original_segments": [
        {
          "id": 178,
          "start": 1071.44,
          "end": 1077.6000000000001,
          "text": "value of our month so let's just run through this one time and see how these functions work",
          "tokens": [
            50364,
            2158,
            295,
            527,
            1618,
            370,
            718,
            311,
            445,
            1190,
            807,
            341,
            472,
            565,
            293,
            536,
            577,
            613,
            6828,
            589,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04321867428468854,
          "compression_ratio": 1.7671232876712328,
          "no_speech_prob": 0.2739344537258148,
          "confidence": 0.7260655462741852
        },
        {
          "id": 179,
          "start": 1077.6000000000001,
          "end": 1084.72,
          "text": "so outside of both of the functions we're going to go ahead and first use this is leap year function",
          "tokens": [
            50672,
            370,
            2380,
            295,
            1293,
            295,
            264,
            6828,
            321,
            434,
            516,
            281,
            352,
            2286,
            293,
            700,
            764,
            341,
            307,
            19438,
            1064,
            2445,
            51028
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04321867428468854,
          "compression_ratio": 1.7671232876712328,
          "no_speech_prob": 0.2739344537258148,
          "confidence": 0.7260655462741852
        },
        {
          "id": 180,
          "start": 1084.72,
          "end": 1093.28,
          "text": "so we'll say is leap 2017 so if we run this then it returns false so we ran this function is leap",
          "tokens": [
            51028,
            370,
            321,
            603,
            584,
            307,
            19438,
            6591,
            370,
            498,
            321,
            1190,
            341,
            550,
            309,
            11247,
            7908,
            370,
            321,
            5872,
            341,
            2445,
            307,
            19438,
            51456
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04321867428468854,
          "compression_ratio": 1.7671232876712328,
          "no_speech_prob": 0.2739344537258148,
          "confidence": 0.7260655462741852
        }
      ],
      "duration": 26.839999999999918
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1088.28,
      "end_time": 1113.6,
      "text": "so we'll say is leap 2017 so if we run this then it returns false so we ran this function is leap passed in 2017 as our value and it went through this complicated conditional here and determined that that was false but if we type in 2020 here and run that then we can see that it returns true that 2020 is a leap year but now let's try our days and month function which is going to be a",
      "original_segments": [
        {
          "id": 181,
          "start": 1093.28,
          "end": 1099.1200000000001,
          "text": "passed in 2017 as our value and it went through this complicated conditional here and determined",
          "tokens": [
            51456,
            4678,
            294,
            6591,
            382,
            527,
            2158,
            293,
            309,
            1437,
            807,
            341,
            6179,
            27708,
            510,
            293,
            9540,
            51748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04321867428468854,
          "compression_ratio": 1.7671232876712328,
          "no_speech_prob": 0.2739344537258148,
          "confidence": 0.7260655462741852
        },
        {
          "id": 182,
          "start": 1099.12,
          "end": 1106.08,
          "text": "that that was false but if we type in 2020 here and run that then we can see that it returns true",
          "tokens": [
            50364,
            300,
            300,
            390,
            7908,
            457,
            498,
            321,
            2010,
            294,
            4808,
            510,
            293,
            1190,
            300,
            550,
            321,
            393,
            536,
            300,
            309,
            11247,
            2074,
            50712
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034112613177993925,
          "compression_ratio": 1.8461538461538463,
          "no_speech_prob": 0.14091935753822327,
          "confidence": 0.8590806424617767
        },
        {
          "id": 183,
          "start": 1106.08,
          "end": 1113.6,
          "text": "that 2020 is a leap year but now let's try our days and month function which is going to be a",
          "tokens": [
            50712,
            300,
            4808,
            307,
            257,
            19438,
            1064,
            457,
            586,
            718,
            311,
            853,
            527,
            1708,
            293,
            1618,
            2445,
            597,
            307,
            516,
            281,
            312,
            257,
            51088
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034112613177993925,
          "compression_ratio": 1.8461538461538463,
          "no_speech_prob": 0.14091935753822327,
          "confidence": 0.8590806424617767
        }
      ],
      "duration": 25.319999999999936
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1108.6,
      "end_time": 1133.3600000000001,
      "text": "that 2020 is a leap year but now let's try our days and month function which is going to be a little bit longer of a walkthrough so we'll say days and month and we'll pass in a year so it takes a year first we'll pass in a year of 2017 and we'll pass in a month of two which is february now since 2017 is not a leap year then this second month which is february should only",
      "original_segments": [
        {
          "id": 184,
          "start": 1113.6,
          "end": 1120.0,
          "text": "little bit longer of a walkthrough so we'll say days and month and we'll pass in a year so it",
          "tokens": [
            51088,
            707,
            857,
            2854,
            295,
            257,
            1792,
            11529,
            370,
            321,
            603,
            584,
            1708,
            293,
            1618,
            293,
            321,
            603,
            1320,
            294,
            257,
            1064,
            370,
            309,
            51408
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034112613177993925,
          "compression_ratio": 1.8461538461538463,
          "no_speech_prob": 0.14091935753822327,
          "confidence": 0.8590806424617767
        },
        {
          "id": 185,
          "start": 1120.0,
          "end": 1127.1999999999998,
          "text": "takes a year first we'll pass in a year of 2017 and we'll pass in a month of two which is february",
          "tokens": [
            51408,
            2516,
            257,
            1064,
            700,
            321,
            603,
            1320,
            294,
            257,
            1064,
            295,
            6591,
            293,
            321,
            603,
            1320,
            294,
            257,
            1618,
            295,
            732,
            597,
            307,
            579,
            7294,
            822,
            51768
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034112613177993925,
          "compression_ratio": 1.8461538461538463,
          "no_speech_prob": 0.14091935753822327,
          "confidence": 0.8590806424617767
        },
        {
          "id": 186,
          "start": 1127.2,
          "end": 1133.3600000000001,
          "text": "now since 2017 is not a leap year then this second month which is february should only",
          "tokens": [
            50364,
            586,
            1670,
            6591,
            307,
            406,
            257,
            19438,
            1064,
            550,
            341,
            1150,
            1618,
            597,
            307,
            579,
            7294,
            822,
            820,
            787,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030548179542625342,
          "compression_ratio": 1.7064220183486238,
          "no_speech_prob": 0.0018080095760524273,
          "confidence": 0.9981919904239476
        }
      ],
      "duration": 24.76000000000022
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1128.3600000000001,
      "end_time": 1152.88,
      "text": "now since 2017 is not a leap year then this second month which is february should only have 28 days so if we run this then we can see that we got 28 so let's walk through exactly what happened just so we're sure that we understand so we executed our days and month function with our arguments of 2017 for the year and two for the month so it comes in to our days and month",
      "original_segments": [
        {
          "id": 187,
          "start": 1133.3600000000001,
          "end": 1139.52,
          "text": "have 28 days so if we run this then we can see that we got 28 so let's walk through exactly",
          "tokens": [
            50672,
            362,
            7562,
            1708,
            370,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            321,
            658,
            7562,
            370,
            718,
            311,
            1792,
            807,
            2293,
            50980
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030548179542625342,
          "compression_ratio": 1.7064220183486238,
          "no_speech_prob": 0.0018080095760524273,
          "confidence": 0.9981919904239476
        },
        {
          "id": 188,
          "start": 1139.52,
          "end": 1145.3600000000001,
          "text": "what happened just so we're sure that we understand so we executed our days and month function with",
          "tokens": [
            50980,
            437,
            2011,
            445,
            370,
            321,
            434,
            988,
            300,
            321,
            1223,
            370,
            321,
            17577,
            527,
            1708,
            293,
            1618,
            2445,
            365,
            51272
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030548179542625342,
          "compression_ratio": 1.7064220183486238,
          "no_speech_prob": 0.0018080095760524273,
          "confidence": 0.9981919904239476
        },
        {
          "id": 189,
          "start": 1145.3600000000001,
          "end": 1152.88,
          "text": "our arguments of 2017 for the year and two for the month so it comes in to our days and month",
          "tokens": [
            51272,
            527,
            12869,
            295,
            6591,
            337,
            264,
            1064,
            293,
            732,
            337,
            264,
            1618,
            370,
            309,
            1487,
            294,
            281,
            527,
            1708,
            293,
            1618,
            51648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030548179542625342,
          "compression_ratio": 1.7064220183486238,
          "no_speech_prob": 0.0018080095760524273,
          "confidence": 0.9981919904239476
        }
      ],
      "duration": 24.519999999999982
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1147.88,
      "end_time": 1176.16,
      "text": "our arguments of 2017 for the year and two for the month so it comes in to our days and month function and it sets this year variable equal to 2017 and this month variable equal to two so let's comment those here just to keep track of them through our walkthrough so i'll put a comment for a year as 2017 and a comment for month as two so first it checks if our month is not between",
      "original_segments": [
        {
          "id": 190,
          "start": 1152.88,
          "end": 1160.5600000000002,
          "text": "function and it sets this year variable equal to 2017 and this month variable equal to two so let's",
          "tokens": [
            50364,
            2445,
            293,
            309,
            6352,
            341,
            1064,
            7006,
            2681,
            281,
            6591,
            293,
            341,
            1618,
            7006,
            2681,
            281,
            732,
            370,
            718,
            311,
            50748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0731036144754161,
          "compression_ratio": 1.7041420118343196,
          "no_speech_prob": 0.3991132080554962,
          "confidence": 0.6008867919445038
        },
        {
          "id": 191,
          "start": 1160.5600000000002,
          "end": 1166.3200000000002,
          "text": "comment those here just to keep track of them through our walkthrough so i'll put a comment",
          "tokens": [
            50748,
            2871,
            729,
            510,
            445,
            281,
            1066,
            2837,
            295,
            552,
            807,
            527,
            1792,
            11529,
            370,
            741,
            603,
            829,
            257,
            2871,
            51036
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0731036144754161,
          "compression_ratio": 1.7041420118343196,
          "no_speech_prob": 0.3991132080554962,
          "confidence": 0.6008867919445038
        },
        {
          "id": 192,
          "start": 1166.3200000000002,
          "end": 1176.16,
          "text": "for a year as 2017 and a comment for month as two so first it checks if our month is not between",
          "tokens": [
            51036,
            337,
            257,
            1064,
            382,
            6591,
            293,
            257,
            2871,
            337,
            1618,
            382,
            732,
            370,
            700,
            309,
            13834,
            498,
            527,
            1618,
            307,
            406,
            1296,
            51528
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0731036144754161,
          "compression_ratio": 1.7041420118343196,
          "no_speech_prob": 0.3991132080554962,
          "confidence": 0.6008867919445038
        }
      ],
      "duration": 28.279999999999973
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1171.16,
      "end_time": 1196.3200000000002,
      "text": "for a year as 2017 and a comment for month as two so first it checks if our month is not between one and twelve our month is two so it is in that range so it doesn't meet this conditional and since it doesn't meet that conditional then we just continue on so our next conditional asks if the month is equal to two and is a leap year so our month is equal to two but this is leap function",
      "original_segments": [
        {
          "id": 193,
          "start": 1176.16,
          "end": 1182.3200000000002,
          "text": "one and twelve our month is two so it is in that range so it doesn't meet this conditional",
          "tokens": [
            50364,
            472,
            293,
            14390,
            527,
            1618,
            307,
            732,
            370,
            309,
            307,
            294,
            300,
            3613,
            370,
            309,
            1177,
            380,
            1677,
            341,
            27708,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05819930719292682,
          "compression_ratio": 1.9543147208121827,
          "no_speech_prob": 0.13030506670475006,
          "confidence": 0.8696949332952499
        },
        {
          "id": 194,
          "start": 1182.3200000000002,
          "end": 1188.16,
          "text": "and since it doesn't meet that conditional then we just continue on so our next conditional asks if",
          "tokens": [
            50672,
            293,
            1670,
            309,
            1177,
            380,
            1677,
            300,
            27708,
            550,
            321,
            445,
            2354,
            322,
            370,
            527,
            958,
            27708,
            8962,
            498,
            50964
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05819930719292682,
          "compression_ratio": 1.9543147208121827,
          "no_speech_prob": 0.13030506670475006,
          "confidence": 0.8696949332952499
        },
        {
          "id": 195,
          "start": 1188.16,
          "end": 1196.3200000000002,
          "text": "the month is equal to two and is a leap year so our month is equal to two but this is leap function",
          "tokens": [
            50964,
            264,
            1618,
            307,
            2681,
            281,
            732,
            293,
            307,
            257,
            19438,
            1064,
            370,
            527,
            1618,
            307,
            2681,
            281,
            732,
            457,
            341,
            307,
            19438,
            2445,
            51372
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05819930719292682,
          "compression_ratio": 1.9543147208121827,
          "no_speech_prob": 0.13030506670475006,
          "confidence": 0.8696949332952499
        }
      ],
      "duration": 25.160000000000082
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1191.3200000000002,
      "end_time": 1219.6,
      "text": "the month is equal to two and is a leap year so our month is equal to two but this is leap function runs through its code with the year 2017 and returns false so since is leap is false and we're using an and operator then the whole conditional evaluates to false so we move on and lastly it accesses the month days list at this month index and remember that our month is equal to two so",
      "original_segments": [
        {
          "id": 196,
          "start": 1196.3200000000002,
          "end": 1203.76,
          "text": "runs through its code with the year 2017 and returns false so since is leap is false and we're",
          "tokens": [
            51372,
            6676,
            807,
            1080,
            3089,
            365,
            264,
            1064,
            6591,
            293,
            11247,
            7908,
            370,
            1670,
            307,
            19438,
            307,
            7908,
            293,
            321,
            434,
            51744
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05819930719292682,
          "compression_ratio": 1.9543147208121827,
          "no_speech_prob": 0.13030506670475006,
          "confidence": 0.8696949332952499
        },
        {
          "id": 197,
          "start": 1203.76,
          "end": 1210.8799999999999,
          "text": "using an and operator then the whole conditional evaluates to false so we move on and lastly it",
          "tokens": [
            50364,
            1228,
            364,
            293,
            12973,
            550,
            264,
            1379,
            27708,
            6133,
            1024,
            281,
            7908,
            370,
            321,
            1286,
            322,
            293,
            16386,
            309,
            50720
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03603415558303612,
          "compression_ratio": 1.7365269461077844,
          "no_speech_prob": 0.0176931694149971,
          "confidence": 0.9823068305850029
        },
        {
          "id": 198,
          "start": 1210.8799999999999,
          "end": 1219.6,
          "text": "accesses the month days list at this month index and remember that our month is equal to two so",
          "tokens": [
            50720,
            2105,
            279,
            264,
            1618,
            1708,
            1329,
            412,
            341,
            1618,
            8186,
            293,
            1604,
            300,
            527,
            1618,
            307,
            2681,
            281,
            732,
            370,
            51156
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03603415558303612,
          "compression_ratio": 1.7365269461077844,
          "no_speech_prob": 0.0176931694149971,
          "confidence": 0.9823068305850029
        }
      ],
      "duration": 28.279999999999745
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1214.6,
      "end_time": 1240.24,
      "text": "accesses the month days list at this month index and remember that our month is equal to two so it's accessing the second index and if we look up here to our month days list and go to our second index so zero one two then we can see that that's equal to 28 so it should be returning 28 here and finally when we printed out that result 28 is what we got as our result now i",
      "original_segments": [
        {
          "id": 199,
          "start": 1219.6,
          "end": 1226.32,
          "text": "it's accessing the second index and if we look up here to our month days list and go to our second",
          "tokens": [
            51156,
            309,
            311,
            26440,
            264,
            1150,
            8186,
            293,
            498,
            321,
            574,
            493,
            510,
            281,
            527,
            1618,
            1708,
            1329,
            293,
            352,
            281,
            527,
            1150,
            51492
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03603415558303612,
          "compression_ratio": 1.7365269461077844,
          "no_speech_prob": 0.0176931694149971,
          "confidence": 0.9823068305850029
        },
        {
          "id": 200,
          "start": 1226.3999999999999,
          "end": 1233.76,
          "text": "index so zero one two then we can see that that's equal to 28 so it should be returning",
          "tokens": [
            50368,
            8186,
            370,
            4018,
            472,
            732,
            550,
            321,
            393,
            536,
            300,
            300,
            311,
            2681,
            281,
            7562,
            370,
            309,
            820,
            312,
            12678,
            50736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05339294619264856,
          "compression_ratio": 1.7715355805243447,
          "no_speech_prob": 0.2665514647960663,
          "confidence": 0.7334485352039337
        },
        {
          "id": 201,
          "start": 1233.76,
          "end": 1240.24,
          "text": "28 here and finally when we printed out that result 28 is what we got as our result now i",
          "tokens": [
            50736,
            7562,
            510,
            293,
            2721,
            562,
            321,
            13567,
            484,
            300,
            1874,
            7562,
            307,
            437,
            321,
            658,
            382,
            527,
            1874,
            586,
            741,
            51060
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05339294619264856,
          "compression_ratio": 1.7715355805243447,
          "no_speech_prob": 0.2665514647960663,
          "confidence": 0.7334485352039337
        }
      ],
      "duration": 25.6400000000001
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1235.24,
      "end_time": 1265.04,
      "text": "28 here and finally when we printed out that result 28 is what we got as our result now i know that it was kind of a long walkthrough but i thought it might be useful to see how these things actually work together and how do you go about determining what a function should return based on the arguments that you pass in okay so i think that is going to do it for this video i hope that now you have a clear understanding of how functions work how we return values and the different ways that we can pass arguments in the next video we'll be learning how to import modules and also",
      "original_segments": [
        {
          "id": 202,
          "start": 1240.24,
          "end": 1244.96,
          "text": "know that it was kind of a long walkthrough but i thought it might be useful to see how these things",
          "tokens": [
            51060,
            458,
            300,
            309,
            390,
            733,
            295,
            257,
            938,
            1792,
            11529,
            457,
            741,
            1194,
            309,
            1062,
            312,
            4420,
            281,
            536,
            577,
            613,
            721,
            51296
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05339294619264856,
          "compression_ratio": 1.7715355805243447,
          "no_speech_prob": 0.2665514647960663,
          "confidence": 0.7334485352039337
        },
        {
          "id": 203,
          "start": 1244.96,
          "end": 1249.9199999999998,
          "text": "actually work together and how do you go about determining what a function should return based",
          "tokens": [
            51296,
            767,
            589,
            1214,
            293,
            577,
            360,
            291,
            352,
            466,
            23751,
            437,
            257,
            2445,
            820,
            2736,
            2361,
            51544
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05339294619264856,
          "compression_ratio": 1.7715355805243447,
          "no_speech_prob": 0.2665514647960663,
          "confidence": 0.7334485352039337
        },
        {
          "id": 204,
          "start": 1249.9199999999998,
          "end": 1254.48,
          "text": "on the arguments that you pass in okay so i think that is going to do it for this video i hope that",
          "tokens": [
            51544,
            322,
            264,
            12869,
            300,
            291,
            1320,
            294,
            1392,
            370,
            741,
            519,
            300,
            307,
            516,
            281,
            360,
            309,
            337,
            341,
            960,
            741,
            1454,
            300,
            51772
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05339294619264856,
          "compression_ratio": 1.7715355805243447,
          "no_speech_prob": 0.2665514647960663,
          "confidence": 0.7334485352039337
        },
        {
          "id": 205,
          "start": 1254.48,
          "end": 1259.52,
          "text": "now you have a clear understanding of how functions work how we return values and the different",
          "tokens": [
            50364,
            586,
            291,
            362,
            257,
            1850,
            3701,
            295,
            577,
            6828,
            589,
            577,
            321,
            2736,
            4190,
            293,
            264,
            819,
            50616
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030100706055408388,
          "compression_ratio": 1.8741935483870968,
          "no_speech_prob": 0.15425743162631989,
          "confidence": 0.8457425683736801
        },
        {
          "id": 206,
          "start": 1259.52,
          "end": 1265.04,
          "text": "ways that we can pass arguments in the next video we'll be learning how to import modules and also",
          "tokens": [
            50616,
            2098,
            300,
            321,
            393,
            1320,
            12869,
            294,
            264,
            958,
            960,
            321,
            603,
            312,
            2539,
            577,
            281,
            974,
            16679,
            293,
            611,
            50892
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030100706055408388,
          "compression_ratio": 1.8741935483870968,
          "no_speech_prob": 0.15425743162631989,
          "confidence": 0.8457425683736801
        }
      ],
      "duration": 29.799999999999955
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1260.04,
      "end_time": 1286.4,
      "text": "ways that we can pass arguments in the next video we'll be learning how to import modules and also learn about some of the useful modules that come in the standard library but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and i'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways is simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find",
      "original_segments": [
        {
          "id": 207,
          "start": 1265.04,
          "end": 1270.0,
          "text": "learn about some of the useful modules that come in the standard library but if anyone has any",
          "tokens": [
            50892,
            1466,
            466,
            512,
            295,
            264,
            4420,
            16679,
            300,
            808,
            294,
            264,
            3832,
            6405,
            457,
            498,
            2878,
            575,
            604,
            51140
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030100706055408388,
          "compression_ratio": 1.8741935483870968,
          "no_speech_prob": 0.15425743162631989,
          "confidence": 0.8457425683736801
        },
        {
          "id": 208,
          "start": 1270.0,
          "end": 1274.48,
          "text": "questions about what we covered in this video then feel free to ask in the comment section below and",
          "tokens": [
            51140,
            1651,
            466,
            437,
            321,
            5343,
            294,
            341,
            960,
            550,
            841,
            1737,
            281,
            1029,
            294,
            264,
            2871,
            3541,
            2507,
            293,
            51364
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030100706055408388,
          "compression_ratio": 1.8741935483870968,
          "no_speech_prob": 0.15425743162631989,
          "confidence": 0.8457425683736801
        },
        {
          "id": 209,
          "start": 1274.48,
          "end": 1278.72,
          "text": "i'll do my best to answer those and if you enjoy these tutorials and would like to support them",
          "tokens": [
            51364,
            741,
            603,
            360,
            452,
            1151,
            281,
            1867,
            729,
            293,
            498,
            291,
            2103,
            613,
            17616,
            293,
            576,
            411,
            281,
            1406,
            552,
            51576
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030100706055408388,
          "compression_ratio": 1.8741935483870968,
          "no_speech_prob": 0.15425743162631989,
          "confidence": 0.8457425683736801
        },
        {
          "id": 210,
          "start": 1278.72,
          "end": 1282.48,
          "text": "then there are several ways you can do that the easiest ways is simply like the video and give",
          "tokens": [
            51576,
            550,
            456,
            366,
            2940,
            2098,
            291,
            393,
            360,
            300,
            264,
            12889,
            2098,
            307,
            2935,
            411,
            264,
            960,
            293,
            976,
            51764
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030100706055408388,
          "compression_ratio": 1.8741935483870968,
          "no_speech_prob": 0.15425743162631989,
          "confidence": 0.8457425683736801
        },
        {
          "id": 211,
          "start": 1282.48,
          "end": 1286.4,
          "text": "it a thumbs up and also it's a huge help to share these videos with anyone who you think would find",
          "tokens": [
            50364,
            309,
            257,
            8838,
            493,
            293,
            611,
            309,
            311,
            257,
            2603,
            854,
            281,
            2073,
            613,
            2145,
            365,
            2878,
            567,
            291,
            519,
            576,
            915,
            50560
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07380202838352748,
          "compression_ratio": 1.6505376344086022,
          "no_speech_prob": 0.013806721195578575,
          "confidence": 0.9861932788044214
        }
      ],
      "duration": 26.360000000000127
    },
    {
      "video_id": "2d073269a17b",
      "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
      "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
      "start_time": 1281.4,
      "end_time": 1299.28,
      "text": "then there are several ways you can do that the easiest ways is simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching",
      "original_segments": [
        {
          "id": 212,
          "start": 1286.4,
          "end": 1290.08,
          "text": "them useful and if you have the means you can contribute through patreon and there's a link",
          "tokens": [
            50560,
            552,
            4420,
            293,
            498,
            291,
            362,
            264,
            1355,
            291,
            393,
            10586,
            807,
            33161,
            293,
            456,
            311,
            257,
            2113,
            50744
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07380202838352748,
          "compression_ratio": 1.6505376344086022,
          "no_speech_prob": 0.013806721195578575,
          "confidence": 0.9861932788044214
        },
        {
          "id": 213,
          "start": 1290.08,
          "end": 1294.32,
          "text": "to that page in the description section below be sure to subscribe for future videos and thank you",
          "tokens": [
            50744,
            281,
            300,
            3028,
            294,
            264,
            3855,
            3541,
            2507,
            312,
            988,
            281,
            3022,
            337,
            2027,
            2145,
            293,
            1309,
            291,
            50956
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07380202838352748,
          "compression_ratio": 1.6505376344086022,
          "no_speech_prob": 0.013806721195578575,
          "confidence": 0.9861932788044214
        },
        {
          "id": 214,
          "start": 1294.32,
          "end": 1299.28,
          "text": "all for watching",
          "tokens": [
            50956,
            439,
            337,
            1976,
            51204
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07380202838352748,
          "compression_ratio": 1.6505376344086022,
          "no_speech_prob": 0.013806721195578575,
          "confidence": 0.9861932788044214
        }
      ],
      "duration": 17.87999999999988
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 0.0,
      "end_time": 25.36,
      "text": "Hey there, how's it going everybody? In this video, we'll be learning how to work with numeric data in Python and numbers are most commonly represented with integers and floats and the difference between an integer and a float is that an integer is a whole number and a float is a decimal. So to see an example of this, let's create a variable called num and let's just set this equal to three. Now Python has a built-in function called type where we can see the data",
      "original_segments": [
        {
          "id": 0,
          "start": 0.0,
          "end": 3.12,
          "text": "Hey there, how's it going everybody? In this video, we'll be learning how to work with",
          "tokens": [
            50364,
            1911,
            456,
            11,
            577,
            311,
            309,
            516,
            2201,
            30,
            682,
            341,
            960,
            11,
            321,
            603,
            312,
            2539,
            577,
            281,
            589,
            365,
            50520
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09395879559812292,
          "compression_ratio": 1.6859205776173285,
          "no_speech_prob": 0.12976038455963135,
          "confidence": 0.8702396154403687
        },
        {
          "id": 1,
          "start": 3.12,
          "end": 8.32,
          "text": "numeric data in Python and numbers are most commonly represented with integers and floats",
          "tokens": [
            50520,
            7866,
            299,
            1412,
            294,
            15329,
            293,
            3547,
            366,
            881,
            12719,
            10379,
            365,
            41674,
            293,
            37878,
            50780
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09395879559812292,
          "compression_ratio": 1.6859205776173285,
          "no_speech_prob": 0.12976038455963135,
          "confidence": 0.8702396154403687
        },
        {
          "id": 2,
          "start": 8.32,
          "end": 13.200000000000001,
          "text": "and the difference between an integer and a float is that an integer is a whole number and a float",
          "tokens": [
            50780,
            293,
            264,
            2649,
            1296,
            364,
            24922,
            293,
            257,
            15706,
            307,
            300,
            364,
            24922,
            307,
            257,
            1379,
            1230,
            293,
            257,
            15706,
            51024
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09395879559812292,
          "compression_ratio": 1.6859205776173285,
          "no_speech_prob": 0.12976038455963135,
          "confidence": 0.8702396154403687
        },
        {
          "id": 3,
          "start": 13.200000000000001,
          "end": 18.72,
          "text": "is a decimal. So to see an example of this, let's create a variable called num and let's just set",
          "tokens": [
            51024,
            307,
            257,
            26601,
            13,
            407,
            281,
            536,
            364,
            1365,
            295,
            341,
            11,
            718,
            311,
            1884,
            257,
            7006,
            1219,
            1031,
            293,
            718,
            311,
            445,
            992,
            51300
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09395879559812292,
          "compression_ratio": 1.6859205776173285,
          "no_speech_prob": 0.12976038455963135,
          "confidence": 0.8702396154403687
        },
        {
          "id": 4,
          "start": 18.72,
          "end": 25.36,
          "text": "this equal to three. Now Python has a built-in function called type where we can see the data",
          "tokens": [
            51300,
            341,
            2681,
            281,
            1045,
            13,
            823,
            15329,
            575,
            257,
            3094,
            12,
            259,
            2445,
            1219,
            2010,
            689,
            321,
            393,
            536,
            264,
            1412,
            51632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09395879559812292,
          "compression_ratio": 1.6859205776173285,
          "no_speech_prob": 0.12976038455963135,
          "confidence": 0.8702396154403687
        }
      ],
      "duration": 25.36
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 20.36,
      "end_time": 48.0,
      "text": "this equal to three. Now Python has a built-in function called type where we can see the data type of an object. So if we print out the type of num and run this, then we can see that it returns that that is of the class integer. Now if we were to set this number instead to 3.14 and now rerun this, then we can see that now the type of number is a float. So that's the main difference between",
      "original_segments": [
        {
          "id": 5,
          "start": 25.36,
          "end": 33.28,
          "text": "type of an object. So if we print out the type of num and run this, then we can see that it returns",
          "tokens": [
            50364,
            2010,
            295,
            364,
            2657,
            13,
            407,
            498,
            321,
            4482,
            484,
            264,
            2010,
            295,
            1031,
            293,
            1190,
            341,
            11,
            550,
            321,
            393,
            536,
            300,
            309,
            11247,
            50760
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05256086531139555,
          "compression_ratio": 1.7972350230414746,
          "no_speech_prob": 0.4647594690322876,
          "confidence": 0.5352405309677124
        },
        {
          "id": 6,
          "start": 33.28,
          "end": 41.84,
          "text": "that that is of the class integer. Now if we were to set this number instead to 3.14 and now rerun",
          "tokens": [
            50760,
            300,
            300,
            307,
            295,
            264,
            1508,
            24922,
            13,
            823,
            498,
            321,
            645,
            281,
            992,
            341,
            1230,
            2602,
            281,
            805,
            13,
            7271,
            293,
            586,
            43819,
            409,
            51188
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05256086531139555,
          "compression_ratio": 1.7972350230414746,
          "no_speech_prob": 0.4647594690322876,
          "confidence": 0.5352405309677124
        },
        {
          "id": 7,
          "start": 41.84,
          "end": 48.0,
          "text": "this, then we can see that now the type of number is a float. So that's the main difference between",
          "tokens": [
            51188,
            341,
            11,
            550,
            321,
            393,
            536,
            300,
            586,
            264,
            2010,
            295,
            1230,
            307,
            257,
            15706,
            13,
            407,
            300,
            311,
            264,
            2135,
            2649,
            1296,
            51496
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05256086531139555,
          "compression_ratio": 1.7972350230414746,
          "no_speech_prob": 0.4647594690322876,
          "confidence": 0.5352405309677124
        }
      ],
      "duration": 27.64
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 43.0,
      "end_time": 68.16,
      "text": "this, then we can see that now the type of number is a float. So that's the main difference between an integer and a float. Now when working with numeric data, it's common that you'll need to use some basic arithmetic. So let me grab some comments from my snippets here just so that we have a reference for everything that we can do. So I'll copy these arithmetic operators and paste these in and now let's go ahead and just run through each of these. So the first four we've",
      "original_segments": [
        {
          "id": 8,
          "start": 48.0,
          "end": 52.64,
          "text": "an integer and a float. Now when working with numeric data, it's common that you'll need to",
          "tokens": [
            51496,
            364,
            24922,
            293,
            257,
            15706,
            13,
            823,
            562,
            1364,
            365,
            7866,
            299,
            1412,
            11,
            309,
            311,
            2689,
            300,
            291,
            603,
            643,
            281,
            51728
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05256086531139555,
          "compression_ratio": 1.7972350230414746,
          "no_speech_prob": 0.4647594690322876,
          "confidence": 0.5352405309677124
        },
        {
          "id": 9,
          "start": 52.64,
          "end": 58.4,
          "text": "use some basic arithmetic. So let me grab some comments from my snippets here just so that we",
          "tokens": [
            50364,
            764,
            512,
            3875,
            42973,
            13,
            407,
            718,
            385,
            4444,
            512,
            3053,
            490,
            452,
            35623,
            1385,
            510,
            445,
            370,
            300,
            321,
            50652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07099279583009899,
          "compression_ratio": 1.728937728937729,
          "no_speech_prob": 0.4928174614906311,
          "confidence": 0.5071825385093689
        },
        {
          "id": 10,
          "start": 58.4,
          "end": 63.44,
          "text": "have a reference for everything that we can do. So I'll copy these arithmetic operators and paste",
          "tokens": [
            50652,
            362,
            257,
            6408,
            337,
            1203,
            300,
            321,
            393,
            360,
            13,
            407,
            286,
            603,
            5055,
            613,
            42973,
            19077,
            293,
            9163,
            50904
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07099279583009899,
          "compression_ratio": 1.728937728937729,
          "no_speech_prob": 0.4928174614906311,
          "confidence": 0.5071825385093689
        },
        {
          "id": 11,
          "start": 63.44,
          "end": 68.16,
          "text": "these in and now let's go ahead and just run through each of these. So the first four we've",
          "tokens": [
            50904,
            613,
            294,
            293,
            586,
            718,
            311,
            352,
            2286,
            293,
            445,
            1190,
            807,
            1184,
            295,
            613,
            13,
            407,
            264,
            700,
            1451,
            321,
            600,
            51140
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07099279583009899,
          "compression_ratio": 1.728937728937729,
          "no_speech_prob": 0.4928174614906311,
          "confidence": 0.5071825385093689
        }
      ],
      "duration": 25.159999999999997
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 63.16,
      "end_time": 92.88,
      "text": "have a reference for everything that we can do. So I'll copy these arithmetic operators and paste these in and now let's go ahead and just run through each of these. So the first four we've likely already seen a lot and are familiar with. So for example, addition, if we print it out three plus two, then we can expect that that's equal to five. If we print out three minus two, that should be one. Three times two should be equal to six and three divided by two should be equal to 1.5. Now for division to behave this way, this is actually new in Python 3. If you run in",
      "original_segments": [
        {
          "id": 12,
          "start": 68.16,
          "end": 74.48,
          "text": "likely already seen a lot and are familiar with. So for example, addition, if we print it out",
          "tokens": [
            51140,
            3700,
            1217,
            1612,
            257,
            688,
            293,
            366,
            4963,
            365,
            13,
            407,
            337,
            1365,
            11,
            4500,
            11,
            498,
            321,
            4482,
            309,
            484,
            51456
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07099279583009899,
          "compression_ratio": 1.728937728937729,
          "no_speech_prob": 0.4928174614906311,
          "confidence": 0.5071825385093689
        },
        {
          "id": 13,
          "start": 74.48,
          "end": 80.64,
          "text": "three plus two, then we can expect that that's equal to five. If we print out three minus two,",
          "tokens": [
            51456,
            1045,
            1804,
            732,
            11,
            550,
            321,
            393,
            2066,
            300,
            300,
            311,
            2681,
            281,
            1732,
            13,
            759,
            321,
            4482,
            484,
            1045,
            3175,
            732,
            11,
            51764
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07099279583009899,
          "compression_ratio": 1.728937728937729,
          "no_speech_prob": 0.4928174614906311,
          "confidence": 0.5071825385093689
        },
        {
          "id": 14,
          "start": 80.64,
          "end": 86.56,
          "text": "that should be one. Three times two should be equal to six and three divided by two should be",
          "tokens": [
            50364,
            300,
            820,
            312,
            472,
            13,
            6244,
            1413,
            732,
            820,
            312,
            2681,
            281,
            2309,
            293,
            1045,
            6666,
            538,
            732,
            820,
            312,
            50660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.061367974561803484,
          "compression_ratio": 1.7557603686635945,
          "no_speech_prob": 0.037682704627513885,
          "confidence": 0.9623172953724861
        },
        {
          "id": 15,
          "start": 86.56,
          "end": 92.88,
          "text": "equal to 1.5. Now for division to behave this way, this is actually new in Python 3. If you run in",
          "tokens": [
            50660,
            2681,
            281,
            502,
            13,
            20,
            13,
            823,
            337,
            10044,
            281,
            15158,
            341,
            636,
            11,
            341,
            307,
            767,
            777,
            294,
            15329,
            805,
            13,
            759,
            291,
            1190,
            294,
            50976
          ],
          "temperature": 0.0,
          "avg_logprob": -0.061367974561803484,
          "compression_ratio": 1.7557603686635945,
          "no_speech_prob": 0.037682704627513885,
          "confidence": 0.9623172953724861
        }
      ],
      "duration": 29.72
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 87.88,
      "end_time": 116.4,
      "text": "equal to 1.5. Now for division to behave this way, this is actually new in Python 3. If you run in Python 2, then this will actually equal one because it drops the decimal. But in Python 3, that gives us the right answer of 1.5. Now if we don't want to drop that decimal, then we do have a floor division and floor division can be performed by adding two division signs. So if I run this and now we can see it drops that decimal and it's equal to one. So if you ever see these",
      "original_segments": [
        {
          "id": 16,
          "start": 92.88,
          "end": 99.36,
          "text": "Python 2, then this will actually equal one because it drops the decimal. But in Python 3,",
          "tokens": [
            50976,
            15329,
            568,
            11,
            550,
            341,
            486,
            767,
            2681,
            472,
            570,
            309,
            11438,
            264,
            26601,
            13,
            583,
            294,
            15329,
            805,
            11,
            51300
          ],
          "temperature": 0.0,
          "avg_logprob": -0.061367974561803484,
          "compression_ratio": 1.7557603686635945,
          "no_speech_prob": 0.037682704627513885,
          "confidence": 0.9623172953724861
        },
        {
          "id": 17,
          "start": 99.36,
          "end": 104.72,
          "text": "that gives us the right answer of 1.5. Now if we don't want to drop that decimal, then we do have",
          "tokens": [
            51300,
            300,
            2709,
            505,
            264,
            558,
            1867,
            295,
            502,
            13,
            20,
            13,
            823,
            498,
            321,
            500,
            380,
            528,
            281,
            3270,
            300,
            26601,
            11,
            550,
            321,
            360,
            362,
            51568
          ],
          "temperature": 0.0,
          "avg_logprob": -0.061367974561803484,
          "compression_ratio": 1.7557603686635945,
          "no_speech_prob": 0.037682704627513885,
          "confidence": 0.9623172953724861
        },
        {
          "id": 18,
          "start": 104.72,
          "end": 110.96,
          "text": "a floor division and floor division can be performed by adding two division signs. So if I",
          "tokens": [
            50364,
            257,
            4123,
            10044,
            293,
            4123,
            10044,
            393,
            312,
            10332,
            538,
            5127,
            732,
            10044,
            7880,
            13,
            407,
            498,
            286,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06381215128982276,
          "compression_ratio": 2.064655172413793,
          "no_speech_prob": 0.2530480921268463,
          "confidence": 0.7469519078731537
        },
        {
          "id": 19,
          "start": 110.96,
          "end": 116.4,
          "text": "run this and now we can see it drops that decimal and it's equal to one. So if you ever see these",
          "tokens": [
            50676,
            1190,
            341,
            293,
            586,
            321,
            393,
            536,
            309,
            11438,
            300,
            26601,
            293,
            309,
            311,
            2681,
            281,
            472,
            13,
            407,
            498,
            291,
            1562,
            536,
            613,
            50948
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06381215128982276,
          "compression_ratio": 2.064655172413793,
          "no_speech_prob": 0.2530480921268463,
          "confidence": 0.7469519078731537
        }
      ],
      "duration": 28.52000000000001
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 111.4,
      "end_time": 137.84,
      "text": "run this and now we can see it drops that decimal and it's equal to one. So if you ever see these two division signs, then that is this floor division. Now if you wanted to work with exponents and powers and we can use these two multiplication signs. So if we wanted to print three to the second power, then we could just say three with these two multiplication signs and if I print that, then we can see that that equals nine because three squared is equal to nine.",
      "original_segments": [
        {
          "id": 20,
          "start": 116.4,
          "end": 121.36,
          "text": "two division signs, then that is this floor division. Now if you wanted to work with exponents",
          "tokens": [
            50948,
            732,
            10044,
            7880,
            11,
            550,
            300,
            307,
            341,
            4123,
            10044,
            13,
            823,
            498,
            291,
            1415,
            281,
            589,
            365,
            12680,
            791,
            51196
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06381215128982276,
          "compression_ratio": 2.064655172413793,
          "no_speech_prob": 0.2530480921268463,
          "confidence": 0.7469519078731537
        },
        {
          "id": 21,
          "start": 121.36,
          "end": 127.28,
          "text": "and powers and we can use these two multiplication signs. So if we wanted to print three to the second",
          "tokens": [
            51196,
            293,
            8674,
            293,
            321,
            393,
            764,
            613,
            732,
            27290,
            7880,
            13,
            407,
            498,
            321,
            1415,
            281,
            4482,
            1045,
            281,
            264,
            1150,
            51492
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06381215128982276,
          "compression_ratio": 2.064655172413793,
          "no_speech_prob": 0.2530480921268463,
          "confidence": 0.7469519078731537
        },
        {
          "id": 22,
          "start": 127.28,
          "end": 133.76,
          "text": "power, then we could just say three with these two multiplication signs and if I print that,",
          "tokens": [
            51492,
            1347,
            11,
            550,
            321,
            727,
            445,
            584,
            1045,
            365,
            613,
            732,
            27290,
            7880,
            293,
            498,
            286,
            4482,
            300,
            11,
            51816
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06381215128982276,
          "compression_ratio": 2.064655172413793,
          "no_speech_prob": 0.2530480921268463,
          "confidence": 0.7469519078731537
        },
        {
          "id": 23,
          "start": 133.76,
          "end": 137.84,
          "text": "then we can see that that equals nine because three squared is equal to nine.",
          "tokens": [
            50364,
            550,
            321,
            393,
            536,
            300,
            300,
            6915,
            4949,
            570,
            1045,
            8889,
            307,
            2681,
            281,
            4949,
            13,
            50568
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05270656479729546,
          "compression_ratio": 1.8477157360406091,
          "no_speech_prob": 0.0003412014339119196,
          "confidence": 0.9996587985660881
        }
      ],
      "duration": 26.439999999999998
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 132.84,
      "end_time": 159.68,
      "text": "power, then we could just say three with these two multiplication signs and if I print that, then we can see that that equals nine because three squared is equal to nine. Now this last operator here is called a modulo operator and it gives us the remainder after a division. So three mod two will have a remainder of one because two goes into three once with one left over. So if we say three mod two and run that, then we can see that that is equal to one.",
      "original_segments": [
        {
          "id": 24,
          "start": 137.84,
          "end": 144.07999999999998,
          "text": "Now this last operator here is called a modulo operator and it gives us the remainder after a",
          "tokens": [
            50568,
            823,
            341,
            1036,
            12973,
            510,
            307,
            1219,
            257,
            1072,
            13455,
            12973,
            293,
            309,
            2709,
            505,
            264,
            29837,
            934,
            257,
            50880
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05270656479729546,
          "compression_ratio": 1.8477157360406091,
          "no_speech_prob": 0.0003412014339119196,
          "confidence": 0.9996587985660881
        },
        {
          "id": 25,
          "start": 144.07999999999998,
          "end": 152.07999999999998,
          "text": "division. So three mod two will have a remainder of one because two goes into three once with one",
          "tokens": [
            50880,
            10044,
            13,
            407,
            1045,
            1072,
            732,
            486,
            362,
            257,
            29837,
            295,
            472,
            570,
            732,
            1709,
            666,
            1045,
            1564,
            365,
            472,
            51280
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05270656479729546,
          "compression_ratio": 1.8477157360406091,
          "no_speech_prob": 0.0003412014339119196,
          "confidence": 0.9996587985660881
        },
        {
          "id": 26,
          "start": 152.07999999999998,
          "end": 159.68,
          "text": "left over. So if we say three mod two and run that, then we can see that that is equal to one.",
          "tokens": [
            51280,
            1411,
            670,
            13,
            407,
            498,
            321,
            584,
            1045,
            1072,
            732,
            293,
            1190,
            300,
            11,
            550,
            321,
            393,
            536,
            300,
            300,
            307,
            2681,
            281,
            472,
            13,
            51660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05270656479729546,
          "compression_ratio": 1.8477157360406091,
          "no_speech_prob": 0.0003412014339119196,
          "confidence": 0.9996587985660881
        }
      ],
      "duration": 26.840000000000003
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 154.68,
      "end_time": 184.24,
      "text": "left over. So if we say three mod two and run that, then we can see that that is equal to one. Now a common use case for this is to tell if a number is even or odd. Now the reason for this is because every time you divide a number by two, there are only two possible remainders. It's either going to be zero or one. So for example, if we look at a few more examples here, so let me just print out a few more module operators and I'll do two mod two, three mod two, four mod two, and five",
      "original_segments": [
        {
          "id": 27,
          "start": 159.68,
          "end": 165.84,
          "text": "Now a common use case for this is to tell if a number is even or odd. Now the reason for this",
          "tokens": [
            50364,
            823,
            257,
            2689,
            764,
            1389,
            337,
            341,
            307,
            281,
            980,
            498,
            257,
            1230,
            307,
            754,
            420,
            7401,
            13,
            823,
            264,
            1778,
            337,
            341,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06371749122187777,
          "compression_ratio": 1.6824034334763949,
          "no_speech_prob": 0.005599503871053457,
          "confidence": 0.9944004961289465
        },
        {
          "id": 28,
          "start": 165.84,
          "end": 170.72,
          "text": "is because every time you divide a number by two, there are only two possible remainders. It's",
          "tokens": [
            50672,
            307,
            570,
            633,
            565,
            291,
            9845,
            257,
            1230,
            538,
            732,
            11,
            456,
            366,
            787,
            732,
            1944,
            28986,
            471,
            433,
            13,
            467,
            311,
            50916
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06371749122187777,
          "compression_ratio": 1.6824034334763949,
          "no_speech_prob": 0.005599503871053457,
          "confidence": 0.9944004961289465
        },
        {
          "id": 29,
          "start": 170.72,
          "end": 177.20000000000002,
          "text": "either going to be zero or one. So for example, if we look at a few more examples here, so let me just",
          "tokens": [
            50916,
            2139,
            516,
            281,
            312,
            4018,
            420,
            472,
            13,
            407,
            337,
            1365,
            11,
            498,
            321,
            574,
            412,
            257,
            1326,
            544,
            5110,
            510,
            11,
            370,
            718,
            385,
            445,
            51240
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06371749122187777,
          "compression_ratio": 1.6824034334763949,
          "no_speech_prob": 0.005599503871053457,
          "confidence": 0.9944004961289465
        },
        {
          "id": 30,
          "start": 177.76000000000002,
          "end": 184.24,
          "text": "print out a few more module operators and I'll do two mod two, three mod two, four mod two, and five",
          "tokens": [
            51268,
            4482,
            484,
            257,
            1326,
            544,
            10088,
            19077,
            293,
            286,
            603,
            360,
            732,
            1072,
            732,
            11,
            1045,
            1072,
            732,
            11,
            1451,
            1072,
            732,
            11,
            293,
            1732,
            51592
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06371749122187777,
          "compression_ratio": 1.6824034334763949,
          "no_speech_prob": 0.005599503871053457,
          "confidence": 0.9944004961289465
        }
      ],
      "duration": 29.560000000000002
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 179.24,
      "end_time": 205.12,
      "text": "print out a few more module operators and I'll do two mod two, three mod two, four mod two, and five mod two. So if we run this, then we can see that two goes into two once with no remainders, that's why we get a zero, two goes into three once with one as a remainder, so two goes into four twice with no remainder, and two goes into five twice with one as a remainder. So we can see from this",
      "original_segments": [
        {
          "id": 31,
          "start": 184.24,
          "end": 190.72,
          "text": "mod two. So if we run this, then we can see that two goes into two once with no remainders, that's",
          "tokens": [
            50364,
            1072,
            732,
            13,
            407,
            498,
            321,
            1190,
            341,
            11,
            550,
            321,
            393,
            536,
            300,
            732,
            1709,
            666,
            732,
            1564,
            365,
            572,
            28986,
            471,
            433,
            11,
            300,
            311,
            50688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05448501223609561,
          "compression_ratio": 2.074074074074074,
          "no_speech_prob": 0.3386569321155548,
          "confidence": 0.6613430678844452
        },
        {
          "id": 32,
          "start": 190.72,
          "end": 198.56,
          "text": "why we get a zero, two goes into three once with one as a remainder, so two goes into four twice",
          "tokens": [
            50688,
            983,
            321,
            483,
            257,
            4018,
            11,
            732,
            1709,
            666,
            1045,
            1564,
            365,
            472,
            382,
            257,
            29837,
            11,
            370,
            732,
            1709,
            666,
            1451,
            6091,
            51080
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05448501223609561,
          "compression_ratio": 2.074074074074074,
          "no_speech_prob": 0.3386569321155548,
          "confidence": 0.6613430678844452
        },
        {
          "id": 33,
          "start": 198.56,
          "end": 205.12,
          "text": "with no remainder, and two goes into five twice with one as a remainder. So we can see from this",
          "tokens": [
            51080,
            365,
            572,
            29837,
            11,
            293,
            732,
            1709,
            666,
            1732,
            6091,
            365,
            472,
            382,
            257,
            29837,
            13,
            407,
            321,
            393,
            536,
            490,
            341,
            51408
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05448501223609561,
          "compression_ratio": 2.074074074074074,
          "no_speech_prob": 0.3386569321155548,
          "confidence": 0.6613430678844452
        }
      ],
      "duration": 25.879999999999995
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 200.12,
      "end_time": 226.08,
      "text": "with no remainder, and two goes into five twice with one as a remainder. So we can see from this pattern that if you do a mod two on any number and there is no remainder, then that number is even. If you do a mod two on any number and the remainder is one, then that number is odd, and that's a pretty common check that you'll use a lot throughout Python programming. Okay, so now let's look at the order of operations. Just like we would expect, we can also use",
      "original_segments": [
        {
          "id": 34,
          "start": 205.12,
          "end": 211.36,
          "text": "pattern that if you do a mod two on any number and there is no remainder, then that number is even.",
          "tokens": [
            51408,
            5102,
            300,
            498,
            291,
            360,
            257,
            1072,
            732,
            322,
            604,
            1230,
            293,
            456,
            307,
            572,
            29837,
            11,
            550,
            300,
            1230,
            307,
            754,
            13,
            51720
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05448501223609561,
          "compression_ratio": 2.074074074074074,
          "no_speech_prob": 0.3386569321155548,
          "confidence": 0.6613430678844452
        },
        {
          "id": 35,
          "start": 211.36,
          "end": 216.48000000000002,
          "text": "If you do a mod two on any number and the remainder is one, then that number is odd,",
          "tokens": [
            50364,
            759,
            291,
            360,
            257,
            1072,
            732,
            322,
            604,
            1230,
            293,
            264,
            29837,
            307,
            472,
            11,
            550,
            300,
            1230,
            307,
            7401,
            11,
            50620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0609588081186468,
          "compression_ratio": 1.6116071428571428,
          "no_speech_prob": 0.06770030409097672,
          "confidence": 0.9322996959090233
        },
        {
          "id": 36,
          "start": 216.48000000000002,
          "end": 220.64000000000001,
          "text": "and that's a pretty common check that you'll use a lot throughout Python programming.",
          "tokens": [
            50620,
            293,
            300,
            311,
            257,
            1238,
            2689,
            1520,
            300,
            291,
            603,
            764,
            257,
            688,
            3710,
            15329,
            9410,
            13,
            50828
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0609588081186468,
          "compression_ratio": 1.6116071428571428,
          "no_speech_prob": 0.06770030409097672,
          "confidence": 0.9322996959090233
        },
        {
          "id": 37,
          "start": 220.64000000000001,
          "end": 226.08,
          "text": "Okay, so now let's look at the order of operations. Just like we would expect, we can also use",
          "tokens": [
            50828,
            1033,
            11,
            370,
            586,
            718,
            311,
            574,
            412,
            264,
            1668,
            295,
            7705,
            13,
            1449,
            411,
            321,
            576,
            2066,
            11,
            321,
            393,
            611,
            764,
            51100
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0609588081186468,
          "compression_ratio": 1.6116071428571428,
          "no_speech_prob": 0.06770030409097672,
          "confidence": 0.9322996959090233
        }
      ],
      "duration": 25.960000000000008
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 221.08,
      "end_time": 246.8,
      "text": "Okay, so now let's look at the order of operations. Just like we would expect, we can also use parentheses to change the order of operations just like with normal arithmetic. So for example, if we were to say, let's see, three times two plus one, then with the normal order of operations, we would multiply three and two, which would give us six, and then we would add one, which would give",
      "original_segments": [
        {
          "id": 38,
          "start": 226.08,
          "end": 232.24,
          "text": "parentheses to change the order of operations just like with normal arithmetic. So for example,",
          "tokens": [
            51100,
            34153,
            281,
            1319,
            264,
            1668,
            295,
            7705,
            445,
            411,
            365,
            2710,
            42973,
            13,
            407,
            337,
            1365,
            11,
            51408
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0609588081186468,
          "compression_ratio": 1.6116071428571428,
          "no_speech_prob": 0.06770030409097672,
          "confidence": 0.9322996959090233
        },
        {
          "id": 39,
          "start": 232.24,
          "end": 240.88,
          "text": "if we were to say, let's see, three times two plus one, then with the normal order of operations,",
          "tokens": [
            50364,
            498,
            321,
            645,
            281,
            584,
            11,
            718,
            311,
            536,
            11,
            1045,
            1413,
            732,
            1804,
            472,
            11,
            550,
            365,
            264,
            2710,
            1668,
            295,
            7705,
            11,
            50796
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08484929341536301,
          "compression_ratio": 1.8294930875576036,
          "no_speech_prob": 0.10910207778215408,
          "confidence": 0.8908979222178459
        },
        {
          "id": 40,
          "start": 240.88,
          "end": 246.8,
          "text": "we would multiply three and two, which would give us six, and then we would add one, which would give",
          "tokens": [
            50796,
            321,
            576,
            12972,
            1045,
            293,
            732,
            11,
            597,
            576,
            976,
            505,
            2309,
            11,
            293,
            550,
            321,
            576,
            909,
            472,
            11,
            597,
            576,
            976,
            51092
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08484929341536301,
          "compression_ratio": 1.8294930875576036,
          "no_speech_prob": 0.10910207778215408,
          "confidence": 0.8908979222178459
        }
      ],
      "duration": 25.72
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 241.8,
      "end_time": 269.84000000000003,
      "text": "we would multiply three and two, which would give us six, and then we would add one, which would give us seven. So if we run that, then we can see that we got seven as our answer. But if I put a parenthesis here around this two plus one, then now with normal arithmetic, the way that this would work is that it should first add up these numbers in the parentheses, which should give us three, and then three times three should give us nine. So now if we run this, then we can see that we",
      "original_segments": [
        {
          "id": 41,
          "start": 246.8,
          "end": 253.68,
          "text": "us seven. So if we run that, then we can see that we got seven as our answer. But if I put a parenthesis",
          "tokens": [
            51092,
            505,
            3407,
            13,
            407,
            498,
            321,
            1190,
            300,
            11,
            550,
            321,
            393,
            536,
            300,
            321,
            658,
            3407,
            382,
            527,
            1867,
            13,
            583,
            498,
            286,
            829,
            257,
            23350,
            9374,
            51436
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08484929341536301,
          "compression_ratio": 1.8294930875576036,
          "no_speech_prob": 0.10910207778215408,
          "confidence": 0.8908979222178459
        },
        {
          "id": 42,
          "start": 253.68,
          "end": 259.68,
          "text": "here around this two plus one, then now with normal arithmetic, the way that this would work",
          "tokens": [
            51436,
            510,
            926,
            341,
            732,
            1804,
            472,
            11,
            550,
            586,
            365,
            2710,
            42973,
            11,
            264,
            636,
            300,
            341,
            576,
            589,
            51736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08484929341536301,
          "compression_ratio": 1.8294930875576036,
          "no_speech_prob": 0.10910207778215408,
          "confidence": 0.8908979222178459
        },
        {
          "id": 43,
          "start": 259.68,
          "end": 264.32,
          "text": "is that it should first add up these numbers in the parentheses, which should give us three,",
          "tokens": [
            50364,
            307,
            300,
            309,
            820,
            700,
            909,
            493,
            613,
            3547,
            294,
            264,
            34153,
            11,
            597,
            820,
            976,
            505,
            1045,
            11,
            50596
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05456335791226091,
          "compression_ratio": 1.7566539923954372,
          "no_speech_prob": 0.1557932049036026,
          "confidence": 0.8442067950963974
        },
        {
          "id": 44,
          "start": 264.32,
          "end": 269.84000000000003,
          "text": "and then three times three should give us nine. So now if we run this, then we can see that we",
          "tokens": [
            50596,
            293,
            550,
            1045,
            1413,
            1045,
            820,
            976,
            505,
            4949,
            13,
            407,
            586,
            498,
            321,
            1190,
            341,
            11,
            550,
            321,
            393,
            536,
            300,
            321,
            50872
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05456335791226091,
          "compression_ratio": 1.7566539923954372,
          "no_speech_prob": 0.1557932049036026,
          "confidence": 0.8442067950963974
        }
      ],
      "duration": 28.04000000000002
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 264.84000000000003,
      "end_time": 291.04,
      "text": "and then three times three should give us nine. So now if we run this, then we can see that we got nine. So the order of operations does work correctly within Python like we would expect. Okay, so now let's look at another common operation that you'll see a lot, and that is incrementing a variable. So if I make a variable here called num, and I set this equal to one, then what are some ways that we can increment that value by one? Well, one way that we could",
      "original_segments": [
        {
          "id": 45,
          "start": 269.84000000000003,
          "end": 274.24,
          "text": "got nine. So the order of operations does work correctly within Python like we would expect.",
          "tokens": [
            50872,
            658,
            4949,
            13,
            407,
            264,
            1668,
            295,
            7705,
            775,
            589,
            8944,
            1951,
            15329,
            411,
            321,
            576,
            2066,
            13,
            51092
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05456335791226091,
          "compression_ratio": 1.7566539923954372,
          "no_speech_prob": 0.1557932049036026,
          "confidence": 0.8442067950963974
        },
        {
          "id": 46,
          "start": 274.8,
          "end": 279.36,
          "text": "Okay, so now let's look at another common operation that you'll see a lot, and that is",
          "tokens": [
            51120,
            1033,
            11,
            370,
            586,
            718,
            311,
            574,
            412,
            1071,
            2689,
            6916,
            300,
            291,
            603,
            536,
            257,
            688,
            11,
            293,
            300,
            307,
            51348
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05456335791226091,
          "compression_ratio": 1.7566539923954372,
          "no_speech_prob": 0.1557932049036026,
          "confidence": 0.8442067950963974
        },
        {
          "id": 47,
          "start": 279.36,
          "end": 286.16,
          "text": "incrementing a variable. So if I make a variable here called num, and I set this equal to one,",
          "tokens": [
            51348,
            26200,
            278,
            257,
            7006,
            13,
            407,
            498,
            286,
            652,
            257,
            7006,
            510,
            1219,
            1031,
            11,
            293,
            286,
            992,
            341,
            2681,
            281,
            472,
            11,
            51688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05456335791226091,
          "compression_ratio": 1.7566539923954372,
          "no_speech_prob": 0.1557932049036026,
          "confidence": 0.8442067950963974
        },
        {
          "id": 48,
          "start": 286.16,
          "end": 291.04,
          "text": "then what are some ways that we can increment that value by one? Well, one way that we could",
          "tokens": [
            50364,
            550,
            437,
            366,
            512,
            2098,
            300,
            321,
            393,
            26200,
            300,
            2158,
            538,
            472,
            30,
            1042,
            11,
            472,
            636,
            300,
            321,
            727,
            50608
          ],
          "temperature": 0.0,
          "avg_logprob": -0.046273310353436806,
          "compression_ratio": 1.9915254237288136,
          "no_speech_prob": 0.00311021925881505,
          "confidence": 0.996889780741185
        }
      ],
      "duration": 26.19999999999999
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 286.04,
      "end_time": 315.92,
      "text": "incrementing a variable. So if I make a variable here called num, and I set this equal to one, then what are some ways that we can increment that value by one? Well, one way that we could do this is to say that num is equal to num plus one, and if we print out that num, then we can see that it did increment it by one, and now it's equal to two. But incrementing values is such a common operation that there is a shorthand for this. So instead, we can just say num plus equals one. So if we run that, then we can see that it still incremented that value up to two.",
      "original_segments": [
        {
          "id": 49,
          "start": 291.04,
          "end": 299.68,
          "text": "do this is to say that num is equal to num plus one, and if we print out that num, then we can",
          "tokens": [
            50608,
            360,
            341,
            307,
            281,
            584,
            300,
            1031,
            307,
            2681,
            281,
            1031,
            1804,
            472,
            11,
            293,
            498,
            321,
            4482,
            484,
            300,
            1031,
            11,
            550,
            321,
            393,
            51040
          ],
          "temperature": 0.0,
          "avg_logprob": -0.046273310353436806,
          "compression_ratio": 1.9915254237288136,
          "no_speech_prob": 0.00311021925881505,
          "confidence": 0.996889780741185
        },
        {
          "id": 50,
          "start": 299.68,
          "end": 304.24,
          "text": "see that it did increment it by one, and now it's equal to two. But incrementing values is such a",
          "tokens": [
            51040,
            536,
            300,
            309,
            630,
            26200,
            309,
            538,
            472,
            11,
            293,
            586,
            309,
            311,
            2681,
            281,
            732,
            13,
            583,
            26200,
            278,
            4190,
            307,
            1270,
            257,
            51268
          ],
          "temperature": 0.0,
          "avg_logprob": -0.046273310353436806,
          "compression_ratio": 1.9915254237288136,
          "no_speech_prob": 0.00311021925881505,
          "confidence": 0.996889780741185
        },
        {
          "id": 51,
          "start": 304.24,
          "end": 310.96000000000004,
          "text": "common operation that there is a shorthand for this. So instead, we can just say num plus equals",
          "tokens": [
            51268,
            2689,
            6916,
            300,
            456,
            307,
            257,
            402,
            2652,
            474,
            337,
            341,
            13,
            407,
            2602,
            11,
            321,
            393,
            445,
            584,
            1031,
            1804,
            6915,
            51604
          ],
          "temperature": 0.0,
          "avg_logprob": -0.046273310353436806,
          "compression_ratio": 1.9915254237288136,
          "no_speech_prob": 0.00311021925881505,
          "confidence": 0.996889780741185
        },
        {
          "id": 52,
          "start": 310.96000000000004,
          "end": 315.92,
          "text": "one. So if we run that, then we can see that it still incremented that value up to two.",
          "tokens": [
            51604,
            472,
            13,
            407,
            498,
            321,
            1190,
            300,
            11,
            550,
            321,
            393,
            536,
            300,
            309,
            920,
            1946,
            14684,
            300,
            2158,
            493,
            281,
            732,
            13,
            51852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.046273310353436806,
          "compression_ratio": 1.9915254237288136,
          "no_speech_prob": 0.00311021925881505,
          "confidence": 0.996889780741185
        }
      ],
      "duration": 29.879999999999995
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 310.92,
      "end_time": 335.04,
      "text": "common operation that there is a shorthand for this. So instead, we can just say num plus equals one. So if we run that, then we can see that it still incremented that value up to two. And you can use this syntax with the other operations as well. So instead, if we were to say num times equals ten, and ran this, then we can see that we got ten because it took our original number and multiplied one by ten. Okay, so a couple more things here. We also have some",
      "original_segments": [
        {
          "id": 53,
          "start": 315.92,
          "end": 320.48,
          "text": "And you can use this syntax with the other operations as well. So instead, if we were to",
          "tokens": [
            50364,
            400,
            291,
            393,
            764,
            341,
            28431,
            365,
            264,
            661,
            7705,
            382,
            731,
            13,
            407,
            2602,
            11,
            498,
            321,
            645,
            281,
            50592
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0609359997575001,
          "compression_ratio": 1.578723404255319,
          "no_speech_prob": 0.0002461644762661308,
          "confidence": 0.9997538355237339
        },
        {
          "id": 54,
          "start": 320.48,
          "end": 327.76,
          "text": "say num times equals ten, and ran this, then we can see that we got ten because it took our",
          "tokens": [
            50592,
            584,
            1031,
            1413,
            6915,
            2064,
            11,
            293,
            5872,
            341,
            11,
            550,
            321,
            393,
            536,
            300,
            321,
            658,
            2064,
            570,
            309,
            1890,
            527,
            50956
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0609359997575001,
          "compression_ratio": 1.578723404255319,
          "no_speech_prob": 0.0002461644762661308,
          "confidence": 0.9997538355237339
        },
        {
          "id": 55,
          "start": 327.76,
          "end": 335.04,
          "text": "original number and multiplied one by ten. Okay, so a couple more things here. We also have some",
          "tokens": [
            50956,
            3380,
            1230,
            293,
            17207,
            472,
            538,
            2064,
            13,
            1033,
            11,
            370,
            257,
            1916,
            544,
            721,
            510,
            13,
            492,
            611,
            362,
            512,
            51320
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0609359997575001,
          "compression_ratio": 1.578723404255319,
          "no_speech_prob": 0.0002461644762661308,
          "confidence": 0.9997538355237339
        }
      ],
      "duration": 24.120000000000005
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 330.04,
      "end_time": 359.36,
      "text": "original number and multiplied one by ten. Okay, so a couple more things here. We also have some built-in functions available to us to work with numbers, and one of these is abs for absolute value. And basically, this will just remove the sign from any negative numbers. So if I took the absolute value of negative three, and I'll just clean up a couple of lines there. Okay, so if we were to print out the absolute value of negative three and run that, then we can see down here that",
      "original_segments": [
        {
          "id": 56,
          "start": 335.04,
          "end": 341.04,
          "text": "built-in functions available to us to work with numbers, and one of these is abs for absolute",
          "tokens": [
            51320,
            3094,
            12,
            259,
            6828,
            2435,
            281,
            505,
            281,
            589,
            365,
            3547,
            11,
            293,
            472,
            295,
            613,
            307,
            1950,
            337,
            8236,
            51620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0609359997575001,
          "compression_ratio": 1.578723404255319,
          "no_speech_prob": 0.0002461644762661308,
          "confidence": 0.9997538355237339
        },
        {
          "id": 57,
          "start": 341.04,
          "end": 346.72,
          "text": "value. And basically, this will just remove the sign from any negative numbers. So if I took the",
          "tokens": [
            50364,
            2158,
            13,
            400,
            1936,
            11,
            341,
            486,
            445,
            4159,
            264,
            1465,
            490,
            604,
            3671,
            3547,
            13,
            407,
            498,
            286,
            1890,
            264,
            50648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06576759474618095,
          "compression_ratio": 1.751111111111111,
          "no_speech_prob": 0.1813393235206604,
          "confidence": 0.8186606764793396
        },
        {
          "id": 58,
          "start": 346.72,
          "end": 353.52000000000004,
          "text": "absolute value of negative three, and I'll just clean up a couple of lines there. Okay, so if we",
          "tokens": [
            50648,
            8236,
            2158,
            295,
            3671,
            1045,
            11,
            293,
            286,
            603,
            445,
            2541,
            493,
            257,
            1916,
            295,
            3876,
            456,
            13,
            1033,
            11,
            370,
            498,
            321,
            50988
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06576759474618095,
          "compression_ratio": 1.751111111111111,
          "no_speech_prob": 0.1813393235206604,
          "confidence": 0.8186606764793396
        },
        {
          "id": 59,
          "start": 353.52000000000004,
          "end": 359.36,
          "text": "were to print out the absolute value of negative three and run that, then we can see down here that",
          "tokens": [
            50988,
            645,
            281,
            4482,
            484,
            264,
            8236,
            2158,
            295,
            3671,
            1045,
            293,
            1190,
            300,
            11,
            550,
            321,
            393,
            536,
            760,
            510,
            300,
            51280
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06576759474618095,
          "compression_ratio": 1.751111111111111,
          "no_speech_prob": 0.1813393235206604,
          "confidence": 0.8186606764793396
        }
      ],
      "duration": 29.319999999999993
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 354.36,
      "end_time": 382.16,
      "text": "were to print out the absolute value of negative three and run that, then we can see down here that we just got the absolute value, which is three. Now another built-in function that we have is round, and by default, this will round our values to the nearest integer value. So if we said print the round of 3.75 and run that, then we can see that 3.75 rounded up to four. And we can also pass",
      "original_segments": [
        {
          "id": 60,
          "start": 359.36,
          "end": 365.04,
          "text": "we just got the absolute value, which is three. Now another built-in function that we have is round,",
          "tokens": [
            51280,
            321,
            445,
            658,
            264,
            8236,
            2158,
            11,
            597,
            307,
            1045,
            13,
            823,
            1071,
            3094,
            12,
            259,
            2445,
            300,
            321,
            362,
            307,
            3098,
            11,
            51564
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06576759474618095,
          "compression_ratio": 1.751111111111111,
          "no_speech_prob": 0.1813393235206604,
          "confidence": 0.8186606764793396
        },
        {
          "id": 61,
          "start": 365.12,
          "end": 371.92,
          "text": "and by default, this will round our values to the nearest integer value. So if we said print",
          "tokens": [
            50368,
            293,
            538,
            7576,
            11,
            341,
            486,
            3098,
            527,
            4190,
            281,
            264,
            23831,
            24922,
            2158,
            13,
            407,
            498,
            321,
            848,
            4482,
            50708
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0671666233163131,
          "compression_ratio": 1.6145251396648044,
          "no_speech_prob": 0.07524280995130539,
          "confidence": 0.9247571900486946
        },
        {
          "id": 62,
          "start": 373.04,
          "end": 382.16,
          "text": "the round of 3.75 and run that, then we can see that 3.75 rounded up to four. And we can also pass",
          "tokens": [
            50764,
            264,
            3098,
            295,
            805,
            13,
            11901,
            293,
            1190,
            300,
            11,
            550,
            321,
            393,
            536,
            300,
            805,
            13,
            11901,
            23382,
            493,
            281,
            1451,
            13,
            400,
            321,
            393,
            611,
            1320,
            51220
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0671666233163131,
          "compression_ratio": 1.6145251396648044,
          "no_speech_prob": 0.07524280995130539,
          "confidence": 0.9247571900486946
        }
      ],
      "duration": 27.80000000000001
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 377.16,
      "end_time": 406.96,
      "text": "the round of 3.75 and run that, then we can see that 3.75 rounded up to four. And we can also pass a second argument into our round function that tells it how many digits that we want to round to. So if I put in a comma here and pass in a one as a second argument and now run this, and what we're saying is that we want to round to the first digit after the decimal. So we can see that that rounded to 3.8. Okay, so another common thing that you need to do when working with numbers",
      "original_segments": [
        {
          "id": 63,
          "start": 382.16,
          "end": 387.52000000000004,
          "text": "a second argument into our round function that tells it how many digits that we want to round to.",
          "tokens": [
            51220,
            257,
            1150,
            6770,
            666,
            527,
            3098,
            2445,
            300,
            5112,
            309,
            577,
            867,
            27011,
            300,
            321,
            528,
            281,
            3098,
            281,
            13,
            51488
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0671666233163131,
          "compression_ratio": 1.6145251396648044,
          "no_speech_prob": 0.07524280995130539,
          "confidence": 0.9247571900486946
        },
        {
          "id": 64,
          "start": 387.52,
          "end": 396.08,
          "text": "So if I put in a comma here and pass in a one as a second argument and now run this, and what we're",
          "tokens": [
            50364,
            407,
            498,
            286,
            829,
            294,
            257,
            22117,
            510,
            293,
            1320,
            294,
            257,
            472,
            382,
            257,
            1150,
            6770,
            293,
            586,
            1190,
            341,
            11,
            293,
            437,
            321,
            434,
            50792
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0653558627213582,
          "compression_ratio": 1.6075949367088607,
          "no_speech_prob": 0.14135313034057617,
          "confidence": 0.8586468696594238
        },
        {
          "id": 65,
          "start": 396.08,
          "end": 401.03999999999996,
          "text": "saying is that we want to round to the first digit after the decimal. So we can see that that",
          "tokens": [
            50792,
            1566,
            307,
            300,
            321,
            528,
            281,
            3098,
            281,
            264,
            700,
            14293,
            934,
            264,
            26601,
            13,
            407,
            321,
            393,
            536,
            300,
            300,
            51040
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0653558627213582,
          "compression_ratio": 1.6075949367088607,
          "no_speech_prob": 0.14135313034057617,
          "confidence": 0.8586468696594238
        },
        {
          "id": 66,
          "start": 401.03999999999996,
          "end": 406.96,
          "text": "rounded to 3.8. Okay, so another common thing that you need to do when working with numbers",
          "tokens": [
            51040,
            23382,
            281,
            805,
            13,
            23,
            13,
            1033,
            11,
            370,
            1071,
            2689,
            551,
            300,
            291,
            643,
            281,
            360,
            562,
            1364,
            365,
            3547,
            51336
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0653558627213582,
          "compression_ratio": 1.6075949367088607,
          "no_speech_prob": 0.14135313034057617,
          "confidence": 0.8586468696594238
        }
      ],
      "duration": 29.799999999999955
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 401.96,
      "end_time": 428.8,
      "text": "rounded to 3.8. Okay, so another common thing that you need to do when working with numbers is to use comparisons. Now we'll want to know if two values are equal, greater than, less than, and all of that. So to test this, we can use comparison operators. And I have some comments over here in my snippets with the comparison operators as well, and I'm just going to paste over the arithmetic operators that we've already gone over and paste those in. Now these comparisons",
      "original_segments": [
        {
          "id": 67,
          "start": 406.96,
          "end": 412.88,
          "text": "is to use comparisons. Now we'll want to know if two values are equal, greater than, less than,",
          "tokens": [
            51336,
            307,
            281,
            764,
            33157,
            13,
            823,
            321,
            603,
            528,
            281,
            458,
            498,
            732,
            4190,
            366,
            2681,
            11,
            5044,
            813,
            11,
            1570,
            813,
            11,
            51632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0653558627213582,
          "compression_ratio": 1.6075949367088607,
          "no_speech_prob": 0.14135313034057617,
          "confidence": 0.8586468696594238
        },
        {
          "id": 68,
          "start": 412.88,
          "end": 417.84,
          "text": "and all of that. So to test this, we can use comparison operators. And I have some comments",
          "tokens": [
            50364,
            293,
            439,
            295,
            300,
            13,
            407,
            281,
            1500,
            341,
            11,
            321,
            393,
            764,
            9660,
            19077,
            13,
            400,
            286,
            362,
            512,
            3053,
            50612
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05653465421576249,
          "compression_ratio": 1.7389705882352942,
          "no_speech_prob": 0.29011741280555725,
          "confidence": 0.7098825871944427
        },
        {
          "id": 69,
          "start": 417.84,
          "end": 423.36,
          "text": "over here in my snippets with the comparison operators as well, and I'm just going to paste",
          "tokens": [
            50612,
            670,
            510,
            294,
            452,
            35623,
            1385,
            365,
            264,
            9660,
            19077,
            382,
            731,
            11,
            293,
            286,
            478,
            445,
            516,
            281,
            9163,
            50888
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05653465421576249,
          "compression_ratio": 1.7389705882352942,
          "no_speech_prob": 0.29011741280555725,
          "confidence": 0.7098825871944427
        },
        {
          "id": 70,
          "start": 423.36,
          "end": 428.8,
          "text": "over the arithmetic operators that we've already gone over and paste those in. Now these comparisons",
          "tokens": [
            50888,
            670,
            264,
            42973,
            19077,
            300,
            321,
            600,
            1217,
            2780,
            670,
            293,
            9163,
            729,
            294,
            13,
            823,
            613,
            33157,
            51160
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05653465421576249,
          "compression_ratio": 1.7389705882352942,
          "no_speech_prob": 0.29011741280555725,
          "confidence": 0.7098825871944427
        }
      ],
      "duration": 26.840000000000032
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 423.8,
      "end_time": 452.32,
      "text": "over the arithmetic operators that we've already gone over and paste those in. Now these comparisons are going to return Booleans, which are true false values. We'll be learning more about Booleans in a future video when we go over conditionals, but we'll see them here for the first time. So let's say I have two variables here, and we'll just call these two variables num one and set that equal to three, and we'll do num two is equal to two. So now let's run through all of these",
      "original_segments": [
        {
          "id": 71,
          "start": 428.8,
          "end": 434.0,
          "text": "are going to return Booleans, which are true false values. We'll be learning more about Booleans in",
          "tokens": [
            51160,
            366,
            516,
            281,
            2736,
            23351,
            24008,
            11,
            597,
            366,
            2074,
            7908,
            4190,
            13,
            492,
            603,
            312,
            2539,
            544,
            466,
            23351,
            24008,
            294,
            51420
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05653465421576249,
          "compression_ratio": 1.7389705882352942,
          "no_speech_prob": 0.29011741280555725,
          "confidence": 0.7098825871944427
        },
        {
          "id": 72,
          "start": 434.0,
          "end": 438.8,
          "text": "a future video when we go over conditionals, but we'll see them here for the first time.",
          "tokens": [
            51420,
            257,
            2027,
            960,
            562,
            321,
            352,
            670,
            4188,
            1124,
            11,
            457,
            321,
            603,
            536,
            552,
            510,
            337,
            264,
            700,
            565,
            13,
            51660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05653465421576249,
          "compression_ratio": 1.7389705882352942,
          "no_speech_prob": 0.29011741280555725,
          "confidence": 0.7098825871944427
        },
        {
          "id": 73,
          "start": 438.8,
          "end": 444.96000000000004,
          "text": "So let's say I have two variables here, and we'll just call these two variables num one and set",
          "tokens": [
            50364,
            407,
            718,
            311,
            584,
            286,
            362,
            732,
            9102,
            510,
            11,
            293,
            321,
            603,
            445,
            818,
            613,
            732,
            9102,
            1031,
            472,
            293,
            992,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07189216136932373,
          "compression_ratio": 1.8780487804878048,
          "no_speech_prob": 0.22154004871845245,
          "confidence": 0.7784599512815475
        },
        {
          "id": 74,
          "start": 444.96000000000004,
          "end": 452.32,
          "text": "that equal to three, and we'll do num two is equal to two. So now let's run through all of these",
          "tokens": [
            50672,
            300,
            2681,
            281,
            1045,
            11,
            293,
            321,
            603,
            360,
            1031,
            732,
            307,
            2681,
            281,
            732,
            13,
            407,
            586,
            718,
            311,
            1190,
            807,
            439,
            295,
            613,
            51040
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07189216136932373,
          "compression_ratio": 1.8780487804878048,
          "no_speech_prob": 0.22154004871845245,
          "confidence": 0.7784599512815475
        }
      ],
      "duration": 28.519999999999982
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 447.32,
      "end_time": 475.92,
      "text": "that equal to three, and we'll do num two is equal to two. So now let's run through all of these comparisons. So first, let's say that we wanted to check if these two variables were equal. So I could say num one, and you can see up here that the equals comparison is double equals. Now you don't want to use the single equals because the single equals is this assignment here. So the double equals is comparison, the single equals is assignment. So we want to compare. Is num one",
      "original_segments": [
        {
          "id": 75,
          "start": 452.32,
          "end": 458.32,
          "text": "comparisons. So first, let's say that we wanted to check if these two variables were equal. So I",
          "tokens": [
            51040,
            33157,
            13,
            407,
            700,
            11,
            718,
            311,
            584,
            300,
            321,
            1415,
            281,
            1520,
            498,
            613,
            732,
            9102,
            645,
            2681,
            13,
            407,
            286,
            51340
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07189216136932373,
          "compression_ratio": 1.8780487804878048,
          "no_speech_prob": 0.22154004871845245,
          "confidence": 0.7784599512815475
        },
        {
          "id": 76,
          "start": 458.32,
          "end": 464.88,
          "text": "could say num one, and you can see up here that the equals comparison is double equals. Now you",
          "tokens": [
            51340,
            727,
            584,
            1031,
            472,
            11,
            293,
            291,
            393,
            536,
            493,
            510,
            300,
            264,
            6915,
            9660,
            307,
            3834,
            6915,
            13,
            823,
            291,
            51668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07189216136932373,
          "compression_ratio": 1.8780487804878048,
          "no_speech_prob": 0.22154004871845245,
          "confidence": 0.7784599512815475
        },
        {
          "id": 77,
          "start": 464.88,
          "end": 469.92,
          "text": "don't want to use the single equals because the single equals is this assignment here. So the double",
          "tokens": [
            50364,
            500,
            380,
            528,
            281,
            764,
            264,
            2167,
            6915,
            570,
            264,
            2167,
            6915,
            307,
            341,
            15187,
            510,
            13,
            407,
            264,
            3834,
            50616
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06781876087188721,
          "compression_ratio": 2.117391304347826,
          "no_speech_prob": 0.030646419152617455,
          "confidence": 0.9693535808473825
        },
        {
          "id": 78,
          "start": 469.92,
          "end": 475.92,
          "text": "equals is comparison, the single equals is assignment. So we want to compare. Is num one",
          "tokens": [
            50616,
            6915,
            307,
            9660,
            11,
            264,
            2167,
            6915,
            307,
            15187,
            13,
            407,
            321,
            528,
            281,
            6794,
            13,
            1119,
            1031,
            472,
            50916
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06781876087188721,
          "compression_ratio": 2.117391304347826,
          "no_speech_prob": 0.030646419152617455,
          "confidence": 0.9693535808473825
        }
      ],
      "duration": 28.600000000000023
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 470.92,
      "end_time": 500.16,
      "text": "equals is comparison, the single equals is assignment. So we want to compare. Is num one equal to num two? And if we run that, then we can see that it returns false because those two values are not equal. Now if I wanted to check if they weren't equal, then I could use the exclamation point before the equal sign here, exclamation point equals. And if we run that, then we can see that we got true because these two values are not equal. Now I can check if num one is greater than",
      "original_segments": [
        {
          "id": 79,
          "start": 475.92,
          "end": 481.68,
          "text": "equal to num two? And if we run that, then we can see that it returns false because those two values",
          "tokens": [
            50916,
            2681,
            281,
            1031,
            732,
            30,
            400,
            498,
            321,
            1190,
            300,
            11,
            550,
            321,
            393,
            536,
            300,
            309,
            11247,
            7908,
            570,
            729,
            732,
            4190,
            51204
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06781876087188721,
          "compression_ratio": 2.117391304347826,
          "no_speech_prob": 0.030646419152617455,
          "confidence": 0.9693535808473825
        },
        {
          "id": 80,
          "start": 481.68,
          "end": 487.92,
          "text": "are not equal. Now if I wanted to check if they weren't equal, then I could use the exclamation",
          "tokens": [
            51204,
            366,
            406,
            2681,
            13,
            823,
            498,
            286,
            1415,
            281,
            1520,
            498,
            436,
            4999,
            380,
            2681,
            11,
            550,
            286,
            727,
            764,
            264,
            1624,
            43233,
            51516
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06781876087188721,
          "compression_ratio": 2.117391304347826,
          "no_speech_prob": 0.030646419152617455,
          "confidence": 0.9693535808473825
        },
        {
          "id": 81,
          "start": 487.92,
          "end": 494.15999999999997,
          "text": "point before the equal sign here, exclamation point equals. And if we run that, then we can see that",
          "tokens": [
            51516,
            935,
            949,
            264,
            2681,
            1465,
            510,
            11,
            1624,
            43233,
            935,
            6915,
            13,
            400,
            498,
            321,
            1190,
            300,
            11,
            550,
            321,
            393,
            536,
            300,
            51828
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06781876087188721,
          "compression_ratio": 2.117391304347826,
          "no_speech_prob": 0.030646419152617455,
          "confidence": 0.9693535808473825
        },
        {
          "id": 82,
          "start": 494.16,
          "end": 500.16,
          "text": "we got true because these two values are not equal. Now I can check if num one is greater than",
          "tokens": [
            50364,
            321,
            658,
            2074,
            570,
            613,
            732,
            4190,
            366,
            406,
            2681,
            13,
            823,
            286,
            393,
            1520,
            498,
            1031,
            472,
            307,
            5044,
            813,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04189020575899066,
          "compression_ratio": 2.071129707112971,
          "no_speech_prob": 0.0039029137697070837,
          "confidence": 0.9960970862302929
        }
      ],
      "duration": 29.24000000000001
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 495.16,
      "end_time": 522.4,
      "text": "we got true because these two values are not equal. Now I can check if num one is greater than num two by using the greater than sign. So I can save that and run it, and we can see that we got true because num one is three, num two is two, so three is greater than two. And if you wanted to check less than, then you can just use the less than sign. So if we run that, you can see we got false. And you can also use the equal signs with these as well. So if I wanted to check if this was greater",
      "original_segments": [
        {
          "id": 83,
          "start": 500.16,
          "end": 506.96000000000004,
          "text": "num two by using the greater than sign. So I can save that and run it, and we can see that we got",
          "tokens": [
            50664,
            1031,
            732,
            538,
            1228,
            264,
            5044,
            813,
            1465,
            13,
            407,
            286,
            393,
            3155,
            300,
            293,
            1190,
            309,
            11,
            293,
            321,
            393,
            536,
            300,
            321,
            658,
            51004
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04189020575899066,
          "compression_ratio": 2.071129707112971,
          "no_speech_prob": 0.0039029137697070837,
          "confidence": 0.9960970862302929
        },
        {
          "id": 84,
          "start": 506.96000000000004,
          "end": 512.64,
          "text": "true because num one is three, num two is two, so three is greater than two. And if you wanted to",
          "tokens": [
            51004,
            2074,
            570,
            1031,
            472,
            307,
            1045,
            11,
            1031,
            732,
            307,
            732,
            11,
            370,
            1045,
            307,
            5044,
            813,
            732,
            13,
            400,
            498,
            291,
            1415,
            281,
            51288
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04189020575899066,
          "compression_ratio": 2.071129707112971,
          "no_speech_prob": 0.0039029137697070837,
          "confidence": 0.9960970862302929
        },
        {
          "id": 85,
          "start": 512.64,
          "end": 518.08,
          "text": "check less than, then you can just use the less than sign. So if we run that, you can see we got false.",
          "tokens": [
            51288,
            1520,
            1570,
            813,
            11,
            550,
            291,
            393,
            445,
            764,
            264,
            1570,
            813,
            1465,
            13,
            407,
            498,
            321,
            1190,
            300,
            11,
            291,
            393,
            536,
            321,
            658,
            7908,
            13,
            51560
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04189020575899066,
          "compression_ratio": 2.071129707112971,
          "no_speech_prob": 0.0039029137697070837,
          "confidence": 0.9960970862302929
        },
        {
          "id": 86,
          "start": 518.08,
          "end": 522.4,
          "text": "And you can also use the equal signs with these as well. So if I wanted to check if this was greater",
          "tokens": [
            51560,
            400,
            291,
            393,
            611,
            764,
            264,
            2681,
            7880,
            365,
            613,
            382,
            731,
            13,
            407,
            498,
            286,
            1415,
            281,
            1520,
            498,
            341,
            390,
            5044,
            51776
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04189020575899066,
          "compression_ratio": 2.071129707112971,
          "no_speech_prob": 0.0039029137697070837,
          "confidence": 0.9960970862302929
        }
      ],
      "duration": 27.239999999999952
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 517.4,
      "end_time": 543.36,
      "text": "check less than, then you can just use the less than sign. So if we run that, you can see we got false. And you can also use the equal signs with these as well. So if I wanted to check if this was greater than or equal to, then we could run that. We can see that it's true. And if we want to check less than or equal to, then we can use those as well. And if we print that, we can see that we got false. Okay, so now we're going to look at one more thing, and I'm just going to delete these in order to get some more room. Now I will have these comments up on my GitHub page if you want a reference to the",
      "original_segments": [
        {
          "id": 87,
          "start": 522.4,
          "end": 528.4,
          "text": "than or equal to, then we could run that. We can see that it's true. And if we want to check less",
          "tokens": [
            50364,
            813,
            420,
            2681,
            281,
            11,
            550,
            321,
            727,
            1190,
            300,
            13,
            492,
            393,
            536,
            300,
            309,
            311,
            2074,
            13,
            400,
            498,
            321,
            528,
            281,
            1520,
            1570,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06268192782546535,
          "compression_ratio": 1.7934782608695652,
          "no_speech_prob": 0.04685208946466446,
          "confidence": 0.9531479105353355
        },
        {
          "id": 88,
          "start": 528.4,
          "end": 533.6,
          "text": "than or equal to, then we can use those as well. And if we print that, we can see that we got false.",
          "tokens": [
            50664,
            813,
            420,
            2681,
            281,
            11,
            550,
            321,
            393,
            764,
            729,
            382,
            731,
            13,
            400,
            498,
            321,
            4482,
            300,
            11,
            321,
            393,
            536,
            300,
            321,
            658,
            7908,
            13,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06268192782546535,
          "compression_ratio": 1.7934782608695652,
          "no_speech_prob": 0.04685208946466446,
          "confidence": 0.9531479105353355
        },
        {
          "id": 89,
          "start": 533.6,
          "end": 537.68,
          "text": "Okay, so now we're going to look at one more thing, and I'm just going to delete these in order to get",
          "tokens": [
            50924,
            1033,
            11,
            370,
            586,
            321,
            434,
            516,
            281,
            574,
            412,
            472,
            544,
            551,
            11,
            293,
            286,
            478,
            445,
            516,
            281,
            12097,
            613,
            294,
            1668,
            281,
            483,
            51128
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06268192782546535,
          "compression_ratio": 1.7934782608695652,
          "no_speech_prob": 0.04685208946466446,
          "confidence": 0.9531479105353355
        },
        {
          "id": 90,
          "start": 537.68,
          "end": 543.36,
          "text": "some more room. Now I will have these comments up on my GitHub page if you want a reference to the",
          "tokens": [
            51128,
            512,
            544,
            1808,
            13,
            823,
            286,
            486,
            362,
            613,
            3053,
            493,
            322,
            452,
            23331,
            3028,
            498,
            291,
            528,
            257,
            6408,
            281,
            264,
            51412
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06268192782546535,
          "compression_ratio": 1.7934782608695652,
          "no_speech_prob": 0.04685208946466446,
          "confidence": 0.9531479105353355
        }
      ],
      "duration": 25.960000000000036
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 538.36,
      "end_time": 567.84,
      "text": "some more room. Now I will have these comments up on my GitHub page if you want a reference to the arithmetic operators and the comparisons that we just looked at. Okay, so in the last video we learned about strings. Now it's possible that you have something that looks like a number, but it could actually be a string. So let's look at a problem that we can run into if that's the case, and then we'll see how to solve it. So let's say that you have some variables that look like numbers. So maybe we read these in from a text file or got them from a website or something like",
      "original_segments": [
        {
          "id": 91,
          "start": 543.36,
          "end": 548.72,
          "text": "arithmetic operators and the comparisons that we just looked at. Okay, so in the last video we",
          "tokens": [
            51412,
            42973,
            19077,
            293,
            264,
            33157,
            300,
            321,
            445,
            2956,
            412,
            13,
            1033,
            11,
            370,
            294,
            264,
            1036,
            960,
            321,
            51680
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06268192782546535,
          "compression_ratio": 1.7934782608695652,
          "no_speech_prob": 0.04685208946466446,
          "confidence": 0.9531479105353355
        },
        {
          "id": 92,
          "start": 548.72,
          "end": 553.44,
          "text": "learned about strings. Now it's possible that you have something that looks like a number,",
          "tokens": [
            50364,
            3264,
            466,
            13985,
            13,
            823,
            309,
            311,
            1944,
            300,
            291,
            362,
            746,
            300,
            1542,
            411,
            257,
            1230,
            11,
            50600
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04000167308315154,
          "compression_ratio": 1.8059701492537314,
          "no_speech_prob": 0.2095947414636612,
          "confidence": 0.7904052585363388
        },
        {
          "id": 93,
          "start": 553.44,
          "end": 558.32,
          "text": "but it could actually be a string. So let's look at a problem that we can run into if that's the",
          "tokens": [
            50600,
            457,
            309,
            727,
            767,
            312,
            257,
            6798,
            13,
            407,
            718,
            311,
            574,
            412,
            257,
            1154,
            300,
            321,
            393,
            1190,
            666,
            498,
            300,
            311,
            264,
            50844
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04000167308315154,
          "compression_ratio": 1.8059701492537314,
          "no_speech_prob": 0.2095947414636612,
          "confidence": 0.7904052585363388
        },
        {
          "id": 94,
          "start": 558.32,
          "end": 562.72,
          "text": "case, and then we'll see how to solve it. So let's say that you have some variables that look like",
          "tokens": [
            50844,
            1389,
            11,
            293,
            550,
            321,
            603,
            536,
            577,
            281,
            5039,
            309,
            13,
            407,
            718,
            311,
            584,
            300,
            291,
            362,
            512,
            9102,
            300,
            574,
            411,
            51064
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04000167308315154,
          "compression_ratio": 1.8059701492537314,
          "no_speech_prob": 0.2095947414636612,
          "confidence": 0.7904052585363388
        },
        {
          "id": 95,
          "start": 562.72,
          "end": 567.84,
          "text": "numbers. So maybe we read these in from a text file or got them from a website or something like",
          "tokens": [
            51064,
            3547,
            13,
            407,
            1310,
            321,
            1401,
            613,
            294,
            490,
            257,
            2487,
            3991,
            420,
            658,
            552,
            490,
            257,
            3144,
            420,
            746,
            411,
            51320
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04000167308315154,
          "compression_ratio": 1.8059701492537314,
          "no_speech_prob": 0.2095947414636612,
          "confidence": 0.7904052585363388
        }
      ],
      "duration": 29.480000000000018
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 562.84,
      "end_time": 592.8,
      "text": "numbers. So maybe we read these in from a text file or got them from a website or something like that. So just to give an example, let's recreate our num one, but this time we're going to set these equal in single quotes here. We'll set this to 100, and num two will set equal to inside single quotes 200. So I explicitly set these equal to strings, so it's obvious to us that they're strings, but it might not be so obvious to us if we got these values from somewhere else. So now",
      "original_segments": [
        {
          "id": 96,
          "start": 567.84,
          "end": 574.0,
          "text": "that. So just to give an example, let's recreate our num one, but this time we're going to set these",
          "tokens": [
            51320,
            300,
            13,
            407,
            445,
            281,
            976,
            364,
            1365,
            11,
            718,
            311,
            25833,
            527,
            1031,
            472,
            11,
            457,
            341,
            565,
            321,
            434,
            516,
            281,
            992,
            613,
            51628
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04000167308315154,
          "compression_ratio": 1.8059701492537314,
          "no_speech_prob": 0.2095947414636612,
          "confidence": 0.7904052585363388
        },
        {
          "id": 97,
          "start": 574.0,
          "end": 581.84,
          "text": "equal in single quotes here. We'll set this to 100, and num two will set equal to inside single",
          "tokens": [
            50364,
            2681,
            294,
            2167,
            19963,
            510,
            13,
            492,
            603,
            992,
            341,
            281,
            2319,
            11,
            293,
            1031,
            732,
            486,
            992,
            2681,
            281,
            1854,
            2167,
            50756
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06770952224731445,
          "compression_ratio": 1.7568807339449541,
          "no_speech_prob": 0.19300633668899536,
          "confidence": 0.8069936633110046
        },
        {
          "id": 98,
          "start": 581.84,
          "end": 587.68,
          "text": "quotes 200. So I explicitly set these equal to strings, so it's obvious to us that they're",
          "tokens": [
            50756,
            19963,
            2331,
            13,
            407,
            286,
            20803,
            992,
            613,
            2681,
            281,
            13985,
            11,
            370,
            309,
            311,
            6322,
            281,
            505,
            300,
            436,
            434,
            51048
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06770952224731445,
          "compression_ratio": 1.7568807339449541,
          "no_speech_prob": 0.19300633668899536,
          "confidence": 0.8069936633110046
        },
        {
          "id": 99,
          "start": 587.68,
          "end": 592.8,
          "text": "strings, but it might not be so obvious to us if we got these values from somewhere else. So now",
          "tokens": [
            51048,
            13985,
            11,
            457,
            309,
            1062,
            406,
            312,
            370,
            6322,
            281,
            505,
            498,
            321,
            658,
            613,
            4190,
            490,
            4079,
            1646,
            13,
            407,
            586,
            51304
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06770952224731445,
          "compression_ratio": 1.7568807339449541,
          "no_speech_prob": 0.19300633668899536,
          "confidence": 0.8069936633110046
        }
      ],
      "duration": 29.959999999999923
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 587.8,
      "end_time": 612.9599999999999,
      "text": "strings, but it might not be so obvious to us if we got these values from somewhere else. So now let's say that we want to add these values together. So if I was to say print num one plus num two, and if we run this, then we can see that this isn't the result that we thought it would be. Now if you remember from our string video, when we add strings together,",
      "original_segments": [
        {
          "id": 100,
          "start": 592.8,
          "end": 601.68,
          "text": "let's say that we want to add these values together. So if I was to say print num one plus num two,",
          "tokens": [
            51304,
            718,
            311,
            584,
            300,
            321,
            528,
            281,
            909,
            613,
            4190,
            1214,
            13,
            407,
            498,
            286,
            390,
            281,
            584,
            4482,
            1031,
            472,
            1804,
            1031,
            732,
            11,
            51748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06770952224731445,
          "compression_ratio": 1.7568807339449541,
          "no_speech_prob": 0.19300633668899536,
          "confidence": 0.8069936633110046
        },
        {
          "id": 101,
          "start": 602.56,
          "end": 608.4799999999999,
          "text": "and if we run this, then we can see that this isn't the result that we thought it would be.",
          "tokens": [
            50408,
            293,
            498,
            321,
            1190,
            341,
            11,
            550,
            321,
            393,
            536,
            300,
            341,
            1943,
            380,
            264,
            1874,
            300,
            321,
            1194,
            309,
            576,
            312,
            13,
            50704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05557705644975629,
          "compression_ratio": 1.7906976744186047,
          "no_speech_prob": 0.0014078323729336262,
          "confidence": 0.9985921676270664
        },
        {
          "id": 102,
          "start": 608.4799999999999,
          "end": 612.9599999999999,
          "text": "Now if you remember from our string video, when we add strings together,",
          "tokens": [
            50704,
            823,
            498,
            291,
            1604,
            490,
            527,
            6798,
            960,
            11,
            562,
            321,
            909,
            13985,
            1214,
            11,
            50928
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05557705644975629,
          "compression_ratio": 1.7906976744186047,
          "no_speech_prob": 0.0014078323729336262,
          "confidence": 0.9985921676270664
        }
      ],
      "duration": 25.159999999999968
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 607.9599999999999,
      "end_time": 637.76,
      "text": "and if we run this, then we can see that this isn't the result that we thought it would be. Now if you remember from our string video, when we add strings together, it just concatenates those together. So this is what we would expect with strings, but with numbers we would expect this to be 300. So in order to turn these into integers, we're going to have to do something called casting, and casting is super easy in Python. So to cast these values from string to integers, then we'll just add a couple lines here, and I will copy these, and we'll just say",
      "original_segments": [
        {
          "id": 103,
          "start": 612.9599999999999,
          "end": 619.1999999999999,
          "text": "it just concatenates those together. So this is what we would expect with strings, but with numbers",
          "tokens": [
            50928,
            309,
            445,
            1588,
            7186,
            1024,
            729,
            1214,
            13,
            407,
            341,
            307,
            437,
            321,
            576,
            2066,
            365,
            13985,
            11,
            457,
            365,
            3547,
            51240
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05557705644975629,
          "compression_ratio": 1.7906976744186047,
          "no_speech_prob": 0.0014078323729336262,
          "confidence": 0.9985921676270664
        },
        {
          "id": 104,
          "start": 619.1999999999999,
          "end": 624.4799999999999,
          "text": "we would expect this to be 300. So in order to turn these into integers, we're going to have to",
          "tokens": [
            51240,
            321,
            576,
            2066,
            341,
            281,
            312,
            6641,
            13,
            407,
            294,
            1668,
            281,
            1261,
            613,
            666,
            41674,
            11,
            321,
            434,
            516,
            281,
            362,
            281,
            51504
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05557705644975629,
          "compression_ratio": 1.7906976744186047,
          "no_speech_prob": 0.0014078323729336262,
          "confidence": 0.9985921676270664
        },
        {
          "id": 105,
          "start": 624.4799999999999,
          "end": 630.9599999999999,
          "text": "do something called casting, and casting is super easy in Python. So to cast these values from string",
          "tokens": [
            51504,
            360,
            746,
            1219,
            17301,
            11,
            293,
            17301,
            307,
            1687,
            1858,
            294,
            15329,
            13,
            407,
            281,
            4193,
            613,
            4190,
            490,
            6798,
            51828
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05557705644975629,
          "compression_ratio": 1.7906976744186047,
          "no_speech_prob": 0.0014078323729336262,
          "confidence": 0.9985921676270664
        },
        {
          "id": 106,
          "start": 630.96,
          "end": 637.76,
          "text": "to integers, then we'll just add a couple lines here, and I will copy these, and we'll just say",
          "tokens": [
            50364,
            281,
            41674,
            11,
            550,
            321,
            603,
            445,
            909,
            257,
            1916,
            3876,
            510,
            11,
            293,
            286,
            486,
            5055,
            613,
            11,
            293,
            321,
            603,
            445,
            584,
            50704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04349336190657182,
          "compression_ratio": 1.8511627906976744,
          "no_speech_prob": 0.001273779314942658,
          "confidence": 0.9987262206850573
        }
      ],
      "duration": 29.800000000000068
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 632.76,
      "end_time": 657.84,
      "text": "to integers, then we'll just add a couple lines here, and I will copy these, and we'll just say that num one equals int num one. So we just casted that to an integer, and we can do the same thing here with num two. So now if we save that and run it, then we can see that we got 300. So if you have an integer that's actually a string, and you want to cast that to an integer, then you can wrap that",
      "original_segments": [
        {
          "id": 107,
          "start": 637.76,
          "end": 644.88,
          "text": "that num one equals int num one. So we just casted that to an integer, and we can do the same thing",
          "tokens": [
            50704,
            300,
            1031,
            472,
            6915,
            560,
            1031,
            472,
            13,
            407,
            321,
            445,
            4193,
            292,
            300,
            281,
            364,
            24922,
            11,
            293,
            321,
            393,
            360,
            264,
            912,
            551,
            51060
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04349336190657182,
          "compression_ratio": 1.8511627906976744,
          "no_speech_prob": 0.001273779314942658,
          "confidence": 0.9987262206850573
        },
        {
          "id": 108,
          "start": 644.88,
          "end": 652.64,
          "text": "here with num two. So now if we save that and run it, then we can see that we got 300. So if you have",
          "tokens": [
            51060,
            510,
            365,
            1031,
            732,
            13,
            407,
            586,
            498,
            321,
            3155,
            300,
            293,
            1190,
            309,
            11,
            550,
            321,
            393,
            536,
            300,
            321,
            658,
            6641,
            13,
            407,
            498,
            291,
            362,
            51448
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04349336190657182,
          "compression_ratio": 1.8511627906976744,
          "no_speech_prob": 0.001273779314942658,
          "confidence": 0.9987262206850573
        },
        {
          "id": 109,
          "start": 652.64,
          "end": 657.84,
          "text": "an integer that's actually a string, and you want to cast that to an integer, then you can wrap that",
          "tokens": [
            51448,
            364,
            24922,
            300,
            311,
            767,
            257,
            6798,
            11,
            293,
            291,
            528,
            281,
            4193,
            300,
            281,
            364,
            24922,
            11,
            550,
            291,
            393,
            7019,
            300,
            51708
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04349336190657182,
          "compression_ratio": 1.8511627906976744,
          "no_speech_prob": 0.001273779314942658,
          "confidence": 0.9987262206850573
        }
      ],
      "duration": 25.08000000000004
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 652.84,
      "end_time": 682.1600000000001,
      "text": "an integer that's actually a string, and you want to cast that to an integer, then you can wrap that string in this int function or this int class here to create an integer. Okay, so I think that is going to do it for this video. I hope that now you feel comfortable working with integers and floating point values, and in the next video we'll be learning about lists, sets, and tuples, which basically allow us to hold sequences of data and is extremely useful to learn how to use properly. But if anyone has any questions about what we covered in this video, then feel free to ask in",
      "original_segments": [
        {
          "id": 110,
          "start": 657.84,
          "end": 663.76,
          "text": "string in this int function or this int class here to create an integer. Okay, so I think that is going",
          "tokens": [
            50364,
            6798,
            294,
            341,
            560,
            2445,
            420,
            341,
            560,
            1508,
            510,
            281,
            1884,
            364,
            24922,
            13,
            1033,
            11,
            370,
            286,
            519,
            300,
            307,
            516,
            50660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05242052976635919,
          "compression_ratio": 1.7606060606060605,
          "no_speech_prob": 0.17841531336307526,
          "confidence": 0.8215846866369247
        },
        {
          "id": 111,
          "start": 663.76,
          "end": 667.76,
          "text": "to do it for this video. I hope that now you feel comfortable working with integers and floating",
          "tokens": [
            50660,
            281,
            360,
            309,
            337,
            341,
            960,
            13,
            286,
            1454,
            300,
            586,
            291,
            841,
            4619,
            1364,
            365,
            41674,
            293,
            12607,
            50860
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05242052976635919,
          "compression_ratio": 1.7606060606060605,
          "no_speech_prob": 0.17841531336307526,
          "confidence": 0.8215846866369247
        },
        {
          "id": 112,
          "start": 667.76,
          "end": 672.64,
          "text": "point values, and in the next video we'll be learning about lists, sets, and tuples, which",
          "tokens": [
            50860,
            935,
            4190,
            11,
            293,
            294,
            264,
            958,
            960,
            321,
            603,
            312,
            2539,
            466,
            14511,
            11,
            6352,
            11,
            293,
            2604,
            2622,
            11,
            597,
            51104
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05242052976635919,
          "compression_ratio": 1.7606060606060605,
          "no_speech_prob": 0.17841531336307526,
          "confidence": 0.8215846866369247
        },
        {
          "id": 113,
          "start": 672.64,
          "end": 678.48,
          "text": "basically allow us to hold sequences of data and is extremely useful to learn how to use properly.",
          "tokens": [
            51104,
            1936,
            2089,
            505,
            281,
            1797,
            22978,
            295,
            1412,
            293,
            307,
            4664,
            4420,
            281,
            1466,
            577,
            281,
            764,
            6108,
            13,
            51396
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05242052976635919,
          "compression_ratio": 1.7606060606060605,
          "no_speech_prob": 0.17841531336307526,
          "confidence": 0.8215846866369247
        },
        {
          "id": 114,
          "start": 678.48,
          "end": 682.1600000000001,
          "text": "But if anyone has any questions about what we covered in this video, then feel free to ask in",
          "tokens": [
            51396,
            583,
            498,
            2878,
            575,
            604,
            1651,
            466,
            437,
            321,
            5343,
            294,
            341,
            960,
            11,
            550,
            841,
            1737,
            281,
            1029,
            294,
            51580
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05242052976635919,
          "compression_ratio": 1.7606060606060605,
          "no_speech_prob": 0.17841531336307526,
          "confidence": 0.8215846866369247
        }
      ],
      "duration": 29.32000000000005
    },
    {
      "video_id": "34f4164b7362",
      "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
      "start_time": 677.1600000000001,
      "end_time": 706.8,
      "text": "basically allow us to hold sequences of data and is extremely useful to learn how to use properly. But if anyone has any questions about what we covered in this video, then feel free to ask in the comment section below, and I'll do my best to answer those. If you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest ways is simply like the video and give it a thumbs up, and also it's a huge help to share these videos with anyone who you think would find them useful. And if you have the means, you can contribute through Patreon, and there's a link to that page in the description section below. Be sure to subscribe for future videos, and thank you all for watching.",
      "original_segments": [
        {
          "id": 115,
          "start": 682.1600000000001,
          "end": 685.9200000000001,
          "text": "the comment section below, and I'll do my best to answer those. If you enjoy these tutorials and",
          "tokens": [
            51580,
            264,
            2871,
            3541,
            2507,
            11,
            293,
            286,
            603,
            360,
            452,
            1151,
            281,
            1867,
            729,
            13,
            759,
            291,
            2103,
            613,
            17616,
            293,
            51768
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05242052976635919,
          "compression_ratio": 1.7606060606060605,
          "no_speech_prob": 0.17841531336307526,
          "confidence": 0.8215846866369247
        },
        {
          "id": 116,
          "start": 685.92,
          "end": 689.52,
          "text": "would like to support them, then there are several ways you can do that. The easiest ways is simply",
          "tokens": [
            50364,
            576,
            411,
            281,
            1406,
            552,
            11,
            550,
            456,
            366,
            2940,
            2098,
            291,
            393,
            360,
            300,
            13,
            440,
            12889,
            2098,
            307,
            2935,
            50544
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09135982876732236,
          "compression_ratio": 1.691119691119691,
          "no_speech_prob": 0.03370967507362366,
          "confidence": 0.9662903249263763
        },
        {
          "id": 117,
          "start": 689.52,
          "end": 693.52,
          "text": "like the video and give it a thumbs up, and also it's a huge help to share these videos with anyone",
          "tokens": [
            50544,
            411,
            264,
            960,
            293,
            976,
            309,
            257,
            8838,
            493,
            11,
            293,
            611,
            309,
            311,
            257,
            2603,
            854,
            281,
            2073,
            613,
            2145,
            365,
            2878,
            50744
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09135982876732236,
          "compression_ratio": 1.691119691119691,
          "no_speech_prob": 0.03370967507362366,
          "confidence": 0.9662903249263763
        },
        {
          "id": 118,
          "start": 693.52,
          "end": 697.12,
          "text": "who you think would find them useful. And if you have the means, you can contribute through Patreon,",
          "tokens": [
            50744,
            567,
            291,
            519,
            576,
            915,
            552,
            4420,
            13,
            400,
            498,
            291,
            362,
            264,
            1355,
            11,
            291,
            393,
            10586,
            807,
            15692,
            11,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09135982876732236,
          "compression_ratio": 1.691119691119691,
          "no_speech_prob": 0.03370967507362366,
          "confidence": 0.9662903249263763
        },
        {
          "id": 119,
          "start": 697.12,
          "end": 700.9599999999999,
          "text": "and there's a link to that page in the description section below. Be sure to subscribe for future",
          "tokens": [
            50924,
            293,
            456,
            311,
            257,
            2113,
            281,
            300,
            3028,
            294,
            264,
            3855,
            3541,
            2507,
            13,
            879,
            988,
            281,
            3022,
            337,
            2027,
            51116
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09135982876732236,
          "compression_ratio": 1.691119691119691,
          "no_speech_prob": 0.03370967507362366,
          "confidence": 0.9662903249263763
        },
        {
          "id": 120,
          "start": 700.9599999999999,
          "end": 706.8,
          "text": "videos, and thank you all for watching.",
          "tokens": [
            51116,
            2145,
            11,
            293,
            1309,
            291,
            439,
            337,
            1976,
            13,
            51408
          ],
          "temperature": 0.0,
          "avg_logprob": -0.09135982876732236,
          "compression_ratio": 1.691119691119691,
          "no_speech_prob": 0.03370967507362366,
          "confidence": 0.9662903249263763
        }
      ],
      "duration": 29.639999999999873
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 0.0,
      "end_time": 29.84,
      "text": "Hey there, how's it going everybody? In this video we'll be learning how to import modules. We'll start by importing modules that we've written and then we'll explore a bit of the standard library and how we can import those modules to solve a lot of common problems. So I have a module here called myModule.py. Now within this module we have a print statement and we'll talk about that in just a minute. We also have this test variable set to test string and then we have this function called findIndex and this findIndex function takes in two arguments.",
      "original_segments": [
        {
          "id": 0,
          "start": 0.0,
          "end": 4.0,
          "text": "Hey there, how's it going everybody? In this video we'll be learning how to import modules.",
          "tokens": [
            50364,
            1911,
            456,
            11,
            577,
            311,
            309,
            516,
            2201,
            30,
            682,
            341,
            960,
            321,
            603,
            312,
            2539,
            577,
            281,
            974,
            16679,
            13,
            50564
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0848679963280173,
          "compression_ratio": 1.825657894736842,
          "no_speech_prob": 0.06849014014005661,
          "confidence": 0.9315098598599434
        },
        {
          "id": 1,
          "start": 4.0,
          "end": 7.68,
          "text": "We'll start by importing modules that we've written and then we'll explore a bit of the",
          "tokens": [
            50564,
            492,
            603,
            722,
            538,
            43866,
            16679,
            300,
            321,
            600,
            3720,
            293,
            550,
            321,
            603,
            6839,
            257,
            857,
            295,
            264,
            50748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0848679963280173,
          "compression_ratio": 1.825657894736842,
          "no_speech_prob": 0.06849014014005661,
          "confidence": 0.9315098598599434
        },
        {
          "id": 2,
          "start": 7.68,
          "end": 12.08,
          "text": "standard library and how we can import those modules to solve a lot of common problems.",
          "tokens": [
            50748,
            3832,
            6405,
            293,
            577,
            321,
            393,
            974,
            729,
            16679,
            281,
            5039,
            257,
            688,
            295,
            2689,
            2740,
            13,
            50968
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0848679963280173,
          "compression_ratio": 1.825657894736842,
          "no_speech_prob": 0.06849014014005661,
          "confidence": 0.9315098598599434
        },
        {
          "id": 3,
          "start": 12.08,
          "end": 18.64,
          "text": "So I have a module here called myModule.py. Now within this module we have a print statement and",
          "tokens": [
            50968,
            407,
            286,
            362,
            257,
            10088,
            510,
            1219,
            452,
            44,
            378,
            2271,
            13,
            8200,
            13,
            823,
            1951,
            341,
            10088,
            321,
            362,
            257,
            4482,
            5629,
            293,
            51296
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0848679963280173,
          "compression_ratio": 1.825657894736842,
          "no_speech_prob": 0.06849014014005661,
          "confidence": 0.9315098598599434
        },
        {
          "id": 4,
          "start": 18.64,
          "end": 24.0,
          "text": "we'll talk about that in just a minute. We also have this test variable set to test string and",
          "tokens": [
            51296,
            321,
            603,
            751,
            466,
            300,
            294,
            445,
            257,
            3456,
            13,
            492,
            611,
            362,
            341,
            1500,
            7006,
            992,
            281,
            1500,
            6798,
            293,
            51564
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0848679963280173,
          "compression_ratio": 1.825657894736842,
          "no_speech_prob": 0.06849014014005661,
          "confidence": 0.9315098598599434
        },
        {
          "id": 5,
          "start": 24.0,
          "end": 29.84,
          "text": "then we have this function called findIndex and this findIndex function takes in two arguments.",
          "tokens": [
            51564,
            550,
            321,
            362,
            341,
            2445,
            1219,
            915,
            21790,
            3121,
            293,
            341,
            915,
            21790,
            3121,
            2445,
            2516,
            294,
            732,
            12869,
            13,
            51856
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0848679963280173,
          "compression_ratio": 1.825657894736842,
          "no_speech_prob": 0.06849014014005661,
          "confidence": 0.9315098598599434
        }
      ],
      "duration": 29.84
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 24.84,
      "end_time": 50.64,
      "text": "then we have this function called findIndex and this findIndex function takes in two arguments. It takes in a list to search and a target that we're looking for and we can see that we have some documentation here that just says that this finds the index of a value in a sequence and then it returns that index. But if it doesn't find that value then it just returns negative one. So let's say that we wrote this function and that we want to use this in other modules or scripts.",
      "original_segments": [
        {
          "id": 6,
          "start": 29.84,
          "end": 35.04,
          "text": "It takes in a list to search and a target that we're looking for and we can see that we have",
          "tokens": [
            50364,
            467,
            2516,
            294,
            257,
            1329,
            281,
            3164,
            293,
            257,
            3779,
            300,
            321,
            434,
            1237,
            337,
            293,
            321,
            393,
            536,
            300,
            321,
            362,
            50624
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04667520937712296,
          "compression_ratio": 1.8755020080321285,
          "no_speech_prob": 0.00040772100328467786,
          "confidence": 0.9995922789967153
        },
        {
          "id": 7,
          "start": 35.04,
          "end": 40.88,
          "text": "some documentation here that just says that this finds the index of a value in a sequence",
          "tokens": [
            50624,
            512,
            14333,
            510,
            300,
            445,
            1619,
            300,
            341,
            10704,
            264,
            8186,
            295,
            257,
            2158,
            294,
            257,
            8310,
            50916
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04667520937712296,
          "compression_ratio": 1.8755020080321285,
          "no_speech_prob": 0.00040772100328467786,
          "confidence": 0.9995922789967153
        },
        {
          "id": 8,
          "start": 40.88,
          "end": 45.92,
          "text": "and then it returns that index. But if it doesn't find that value then it just returns negative one.",
          "tokens": [
            50916,
            293,
            550,
            309,
            11247,
            300,
            8186,
            13,
            583,
            498,
            309,
            1177,
            380,
            915,
            300,
            2158,
            550,
            309,
            445,
            11247,
            3671,
            472,
            13,
            51168
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04667520937712296,
          "compression_ratio": 1.8755020080321285,
          "no_speech_prob": 0.00040772100328467786,
          "confidence": 0.9995922789967153
        },
        {
          "id": 9,
          "start": 45.92,
          "end": 50.64,
          "text": "So let's say that we wrote this function and that we want to use this in other modules or scripts.",
          "tokens": [
            51168,
            407,
            718,
            311,
            584,
            300,
            321,
            4114,
            341,
            2445,
            293,
            300,
            321,
            528,
            281,
            764,
            341,
            294,
            661,
            16679,
            420,
            23294,
            13,
            51404
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04667520937712296,
          "compression_ratio": 1.8755020080321285,
          "no_speech_prob": 0.00040772100328467786,
          "confidence": 0.9995922789967153
        }
      ],
      "duration": 25.8
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 45.64,
      "end_time": 72.4,
      "text": "and then it returns that index. But if it doesn't find that value then it just returns negative one. So let's say that we wrote this function and that we want to use this in other modules or scripts. So what we're going to want to do is import this. So I have another module over here which is just our intro.py file that we've been working with. Now within this file we have this courses variable that is just a list of course names. So let's say that we want to use that findIndex function from myModule. Now I actually created this myModule in the same directory as",
      "original_segments": [
        {
          "id": 10,
          "start": 50.64,
          "end": 54.96,
          "text": "So what we're going to want to do is import this. So I have another module over here",
          "tokens": [
            51404,
            407,
            437,
            321,
            434,
            516,
            281,
            528,
            281,
            360,
            307,
            974,
            341,
            13,
            407,
            286,
            362,
            1071,
            10088,
            670,
            510,
            51620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04667520937712296,
          "compression_ratio": 1.8755020080321285,
          "no_speech_prob": 0.00040772100328467786,
          "confidence": 0.9995922789967153
        },
        {
          "id": 11,
          "start": 55.6,
          "end": 60.24,
          "text": "which is just our intro.py file that we've been working with. Now within this file we have this",
          "tokens": [
            50396,
            597,
            307,
            445,
            527,
            12897,
            13,
            8200,
            3991,
            300,
            321,
            600,
            668,
            1364,
            365,
            13,
            823,
            1951,
            341,
            3991,
            321,
            362,
            341,
            50628
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04890127563476562,
          "compression_ratio": 1.8745098039215686,
          "no_speech_prob": 0.1683860868215561,
          "confidence": 0.8316139131784439
        },
        {
          "id": 12,
          "start": 60.24,
          "end": 65.52,
          "text": "courses variable that is just a list of course names. So let's say that we want to use that",
          "tokens": [
            50628,
            7712,
            7006,
            300,
            307,
            445,
            257,
            1329,
            295,
            1164,
            5288,
            13,
            407,
            718,
            311,
            584,
            300,
            321,
            528,
            281,
            764,
            300,
            50892
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04890127563476562,
          "compression_ratio": 1.8745098039215686,
          "no_speech_prob": 0.1683860868215561,
          "confidence": 0.8316139131784439
        },
        {
          "id": 13,
          "start": 65.52,
          "end": 72.4,
          "text": "findIndex function from myModule. Now I actually created this myModule in the same directory as",
          "tokens": [
            50892,
            915,
            21790,
            3121,
            2445,
            490,
            452,
            44,
            378,
            2271,
            13,
            823,
            286,
            767,
            2942,
            341,
            452,
            44,
            378,
            2271,
            294,
            264,
            912,
            21120,
            382,
            51236
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04890127563476562,
          "compression_ratio": 1.8745098039215686,
          "no_speech_prob": 0.1683860868215561,
          "confidence": 0.8316139131784439
        }
      ],
      "duration": 26.760000000000005
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 67.4,
      "end_time": 93.92,
      "text": "findIndex function from myModule. Now I actually created this myModule in the same directory as myIntro.py. So that means that we're going to be able to directly import that. Now when we import a file it actually runs all of the code from the module that we import. So that's how it creates all of the functions and variables. But if we have any other code like print statements or anything like that then that will be run as well. So that's why I have the print statement here in myModule",
      "original_segments": [
        {
          "id": 14,
          "start": 72.4,
          "end": 78.0,
          "text": "myIntro.py. So that means that we're going to be able to directly import that. Now when we import",
          "tokens": [
            51236,
            452,
            50247,
            13,
            8200,
            13,
            407,
            300,
            1355,
            300,
            321,
            434,
            516,
            281,
            312,
            1075,
            281,
            3838,
            974,
            300,
            13,
            823,
            562,
            321,
            974,
            51516
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04890127563476562,
          "compression_ratio": 1.8745098039215686,
          "no_speech_prob": 0.1683860868215561,
          "confidence": 0.8316139131784439
        },
        {
          "id": 15,
          "start": 78.0,
          "end": 83.12,
          "text": "a file it actually runs all of the code from the module that we import. So that's how it creates",
          "tokens": [
            51516,
            257,
            3991,
            309,
            767,
            6676,
            439,
            295,
            264,
            3089,
            490,
            264,
            10088,
            300,
            321,
            974,
            13,
            407,
            300,
            311,
            577,
            309,
            7829,
            51772
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04890127563476562,
          "compression_ratio": 1.8745098039215686,
          "no_speech_prob": 0.1683860868215561,
          "confidence": 0.8316139131784439
        },
        {
          "id": 16,
          "start": 83.12,
          "end": 88.0,
          "text": "all of the functions and variables. But if we have any other code like print statements or anything",
          "tokens": [
            50364,
            439,
            295,
            264,
            6828,
            293,
            9102,
            13,
            583,
            498,
            321,
            362,
            604,
            661,
            3089,
            411,
            4482,
            12363,
            420,
            1340,
            50608
          ],
          "temperature": 0.0,
          "avg_logprob": -0.043661967400581606,
          "compression_ratio": 1.8593155893536122,
          "no_speech_prob": 0.010020078159868717,
          "confidence": 0.9899799218401313
        },
        {
          "id": 17,
          "start": 88.0,
          "end": 93.92,
          "text": "like that then that will be run as well. So that's why I have the print statement here in myModule",
          "tokens": [
            50608,
            411,
            300,
            550,
            300,
            486,
            312,
            1190,
            382,
            731,
            13,
            407,
            300,
            311,
            983,
            286,
            362,
            264,
            4482,
            5629,
            510,
            294,
            452,
            44,
            378,
            2271,
            50904
          ],
          "temperature": 0.0,
          "avg_logprob": -0.043661967400581606,
          "compression_ratio": 1.8593155893536122,
          "no_speech_prob": 0.010020078159868717,
          "confidence": 0.9899799218401313
        }
      ],
      "duration": 26.519999999999996
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 88.92,
      "end_time": 116.56,
      "text": "like that then that will be run as well. So that's why I have the print statement here in myModule so that we can see when that happens. So to import this module we can just come to the top of the file here and say import myModule and again we can import that directly because it's in the same directory as our intro.py file. And now if we run this with this import then we can see that it imported successfully because it printed out that print statement within that module. Okay so let's",
      "original_segments": [
        {
          "id": 18,
          "start": 93.92,
          "end": 98.64,
          "text": "so that we can see when that happens. So to import this module we can just come to the top of the",
          "tokens": [
            50904,
            370,
            300,
            321,
            393,
            536,
            562,
            300,
            2314,
            13,
            407,
            281,
            974,
            341,
            10088,
            321,
            393,
            445,
            808,
            281,
            264,
            1192,
            295,
            264,
            51140
          ],
          "temperature": 0.0,
          "avg_logprob": -0.043661967400581606,
          "compression_ratio": 1.8593155893536122,
          "no_speech_prob": 0.010020078159868717,
          "confidence": 0.9899799218401313
        },
        {
          "id": 19,
          "start": 98.64,
          "end": 105.2,
          "text": "file here and say import myModule and again we can import that directly because it's in the same",
          "tokens": [
            51140,
            3991,
            510,
            293,
            584,
            974,
            452,
            44,
            378,
            2271,
            293,
            797,
            321,
            393,
            974,
            300,
            3838,
            570,
            309,
            311,
            294,
            264,
            912,
            51468
          ],
          "temperature": 0.0,
          "avg_logprob": -0.043661967400581606,
          "compression_ratio": 1.8593155893536122,
          "no_speech_prob": 0.010020078159868717,
          "confidence": 0.9899799218401313
        },
        {
          "id": 20,
          "start": 105.2,
          "end": 111.2,
          "text": "directory as our intro.py file. And now if we run this with this import then we can see that it",
          "tokens": [
            51468,
            21120,
            382,
            527,
            12897,
            13,
            8200,
            3991,
            13,
            400,
            586,
            498,
            321,
            1190,
            341,
            365,
            341,
            974,
            550,
            321,
            393,
            536,
            300,
            309,
            51768
          ],
          "temperature": 0.0,
          "avg_logprob": -0.043661967400581606,
          "compression_ratio": 1.8593155893536122,
          "no_speech_prob": 0.010020078159868717,
          "confidence": 0.9899799218401313
        },
        {
          "id": 21,
          "start": 111.2,
          "end": 116.56,
          "text": "imported successfully because it printed out that print statement within that module. Okay so let's",
          "tokens": [
            50364,
            25524,
            10727,
            570,
            309,
            13567,
            484,
            300,
            4482,
            5629,
            1951,
            300,
            10088,
            13,
            1033,
            370,
            718,
            311,
            50632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03373447631267791,
          "compression_ratio": 1.7757847533632287,
          "no_speech_prob": 0.024168768897652626,
          "confidence": 0.9758312311023474
        }
      ],
      "duration": 27.64
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 111.56,
      "end_time": 134.64000000000001,
      "text": "imported successfully because it printed out that print statement within that module. Okay so let's say that we want to use that findIndex function. Now when importing modules like this we just can't call our findIndex function. We instead have to type the module name first and then what we want to grab from that module. So if we wanted to use that then we could say let's say index is equal to",
      "original_segments": [
        {
          "id": 22,
          "start": 116.56,
          "end": 122.24000000000001,
          "text": "say that we want to use that findIndex function. Now when importing modules like this we just can't",
          "tokens": [
            50632,
            584,
            300,
            321,
            528,
            281,
            764,
            300,
            915,
            21790,
            3121,
            2445,
            13,
            823,
            562,
            43866,
            16679,
            411,
            341,
            321,
            445,
            393,
            380,
            50916
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03373447631267791,
          "compression_ratio": 1.7757847533632287,
          "no_speech_prob": 0.024168768897652626,
          "confidence": 0.9758312311023474
        },
        {
          "id": 23,
          "start": 122.24000000000001,
          "end": 128.24,
          "text": "call our findIndex function. We instead have to type the module name first and then what we want",
          "tokens": [
            50916,
            818,
            527,
            915,
            21790,
            3121,
            2445,
            13,
            492,
            2602,
            362,
            281,
            2010,
            264,
            10088,
            1315,
            700,
            293,
            550,
            437,
            321,
            528,
            51216
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03373447631267791,
          "compression_ratio": 1.7757847533632287,
          "no_speech_prob": 0.024168768897652626,
          "confidence": 0.9758312311023474
        },
        {
          "id": 24,
          "start": 128.24,
          "end": 134.64000000000001,
          "text": "to grab from that module. So if we wanted to use that then we could say let's say index is equal to",
          "tokens": [
            51216,
            281,
            4444,
            490,
            300,
            10088,
            13,
            407,
            498,
            321,
            1415,
            281,
            764,
            300,
            550,
            321,
            727,
            584,
            718,
            311,
            584,
            8186,
            307,
            2681,
            281,
            51536
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03373447631267791,
          "compression_ratio": 1.7757847533632287,
          "no_speech_prob": 0.024168768897652626,
          "confidence": 0.9758312311023474
        }
      ],
      "duration": 23.080000000000013
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 129.64000000000001,
      "end_time": 155.76,
      "text": "to grab from that module. So if we wanted to use that then we could say let's say index is equal to myModule dot findIndex and now we'll pass in the list that we want to search which is courses and now the target that we're looking for. So we'll go ahead and say that we're looking for math. And now let's print out that index and run that. So now we can see that that works. It returned",
      "original_segments": [
        {
          "id": 25,
          "start": 135.11999999999998,
          "end": 143.51999999999998,
          "text": "myModule dot findIndex and now we'll pass in the list that we want to search which is courses",
          "tokens": [
            50388,
            452,
            44,
            378,
            2271,
            5893,
            915,
            21790,
            3121,
            293,
            586,
            321,
            603,
            1320,
            294,
            264,
            1329,
            300,
            321,
            528,
            281,
            3164,
            597,
            307,
            7712,
            50808
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06285728991610333,
          "compression_ratio": 1.766355140186916,
          "no_speech_prob": 0.077318474650383,
          "confidence": 0.922681525349617
        },
        {
          "id": 26,
          "start": 143.51999999999998,
          "end": 148.16,
          "text": "and now the target that we're looking for. So we'll go ahead and say that we're looking for",
          "tokens": [
            50808,
            293,
            586,
            264,
            3779,
            300,
            321,
            434,
            1237,
            337,
            13,
            407,
            321,
            603,
            352,
            2286,
            293,
            584,
            300,
            321,
            434,
            1237,
            337,
            51040
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06285728991610333,
          "compression_ratio": 1.766355140186916,
          "no_speech_prob": 0.077318474650383,
          "confidence": 0.922681525349617
        },
        {
          "id": 27,
          "start": 148.16,
          "end": 155.76,
          "text": "math. And now let's print out that index and run that. So now we can see that that works. It returned",
          "tokens": [
            51040,
            5221,
            13,
            400,
            586,
            718,
            311,
            4482,
            484,
            300,
            8186,
            293,
            1190,
            300,
            13,
            407,
            586,
            321,
            393,
            536,
            300,
            300,
            1985,
            13,
            467,
            8752,
            51420
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06285728991610333,
          "compression_ratio": 1.766355140186916,
          "no_speech_prob": 0.077318474650383,
          "confidence": 0.922681525349617
        }
      ],
      "duration": 26.119999999999976
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 150.76,
      "end_time": 180.56,
      "text": "math. And now let's print out that index and run that. So now we can see that that works. It returned one and one is the index of the math value. Okay so if we're using this findIndex function multiple times throughout our script then it might get a little old and take up a lot of room to keep typing myModule dot findIndex everywhere. We can actually specify a name that we want to use for our imported module and usually this is used to make the module name shorter. So for example",
      "original_segments": [
        {
          "id": 28,
          "start": 155.76,
          "end": 162.23999999999998,
          "text": "one and one is the index of the math value. Okay so if we're using this findIndex function",
          "tokens": [
            51420,
            472,
            293,
            472,
            307,
            264,
            8186,
            295,
            264,
            5221,
            2158,
            13,
            1033,
            370,
            498,
            321,
            434,
            1228,
            341,
            915,
            21790,
            3121,
            2445,
            51744
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06285728991610333,
          "compression_ratio": 1.766355140186916,
          "no_speech_prob": 0.077318474650383,
          "confidence": 0.922681525349617
        },
        {
          "id": 29,
          "start": 162.24,
          "end": 166.96,
          "text": "multiple times throughout our script then it might get a little old and take up a lot of room",
          "tokens": [
            50364,
            3866,
            1413,
            3710,
            527,
            5755,
            550,
            309,
            1062,
            483,
            257,
            707,
            1331,
            293,
            747,
            493,
            257,
            688,
            295,
            1808,
            50600
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04597517878738875,
          "compression_ratio": 1.6398305084745763,
          "no_speech_prob": 0.004566201474517584,
          "confidence": 0.9954337985254824
        },
        {
          "id": 30,
          "start": 166.96,
          "end": 173.36,
          "text": "to keep typing myModule dot findIndex everywhere. We can actually specify a name that we want to",
          "tokens": [
            50600,
            281,
            1066,
            18444,
            452,
            44,
            378,
            2271,
            5893,
            915,
            21790,
            3121,
            5315,
            13,
            492,
            393,
            767,
            16500,
            257,
            1315,
            300,
            321,
            528,
            281,
            50920
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04597517878738875,
          "compression_ratio": 1.6398305084745763,
          "no_speech_prob": 0.004566201474517584,
          "confidence": 0.9954337985254824
        },
        {
          "id": 31,
          "start": 173.36,
          "end": 180.56,
          "text": "use for our imported module and usually this is used to make the module name shorter. So for example",
          "tokens": [
            50920,
            764,
            337,
            527,
            25524,
            10088,
            293,
            2673,
            341,
            307,
            1143,
            281,
            652,
            264,
            10088,
            1315,
            11639,
            13,
            407,
            337,
            1365,
            51280
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04597517878738875,
          "compression_ratio": 1.6398305084745763,
          "no_speech_prob": 0.004566201474517584,
          "confidence": 0.9954337985254824
        }
      ],
      "duration": 29.80000000000001
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 175.56,
      "end_time": 200.07999999999998,
      "text": "use for our imported module and usually this is used to make the module name shorter. So for example when we're importing myModule here at the top we could instead say import myModule as MM or any other name that we come up with. And now when using this import throughout the script instead of typing out myModule everywhere we can instead just use MM. So if I save that and run it then",
      "original_segments": [
        {
          "id": 32,
          "start": 180.56,
          "end": 188.16000000000003,
          "text": "when we're importing myModule here at the top we could instead say import myModule as MM or any",
          "tokens": [
            51280,
            562,
            321,
            434,
            43866,
            452,
            44,
            378,
            2271,
            510,
            412,
            264,
            1192,
            321,
            727,
            2602,
            584,
            974,
            452,
            44,
            378,
            2271,
            382,
            34191,
            420,
            604,
            51660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04597517878738875,
          "compression_ratio": 1.6398305084745763,
          "no_speech_prob": 0.004566201474517584,
          "confidence": 0.9954337985254824
        },
        {
          "id": 33,
          "start": 188.16,
          "end": 192.64,
          "text": "other name that we come up with. And now when using this import throughout the script instead",
          "tokens": [
            50364,
            661,
            1315,
            300,
            321,
            808,
            493,
            365,
            13,
            400,
            586,
            562,
            1228,
            341,
            974,
            3710,
            264,
            5755,
            2602,
            50588
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030232858657836915,
          "compression_ratio": 1.7397769516728625,
          "no_speech_prob": 0.015376606956124306,
          "confidence": 0.9846233930438757
        },
        {
          "id": 34,
          "start": 192.64,
          "end": 200.07999999999998,
          "text": "of typing out myModule everywhere we can instead just use MM. So if I save that and run it then",
          "tokens": [
            50588,
            295,
            18444,
            484,
            452,
            44,
            378,
            2271,
            5315,
            321,
            393,
            2602,
            445,
            764,
            34191,
            13,
            407,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            550,
            50960
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030232858657836915,
          "compression_ratio": 1.7397769516728625,
          "no_speech_prob": 0.015376606956124306,
          "confidence": 0.9846233930438757
        }
      ],
      "duration": 24.519999999999982
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 195.07999999999998,
      "end_time": 224.72,
      "text": "of typing out myModule everywhere we can instead just use MM. So if I save that and run it then we'll see that that still works. Now you'll see this a lot with modules like NumPy or Pandas. So you might see someone who does an import and they'll do import NumPy as NP or something like that. Now you might be wondering if there's a way that we can import the function itself and there is a way to do this. So instead we could say from myModule import and then what we want to",
      "original_segments": [
        {
          "id": 35,
          "start": 200.07999999999998,
          "end": 205.6,
          "text": "we'll see that that still works. Now you'll see this a lot with modules like NumPy or Pandas.",
          "tokens": [
            50960,
            321,
            603,
            536,
            300,
            300,
            920,
            1985,
            13,
            823,
            291,
            603,
            536,
            341,
            257,
            688,
            365,
            16679,
            411,
            22592,
            47,
            88,
            420,
            16995,
            296,
            13,
            51236
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030232858657836915,
          "compression_ratio": 1.7397769516728625,
          "no_speech_prob": 0.015376606956124306,
          "confidence": 0.9846233930438757
        },
        {
          "id": 36,
          "start": 205.6,
          "end": 211.76,
          "text": "So you might see someone who does an import and they'll do import NumPy as NP or something like",
          "tokens": [
            51236,
            407,
            291,
            1062,
            536,
            1580,
            567,
            775,
            364,
            974,
            293,
            436,
            603,
            360,
            974,
            22592,
            47,
            88,
            382,
            38611,
            420,
            746,
            411,
            51544
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030232858657836915,
          "compression_ratio": 1.7397769516728625,
          "no_speech_prob": 0.015376606956124306,
          "confidence": 0.9846233930438757
        },
        {
          "id": 37,
          "start": 211.76,
          "end": 216.32,
          "text": "that. Now you might be wondering if there's a way that we can import the function itself",
          "tokens": [
            51544,
            300,
            13,
            823,
            291,
            1062,
            312,
            6359,
            498,
            456,
            311,
            257,
            636,
            300,
            321,
            393,
            974,
            264,
            2445,
            2564,
            51772
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030232858657836915,
          "compression_ratio": 1.7397769516728625,
          "no_speech_prob": 0.015376606956124306,
          "confidence": 0.9846233930438757
        },
        {
          "id": 38,
          "start": 216.32,
          "end": 224.72,
          "text": "and there is a way to do this. So instead we could say from myModule import and then what we want to",
          "tokens": [
            50364,
            293,
            456,
            307,
            257,
            636,
            281,
            360,
            341,
            13,
            407,
            2602,
            321,
            727,
            584,
            490,
            452,
            44,
            378,
            2271,
            974,
            293,
            550,
            437,
            321,
            528,
            281,
            50784
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04239173963958142,
          "compression_ratio": 1.8064516129032258,
          "no_speech_prob": 0.004698116797953844,
          "confidence": 0.9953018832020462
        }
      ],
      "duration": 29.640000000000015
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 219.72,
      "end_time": 246.48,
      "text": "and there is a way to do this. So instead we could say from myModule import and then what we want to import from that module. So we want to import findIndex. So now when we use this throughout the code now we can just use that findIndex function anywhere and that really cuts down on the typing. So now we can save that and run it and see that it still works. Now one thing to note about that approach is that it only gives us access to that findIndex function and not everything else in",
      "original_segments": [
        {
          "id": 39,
          "start": 224.72,
          "end": 229.68,
          "text": "import from that module. So we want to import findIndex. So now when we use this throughout the",
          "tokens": [
            50784,
            974,
            490,
            300,
            10088,
            13,
            407,
            321,
            528,
            281,
            974,
            915,
            21790,
            3121,
            13,
            407,
            586,
            562,
            321,
            764,
            341,
            3710,
            264,
            51032
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04239173963958142,
          "compression_ratio": 1.8064516129032258,
          "no_speech_prob": 0.004698116797953844,
          "confidence": 0.9953018832020462
        },
        {
          "id": 40,
          "start": 229.68,
          "end": 235.92,
          "text": "code now we can just use that findIndex function anywhere and that really cuts down on the typing.",
          "tokens": [
            51032,
            3089,
            586,
            321,
            393,
            445,
            764,
            300,
            915,
            21790,
            3121,
            2445,
            4992,
            293,
            300,
            534,
            9992,
            760,
            322,
            264,
            18444,
            13,
            51344
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04239173963958142,
          "compression_ratio": 1.8064516129032258,
          "no_speech_prob": 0.004698116797953844,
          "confidence": 0.9953018832020462
        },
        {
          "id": 41,
          "start": 235.92,
          "end": 240.56,
          "text": "So now we can save that and run it and see that it still works. Now one thing to note about that",
          "tokens": [
            51344,
            407,
            586,
            321,
            393,
            3155,
            300,
            293,
            1190,
            309,
            293,
            536,
            300,
            309,
            920,
            1985,
            13,
            823,
            472,
            551,
            281,
            3637,
            466,
            300,
            51576
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04239173963958142,
          "compression_ratio": 1.8064516129032258,
          "no_speech_prob": 0.004698116797953844,
          "confidence": 0.9953018832020462
        },
        {
          "id": 42,
          "start": 240.56,
          "end": 246.48,
          "text": "approach is that it only gives us access to that findIndex function and not everything else in",
          "tokens": [
            50364,
            3109,
            307,
            300,
            309,
            787,
            2709,
            505,
            2105,
            281,
            300,
            915,
            21790,
            3121,
            2445,
            293,
            406,
            1203,
            1646,
            294,
            50660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05168398906444681,
          "compression_ratio": 1.8832684824902723,
          "no_speech_prob": 0.4417865574359894,
          "confidence": 0.5582134425640106
        }
      ],
      "duration": 26.75999999999999
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 241.48,
      "end_time": 270.32,
      "text": "approach is that it only gives us access to that findIndex function and not everything else in the module. So for example you'll remember that we had this test variable equal to this test string. So when we do the import this way now we don't have access to that test variable since we're only now importing the findIndex function. Now if we wanted to import that variable then we would have to include it by putting in a comma and then specifying what we want. So we want to say from",
      "original_segments": [
        {
          "id": 43,
          "start": 246.48,
          "end": 253.2,
          "text": "the module. So for example you'll remember that we had this test variable equal to this test string.",
          "tokens": [
            50660,
            264,
            10088,
            13,
            407,
            337,
            1365,
            291,
            603,
            1604,
            300,
            321,
            632,
            341,
            1500,
            7006,
            2681,
            281,
            341,
            1500,
            6798,
            13,
            50996
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05168398906444681,
          "compression_ratio": 1.8832684824902723,
          "no_speech_prob": 0.4417865574359894,
          "confidence": 0.5582134425640106
        },
        {
          "id": 44,
          "start": 253.2,
          "end": 258.88,
          "text": "So when we do the import this way now we don't have access to that test variable since we're",
          "tokens": [
            50996,
            407,
            562,
            321,
            360,
            264,
            974,
            341,
            636,
            586,
            321,
            500,
            380,
            362,
            2105,
            281,
            300,
            1500,
            7006,
            1670,
            321,
            434,
            51280
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05168398906444681,
          "compression_ratio": 1.8832684824902723,
          "no_speech_prob": 0.4417865574359894,
          "confidence": 0.5582134425640106
        },
        {
          "id": 45,
          "start": 258.88,
          "end": 264.8,
          "text": "only now importing the findIndex function. Now if we wanted to import that variable then we would",
          "tokens": [
            51280,
            787,
            586,
            43866,
            264,
            915,
            21790,
            3121,
            2445,
            13,
            823,
            498,
            321,
            1415,
            281,
            974,
            300,
            7006,
            550,
            321,
            576,
            51576
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05168398906444681,
          "compression_ratio": 1.8832684824902723,
          "no_speech_prob": 0.4417865574359894,
          "confidence": 0.5582134425640106
        },
        {
          "id": 46,
          "start": 264.8,
          "end": 270.32,
          "text": "have to include it by putting in a comma and then specifying what we want. So we want to say from",
          "tokens": [
            51576,
            362,
            281,
            4090,
            309,
            538,
            3372,
            294,
            257,
            22117,
            293,
            550,
            1608,
            5489,
            437,
            321,
            528,
            13,
            407,
            321,
            528,
            281,
            584,
            490,
            51852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05168398906444681,
          "compression_ratio": 1.8832684824902723,
          "no_speech_prob": 0.4417865574359894,
          "confidence": 0.5582134425640106
        }
      ],
      "duration": 28.840000000000003
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 265.32,
      "end_time": 290.08,
      "text": "have to include it by putting in a comma and then specifying what we want. So we want to say from myModule import findIndex comma and test. So now down below here we can print out that test variable and if we run that then we can see that we do have access to that test variable now. Now when doing the import this way we still have access to that as keyword. So if we wanted to make this even",
      "original_segments": [
        {
          "id": 47,
          "start": 270.32,
          "end": 279.59999999999997,
          "text": "myModule import findIndex comma and test. So now down below here we can print out that test variable",
          "tokens": [
            50364,
            452,
            44,
            378,
            2271,
            974,
            915,
            21790,
            3121,
            22117,
            293,
            1500,
            13,
            407,
            586,
            760,
            2507,
            510,
            321,
            393,
            4482,
            484,
            300,
            1500,
            7006,
            50828
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05646816889444987,
          "compression_ratio": 1.8372093023255813,
          "no_speech_prob": 0.000442143005784601,
          "confidence": 0.9995578569942154
        },
        {
          "id": 48,
          "start": 279.59999999999997,
          "end": 284.08,
          "text": "and if we run that then we can see that we do have access to that test variable now. Now when doing",
          "tokens": [
            50828,
            293,
            498,
            321,
            1190,
            300,
            550,
            321,
            393,
            536,
            300,
            321,
            360,
            362,
            2105,
            281,
            300,
            1500,
            7006,
            586,
            13,
            823,
            562,
            884,
            51052
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05646816889444987,
          "compression_ratio": 1.8372093023255813,
          "no_speech_prob": 0.000442143005784601,
          "confidence": 0.9995578569942154
        },
        {
          "id": 49,
          "start": 284.08,
          "end": 290.08,
          "text": "the import this way we still have access to that as keyword. So if we wanted to make this even",
          "tokens": [
            51052,
            264,
            974,
            341,
            636,
            321,
            920,
            362,
            2105,
            281,
            300,
            382,
            20428,
            13,
            407,
            498,
            321,
            1415,
            281,
            652,
            341,
            754,
            51352
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05646816889444987,
          "compression_ratio": 1.8372093023255813,
          "no_speech_prob": 0.000442143005784601,
          "confidence": 0.9995578569942154
        }
      ],
      "duration": 24.75999999999999
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 285.08,
      "end_time": 313.52,
      "text": "the import this way we still have access to that as keyword. So if we wanted to make this even shorter hand then we can say import findIndex as fi and now throughout our code we can replace that with fi and run that you can see that it still works. Now at this point that's not really readable anymore so don't rename something like that unless it's still readable and makes sense to others who are reading your code. So now let's go ahead and just undo that change. Now using this",
      "original_segments": [
        {
          "id": 50,
          "start": 290.08,
          "end": 298.32,
          "text": "shorter hand then we can say import findIndex as fi and now throughout our code we can replace that",
          "tokens": [
            51352,
            11639,
            1011,
            550,
            321,
            393,
            584,
            974,
            915,
            21790,
            3121,
            382,
            15848,
            293,
            586,
            3710,
            527,
            3089,
            321,
            393,
            7406,
            300,
            51764
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05646816889444987,
          "compression_ratio": 1.8372093023255813,
          "no_speech_prob": 0.000442143005784601,
          "confidence": 0.9995578569942154
        },
        {
          "id": 51,
          "start": 298.32,
          "end": 303.2,
          "text": "with fi and run that you can see that it still works. Now at this point that's not really",
          "tokens": [
            50364,
            365,
            15848,
            293,
            1190,
            300,
            291,
            393,
            536,
            300,
            309,
            920,
            1985,
            13,
            823,
            412,
            341,
            935,
            300,
            311,
            406,
            534,
            50608
          ],
          "temperature": 0.0,
          "avg_logprob": -0.039789878715903074,
          "compression_ratio": 1.7619047619047619,
          "no_speech_prob": 0.1093202754855156,
          "confidence": 0.8906797245144844
        },
        {
          "id": 52,
          "start": 303.2,
          "end": 308.0,
          "text": "readable anymore so don't rename something like that unless it's still readable and makes sense",
          "tokens": [
            50608,
            49857,
            3602,
            370,
            500,
            380,
            36741,
            746,
            411,
            300,
            5969,
            309,
            311,
            920,
            49857,
            293,
            1669,
            2020,
            50848
          ],
          "temperature": 0.0,
          "avg_logprob": -0.039789878715903074,
          "compression_ratio": 1.7619047619047619,
          "no_speech_prob": 0.1093202754855156,
          "confidence": 0.8906797245144844
        },
        {
          "id": 53,
          "start": 308.0,
          "end": 313.52,
          "text": "to others who are reading your code. So now let's go ahead and just undo that change. Now using this",
          "tokens": [
            50848,
            281,
            2357,
            567,
            366,
            3760,
            428,
            3089,
            13,
            407,
            586,
            718,
            311,
            352,
            2286,
            293,
            445,
            23779,
            300,
            1319,
            13,
            823,
            1228,
            341,
            51124
          ],
          "temperature": 0.0,
          "avg_logprob": -0.039789878715903074,
          "compression_ratio": 1.7619047619047619,
          "no_speech_prob": 0.1093202754855156,
          "confidence": 0.8906797245144844
        }
      ],
      "duration": 28.439999999999998
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 308.52,
      "end_time": 336.8,
      "text": "to others who are reading your code. So now let's go ahead and just undo that change. Now using this method of importing we'd have to add commas and specify each value that we want to import. Now there is a way to just import everything and I'll show you how to do this but I have to be honest I never use this and it's pretty frowned upon and we'll see why that is. But if we wanted to just import everything then we could say from myModule import star. So if we run this then we can see",
      "original_segments": [
        {
          "id": 54,
          "start": 313.52,
          "end": 319.36,
          "text": "method of importing we'd have to add commas and specify each value that we want to import. Now",
          "tokens": [
            51124,
            3170,
            295,
            43866,
            321,
            1116,
            362,
            281,
            909,
            800,
            296,
            293,
            16500,
            1184,
            2158,
            300,
            321,
            528,
            281,
            974,
            13,
            823,
            51416
          ],
          "temperature": 0.0,
          "avg_logprob": -0.039789878715903074,
          "compression_ratio": 1.7619047619047619,
          "no_speech_prob": 0.1093202754855156,
          "confidence": 0.8906797245144844
        },
        {
          "id": 55,
          "start": 319.36,
          "end": 324.24,
          "text": "there is a way to just import everything and I'll show you how to do this but I have to be honest I",
          "tokens": [
            51416,
            456,
            307,
            257,
            636,
            281,
            445,
            974,
            1203,
            293,
            286,
            603,
            855,
            291,
            577,
            281,
            360,
            341,
            457,
            286,
            362,
            281,
            312,
            3245,
            286,
            51660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.039789878715903074,
          "compression_ratio": 1.7619047619047619,
          "no_speech_prob": 0.1093202754855156,
          "confidence": 0.8906797245144844
        },
        {
          "id": 56,
          "start": 324.24,
          "end": 329.76,
          "text": "never use this and it's pretty frowned upon and we'll see why that is. But if we wanted to just",
          "tokens": [
            50364,
            1128,
            764,
            341,
            293,
            309,
            311,
            1238,
            431,
            14683,
            3564,
            293,
            321,
            603,
            536,
            983,
            300,
            307,
            13,
            583,
            498,
            321,
            1415,
            281,
            445,
            50640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0426030648060334,
          "compression_ratio": 1.8509803921568628,
          "no_speech_prob": 0.12298525869846344,
          "confidence": 0.8770147413015366
        },
        {
          "id": 57,
          "start": 329.76,
          "end": 336.8,
          "text": "import everything then we could say from myModule import star. So if we run this then we can see",
          "tokens": [
            50640,
            974,
            1203,
            550,
            321,
            727,
            584,
            490,
            452,
            44,
            378,
            2271,
            974,
            3543,
            13,
            407,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            50992
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0426030648060334,
          "compression_ratio": 1.8509803921568628,
          "no_speech_prob": 0.12298525869846344,
          "confidence": 0.8770147413015366
        }
      ],
      "duration": 28.28000000000003
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 331.8,
      "end_time": 357.36,
      "text": "import everything then we could say from myModule import star. So if we run this then we can see that everything still works. We still have access to this findIndex function and this test variable but the reason that this is frowned upon is because now we can't tell what came from that imported module and what didn't. So if we're having problems with this findIndex function then we might try to track down where that function came from or where it was defined",
      "original_segments": [
        {
          "id": 58,
          "start": 336.8,
          "end": 342.56,
          "text": "that everything still works. We still have access to this findIndex function and this test variable",
          "tokens": [
            50992,
            300,
            1203,
            920,
            1985,
            13,
            492,
            920,
            362,
            2105,
            281,
            341,
            915,
            21790,
            3121,
            2445,
            293,
            341,
            1500,
            7006,
            51280
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0426030648060334,
          "compression_ratio": 1.8509803921568628,
          "no_speech_prob": 0.12298525869846344,
          "confidence": 0.8770147413015366
        },
        {
          "id": 59,
          "start": 342.56,
          "end": 347.28000000000003,
          "text": "but the reason that this is frowned upon is because now we can't tell what came from that",
          "tokens": [
            51280,
            457,
            264,
            1778,
            300,
            341,
            307,
            431,
            14683,
            3564,
            307,
            570,
            586,
            321,
            393,
            380,
            980,
            437,
            1361,
            490,
            300,
            51516
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0426030648060334,
          "compression_ratio": 1.8509803921568628,
          "no_speech_prob": 0.12298525869846344,
          "confidence": 0.8770147413015366
        },
        {
          "id": 60,
          "start": 347.28000000000003,
          "end": 352.56,
          "text": "imported module and what didn't. So if we're having problems with this findIndex function",
          "tokens": [
            51516,
            25524,
            10088,
            293,
            437,
            994,
            380,
            13,
            407,
            498,
            321,
            434,
            1419,
            2740,
            365,
            341,
            915,
            21790,
            3121,
            2445,
            51780
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0426030648060334,
          "compression_ratio": 1.8509803921568628,
          "no_speech_prob": 0.12298525869846344,
          "confidence": 0.8770147413015366
        },
        {
          "id": 61,
          "start": 352.64,
          "end": 357.36,
          "text": "then we might try to track down where that function came from or where it was defined",
          "tokens": [
            50368,
            550,
            321,
            1062,
            853,
            281,
            2837,
            760,
            689,
            300,
            2445,
            1361,
            490,
            420,
            689,
            309,
            390,
            7642,
            50604
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05028356883836829,
          "compression_ratio": 1.837837837837838,
          "no_speech_prob": 0.09193851798772812,
          "confidence": 0.9080614820122719
        }
      ],
      "duration": 25.560000000000002
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 352.36,
      "end_time": 378.8,
      "text": "imported module and what didn't. So if we're having problems with this findIndex function then we might try to track down where that function came from or where it was defined and with that asterisk it's just not obvious that it came from that module that was imported. So instead we'll go back to importing both of those directly. So basically importing everything with that asterisk just makes it harder to track down problems so it's better to do it this way. Okay so when we import a module how does it know where to find this module? So we didn't pass in a file",
      "original_segments": [
        {
          "id": 62,
          "start": 357.36,
          "end": 363.52,
          "text": "and with that asterisk it's just not obvious that it came from that module that was imported. So",
          "tokens": [
            50604,
            293,
            365,
            300,
            257,
            3120,
            7797,
            309,
            311,
            445,
            406,
            6322,
            300,
            309,
            1361,
            490,
            300,
            10088,
            300,
            390,
            25524,
            13,
            407,
            50912
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05028356883836829,
          "compression_ratio": 1.837837837837838,
          "no_speech_prob": 0.09193851798772812,
          "confidence": 0.9080614820122719
        },
        {
          "id": 63,
          "start": 363.52,
          "end": 368.72,
          "text": "instead we'll go back to importing both of those directly. So basically importing everything with",
          "tokens": [
            50912,
            2602,
            321,
            603,
            352,
            646,
            281,
            43866,
            1293,
            295,
            729,
            3838,
            13,
            407,
            1936,
            43866,
            1203,
            365,
            51172
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05028356883836829,
          "compression_ratio": 1.837837837837838,
          "no_speech_prob": 0.09193851798772812,
          "confidence": 0.9080614820122719
        },
        {
          "id": 64,
          "start": 368.72,
          "end": 373.52,
          "text": "that asterisk just makes it harder to track down problems so it's better to do it this way. Okay",
          "tokens": [
            51172,
            300,
            257,
            3120,
            7797,
            445,
            1669,
            309,
            6081,
            281,
            2837,
            760,
            2740,
            370,
            309,
            311,
            1101,
            281,
            360,
            309,
            341,
            636,
            13,
            1033,
            51412
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05028356883836829,
          "compression_ratio": 1.837837837837838,
          "no_speech_prob": 0.09193851798772812,
          "confidence": 0.9080614820122719
        },
        {
          "id": 65,
          "start": 373.52,
          "end": 378.8,
          "text": "so when we import a module how does it know where to find this module? So we didn't pass in a file",
          "tokens": [
            51412,
            370,
            562,
            321,
            974,
            257,
            10088,
            577,
            775,
            309,
            458,
            689,
            281,
            915,
            341,
            10088,
            30,
            407,
            321,
            994,
            380,
            1320,
            294,
            257,
            3991,
            51676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05028356883836829,
          "compression_ratio": 1.837837837837838,
          "no_speech_prob": 0.09193851798772812,
          "confidence": 0.9080614820122719
        }
      ],
      "duration": 26.439999999999998
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 373.8,
      "end_time": 403.36,
      "text": "so when we import a module how does it know where to find this module? So we didn't pass in a file path or tell python where to find this module it just found it. So the way that this works is that when we import a module it checks multiple locations and the locations that it checks is within a list called sys.path and we can actually see this list if we import the sys module. So I'll import sys and now down here we'll comment out these two print statements and now let's print",
      "original_segments": [
        {
          "id": 66,
          "start": 378.8,
          "end": 384.24,
          "text": "path or tell python where to find this module it just found it. So the way that this works is that",
          "tokens": [
            50364,
            3100,
            420,
            980,
            38797,
            689,
            281,
            915,
            341,
            10088,
            309,
            445,
            1352,
            309,
            13,
            407,
            264,
            636,
            300,
            341,
            1985,
            307,
            300,
            50636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0544936809133976,
          "compression_ratio": 1.8277511961722488,
          "no_speech_prob": 0.046721141785383224,
          "confidence": 0.9532788582146168
        },
        {
          "id": 67,
          "start": 384.24,
          "end": 389.6,
          "text": "when we import a module it checks multiple locations and the locations that it checks",
          "tokens": [
            50636,
            562,
            321,
            974,
            257,
            10088,
            309,
            13834,
            3866,
            9253,
            293,
            264,
            9253,
            300,
            309,
            13834,
            50904
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0544936809133976,
          "compression_ratio": 1.8277511961722488,
          "no_speech_prob": 0.046721141785383224,
          "confidence": 0.9532788582146168
        },
        {
          "id": 68,
          "start": 389.6,
          "end": 396.64,
          "text": "is within a list called sys.path and we can actually see this list if we import the sys module.",
          "tokens": [
            50904,
            307,
            1951,
            257,
            1329,
            1219,
            262,
            749,
            13,
            31852,
            293,
            321,
            393,
            767,
            536,
            341,
            1329,
            498,
            321,
            974,
            264,
            262,
            749,
            10088,
            13,
            51256
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0544936809133976,
          "compression_ratio": 1.8277511961722488,
          "no_speech_prob": 0.046721141785383224,
          "confidence": 0.9532788582146168
        },
        {
          "id": 69,
          "start": 396.64,
          "end": 403.36,
          "text": "So I'll import sys and now down here we'll comment out these two print statements and now let's print",
          "tokens": [
            51256,
            407,
            286,
            603,
            974,
            262,
            749,
            293,
            586,
            760,
            510,
            321,
            603,
            2871,
            484,
            613,
            732,
            4482,
            12363,
            293,
            586,
            718,
            311,
            4482,
            51592
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0544936809133976,
          "compression_ratio": 1.8277511961722488,
          "no_speech_prob": 0.046721141785383224,
          "confidence": 0.9532788582146168
        }
      ],
      "duration": 29.560000000000002
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 398.36,
      "end_time": 423.68,
      "text": "So I'll import sys and now down here we'll comment out these two print statements and now let's print out that sys.path and run that. So this is the list of directories on my machine where python looks for modules when we run an import and it looks in this order. Now this first value here is just the directory where I'm currently running the script from and the my module python file that",
      "original_segments": [
        {
          "id": 70,
          "start": 403.36,
          "end": 410.56,
          "text": "out that sys.path and run that. So this is the list of directories on my machine where python",
          "tokens": [
            50364,
            484,
            300,
            262,
            749,
            13,
            31852,
            293,
            1190,
            300,
            13,
            407,
            341,
            307,
            264,
            1329,
            295,
            5391,
            530,
            322,
            452,
            3479,
            689,
            38797,
            50724
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05664620348202285,
          "compression_ratio": 1.7477477477477477,
          "no_speech_prob": 0.1883697211742401,
          "confidence": 0.8116302788257599
        },
        {
          "id": 71,
          "start": 410.56,
          "end": 417.44,
          "text": "looks for modules when we run an import and it looks in this order. Now this first value here",
          "tokens": [
            50724,
            1542,
            337,
            16679,
            562,
            321,
            1190,
            364,
            974,
            293,
            309,
            1542,
            294,
            341,
            1668,
            13,
            823,
            341,
            700,
            2158,
            510,
            51068
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05664620348202285,
          "compression_ratio": 1.7477477477477477,
          "no_speech_prob": 0.1883697211742401,
          "confidence": 0.8116302788257599
        },
        {
          "id": 72,
          "start": 417.44,
          "end": 423.68,
          "text": "is just the directory where I'm currently running the script from and the my module python file that",
          "tokens": [
            51068,
            307,
            445,
            264,
            21120,
            689,
            286,
            478,
            4362,
            2614,
            264,
            5755,
            490,
            293,
            264,
            452,
            10088,
            38797,
            3991,
            300,
            51380
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05664620348202285,
          "compression_ratio": 1.7477477477477477,
          "no_speech_prob": 0.1883697211742401,
          "confidence": 0.8116302788257599
        }
      ],
      "duration": 25.319999999999993
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 418.68,
      "end_time": 446.96000000000004,
      "text": "is just the directory where I'm currently running the script from and the my module python file that we were importing is within that directory also so that's how it found it. Okay so what directories are added to this sys.path list? So directories get added in this order first the directory containing the script that we're running so that is why this directory where we're running the script is the first value in sys.path so you can always import modules from the same directory and next",
      "original_segments": [
        {
          "id": 73,
          "start": 423.68,
          "end": 429.6,
          "text": "we were importing is within that directory also so that's how it found it. Okay so what directories",
          "tokens": [
            51380,
            321,
            645,
            43866,
            307,
            1951,
            300,
            21120,
            611,
            370,
            300,
            311,
            577,
            309,
            1352,
            309,
            13,
            1033,
            370,
            437,
            5391,
            530,
            51676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05664620348202285,
          "compression_ratio": 1.7477477477477477,
          "no_speech_prob": 0.1883697211742401,
          "confidence": 0.8116302788257599
        },
        {
          "id": 74,
          "start": 429.6,
          "end": 435.76000000000005,
          "text": "are added to this sys.path list? So directories get added in this order first the directory",
          "tokens": [
            50364,
            366,
            3869,
            281,
            341,
            262,
            749,
            13,
            31852,
            1329,
            30,
            407,
            5391,
            530,
            483,
            3869,
            294,
            341,
            1668,
            700,
            264,
            21120,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04612374974188404,
          "compression_ratio": 2.034188034188034,
          "no_speech_prob": 0.05535515770316124,
          "confidence": 0.9446448422968388
        },
        {
          "id": 75,
          "start": 435.76000000000005,
          "end": 440.88,
          "text": "containing the script that we're running so that is why this directory where we're running the script",
          "tokens": [
            50672,
            19273,
            264,
            5755,
            300,
            321,
            434,
            2614,
            370,
            300,
            307,
            983,
            341,
            21120,
            689,
            321,
            434,
            2614,
            264,
            5755,
            50928
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04612374974188404,
          "compression_ratio": 2.034188034188034,
          "no_speech_prob": 0.05535515770316124,
          "confidence": 0.9446448422968388
        },
        {
          "id": 76,
          "start": 440.88,
          "end": 446.96000000000004,
          "text": "is the first value in sys.path so you can always import modules from the same directory and next",
          "tokens": [
            50928,
            307,
            264,
            700,
            2158,
            294,
            262,
            749,
            13,
            31852,
            370,
            291,
            393,
            1009,
            974,
            16679,
            490,
            264,
            912,
            21120,
            293,
            958,
            51232
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04612374974188404,
          "compression_ratio": 2.034188034188034,
          "no_speech_prob": 0.05535515770316124,
          "confidence": 0.9446448422968388
        }
      ],
      "duration": 28.28000000000003
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 441.96000000000004,
      "end_time": 470.16,
      "text": "is the first value in sys.path so you can always import modules from the same directory and next it adds directories listed in the python path environment variable and we'll talk more about the python path environment variable in just a minute and then after the python path it then adds the standard library directories and that's how we can import those modules from the standard library and lastly it adds the site packages directory for third-party packages and we'll",
      "original_segments": [
        {
          "id": 77,
          "start": 446.96000000000004,
          "end": 451.84000000000003,
          "text": "it adds directories listed in the python path environment variable and we'll talk more about",
          "tokens": [
            51232,
            309,
            10860,
            5391,
            530,
            10052,
            294,
            264,
            38797,
            3100,
            2823,
            7006,
            293,
            321,
            603,
            751,
            544,
            466,
            51476
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04612374974188404,
          "compression_ratio": 2.034188034188034,
          "no_speech_prob": 0.05535515770316124,
          "confidence": 0.9446448422968388
        },
        {
          "id": 78,
          "start": 451.84000000000003,
          "end": 457.92,
          "text": "the python path environment variable in just a minute and then after the python path it then",
          "tokens": [
            51476,
            264,
            38797,
            3100,
            2823,
            7006,
            294,
            445,
            257,
            3456,
            293,
            550,
            934,
            264,
            38797,
            3100,
            309,
            550,
            51780
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04612374974188404,
          "compression_ratio": 2.034188034188034,
          "no_speech_prob": 0.05535515770316124,
          "confidence": 0.9446448422968388
        },
        {
          "id": 79,
          "start": 457.92,
          "end": 463.6,
          "text": "adds the standard library directories and that's how we can import those modules from the standard",
          "tokens": [
            50364,
            10860,
            264,
            3832,
            6405,
            5391,
            530,
            293,
            300,
            311,
            577,
            321,
            393,
            974,
            729,
            16679,
            490,
            264,
            3832,
            50648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056250380618231635,
          "compression_ratio": 1.987603305785124,
          "no_speech_prob": 0.06098683178424835,
          "confidence": 0.9390131682157516
        },
        {
          "id": 80,
          "start": 463.6,
          "end": 470.16,
          "text": "library and lastly it adds the site packages directory for third-party packages and we'll",
          "tokens": [
            50648,
            6405,
            293,
            16386,
            309,
            10860,
            264,
            3621,
            17401,
            21120,
            337,
            2636,
            12,
            23409,
            17401,
            293,
            321,
            603,
            50976
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056250380618231635,
          "compression_ratio": 1.987603305785124,
          "no_speech_prob": 0.06098683178424835,
          "confidence": 0.9390131682157516
        }
      ],
      "duration": 28.19999999999999
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 465.16,
      "end_time": 493.04,
      "text": "library and lastly it adds the site packages directory for third-party packages and we'll look at all of these. So first let's see what it looks like when the module that we want to import isn't in the same directory as the script that we're trying to import it from. So I'm going to move the module that we've been importing from the same directory into a directory on our desktop. So I've got finder pulled up here and I'm just going to drag this my module over here into this",
      "original_segments": [
        {
          "id": 81,
          "start": 470.16,
          "end": 475.28000000000003,
          "text": "look at all of these. So first let's see what it looks like when the module that we want to import",
          "tokens": [
            50976,
            574,
            412,
            439,
            295,
            613,
            13,
            407,
            700,
            718,
            311,
            536,
            437,
            309,
            1542,
            411,
            562,
            264,
            10088,
            300,
            321,
            528,
            281,
            974,
            51232
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056250380618231635,
          "compression_ratio": 1.987603305785124,
          "no_speech_prob": 0.06098683178424835,
          "confidence": 0.9390131682157516
        },
        {
          "id": 82,
          "start": 475.28000000000003,
          "end": 480.24,
          "text": "isn't in the same directory as the script that we're trying to import it from. So I'm going to",
          "tokens": [
            51232,
            1943,
            380,
            294,
            264,
            912,
            21120,
            382,
            264,
            5755,
            300,
            321,
            434,
            1382,
            281,
            974,
            309,
            490,
            13,
            407,
            286,
            478,
            516,
            281,
            51480
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056250380618231635,
          "compression_ratio": 1.987603305785124,
          "no_speech_prob": 0.06098683178424835,
          "confidence": 0.9390131682157516
        },
        {
          "id": 83,
          "start": 480.24,
          "end": 486.0,
          "text": "move the module that we've been importing from the same directory into a directory on our desktop.",
          "tokens": [
            51480,
            1286,
            264,
            10088,
            300,
            321,
            600,
            668,
            43866,
            490,
            264,
            912,
            21120,
            666,
            257,
            21120,
            322,
            527,
            14502,
            13,
            51768
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056250380618231635,
          "compression_ratio": 1.987603305785124,
          "no_speech_prob": 0.06098683178424835,
          "confidence": 0.9390131682157516
        },
        {
          "id": 84,
          "start": 486.0,
          "end": 493.04,
          "text": "So I've got finder pulled up here and I'm just going to drag this my module over here into this",
          "tokens": [
            50364,
            407,
            286,
            600,
            658,
            915,
            260,
            7373,
            493,
            510,
            293,
            286,
            478,
            445,
            516,
            281,
            5286,
            341,
            452,
            10088,
            670,
            510,
            666,
            341,
            50716
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0529217396752309,
          "compression_ratio": 1.8208955223880596,
          "no_speech_prob": 0.011703120544552803,
          "confidence": 0.9882968794554472
        }
      ],
      "duration": 27.879999999999995
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 488.04,
      "end_time": 515.52,
      "text": "So I've got finder pulled up here and I'm just going to drag this my module over here into this my modules directory that is on my desktop. So now that module that we're trying to import is in a completely different location on our machine so if we go back to here to our script and now try to run this then we can see that we get this error module not found no module named my module. Now there are a couple of approaches that we can take here. First is that we can actually manually add",
      "original_segments": [
        {
          "id": 85,
          "start": 493.04,
          "end": 498.48,
          "text": "my modules directory that is on my desktop. So now that module that we're trying to import is in a",
          "tokens": [
            50716,
            452,
            16679,
            21120,
            300,
            307,
            322,
            452,
            14502,
            13,
            407,
            586,
            300,
            10088,
            300,
            321,
            434,
            1382,
            281,
            974,
            307,
            294,
            257,
            50988
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0529217396752309,
          "compression_ratio": 1.8208955223880596,
          "no_speech_prob": 0.011703120544552803,
          "confidence": 0.9882968794554472
        },
        {
          "id": 86,
          "start": 498.48,
          "end": 504.48,
          "text": "completely different location on our machine so if we go back to here to our script and now try to",
          "tokens": [
            50988,
            2584,
            819,
            4914,
            322,
            527,
            3479,
            370,
            498,
            321,
            352,
            646,
            281,
            510,
            281,
            527,
            5755,
            293,
            586,
            853,
            281,
            51288
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0529217396752309,
          "compression_ratio": 1.8208955223880596,
          "no_speech_prob": 0.011703120544552803,
          "confidence": 0.9882968794554472
        },
        {
          "id": 87,
          "start": 504.48,
          "end": 510.8,
          "text": "run this then we can see that we get this error module not found no module named my module. Now",
          "tokens": [
            51288,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            321,
            483,
            341,
            6713,
            10088,
            406,
            1352,
            572,
            10088,
            4926,
            452,
            10088,
            13,
            823,
            51604
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0529217396752309,
          "compression_ratio": 1.8208955223880596,
          "no_speech_prob": 0.011703120544552803,
          "confidence": 0.9882968794554472
        },
        {
          "id": 88,
          "start": 510.8,
          "end": 515.52,
          "text": "there are a couple of approaches that we can take here. First is that we can actually manually add",
          "tokens": [
            51604,
            456,
            366,
            257,
            1916,
            295,
            11587,
            300,
            321,
            393,
            747,
            510,
            13,
            2386,
            307,
            300,
            321,
            393,
            767,
            16945,
            909,
            51840
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0529217396752309,
          "compression_ratio": 1.8208955223880596,
          "no_speech_prob": 0.011703120544552803,
          "confidence": 0.9882968794554472
        }
      ],
      "duration": 27.47999999999996
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 510.52,
      "end_time": 534.4,
      "text": "run this then we can see that we get this error module not found no module named my module. Now there are a couple of approaches that we can take here. First is that we can actually manually add that directory to our sys.path list. So this sys.path is a list just like any other that we've been looking at and we can treat it like one. So before we try to import my module we could add that directory to sys.path. So I'm going to import this here at the top before we try to",
      "original_segments": [
        {
          "id": 89,
          "start": 515.52,
          "end": 521.68,
          "text": "that directory to our sys.path list. So this sys.path is a list just like any other that",
          "tokens": [
            50364,
            300,
            21120,
            281,
            527,
            262,
            749,
            13,
            31852,
            1329,
            13,
            407,
            341,
            262,
            749,
            13,
            31852,
            307,
            257,
            1329,
            445,
            411,
            604,
            661,
            300,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.052846100216820124,
          "compression_ratio": 1.8446601941747574,
          "no_speech_prob": 0.00017196478438563645,
          "confidence": 0.9998280352156144
        },
        {
          "id": 90,
          "start": 521.68,
          "end": 528.0,
          "text": "we've been looking at and we can treat it like one. So before we try to import my module we could",
          "tokens": [
            50672,
            321,
            600,
            668,
            1237,
            412,
            293,
            321,
            393,
            2387,
            309,
            411,
            472,
            13,
            407,
            949,
            321,
            853,
            281,
            974,
            452,
            10088,
            321,
            727,
            50988
          ],
          "temperature": 0.0,
          "avg_logprob": -0.052846100216820124,
          "compression_ratio": 1.8446601941747574,
          "no_speech_prob": 0.00017196478438563645,
          "confidence": 0.9998280352156144
        },
        {
          "id": 91,
          "start": 528.0,
          "end": 534.4,
          "text": "add that directory to sys.path. So I'm going to import this here at the top before we try to",
          "tokens": [
            50988,
            909,
            300,
            21120,
            281,
            262,
            749,
            13,
            31852,
            13,
            407,
            286,
            478,
            516,
            281,
            974,
            341,
            510,
            412,
            264,
            1192,
            949,
            321,
            853,
            281,
            51308
          ],
          "temperature": 0.0,
          "avg_logprob": -0.052846100216820124,
          "compression_ratio": 1.8446601941747574,
          "no_speech_prob": 0.00017196478438563645,
          "confidence": 0.9998280352156144
        }
      ],
      "duration": 23.879999999999995
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 529.4,
      "end_time": 558.48,
      "text": "add that directory to sys.path. So I'm going to import this here at the top before we try to import that module and then I'll say sys.path.append and the location on my machine this is probably going to be different on yours but the location on mine is users-corey-desktop-my-modules and I believe I need a dash here at the beginning as well. So if I save that and run it we can see",
      "original_segments": [
        {
          "id": 92,
          "start": 534.4,
          "end": 542.88,
          "text": "import that module and then I'll say sys.path.append and the location on my machine this is probably",
          "tokens": [
            51308,
            974,
            300,
            10088,
            293,
            550,
            286,
            603,
            584,
            262,
            749,
            13,
            31852,
            13,
            1746,
            521,
            293,
            264,
            4914,
            322,
            452,
            3479,
            341,
            307,
            1391,
            51732
          ],
          "temperature": 0.0,
          "avg_logprob": -0.052846100216820124,
          "compression_ratio": 1.8446601941747574,
          "no_speech_prob": 0.00017196478438563645,
          "confidence": 0.9998280352156144
        },
        {
          "id": 93,
          "start": 542.88,
          "end": 553.4399999999999,
          "text": "going to be different on yours but the location on mine is users-corey-desktop-my-modules",
          "tokens": [
            50364,
            516,
            281,
            312,
            819,
            322,
            6342,
            457,
            264,
            4914,
            322,
            3892,
            307,
            5022,
            12,
            12352,
            88,
            12,
            14792,
            13031,
            12,
            2226,
            12,
            8014,
            3473,
            50892
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08123458257996209,
          "compression_ratio": 1.658008658008658,
          "no_speech_prob": 0.008637702092528343,
          "confidence": 0.9913622979074717
        },
        {
          "id": 94,
          "start": 553.4399999999999,
          "end": 558.48,
          "text": "and I believe I need a dash here at the beginning as well. So if I save that and run it we can see",
          "tokens": [
            50892,
            293,
            286,
            1697,
            286,
            643,
            257,
            8240,
            510,
            412,
            264,
            2863,
            382,
            731,
            13,
            407,
            498,
            286,
            3155,
            300,
            293,
            1190,
            309,
            321,
            393,
            536,
            51144
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08123458257996209,
          "compression_ratio": 1.658008658008658,
          "no_speech_prob": 0.008637702092528343,
          "confidence": 0.9913622979074717
        }
      ],
      "duration": 29.08000000000004
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 553.48,
      "end_time": 581.1999999999999,
      "text": "and I believe I need a dash here at the beginning as well. So if I save that and run it we can see that when we appended that directory to our sys.path that we were now able to import that module and run our code. But this isn't the best looking approach because we're appending this directory before our other imports and also if we were to import our module and we had this manually hard coded in multiple locations then we'd have to change all of those. So instead we can make this",
      "original_segments": [
        {
          "id": 95,
          "start": 558.48,
          "end": 564.16,
          "text": "that when we appended that directory to our sys.path that we were now able to import that module",
          "tokens": [
            51144,
            300,
            562,
            321,
            724,
            3502,
            300,
            21120,
            281,
            527,
            262,
            749,
            13,
            31852,
            300,
            321,
            645,
            586,
            1075,
            281,
            974,
            300,
            10088,
            51428
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08123458257996209,
          "compression_ratio": 1.658008658008658,
          "no_speech_prob": 0.008637702092528343,
          "confidence": 0.9913622979074717
        },
        {
          "id": 96,
          "start": 564.16,
          "end": 569.92,
          "text": "and run our code. But this isn't the best looking approach because we're appending this directory",
          "tokens": [
            51428,
            293,
            1190,
            527,
            3089,
            13,
            583,
            341,
            1943,
            380,
            264,
            1151,
            1237,
            3109,
            570,
            321,
            434,
            724,
            2029,
            341,
            21120,
            51716
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08123458257996209,
          "compression_ratio": 1.658008658008658,
          "no_speech_prob": 0.008637702092528343,
          "confidence": 0.9913622979074717
        },
        {
          "id": 97,
          "start": 569.92,
          "end": 575.8399999999999,
          "text": "before our other imports and also if we were to import our module and we had this manually hard",
          "tokens": [
            50364,
            949,
            527,
            661,
            41596,
            293,
            611,
            498,
            321,
            645,
            281,
            974,
            527,
            10088,
            293,
            321,
            632,
            341,
            16945,
            1152,
            50660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04224712952323582,
          "compression_ratio": 1.8282442748091603,
          "no_speech_prob": 0.2629826068878174,
          "confidence": 0.7370173931121826
        },
        {
          "id": 98,
          "start": 575.8399999999999,
          "end": 581.1999999999999,
          "text": "coded in multiple locations then we'd have to change all of those. So instead we can make this",
          "tokens": [
            50660,
            34874,
            294,
            3866,
            9253,
            550,
            321,
            1116,
            362,
            281,
            1319,
            439,
            295,
            729,
            13,
            407,
            2602,
            321,
            393,
            652,
            341,
            50928
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04224712952323582,
          "compression_ratio": 1.8282442748091603,
          "no_speech_prob": 0.2629826068878174,
          "confidence": 0.7370173931121826
        }
      ],
      "duration": 27.719999999999914
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 576.1999999999999,
      "end_time": 602.64,
      "text": "coded in multiple locations then we'd have to change all of those. So instead we can make this change in the next place sys.path looks and if we remember that is the python path environment variable. Now changing the environment variables is different on mac and windows so we'll show how to do this on both really quick. So first we'll see how to do this on a mac and to do this I'm going to pull up my terminal and we can set environment variables by adding them to the",
      "original_segments": [
        {
          "id": 99,
          "start": 581.1999999999999,
          "end": 587.76,
          "text": "change in the next place sys.path looks and if we remember that is the python path environment",
          "tokens": [
            50928,
            1319,
            294,
            264,
            958,
            1081,
            262,
            749,
            13,
            31852,
            1542,
            293,
            498,
            321,
            1604,
            300,
            307,
            264,
            38797,
            3100,
            2823,
            51256
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04224712952323582,
          "compression_ratio": 1.8282442748091603,
          "no_speech_prob": 0.2629826068878174,
          "confidence": 0.7370173931121826
        },
        {
          "id": 100,
          "start": 587.76,
          "end": 592.64,
          "text": "variable. Now changing the environment variables is different on mac and windows so we'll show how",
          "tokens": [
            51256,
            7006,
            13,
            823,
            4473,
            264,
            2823,
            9102,
            307,
            819,
            322,
            7912,
            293,
            9309,
            370,
            321,
            603,
            855,
            577,
            51500
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04224712952323582,
          "compression_ratio": 1.8282442748091603,
          "no_speech_prob": 0.2629826068878174,
          "confidence": 0.7370173931121826
        },
        {
          "id": 101,
          "start": 592.64,
          "end": 598.0799999999999,
          "text": "to do this on both really quick. So first we'll see how to do this on a mac and to do this I'm",
          "tokens": [
            51500,
            281,
            360,
            341,
            322,
            1293,
            534,
            1702,
            13,
            407,
            700,
            321,
            603,
            536,
            577,
            281,
            360,
            341,
            322,
            257,
            7912,
            293,
            281,
            360,
            341,
            286,
            478,
            51772
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04224712952323582,
          "compression_ratio": 1.8282442748091603,
          "no_speech_prob": 0.2629826068878174,
          "confidence": 0.7370173931121826
        },
        {
          "id": 102,
          "start": 598.08,
          "end": 602.64,
          "text": "going to pull up my terminal and we can set environment variables by adding them to the",
          "tokens": [
            50364,
            516,
            281,
            2235,
            493,
            452,
            14709,
            293,
            321,
            393,
            992,
            2823,
            9102,
            538,
            5127,
            552,
            281,
            264,
            50592
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0651010477317954,
          "compression_ratio": 1.832,
          "no_speech_prob": 0.009009641595184803,
          "confidence": 0.9909903584048152
        }
      ],
      "duration": 26.440000000000055
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 597.64,
      "end_time": 624.48,
      "text": "to do this on both really quick. So first we'll see how to do this on a mac and to do this I'm going to pull up my terminal and we can set environment variables by adding them to the dot bash underscore profile file in our home directory and you can edit this file with any text editor but I'm going to use the one built into the terminal here called nano since nano is easy for anyone to use. So we're going to say nano and then a tilde dash just makes sure that we're working within our home directory then we'll say dot bash underscore profile. Now I",
      "original_segments": [
        {
          "id": 103,
          "start": 602.64,
          "end": 608.48,
          "text": "dot bash underscore profile file in our home directory and you can edit this file with any",
          "tokens": [
            50592,
            5893,
            46183,
            37556,
            7964,
            3991,
            294,
            527,
            1280,
            21120,
            293,
            291,
            393,
            8129,
            341,
            3991,
            365,
            604,
            50884
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0651010477317954,
          "compression_ratio": 1.832,
          "no_speech_prob": 0.009009641595184803,
          "confidence": 0.9909903584048152
        },
        {
          "id": 104,
          "start": 608.48,
          "end": 613.2800000000001,
          "text": "text editor but I'm going to use the one built into the terminal here called nano since nano is",
          "tokens": [
            50884,
            2487,
            9839,
            457,
            286,
            478,
            516,
            281,
            764,
            264,
            472,
            3094,
            666,
            264,
            14709,
            510,
            1219,
            30129,
            1670,
            30129,
            307,
            51124
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0651010477317954,
          "compression_ratio": 1.832,
          "no_speech_prob": 0.009009641595184803,
          "confidence": 0.9909903584048152
        },
        {
          "id": 105,
          "start": 613.2800000000001,
          "end": 618.88,
          "text": "easy for anyone to use. So we're going to say nano and then a tilde dash just makes sure that",
          "tokens": [
            51124,
            1858,
            337,
            2878,
            281,
            764,
            13,
            407,
            321,
            434,
            516,
            281,
            584,
            30129,
            293,
            550,
            257,
            45046,
            8240,
            445,
            1669,
            988,
            300,
            51404
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0651010477317954,
          "compression_ratio": 1.832,
          "no_speech_prob": 0.009009641595184803,
          "confidence": 0.9909903584048152
        },
        {
          "id": 106,
          "start": 618.88,
          "end": 624.48,
          "text": "we're working within our home directory then we'll say dot bash underscore profile. Now I",
          "tokens": [
            51404,
            321,
            434,
            1364,
            1951,
            527,
            1280,
            21120,
            550,
            321,
            603,
            584,
            5893,
            46183,
            37556,
            7964,
            13,
            823,
            286,
            51684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0651010477317954,
          "compression_ratio": 1.832,
          "no_speech_prob": 0.009009641595184803,
          "confidence": 0.9909903584048152
        }
      ],
      "duration": 26.840000000000032
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 619.48,
      "end_time": 646.88,
      "text": "we're working within our home directory then we'll say dot bash underscore profile. Now I might have more stuff in this file than you do these are just personal preferences and customizations but I'm going to scroll down here to the end of the file and set my python path but you can set this anywhere in this file that you'd like. So we're going to set this by saying export python path all uppercase and then equals and now we want to set that location so I'm just going",
      "original_segments": [
        {
          "id": 107,
          "start": 624.48,
          "end": 628.32,
          "text": "might have more stuff in this file than you do these are just personal preferences and",
          "tokens": [
            50364,
            1062,
            362,
            544,
            1507,
            294,
            341,
            3991,
            813,
            291,
            360,
            613,
            366,
            445,
            2973,
            21910,
            293,
            50556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.032777671228375355,
          "compression_ratio": 1.858267716535433,
          "no_speech_prob": 0.013592906296253204,
          "confidence": 0.9864070937037468
        },
        {
          "id": 108,
          "start": 628.32,
          "end": 633.9200000000001,
          "text": "customizations but I'm going to scroll down here to the end of the file and set my python path but",
          "tokens": [
            50556,
            2375,
            14455,
            457,
            286,
            478,
            516,
            281,
            11369,
            760,
            510,
            281,
            264,
            917,
            295,
            264,
            3991,
            293,
            992,
            452,
            38797,
            3100,
            457,
            50836
          ],
          "temperature": 0.0,
          "avg_logprob": -0.032777671228375355,
          "compression_ratio": 1.858267716535433,
          "no_speech_prob": 0.013592906296253204,
          "confidence": 0.9864070937037468
        },
        {
          "id": 109,
          "start": 633.9200000000001,
          "end": 639.36,
          "text": "you can set this anywhere in this file that you'd like. So we're going to set this by saying export",
          "tokens": [
            50836,
            291,
            393,
            992,
            341,
            4992,
            294,
            341,
            3991,
            300,
            291,
            1116,
            411,
            13,
            407,
            321,
            434,
            516,
            281,
            992,
            341,
            538,
            1566,
            10725,
            51108
          ],
          "temperature": 0.0,
          "avg_logprob": -0.032777671228375355,
          "compression_ratio": 1.858267716535433,
          "no_speech_prob": 0.013592906296253204,
          "confidence": 0.9864070937037468
        },
        {
          "id": 110,
          "start": 639.36,
          "end": 646.88,
          "text": "python path all uppercase and then equals and now we want to set that location so I'm just going",
          "tokens": [
            51108,
            38797,
            3100,
            439,
            11775,
            2869,
            651,
            293,
            550,
            6915,
            293,
            586,
            321,
            528,
            281,
            992,
            300,
            4914,
            370,
            286,
            478,
            445,
            516,
            51484
          ],
          "temperature": 0.0,
          "avg_logprob": -0.032777671228375355,
          "compression_ratio": 1.858267716535433,
          "no_speech_prob": 0.013592906296253204,
          "confidence": 0.9864070937037468
        }
      ],
      "duration": 27.399999999999977
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 641.88,
      "end_time": 665.92,
      "text": "python path all uppercase and then equals and now we want to set that location so I'm just going to come over here and grab that location and paste that in those quotes and we want it to look just like that no space in between the equals and the path so to save that we can just hit control x and then y to save and then enter to keep the same file name and now we can either",
      "original_segments": [
        {
          "id": 111,
          "start": 646.88,
          "end": 653.36,
          "text": "to come over here and grab that location and paste that in those quotes and we want it to",
          "tokens": [
            51484,
            281,
            808,
            670,
            510,
            293,
            4444,
            300,
            4914,
            293,
            9163,
            300,
            294,
            729,
            19963,
            293,
            321,
            528,
            309,
            281,
            51808
          ],
          "temperature": 0.0,
          "avg_logprob": -0.032777671228375355,
          "compression_ratio": 1.858267716535433,
          "no_speech_prob": 0.013592906296253204,
          "confidence": 0.9864070937037468
        },
        {
          "id": 112,
          "start": 653.36,
          "end": 659.44,
          "text": "look just like that no space in between the equals and the path so to save that we can just hit",
          "tokens": [
            50364,
            574,
            445,
            411,
            300,
            572,
            1901,
            294,
            1296,
            264,
            6915,
            293,
            264,
            3100,
            370,
            281,
            3155,
            300,
            321,
            393,
            445,
            2045,
            50668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05007654620755103,
          "compression_ratio": 1.8454106280193237,
          "no_speech_prob": 0.0039534131065011024,
          "confidence": 0.9960465868934989
        },
        {
          "id": 113,
          "start": 659.44,
          "end": 665.92,
          "text": "control x and then y to save and then enter to keep the same file name and now we can either",
          "tokens": [
            50668,
            1969,
            2031,
            293,
            550,
            288,
            281,
            3155,
            293,
            550,
            3242,
            281,
            1066,
            264,
            912,
            3991,
            1315,
            293,
            586,
            321,
            393,
            2139,
            50992
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05007654620755103,
          "compression_ratio": 1.8454106280193237,
          "no_speech_prob": 0.0039534131065011024,
          "confidence": 0.9960465868934989
        }
      ],
      "duration": 24.039999999999964
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 660.92,
      "end_time": 685.12,
      "text": "control x and then y to save and then enter to keep the same file name and now we can either restart our terminal or run a source command on that file but I'll just restart the terminal here and pull this up and now if we run python then let's see if we can import that module so import my module and we can see that that worked and the reason that that worked is because if we import",
      "original_segments": [
        {
          "id": 114,
          "start": 665.92,
          "end": 672.16,
          "text": "restart our terminal or run a source command on that file but I'll just restart the terminal here",
          "tokens": [
            50992,
            21022,
            527,
            14709,
            420,
            1190,
            257,
            4009,
            5622,
            322,
            300,
            3991,
            457,
            286,
            603,
            445,
            21022,
            264,
            14709,
            510,
            51304
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05007654620755103,
          "compression_ratio": 1.8454106280193237,
          "no_speech_prob": 0.0039534131065011024,
          "confidence": 0.9960465868934989
        },
        {
          "id": 115,
          "start": 672.16,
          "end": 679.36,
          "text": "and pull this up and now if we run python then let's see if we can import that module so import",
          "tokens": [
            51304,
            293,
            2235,
            341,
            493,
            293,
            586,
            498,
            321,
            1190,
            38797,
            550,
            718,
            311,
            536,
            498,
            321,
            393,
            974,
            300,
            10088,
            370,
            974,
            51664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05007654620755103,
          "compression_ratio": 1.8454106280193237,
          "no_speech_prob": 0.0039534131065011024,
          "confidence": 0.9960465868934989
        },
        {
          "id": 116,
          "start": 679.44,
          "end": 685.12,
          "text": "my module and we can see that that worked and the reason that that worked is because if we import",
          "tokens": [
            50368,
            452,
            10088,
            293,
            321,
            393,
            536,
            300,
            300,
            2732,
            293,
            264,
            1778,
            300,
            300,
            2732,
            307,
            570,
            498,
            321,
            974,
            50652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05453606588499887,
          "compression_ratio": 2.259259259259259,
          "no_speech_prob": 0.2311617136001587,
          "confidence": 0.7688382863998413
        }
      ],
      "duration": 24.200000000000045
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 680.12,
      "end_time": 707.6800000000001,
      "text": "my module and we can see that that worked and the reason that that worked is because if we import sys and look at our sys.path then we can see that after our current directory that we have the directory that was added there and the reason that it's added is because we added it to our python path environment variable so now let's take a look at how to set this environment variable on windows now to set this environment variable on windows we can click on our start button here and then",
      "original_segments": [
        {
          "id": 117,
          "start": 685.12,
          "end": 692.24,
          "text": "sys and look at our sys.path then we can see that after our current directory that we have the",
          "tokens": [
            50652,
            262,
            749,
            293,
            574,
            412,
            527,
            262,
            749,
            13,
            31852,
            550,
            321,
            393,
            536,
            300,
            934,
            527,
            2190,
            21120,
            300,
            321,
            362,
            264,
            51008
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05453606588499887,
          "compression_ratio": 2.259259259259259,
          "no_speech_prob": 0.2311617136001587,
          "confidence": 0.7688382863998413
        },
        {
          "id": 118,
          "start": 692.24,
          "end": 697.2,
          "text": "directory that was added there and the reason that it's added is because we added it to our python",
          "tokens": [
            51008,
            21120,
            300,
            390,
            3869,
            456,
            293,
            264,
            1778,
            300,
            309,
            311,
            3869,
            307,
            570,
            321,
            3869,
            309,
            281,
            527,
            38797,
            51256
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05453606588499887,
          "compression_ratio": 2.259259259259259,
          "no_speech_prob": 0.2311617136001587,
          "confidence": 0.7688382863998413
        },
        {
          "id": 119,
          "start": 697.2,
          "end": 702.16,
          "text": "path environment variable so now let's take a look at how to set this environment variable on windows",
          "tokens": [
            51256,
            3100,
            2823,
            7006,
            370,
            586,
            718,
            311,
            747,
            257,
            574,
            412,
            577,
            281,
            992,
            341,
            2823,
            7006,
            322,
            9309,
            51504
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05453606588499887,
          "compression_ratio": 2.259259259259259,
          "no_speech_prob": 0.2311617136001587,
          "confidence": 0.7688382863998413
        },
        {
          "id": 120,
          "start": 703.36,
          "end": 707.6800000000001,
          "text": "now to set this environment variable on windows we can click on our start button here and then",
          "tokens": [
            51564,
            586,
            281,
            992,
            341,
            2823,
            7006,
            322,
            9309,
            321,
            393,
            2052,
            322,
            527,
            722,
            2960,
            510,
            293,
            550,
            51780
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05453606588499887,
          "compression_ratio": 2.259259259259259,
          "no_speech_prob": 0.2311617136001587,
          "confidence": 0.7688382863998413
        }
      ],
      "duration": 27.56000000000006
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 702.6800000000001,
      "end_time": 726.64,
      "text": "now to set this environment variable on windows we can click on our start button here and then right click on computer and go to properties and from properties we want to go to advanced system settings and from here at the very bottom we can click on environment variables and now we can create a new environment variable so we'll click new and we'll name this python path all",
      "original_segments": [
        {
          "id": 121,
          "start": 707.68,
          "end": 713.5999999999999,
          "text": "right click on computer and go to properties and from properties we want to go to advanced",
          "tokens": [
            50364,
            558,
            2052,
            322,
            3820,
            293,
            352,
            281,
            7221,
            293,
            490,
            7221,
            321,
            528,
            281,
            352,
            281,
            7339,
            50660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03760338925767219,
          "compression_ratio": 1.8571428571428572,
          "no_speech_prob": 0.0011640957091003656,
          "confidence": 0.9988359042908996
        },
        {
          "id": 122,
          "start": 713.5999999999999,
          "end": 719.68,
          "text": "system settings and from here at the very bottom we can click on environment variables and now we",
          "tokens": [
            50660,
            1185,
            6257,
            293,
            490,
            510,
            412,
            264,
            588,
            2767,
            321,
            393,
            2052,
            322,
            2823,
            9102,
            293,
            586,
            321,
            50964
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03760338925767219,
          "compression_ratio": 1.8571428571428572,
          "no_speech_prob": 0.0011640957091003656,
          "confidence": 0.9988359042908996
        },
        {
          "id": 123,
          "start": 719.68,
          "end": 726.64,
          "text": "can create a new environment variable so we'll click new and we'll name this python path all",
          "tokens": [
            50964,
            393,
            1884,
            257,
            777,
            2823,
            7006,
            370,
            321,
            603,
            2052,
            777,
            293,
            321,
            603,
            1315,
            341,
            38797,
            3100,
            439,
            51312
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03760338925767219,
          "compression_ratio": 1.8571428571428572,
          "no_speech_prob": 0.0011640957091003656,
          "confidence": 0.9988359042908996
        }
      ],
      "duration": 23.959999999999923
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 721.64,
      "end_time": 747.68,
      "text": "can create a new environment variable so we'll click new and we'll name this python path all uppercase there and then for the location that's going to be c we're going to go to the desktop again so again this is specific to my desktop but it may be a little bit different on yours so query ms slash desktop and then the name of that directory is my dash modules and again this",
      "original_segments": [
        {
          "id": 124,
          "start": 726.64,
          "end": 733.28,
          "text": "uppercase there and then for the location that's going to be c we're going to go to the desktop",
          "tokens": [
            51312,
            11775,
            2869,
            651,
            456,
            293,
            550,
            337,
            264,
            4914,
            300,
            311,
            516,
            281,
            312,
            269,
            321,
            434,
            516,
            281,
            352,
            281,
            264,
            14502,
            51644
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03760338925767219,
          "compression_ratio": 1.8571428571428572,
          "no_speech_prob": 0.0011640957091003656,
          "confidence": 0.9988359042908996
        },
        {
          "id": 125,
          "start": 733.28,
          "end": 739.8399999999999,
          "text": "again so again this is specific to my desktop but it may be a little bit different on yours",
          "tokens": [
            50364,
            797,
            370,
            797,
            341,
            307,
            2685,
            281,
            452,
            14502,
            457,
            309,
            815,
            312,
            257,
            707,
            857,
            819,
            322,
            6342,
            50692
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04660051283629044,
          "compression_ratio": 1.7168949771689497,
          "no_speech_prob": 0.06364090740680695,
          "confidence": 0.936359092593193
        },
        {
          "id": 126,
          "start": 739.8399999999999,
          "end": 747.68,
          "text": "so query ms slash desktop and then the name of that directory is my dash modules and again this",
          "tokens": [
            50692,
            370,
            14581,
            275,
            82,
            17330,
            14502,
            293,
            550,
            264,
            1315,
            295,
            300,
            21120,
            307,
            452,
            8240,
            16679,
            293,
            797,
            341,
            51084
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04660051283629044,
          "compression_ratio": 1.7168949771689497,
          "no_speech_prob": 0.06364090740680695,
          "confidence": 0.936359092593193
        }
      ],
      "duration": 26.039999999999964
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 742.68,
      "end_time": 771.92,
      "text": "so query ms slash desktop and then the name of that directory is my dash modules and again this python path is going to be unique to your own machine so let's hit okay there and okay to save those and exit out of that and now if we open up our command prompt by going to start run cmd and then typing in python now we should be able to import that module just by saying import my module and if we run that and we can see that it imported that module successfully now the",
      "original_segments": [
        {
          "id": 127,
          "start": 747.68,
          "end": 753.8399999999999,
          "text": "python path is going to be unique to your own machine so let's hit okay there and okay to save",
          "tokens": [
            51084,
            38797,
            3100,
            307,
            516,
            281,
            312,
            3845,
            281,
            428,
            1065,
            3479,
            370,
            718,
            311,
            2045,
            1392,
            456,
            293,
            1392,
            281,
            3155,
            51392
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04660051283629044,
          "compression_ratio": 1.7168949771689497,
          "no_speech_prob": 0.06364090740680695,
          "confidence": 0.936359092593193
        },
        {
          "id": 128,
          "start": 753.8399999999999,
          "end": 760.88,
          "text": "those and exit out of that and now if we open up our command prompt by going to start run cmd",
          "tokens": [
            51392,
            729,
            293,
            11043,
            484,
            295,
            300,
            293,
            586,
            498,
            321,
            1269,
            493,
            527,
            5622,
            12391,
            538,
            516,
            281,
            722,
            1190,
            14668,
            67,
            51744
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04660051283629044,
          "compression_ratio": 1.7168949771689497,
          "no_speech_prob": 0.06364090740680695,
          "confidence": 0.936359092593193
        },
        {
          "id": 129,
          "start": 760.88,
          "end": 766.48,
          "text": "and then typing in python now we should be able to import that module just by saying import",
          "tokens": [
            50364,
            293,
            550,
            18444,
            294,
            38797,
            586,
            321,
            820,
            312,
            1075,
            281,
            974,
            300,
            10088,
            445,
            538,
            1566,
            974,
            50644
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051126598218165405,
          "compression_ratio": 1.941908713692946,
          "no_speech_prob": 0.0030364254489541054,
          "confidence": 0.9969635745510459
        },
        {
          "id": 130,
          "start": 766.48,
          "end": 771.92,
          "text": "my module and if we run that and we can see that it imported that module successfully now the",
          "tokens": [
            50644,
            452,
            10088,
            293,
            498,
            321,
            1190,
            300,
            293,
            321,
            393,
            536,
            300,
            309,
            25524,
            300,
            10088,
            10727,
            586,
            264,
            50916
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051126598218165405,
          "compression_ratio": 1.941908713692946,
          "no_speech_prob": 0.0030364254489541054,
          "confidence": 0.9969635745510459
        }
      ],
      "duration": 29.24000000000001
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 766.92,
      "end_time": 795.76,
      "text": "my module and if we run that and we can see that it imported that module successfully now the reason that worked is because if we import sys and look at our sys dot path and after our current directory you can see that our directory that we added to our python path is the second one that it looks at here so that is how we add that environment variable on windows so now i'll switch back to my native os now i do want to point out that if you're using an editor like",
      "original_segments": [
        {
          "id": 131,
          "start": 771.92,
          "end": 779.36,
          "text": "reason that worked is because if we import sys and look at our sys dot path and after our current",
          "tokens": [
            50916,
            1778,
            300,
            2732,
            307,
            570,
            498,
            321,
            974,
            262,
            749,
            293,
            574,
            412,
            527,
            262,
            749,
            5893,
            3100,
            293,
            934,
            527,
            2190,
            51288
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051126598218165405,
          "compression_ratio": 1.941908713692946,
          "no_speech_prob": 0.0030364254489541054,
          "confidence": 0.9969635745510459
        },
        {
          "id": 132,
          "start": 779.36,
          "end": 785.28,
          "text": "directory you can see that our directory that we added to our python path is the second one that",
          "tokens": [
            51288,
            21120,
            291,
            393,
            536,
            300,
            527,
            21120,
            300,
            321,
            3869,
            281,
            527,
            38797,
            3100,
            307,
            264,
            1150,
            472,
            300,
            51584
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051126598218165405,
          "compression_ratio": 1.941908713692946,
          "no_speech_prob": 0.0030364254489541054,
          "confidence": 0.9969635745510459
        },
        {
          "id": 133,
          "start": 785.28,
          "end": 789.92,
          "text": "it looks at here so that is how we add that environment variable on windows so now i'll",
          "tokens": [
            51584,
            309,
            1542,
            412,
            510,
            370,
            300,
            307,
            577,
            321,
            909,
            300,
            2823,
            7006,
            322,
            9309,
            370,
            586,
            741,
            603,
            51816
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051126598218165405,
          "compression_ratio": 1.941908713692946,
          "no_speech_prob": 0.0030364254489541054,
          "confidence": 0.9969635745510459
        },
        {
          "id": 134,
          "start": 789.92,
          "end": 795.76,
          "text": "switch back to my native os now i do want to point out that if you're using an editor like",
          "tokens": [
            50364,
            3679,
            646,
            281,
            452,
            8470,
            3003,
            586,
            741,
            360,
            528,
            281,
            935,
            484,
            300,
            498,
            291,
            434,
            1228,
            364,
            9839,
            411,
            50656
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03700337960169865,
          "compression_ratio": 1.7323420074349443,
          "no_speech_prob": 0.0005396577762439847,
          "confidence": 0.999460342223756
        }
      ],
      "duration": 28.840000000000032
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 790.76,
      "end_time": 816.4,
      "text": "switch back to my native os now i do want to point out that if you're using an editor like sublime text or eclipse or pie charm then these may need to have their environment variables set in a different way and that's different for every program so instead of going through each individual one and showing how you can likely find out how to do that just by searching for your editor plus python path and there should be plenty of resources showing you how to do that",
      "original_segments": [
        {
          "id": 135,
          "start": 795.76,
          "end": 801.4399999999999,
          "text": "sublime text or eclipse or pie charm then these may need to have their environment variables",
          "tokens": [
            50656,
            1422,
            40941,
            2487,
            420,
            35722,
            420,
            1730,
            18904,
            550,
            613,
            815,
            643,
            281,
            362,
            641,
            2823,
            9102,
            50940
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03700337960169865,
          "compression_ratio": 1.7323420074349443,
          "no_speech_prob": 0.0005396577762439847,
          "confidence": 0.999460342223756
        },
        {
          "id": 136,
          "start": 801.4399999999999,
          "end": 806.0799999999999,
          "text": "set in a different way and that's different for every program so instead of going through each",
          "tokens": [
            50940,
            992,
            294,
            257,
            819,
            636,
            293,
            300,
            311,
            819,
            337,
            633,
            1461,
            370,
            2602,
            295,
            516,
            807,
            1184,
            51172
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03700337960169865,
          "compression_ratio": 1.7323420074349443,
          "no_speech_prob": 0.0005396577762439847,
          "confidence": 0.999460342223756
        },
        {
          "id": 137,
          "start": 806.0799999999999,
          "end": 811.12,
          "text": "individual one and showing how you can likely find out how to do that just by searching for",
          "tokens": [
            51172,
            2609,
            472,
            293,
            4099,
            577,
            291,
            393,
            3700,
            915,
            484,
            577,
            281,
            360,
            300,
            445,
            538,
            10808,
            337,
            51424
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03700337960169865,
          "compression_ratio": 1.7323420074349443,
          "no_speech_prob": 0.0005396577762439847,
          "confidence": 0.999460342223756
        },
        {
          "id": 138,
          "start": 811.12,
          "end": 816.4,
          "text": "your editor plus python path and there should be plenty of resources showing you how to do that",
          "tokens": [
            51424,
            428,
            9839,
            1804,
            38797,
            3100,
            293,
            456,
            820,
            312,
            7140,
            295,
            3593,
            4099,
            291,
            577,
            281,
            360,
            300,
            51688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03700337960169865,
          "compression_ratio": 1.7323420074349443,
          "no_speech_prob": 0.0005396577762439847,
          "confidence": 0.999460342223756
        }
      ],
      "duration": 25.639999999999986
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 811.4,
      "end_time": 838.16,
      "text": "your editor plus python path and there should be plenty of resources showing you how to do that okay so going back to this sys dot path now after the directories in the python path environment variable that we just looked at after that sys dot path looks at the standard library directories now this is what allows us to import modules directly from the standard library so when something is part of the standard library it means that we're able to use it without installing",
      "original_segments": [
        {
          "id": 139,
          "start": 816.4,
          "end": 822.4,
          "text": "okay so going back to this sys dot path now after the directories in the python path environment",
          "tokens": [
            50364,
            1392,
            370,
            516,
            646,
            281,
            341,
            262,
            749,
            5893,
            3100,
            586,
            934,
            264,
            5391,
            530,
            294,
            264,
            38797,
            3100,
            2823,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03452507257461548,
          "compression_ratio": 1.966804979253112,
          "no_speech_prob": 0.0005937133100815117,
          "confidence": 0.9994062866899185
        },
        {
          "id": 140,
          "start": 822.4,
          "end": 828.64,
          "text": "variable that we just looked at after that sys dot path looks at the standard library directories",
          "tokens": [
            50664,
            7006,
            300,
            321,
            445,
            2956,
            412,
            934,
            300,
            262,
            749,
            5893,
            3100,
            1542,
            412,
            264,
            3832,
            6405,
            5391,
            530,
            50976
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03452507257461548,
          "compression_ratio": 1.966804979253112,
          "no_speech_prob": 0.0005937133100815117,
          "confidence": 0.9994062866899185
        },
        {
          "id": 141,
          "start": 828.64,
          "end": 833.76,
          "text": "now this is what allows us to import modules directly from the standard library so when",
          "tokens": [
            50976,
            586,
            341,
            307,
            437,
            4045,
            505,
            281,
            974,
            16679,
            3838,
            490,
            264,
            3832,
            6405,
            370,
            562,
            51232
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03452507257461548,
          "compression_ratio": 1.966804979253112,
          "no_speech_prob": 0.0005937133100815117,
          "confidence": 0.9994062866899185
        },
        {
          "id": 142,
          "start": 833.76,
          "end": 838.16,
          "text": "something is part of the standard library it means that we're able to use it without installing",
          "tokens": [
            51232,
            746,
            307,
            644,
            295,
            264,
            3832,
            6405,
            309,
            1355,
            300,
            321,
            434,
            1075,
            281,
            764,
            309,
            1553,
            20762,
            51452
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03452507257461548,
          "compression_ratio": 1.966804979253112,
          "no_speech_prob": 0.0005937133100815117,
          "confidence": 0.9994062866899185
        }
      ],
      "duration": 26.75999999999999
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 833.16,
      "end_time": 861.36,
      "text": "now this is what allows us to import modules directly from the standard library so when something is part of the standard library it means that we're able to use it without installing anything separately so the standard library is incredibly useful because if you're performing a common task then most likely someone has already written the functionality and if we use it from the standard library then we can be sure that it's been written by some of the best programmers in the world and has been optimized to be as performant as possible now that's not to say that you shouldn't try to write your own versions of some of these things just to get some practice",
      "original_segments": [
        {
          "id": 143,
          "start": 838.16,
          "end": 843.1999999999999,
          "text": "anything separately so the standard library is incredibly useful because if you're performing a",
          "tokens": [
            51452,
            1340,
            14759,
            370,
            264,
            3832,
            6405,
            307,
            6252,
            4420,
            570,
            498,
            291,
            434,
            10205,
            257,
            51704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03452507257461548,
          "compression_ratio": 1.966804979253112,
          "no_speech_prob": 0.0005937133100815117,
          "confidence": 0.9994062866899185
        },
        {
          "id": 144,
          "start": 843.2,
          "end": 848.48,
          "text": "common task then most likely someone has already written the functionality and if we use it from",
          "tokens": [
            50364,
            2689,
            5633,
            550,
            881,
            3700,
            1580,
            575,
            1217,
            3720,
            264,
            14980,
            293,
            498,
            321,
            764,
            309,
            490,
            50628
          ],
          "temperature": 0.0,
          "avg_logprob": -0.024792767310327337,
          "compression_ratio": 1.8697068403908794,
          "no_speech_prob": 0.3095940053462982,
          "confidence": 0.6904059946537018
        },
        {
          "id": 145,
          "start": 848.48,
          "end": 852.72,
          "text": "the standard library then we can be sure that it's been written by some of the best programmers",
          "tokens": [
            50628,
            264,
            3832,
            6405,
            550,
            321,
            393,
            312,
            988,
            300,
            309,
            311,
            668,
            3720,
            538,
            512,
            295,
            264,
            1151,
            41504,
            50840
          ],
          "temperature": 0.0,
          "avg_logprob": -0.024792767310327337,
          "compression_ratio": 1.8697068403908794,
          "no_speech_prob": 0.3095940053462982,
          "confidence": 0.6904059946537018
        },
        {
          "id": 146,
          "start": 852.72,
          "end": 857.12,
          "text": "in the world and has been optimized to be as performant as possible now that's not to say",
          "tokens": [
            50840,
            294,
            264,
            1002,
            293,
            575,
            668,
            26941,
            281,
            312,
            382,
            2042,
            394,
            382,
            1944,
            586,
            300,
            311,
            406,
            281,
            584,
            51060
          ],
          "temperature": 0.0,
          "avg_logprob": -0.024792767310327337,
          "compression_ratio": 1.8697068403908794,
          "no_speech_prob": 0.3095940053462982,
          "confidence": 0.6904059946537018
        },
        {
          "id": 147,
          "start": 857.12,
          "end": 861.36,
          "text": "that you shouldn't try to write your own versions of some of these things just to get some practice",
          "tokens": [
            51060,
            300,
            291,
            4659,
            380,
            853,
            281,
            2464,
            428,
            1065,
            9606,
            295,
            512,
            295,
            613,
            721,
            445,
            281,
            483,
            512,
            3124,
            51272
          ],
          "temperature": 0.0,
          "avg_logprob": -0.024792767310327337,
          "compression_ratio": 1.8697068403908794,
          "no_speech_prob": 0.3095940053462982,
          "confidence": 0.6904059946537018
        }
      ],
      "duration": 28.200000000000045
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 856.36,
      "end_time": 883.3599999999999,
      "text": "in the world and has been optimized to be as performant as possible now that's not to say that you shouldn't try to write your own versions of some of these things just to get some practice but as far as using any of that functionality in production it's probably a good idea to use the tried and true standard library so for example let's say that we wanted to grab a random value from a list of values so you could probably write something to do this on your own but that functionality is already available to us when we use the random module from the standard library",
      "original_segments": [
        {
          "id": 148,
          "start": 861.36,
          "end": 866.96,
          "text": "but as far as using any of that functionality in production it's probably a good idea to use the",
          "tokens": [
            51272,
            457,
            382,
            1400,
            382,
            1228,
            604,
            295,
            300,
            14980,
            294,
            4265,
            309,
            311,
            1391,
            257,
            665,
            1558,
            281,
            764,
            264,
            51552
          ],
          "temperature": 0.0,
          "avg_logprob": -0.024792767310327337,
          "compression_ratio": 1.8697068403908794,
          "no_speech_prob": 0.3095940053462982,
          "confidence": 0.6904059946537018
        },
        {
          "id": 149,
          "start": 866.96,
          "end": 872.8000000000001,
          "text": "tried and true standard library so for example let's say that we wanted to grab a random value",
          "tokens": [
            51552,
            3031,
            293,
            2074,
            3832,
            6405,
            370,
            337,
            1365,
            718,
            311,
            584,
            300,
            321,
            1415,
            281,
            4444,
            257,
            4974,
            2158,
            51844
          ],
          "temperature": 0.0,
          "avg_logprob": -0.024792767310327337,
          "compression_ratio": 1.8697068403908794,
          "no_speech_prob": 0.3095940053462982,
          "confidence": 0.6904059946537018
        },
        {
          "id": 150,
          "start": 872.88,
          "end": 877.92,
          "text": "from a list of values so you could probably write something to do this on your own but that",
          "tokens": [
            50368,
            490,
            257,
            1329,
            295,
            4190,
            370,
            291,
            727,
            1391,
            2464,
            746,
            281,
            360,
            341,
            322,
            428,
            1065,
            457,
            300,
            50620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030081130423635808,
          "compression_ratio": 1.8274509803921568,
          "no_speech_prob": 0.00021695811301469803,
          "confidence": 0.9997830418869853
        },
        {
          "id": 151,
          "start": 877.92,
          "end": 883.3599999999999,
          "text": "functionality is already available to us when we use the random module from the standard library",
          "tokens": [
            50620,
            14980,
            307,
            1217,
            2435,
            281,
            505,
            562,
            321,
            764,
            264,
            4974,
            10088,
            490,
            264,
            3832,
            6405,
            50892
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030081130423635808,
          "compression_ratio": 1.8274509803921568,
          "no_speech_prob": 0.00021695811301469803,
          "confidence": 0.9997830418869853
        }
      ],
      "duration": 26.999999999999886
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 878.3599999999999,
      "end_time": 907.1999999999999,
      "text": "functionality is already available to us when we use the random module from the standard library so let's go ahead and take a look at this so i'll get rid of everything here just to clean up except for our courses list now this random module is just part of the standard library and we can just say import random and if we wanted to grab a random value from our courses list then we could just say random course is equal to random dot choice and then pass in our courses",
      "original_segments": [
        {
          "id": 152,
          "start": 883.3599999999999,
          "end": 888.16,
          "text": "so let's go ahead and take a look at this so i'll get rid of everything here just to clean up",
          "tokens": [
            50892,
            370,
            718,
            311,
            352,
            2286,
            293,
            747,
            257,
            574,
            412,
            341,
            370,
            741,
            603,
            483,
            3973,
            295,
            1203,
            510,
            445,
            281,
            2541,
            493,
            51132
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030081130423635808,
          "compression_ratio": 1.8274509803921568,
          "no_speech_prob": 0.00021695811301469803,
          "confidence": 0.9997830418869853
        },
        {
          "id": 153,
          "start": 888.16,
          "end": 893.12,
          "text": "except for our courses list now this random module is just part of the standard library",
          "tokens": [
            51132,
            3993,
            337,
            527,
            7712,
            1329,
            586,
            341,
            4974,
            10088,
            307,
            445,
            644,
            295,
            264,
            3832,
            6405,
            51380
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030081130423635808,
          "compression_ratio": 1.8274509803921568,
          "no_speech_prob": 0.00021695811301469803,
          "confidence": 0.9997830418869853
        },
        {
          "id": 154,
          "start": 893.12,
          "end": 898.8,
          "text": "and we can just say import random and if we wanted to grab a random value from our courses list",
          "tokens": [
            51380,
            293,
            321,
            393,
            445,
            584,
            974,
            4974,
            293,
            498,
            321,
            1415,
            281,
            4444,
            257,
            4974,
            2158,
            490,
            527,
            7712,
            1329,
            51664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030081130423635808,
          "compression_ratio": 1.8274509803921568,
          "no_speech_prob": 0.00021695811301469803,
          "confidence": 0.9997830418869853
        },
        {
          "id": 155,
          "start": 898.8,
          "end": 907.1999999999999,
          "text": "then we could just say random course is equal to random dot choice and then pass in our courses",
          "tokens": [
            50364,
            550,
            321,
            727,
            445,
            584,
            4974,
            1164,
            307,
            2681,
            281,
            4974,
            5893,
            3922,
            293,
            550,
            1320,
            294,
            527,
            7712,
            50784
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03563489999857035,
          "compression_ratio": 1.9504132231404958,
          "no_speech_prob": 0.1898627132177353,
          "confidence": 0.8101372867822647
        }
      ],
      "duration": 28.840000000000032
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 902.1999999999999,
      "end_time": 928.16,
      "text": "then we could just say random course is equal to random dot choice and then pass in our courses list so now if we print out that random course and run that then we can see it gave us a random value and if we run this multiple times then we can see that it gives us a random value just about every time we run through now i'm not going to go through all of the functionality in the standard library but i will create a future video to go over some of these modules in depth",
      "original_segments": [
        {
          "id": 156,
          "start": 907.1999999999999,
          "end": 914.24,
          "text": "list so now if we print out that random course and run that then we can see it gave us a random",
          "tokens": [
            50784,
            1329,
            370,
            586,
            498,
            321,
            4482,
            484,
            300,
            4974,
            1164,
            293,
            1190,
            300,
            550,
            321,
            393,
            536,
            309,
            2729,
            505,
            257,
            4974,
            51136
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03563489999857035,
          "compression_ratio": 1.9504132231404958,
          "no_speech_prob": 0.1898627132177353,
          "confidence": 0.8101372867822647
        },
        {
          "id": 157,
          "start": 914.24,
          "end": 919.12,
          "text": "value and if we run this multiple times then we can see that it gives us a random value just",
          "tokens": [
            51136,
            2158,
            293,
            498,
            321,
            1190,
            341,
            3866,
            1413,
            550,
            321,
            393,
            536,
            300,
            309,
            2709,
            505,
            257,
            4974,
            2158,
            445,
            51380
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03563489999857035,
          "compression_ratio": 1.9504132231404958,
          "no_speech_prob": 0.1898627132177353,
          "confidence": 0.8101372867822647
        },
        {
          "id": 158,
          "start": 919.12,
          "end": 923.04,
          "text": "about every time we run through now i'm not going to go through all of the functionality in the",
          "tokens": [
            51380,
            466,
            633,
            565,
            321,
            1190,
            807,
            586,
            741,
            478,
            406,
            516,
            281,
            352,
            807,
            439,
            295,
            264,
            14980,
            294,
            264,
            51576
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03563489999857035,
          "compression_ratio": 1.9504132231404958,
          "no_speech_prob": 0.1898627132177353,
          "confidence": 0.8101372867822647
        },
        {
          "id": 159,
          "start": 923.04,
          "end": 928.16,
          "text": "standard library but i will create a future video to go over some of these modules in depth",
          "tokens": [
            51576,
            3832,
            6405,
            457,
            741,
            486,
            1884,
            257,
            2027,
            960,
            281,
            352,
            670,
            512,
            295,
            613,
            16679,
            294,
            7161,
            51832
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03563489999857035,
          "compression_ratio": 1.9504132231404958,
          "no_speech_prob": 0.1898627132177353,
          "confidence": 0.8101372867822647
        }
      ],
      "duration": 25.960000000000036
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 923.16,
      "end_time": 944.8,
      "text": "standard library but i will create a future video to go over some of these modules in depth but right now i just want to give you an idea of what's available to us so here are a few more useful standard library modules so if we need to perform some common mathematical operations then we can import the math module and now we can do some mathematic calculations so if we needed to",
      "original_segments": [
        {
          "id": 160,
          "start": 928.16,
          "end": 933.1999999999999,
          "text": "but right now i just want to give you an idea of what's available to us so here are a few more",
          "tokens": [
            50364,
            457,
            558,
            586,
            741,
            445,
            528,
            281,
            976,
            291,
            364,
            1558,
            295,
            437,
            311,
            2435,
            281,
            505,
            370,
            510,
            366,
            257,
            1326,
            544,
            50616
          ],
          "temperature": 0.0,
          "avg_logprob": -0.035909199714660646,
          "compression_ratio": 1.7671232876712328,
          "no_speech_prob": 0.00041518453508615494,
          "confidence": 0.9995848154649138
        },
        {
          "id": 161,
          "start": 933.1999999999999,
          "end": 939.4399999999999,
          "text": "useful standard library modules so if we need to perform some common mathematical operations then",
          "tokens": [
            50616,
            4420,
            3832,
            6405,
            16679,
            370,
            498,
            321,
            643,
            281,
            2042,
            512,
            2689,
            18894,
            7705,
            550,
            50928
          ],
          "temperature": 0.0,
          "avg_logprob": -0.035909199714660646,
          "compression_ratio": 1.7671232876712328,
          "no_speech_prob": 0.00041518453508615494,
          "confidence": 0.9995848154649138
        },
        {
          "id": 162,
          "start": 939.4399999999999,
          "end": 944.8,
          "text": "we can import the math module and now we can do some mathematic calculations so if we needed to",
          "tokens": [
            50928,
            321,
            393,
            974,
            264,
            5221,
            10088,
            293,
            586,
            321,
            393,
            360,
            512,
            32811,
            20448,
            370,
            498,
            321,
            2978,
            281,
            51196
          ],
          "temperature": 0.0,
          "avg_logprob": -0.035909199714660646,
          "compression_ratio": 1.7671232876712328,
          "no_speech_prob": 0.00041518453508615494,
          "confidence": 0.9995848154649138
        }
      ],
      "duration": 21.639999999999986
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 939.8,
      "end_time": 965.52,
      "text": "we can import the math module and now we can do some mathematic calculations so if we needed to convert 90 degrees into radians then we could say rads is equal to math dot radians and pass in 90 and then if we print rads and run that and we can see that we get that conversion and if we wanted to get the sign of that value then we could pass those radians into the sign",
      "original_segments": [
        {
          "id": 163,
          "start": 944.8,
          "end": 953.52,
          "text": "convert 90 degrees into radians then we could say rads is equal to math dot radians and pass in 90",
          "tokens": [
            51196,
            7620,
            4289,
            5310,
            666,
            2843,
            2567,
            550,
            321,
            727,
            584,
            2843,
            82,
            307,
            2681,
            281,
            5221,
            5893,
            2843,
            2567,
            293,
            1320,
            294,
            4289,
            51632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.035909199714660646,
          "compression_ratio": 1.7671232876712328,
          "no_speech_prob": 0.00041518453508615494,
          "confidence": 0.9995848154649138
        },
        {
          "id": 164,
          "start": 953.52,
          "end": 959.76,
          "text": "and then if we print rads and run that and we can see that we get that conversion",
          "tokens": [
            50364,
            293,
            550,
            498,
            321,
            4482,
            2843,
            82,
            293,
            1190,
            300,
            293,
            321,
            393,
            536,
            300,
            321,
            483,
            300,
            14298,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051098881187019767,
          "compression_ratio": 1.946524064171123,
          "no_speech_prob": 0.007268896792083979,
          "confidence": 0.992731103207916
        },
        {
          "id": 165,
          "start": 959.76,
          "end": 965.52,
          "text": "and if we wanted to get the sign of that value then we could pass those radians into the sign",
          "tokens": [
            50676,
            293,
            498,
            321,
            1415,
            281,
            483,
            264,
            1465,
            295,
            300,
            2158,
            550,
            321,
            727,
            1320,
            729,
            2843,
            2567,
            666,
            264,
            1465,
            50964
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051098881187019767,
          "compression_ratio": 1.946524064171123,
          "no_speech_prob": 0.007268896792083979,
          "confidence": 0.992731103207916
        }
      ],
      "duration": 25.720000000000027
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 960.52,
      "end_time": 990.0799999999999,
      "text": "and if we wanted to get the sign of that value then we could pass those radians into the sign method so i can say math dot sign pass in those radians and if i run that then we can see that one is the sign of 90 degrees okay and another useful module from the standard library is the date time module now this allows us to work with dates and times and while we're at it let's also go ahead and import the calendar module now these have some similarities but they're also very",
      "original_segments": [
        {
          "id": 166,
          "start": 965.52,
          "end": 972.64,
          "text": "method so i can say math dot sign pass in those radians and if i run that then we can see that",
          "tokens": [
            50964,
            3170,
            370,
            741,
            393,
            584,
            5221,
            5893,
            1465,
            1320,
            294,
            729,
            2843,
            2567,
            293,
            498,
            741,
            1190,
            300,
            550,
            321,
            393,
            536,
            300,
            51320
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051098881187019767,
          "compression_ratio": 1.946524064171123,
          "no_speech_prob": 0.007268896792083979,
          "confidence": 0.992731103207916
        },
        {
          "id": 167,
          "start": 972.64,
          "end": 979.28,
          "text": "one is the sign of 90 degrees okay and another useful module from the standard library is the",
          "tokens": [
            51320,
            472,
            307,
            264,
            1465,
            295,
            4289,
            5310,
            1392,
            293,
            1071,
            4420,
            10088,
            490,
            264,
            3832,
            6405,
            307,
            264,
            51652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.051098881187019767,
          "compression_ratio": 1.946524064171123,
          "no_speech_prob": 0.007268896792083979,
          "confidence": 0.992731103207916
        },
        {
          "id": 168,
          "start": 979.28,
          "end": 984.72,
          "text": "date time module now this allows us to work with dates and times and while we're at it let's also",
          "tokens": [
            50364,
            4002,
            565,
            10088,
            586,
            341,
            4045,
            505,
            281,
            589,
            365,
            11691,
            293,
            1413,
            293,
            1339,
            321,
            434,
            412,
            309,
            718,
            311,
            611,
            50636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.047891992992824976,
          "compression_ratio": 1.7685185185185186,
          "no_speech_prob": 0.06980082392692566,
          "confidence": 0.9301991760730743
        },
        {
          "id": 169,
          "start": 984.72,
          "end": 990.0799999999999,
          "text": "go ahead and import the calendar module now these have some similarities but they're also very",
          "tokens": [
            50636,
            352,
            2286,
            293,
            974,
            264,
            12183,
            10088,
            586,
            613,
            362,
            512,
            24197,
            457,
            436,
            434,
            611,
            588,
            50904
          ],
          "temperature": 0.0,
          "avg_logprob": -0.047891992992824976,
          "compression_ratio": 1.7685185185185186,
          "no_speech_prob": 0.06980082392692566,
          "confidence": 0.9301991760730743
        }
      ],
      "duration": 29.559999999999945
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 985.0799999999999,
      "end_time": 1013.92,
      "text": "go ahead and import the calendar module now these have some similarities but they're also very different so for example if i wanted today's date then we could just say today is equal to date time dot date dot today and if we print this out and run that then we can see that that gives us today's date now with the calendar module we can ask for example is 2017 a leap year so i could",
      "original_segments": [
        {
          "id": 170,
          "start": 990.0799999999999,
          "end": 996.3199999999999,
          "text": "different so for example if i wanted today's date then we could just say today is equal to",
          "tokens": [
            50904,
            819,
            370,
            337,
            1365,
            498,
            741,
            1415,
            965,
            311,
            4002,
            550,
            321,
            727,
            445,
            584,
            965,
            307,
            2681,
            281,
            51216
          ],
          "temperature": 0.0,
          "avg_logprob": -0.047891992992824976,
          "compression_ratio": 1.7685185185185186,
          "no_speech_prob": 0.06980082392692566,
          "confidence": 0.9301991760730743
        },
        {
          "id": 171,
          "start": 996.3199999999999,
          "end": 1005.68,
          "text": "date time dot date dot today and if we print this out and run that then we can see that that gives",
          "tokens": [
            51216,
            4002,
            565,
            5893,
            4002,
            5893,
            965,
            293,
            498,
            321,
            4482,
            341,
            484,
            293,
            1190,
            300,
            550,
            321,
            393,
            536,
            300,
            300,
            2709,
            51684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.047891992992824976,
          "compression_ratio": 1.7685185185185186,
          "no_speech_prob": 0.06980082392692566,
          "confidence": 0.9301991760730743
        },
        {
          "id": 172,
          "start": 1005.68,
          "end": 1013.92,
          "text": "us today's date now with the calendar module we can ask for example is 2017 a leap year so i could",
          "tokens": [
            50364,
            505,
            965,
            311,
            4002,
            586,
            365,
            264,
            12183,
            10088,
            321,
            393,
            1029,
            337,
            1365,
            307,
            6591,
            257,
            19438,
            1064,
            370,
            741,
            727,
            50776
          ],
          "temperature": 0.0,
          "avg_logprob": -0.041618696848551434,
          "compression_ratio": 1.6857142857142857,
          "no_speech_prob": 0.20700542628765106,
          "confidence": 0.7929945737123489
        }
      ],
      "duration": 28.840000000000032
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1008.92,
      "end_time": 1036.4,
      "text": "us today's date now with the calendar module we can ask for example is 2017 a leap year so i could print out and say calendar dot is leap and pass in 2017 if i run that we can see that that's false but if i instead change that to 2020 and run that then you can see that that is true and the last standard library module that we'll look at for now is the os module so i will import os now this",
      "original_segments": [
        {
          "id": 173,
          "start": 1013.92,
          "end": 1022.88,
          "text": "print out and say calendar dot is leap and pass in 2017 if i run that we can see that that's false",
          "tokens": [
            50776,
            4482,
            484,
            293,
            584,
            12183,
            5893,
            307,
            19438,
            293,
            1320,
            294,
            6591,
            498,
            741,
            1190,
            300,
            321,
            393,
            536,
            300,
            300,
            311,
            7908,
            51224
          ],
          "temperature": 0.0,
          "avg_logprob": -0.041618696848551434,
          "compression_ratio": 1.6857142857142857,
          "no_speech_prob": 0.20700542628765106,
          "confidence": 0.7929945737123489
        },
        {
          "id": 174,
          "start": 1022.88,
          "end": 1028.72,
          "text": "but if i instead change that to 2020 and run that then you can see that that is true and the last",
          "tokens": [
            51224,
            457,
            498,
            741,
            2602,
            1319,
            300,
            281,
            4808,
            293,
            1190,
            300,
            550,
            291,
            393,
            536,
            300,
            300,
            307,
            2074,
            293,
            264,
            1036,
            51516
          ],
          "temperature": 0.0,
          "avg_logprob": -0.041618696848551434,
          "compression_ratio": 1.6857142857142857,
          "no_speech_prob": 0.20700542628765106,
          "confidence": 0.7929945737123489
        },
        {
          "id": 175,
          "start": 1028.72,
          "end": 1036.4,
          "text": "standard library module that we'll look at for now is the os module so i will import os now this",
          "tokens": [
            50364,
            3832,
            6405,
            10088,
            300,
            321,
            603,
            574,
            412,
            337,
            586,
            307,
            264,
            3003,
            10088,
            370,
            741,
            486,
            974,
            3003,
            586,
            341,
            50748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05344227458653825,
          "compression_ratio": 1.731818181818182,
          "no_speech_prob": 0.47454872727394104,
          "confidence": 0.525451272726059
        }
      ],
      "duration": 27.480000000000132
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1031.4,
      "end_time": 1059.92,
      "text": "standard library module that we'll look at for now is the os module so i will import os now this is going to give us access to the underlying operating system so for example if i wanted to see what directory we're currently in with this script then i could print out os dot get cwd which is current working directory so if we run that then we can see that it prints out the current working directory where this script is located now this os module has a ton of other functionality",
      "original_segments": [
        {
          "id": 176,
          "start": 1036.4,
          "end": 1041.28,
          "text": "is going to give us access to the underlying operating system so for example if i wanted to",
          "tokens": [
            50748,
            307,
            516,
            281,
            976,
            505,
            2105,
            281,
            264,
            14217,
            7447,
            1185,
            370,
            337,
            1365,
            498,
            741,
            1415,
            281,
            50992
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05344227458653825,
          "compression_ratio": 1.731818181818182,
          "no_speech_prob": 0.47454872727394104,
          "confidence": 0.525451272726059
        },
        {
          "id": 177,
          "start": 1041.28,
          "end": 1048.88,
          "text": "see what directory we're currently in with this script then i could print out os dot get cwd which",
          "tokens": [
            50992,
            536,
            437,
            21120,
            321,
            434,
            4362,
            294,
            365,
            341,
            5755,
            550,
            741,
            727,
            4482,
            484,
            3003,
            5893,
            483,
            269,
            43778,
            597,
            51372
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05344227458653825,
          "compression_ratio": 1.731818181818182,
          "no_speech_prob": 0.47454872727394104,
          "confidence": 0.525451272726059
        },
        {
          "id": 178,
          "start": 1048.88,
          "end": 1054.48,
          "text": "is current working directory so if we run that then we can see that it prints out the current",
          "tokens": [
            51372,
            307,
            2190,
            1364,
            21120,
            370,
            498,
            321,
            1190,
            300,
            550,
            321,
            393,
            536,
            300,
            309,
            22305,
            484,
            264,
            2190,
            51652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05344227458653825,
          "compression_ratio": 1.731818181818182,
          "no_speech_prob": 0.47454872727394104,
          "confidence": 0.525451272726059
        },
        {
          "id": 179,
          "start": 1054.48,
          "end": 1059.92,
          "text": "working directory where this script is located now this os module has a ton of other functionality",
          "tokens": [
            50364,
            1364,
            21120,
            689,
            341,
            5755,
            307,
            6870,
            586,
            341,
            3003,
            10088,
            575,
            257,
            2952,
            295,
            661,
            14980,
            50636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03699348736735224,
          "compression_ratio": 1.8127340823970037,
          "no_speech_prob": 0.32999682426452637,
          "confidence": 0.6700031757354736
        }
      ],
      "duration": 28.519999999999982
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1054.92,
      "end_time": 1081.68,
      "text": "working directory where this script is located now this os module has a ton of other functionality it gives us the ability to scan the file system and create files delete files and all of that so you can see how these standard library modules provide a ton of functionality that might be tricky or take forever for us to write ourselves so python comes with a ton of stuff available to us and makes it super easy to get them imported and running so another great thing about python is",
      "original_segments": [
        {
          "id": 180,
          "start": 1059.92,
          "end": 1065.44,
          "text": "it gives us the ability to scan the file system and create files delete files and all of that",
          "tokens": [
            50636,
            309,
            2709,
            505,
            264,
            3485,
            281,
            11049,
            264,
            3991,
            1185,
            293,
            1884,
            7098,
            12097,
            7098,
            293,
            439,
            295,
            300,
            50912
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03699348736735224,
          "compression_ratio": 1.8127340823970037,
          "no_speech_prob": 0.32999682426452637,
          "confidence": 0.6700031757354736
        },
        {
          "id": 181,
          "start": 1065.44,
          "end": 1070.24,
          "text": "so you can see how these standard library modules provide a ton of functionality that might be",
          "tokens": [
            50912,
            370,
            291,
            393,
            536,
            577,
            613,
            3832,
            6405,
            16679,
            2893,
            257,
            2952,
            295,
            14980,
            300,
            1062,
            312,
            51152
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03699348736735224,
          "compression_ratio": 1.8127340823970037,
          "no_speech_prob": 0.32999682426452637,
          "confidence": 0.6700031757354736
        },
        {
          "id": 182,
          "start": 1070.24,
          "end": 1076.24,
          "text": "tricky or take forever for us to write ourselves so python comes with a ton of stuff available to us",
          "tokens": [
            51152,
            12414,
            420,
            747,
            5680,
            337,
            505,
            281,
            2464,
            4175,
            370,
            38797,
            1487,
            365,
            257,
            2952,
            295,
            1507,
            2435,
            281,
            505,
            51452
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03699348736735224,
          "compression_ratio": 1.8127340823970037,
          "no_speech_prob": 0.32999682426452637,
          "confidence": 0.6700031757354736
        },
        {
          "id": 183,
          "start": 1076.24,
          "end": 1081.68,
          "text": "and makes it super easy to get them imported and running so another great thing about python is",
          "tokens": [
            51452,
            293,
            1669,
            309,
            1687,
            1858,
            281,
            483,
            552,
            25524,
            293,
            2614,
            370,
            1071,
            869,
            551,
            466,
            38797,
            307,
            51724
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03699348736735224,
          "compression_ratio": 1.8127340823970037,
          "no_speech_prob": 0.32999682426452637,
          "confidence": 0.6700031757354736
        }
      ],
      "duration": 26.75999999999999
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1076.68,
      "end_time": 1105.8400000000001,
      "text": "and makes it super easy to get them imported and running so another great thing about python is that these modules are just python files themselves and we can view the location of a module just by printing out its dunder file method or its dunder file attribute i'm sorry so if we print out os dot dunder file and dunder just means two underscores and don't worry why those are double underscores that'll be a topic for a future video so if we run this then we can see that it",
      "original_segments": [
        {
          "id": 184,
          "start": 1081.68,
          "end": 1087.92,
          "text": "that these modules are just python files themselves and we can view the location of a module just by",
          "tokens": [
            50364,
            300,
            613,
            16679,
            366,
            445,
            38797,
            7098,
            2969,
            293,
            321,
            393,
            1910,
            264,
            4914,
            295,
            257,
            10088,
            445,
            538,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03076851995367753,
          "compression_ratio": 1.8357487922705313,
          "no_speech_prob": 0.02420358546078205,
          "confidence": 0.975796414539218
        },
        {
          "id": 185,
          "start": 1087.92,
          "end": 1095.1200000000001,
          "text": "printing out its dunder file method or its dunder file attribute i'm sorry so if we print out os",
          "tokens": [
            50676,
            14699,
            484,
            1080,
            274,
            6617,
            3991,
            3170,
            420,
            1080,
            274,
            6617,
            3991,
            19667,
            741,
            478,
            2597,
            370,
            498,
            321,
            4482,
            484,
            3003,
            51036
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03076851995367753,
          "compression_ratio": 1.8357487922705313,
          "no_speech_prob": 0.02420358546078205,
          "confidence": 0.975796414539218
        },
        {
          "id": 186,
          "start": 1095.1200000000001,
          "end": 1100.16,
          "text": "dot dunder file and dunder just means two underscores and don't worry why those are",
          "tokens": [
            51036,
            5893,
            274,
            6617,
            3991,
            293,
            274,
            6617,
            445,
            1355,
            732,
            16692,
            66,
            2706,
            293,
            500,
            380,
            3292,
            983,
            729,
            366,
            51288
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03076851995367753,
          "compression_ratio": 1.8357487922705313,
          "no_speech_prob": 0.02420358546078205,
          "confidence": 0.975796414539218
        },
        {
          "id": 187,
          "start": 1100.16,
          "end": 1105.8400000000001,
          "text": "double underscores that'll be a topic for a future video so if we run this then we can see that it",
          "tokens": [
            51288,
            3834,
            16692,
            66,
            2706,
            300,
            603,
            312,
            257,
            4829,
            337,
            257,
            2027,
            960,
            370,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            309,
            51572
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03076851995367753,
          "compression_ratio": 1.8357487922705313,
          "no_speech_prob": 0.02420358546078205,
          "confidence": 0.975796414539218
        }
      ],
      "duration": 29.160000000000082
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1100.8400000000001,
      "end_time": 1130.0,
      "text": "double underscores that'll be a topic for a future video so if we run this then we can see that it prints out the location of this file on our file system and if we open up that python directory where that file lives then we could see the entire standard library so i actually have this open right here so let me open this up real quick so i actually have opened that python 36 directory where the entire standard library lives now i know that this may be a little small over here for you",
      "original_segments": [
        {
          "id": 188,
          "start": 1105.84,
          "end": 1112.32,
          "text": "prints out the location of this file on our file system and if we open up that python directory",
          "tokens": [
            50364,
            22305,
            484,
            264,
            4914,
            295,
            341,
            3991,
            322,
            527,
            3991,
            1185,
            293,
            498,
            321,
            1269,
            493,
            300,
            38797,
            21120,
            50688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05767481110312722,
          "compression_ratio": 1.9285714285714286,
          "no_speech_prob": 0.44901326298713684,
          "confidence": 0.5509867370128632
        },
        {
          "id": 189,
          "start": 1112.32,
          "end": 1118.9599999999998,
          "text": "where that file lives then we could see the entire standard library so i actually have this open right",
          "tokens": [
            50688,
            689,
            300,
            3991,
            2909,
            550,
            321,
            727,
            536,
            264,
            2302,
            3832,
            6405,
            370,
            741,
            767,
            362,
            341,
            1269,
            558,
            51020
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05767481110312722,
          "compression_ratio": 1.9285714285714286,
          "no_speech_prob": 0.44901326298713684,
          "confidence": 0.5509867370128632
        },
        {
          "id": 190,
          "start": 1118.9599999999998,
          "end": 1124.24,
          "text": "here so let me open this up real quick so i actually have opened that python 36 directory",
          "tokens": [
            51020,
            510,
            370,
            718,
            385,
            1269,
            341,
            493,
            957,
            1702,
            370,
            741,
            767,
            362,
            5625,
            300,
            38797,
            8652,
            21120,
            51284
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05767481110312722,
          "compression_ratio": 1.9285714285714286,
          "no_speech_prob": 0.44901326298713684,
          "confidence": 0.5509867370128632
        },
        {
          "id": 191,
          "start": 1124.24,
          "end": 1130.0,
          "text": "where the entire standard library lives now i know that this may be a little small over here for you",
          "tokens": [
            51284,
            689,
            264,
            2302,
            3832,
            6405,
            2909,
            586,
            741,
            458,
            300,
            341,
            815,
            312,
            257,
            707,
            1359,
            670,
            510,
            337,
            291,
            51572
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05767481110312722,
          "compression_ratio": 1.9285714285714286,
          "no_speech_prob": 0.44901326298713684,
          "confidence": 0.5509867370128632
        }
      ],
      "duration": 29.159999999999854
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1125.0,
      "end_time": 1152.6399999999999,
      "text": "where the entire standard library lives now i know that this may be a little small over here for you to see on my screen but let's go ahead and look through a couple of these files so these are all in alphabetical order so one of the first files in the standard library is actually this anti-gravity module now this is kind of a joke in the python community so there this is a module that you can import called anti-gravity that will open up a web comic on your machine and even though this is",
      "original_segments": [
        {
          "id": 192,
          "start": 1130.0,
          "end": 1135.6,
          "text": "to see on my screen but let's go ahead and look through a couple of these files so these are all",
          "tokens": [
            51572,
            281,
            536,
            322,
            452,
            2568,
            457,
            718,
            311,
            352,
            2286,
            293,
            574,
            807,
            257,
            1916,
            295,
            613,
            7098,
            370,
            613,
            366,
            439,
            51852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05767481110312722,
          "compression_ratio": 1.9285714285714286,
          "no_speech_prob": 0.44901326298713684,
          "confidence": 0.5509867370128632
        },
        {
          "id": 193,
          "start": 1135.6,
          "end": 1141.12,
          "text": "in alphabetical order so one of the first files in the standard library is actually this anti-gravity",
          "tokens": [
            50364,
            294,
            23339,
            804,
            1668,
            370,
            472,
            295,
            264,
            700,
            7098,
            294,
            264,
            3832,
            6405,
            307,
            767,
            341,
            6061,
            12,
            36418,
            507,
            50640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03723354506910893,
          "compression_ratio": 1.9446640316205535,
          "no_speech_prob": 0.00011026705033145845,
          "confidence": 0.9998897329496685
        },
        {
          "id": 194,
          "start": 1141.12,
          "end": 1147.12,
          "text": "module now this is kind of a joke in the python community so there this is a module that you can",
          "tokens": [
            50640,
            10088,
            586,
            341,
            307,
            733,
            295,
            257,
            7647,
            294,
            264,
            38797,
            1768,
            370,
            456,
            341,
            307,
            257,
            10088,
            300,
            291,
            393,
            50940
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03723354506910893,
          "compression_ratio": 1.9446640316205535,
          "no_speech_prob": 0.00011026705033145845,
          "confidence": 0.9998897329496685
        },
        {
          "id": 195,
          "start": 1147.12,
          "end": 1152.6399999999999,
          "text": "import called anti-gravity that will open up a web comic on your machine and even though this is",
          "tokens": [
            50940,
            974,
            1219,
            6061,
            12,
            36418,
            507,
            300,
            486,
            1269,
            493,
            257,
            3670,
            13900,
            322,
            428,
            3479,
            293,
            754,
            1673,
            341,
            307,
            51216
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03723354506910893,
          "compression_ratio": 1.9446640316205535,
          "no_speech_prob": 0.00011026705033145845,
          "confidence": 0.9998897329496685
        }
      ],
      "duration": 27.639999999999873
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1147.6399999999999,
      "end_time": 1176.88,
      "text": "import called anti-gravity that will open up a web comic on your machine and even though this is part of the standard library we can just open up this module here and see exactly how this is done so we can see that basically it just imports this web browser module and opens up the web browser to this page here and i know that people are probably going to be curious what this comic is now so let's go ahead and import that so back in intro.py i'll just delete everything and do import",
      "original_segments": [
        {
          "id": 196,
          "start": 1152.6399999999999,
          "end": 1158.0,
          "text": "part of the standard library we can just open up this module here and see exactly how this is done",
          "tokens": [
            51216,
            644,
            295,
            264,
            3832,
            6405,
            321,
            393,
            445,
            1269,
            493,
            341,
            10088,
            510,
            293,
            536,
            2293,
            577,
            341,
            307,
            1096,
            51484
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03723354506910893,
          "compression_ratio": 1.9446640316205535,
          "no_speech_prob": 0.00011026705033145845,
          "confidence": 0.9998897329496685
        },
        {
          "id": 197,
          "start": 1158.0,
          "end": 1164.7199999999998,
          "text": "so we can see that basically it just imports this web browser module and opens up the web browser",
          "tokens": [
            51484,
            370,
            321,
            393,
            536,
            300,
            1936,
            309,
            445,
            41596,
            341,
            3670,
            11185,
            10088,
            293,
            9870,
            493,
            264,
            3670,
            11185,
            51820
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03723354506910893,
          "compression_ratio": 1.9446640316205535,
          "no_speech_prob": 0.00011026705033145845,
          "confidence": 0.9998897329496685
        },
        {
          "id": 198,
          "start": 1164.72,
          "end": 1169.2,
          "text": "to this page here and i know that people are probably going to be curious what this comic is",
          "tokens": [
            50364,
            281,
            341,
            3028,
            510,
            293,
            741,
            458,
            300,
            561,
            366,
            1391,
            516,
            281,
            312,
            6369,
            437,
            341,
            13900,
            307,
            50588
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03371789516546787,
          "compression_ratio": 1.7326007326007327,
          "no_speech_prob": 0.000387959269573912,
          "confidence": 0.9996120407304261
        },
        {
          "id": 199,
          "start": 1169.2,
          "end": 1176.88,
          "text": "now so let's go ahead and import that so back in intro.py i'll just delete everything and do import",
          "tokens": [
            50588,
            586,
            370,
            718,
            311,
            352,
            2286,
            293,
            974,
            300,
            370,
            646,
            294,
            12897,
            13,
            8200,
            741,
            603,
            445,
            12097,
            1203,
            293,
            360,
            974,
            50972
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03371789516546787,
          "compression_ratio": 1.7326007326007327,
          "no_speech_prob": 0.000387959269573912,
          "confidence": 0.9996120407304261
        }
      ],
      "duration": 29.240000000000236
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1171.88,
      "end_time": 1198.8799999999999,
      "text": "now so let's go ahead and import that so back in intro.py i'll just delete everything and do import anti-gravity and run this file then we can see it just opens up our web browser to this comic and i'll leave this open while we close out here so if you get a chance then don't be afraid to go into the standard library and look around at how different things are done it's a great way to learn now i'm not going to lie there's definitely some complicated code in there",
      "original_segments": [
        {
          "id": 200,
          "start": 1176.88,
          "end": 1184.32,
          "text": "anti-gravity and run this file then we can see it just opens up our web browser to this comic",
          "tokens": [
            50972,
            6061,
            12,
            36418,
            507,
            293,
            1190,
            341,
            3991,
            550,
            321,
            393,
            536,
            309,
            445,
            9870,
            493,
            527,
            3670,
            11185,
            281,
            341,
            13900,
            51344
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03371789516546787,
          "compression_ratio": 1.7326007326007327,
          "no_speech_prob": 0.000387959269573912,
          "confidence": 0.9996120407304261
        },
        {
          "id": 201,
          "start": 1184.32,
          "end": 1189.6000000000001,
          "text": "and i'll leave this open while we close out here so if you get a chance then don't be afraid to",
          "tokens": [
            51344,
            293,
            741,
            603,
            1856,
            341,
            1269,
            1339,
            321,
            1998,
            484,
            510,
            370,
            498,
            291,
            483,
            257,
            2931,
            550,
            500,
            380,
            312,
            4638,
            281,
            51608
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03371789516546787,
          "compression_ratio": 1.7326007326007327,
          "no_speech_prob": 0.000387959269573912,
          "confidence": 0.9996120407304261
        },
        {
          "id": 202,
          "start": 1189.6000000000001,
          "end": 1194.32,
          "text": "go into the standard library and look around at how different things are done it's a great",
          "tokens": [
            51608,
            352,
            666,
            264,
            3832,
            6405,
            293,
            574,
            926,
            412,
            577,
            819,
            721,
            366,
            1096,
            309,
            311,
            257,
            869,
            51844
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03371789516546787,
          "compression_ratio": 1.7326007326007327,
          "no_speech_prob": 0.000387959269573912,
          "confidence": 0.9996120407304261
        },
        {
          "id": 203,
          "start": 1194.32,
          "end": 1198.8799999999999,
          "text": "way to learn now i'm not going to lie there's definitely some complicated code in there",
          "tokens": [
            50364,
            636,
            281,
            1466,
            586,
            741,
            478,
            406,
            516,
            281,
            4544,
            456,
            311,
            2138,
            512,
            6179,
            3089,
            294,
            456,
            50592
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048769449987331355,
          "compression_ratio": 1.7958477508650519,
          "no_speech_prob": 0.000318631820846349,
          "confidence": 0.9996813681791537
        }
      ],
      "duration": 26.999999999999773
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1193.8799999999999,
      "end_time": 1221.52,
      "text": "go into the standard library and look around at how different things are done it's a great way to learn now i'm not going to lie there's definitely some complicated code in there but you'll be surprised how much you can understand if you just poke around a bit okay so i think that's going to do it for this video so where do we go from here so so far in this series we've covered a lot of the fundamentals in working with python so we've learned about different data types conditionals loops functions and importing modules and a bit of the standard library now i think that just about anyone would agree that",
      "original_segments": [
        {
          "id": 204,
          "start": 1198.8799999999999,
          "end": 1202.6399999999999,
          "text": "but you'll be surprised how much you can understand if you just poke around a bit",
          "tokens": [
            50592,
            457,
            291,
            603,
            312,
            6100,
            577,
            709,
            291,
            393,
            1223,
            498,
            291,
            445,
            19712,
            926,
            257,
            857,
            50780
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048769449987331355,
          "compression_ratio": 1.7958477508650519,
          "no_speech_prob": 0.000318631820846349,
          "confidence": 0.9996813681791537
        },
        {
          "id": 205,
          "start": 1202.6399999999999,
          "end": 1206.6399999999999,
          "text": "okay so i think that's going to do it for this video so where do we go from here",
          "tokens": [
            50780,
            1392,
            370,
            741,
            519,
            300,
            311,
            516,
            281,
            360,
            309,
            337,
            341,
            960,
            370,
            689,
            360,
            321,
            352,
            490,
            510,
            50980
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048769449987331355,
          "compression_ratio": 1.7958477508650519,
          "no_speech_prob": 0.000318631820846349,
          "confidence": 0.9996813681791537
        },
        {
          "id": 206,
          "start": 1206.6399999999999,
          "end": 1211.36,
          "text": "so so far in this series we've covered a lot of the fundamentals in working with python",
          "tokens": [
            50980,
            370,
            370,
            1400,
            294,
            341,
            2638,
            321,
            600,
            5343,
            257,
            688,
            295,
            264,
            29505,
            294,
            1364,
            365,
            38797,
            51216
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048769449987331355,
          "compression_ratio": 1.7958477508650519,
          "no_speech_prob": 0.000318631820846349,
          "confidence": 0.9996813681791537
        },
        {
          "id": 207,
          "start": 1211.36,
          "end": 1216.56,
          "text": "so we've learned about different data types conditionals loops functions and importing",
          "tokens": [
            51216,
            370,
            321,
            600,
            3264,
            466,
            819,
            1412,
            3467,
            4188,
            1124,
            16121,
            6828,
            293,
            43866,
            51476
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048769449987331355,
          "compression_ratio": 1.7958477508650519,
          "no_speech_prob": 0.000318631820846349,
          "confidence": 0.9996813681791537
        },
        {
          "id": 208,
          "start": 1216.56,
          "end": 1221.52,
          "text": "modules and a bit of the standard library now i think that just about anyone would agree that",
          "tokens": [
            51476,
            16679,
            293,
            257,
            857,
            295,
            264,
            3832,
            6405,
            586,
            741,
            519,
            300,
            445,
            466,
            2878,
            576,
            3986,
            300,
            51724
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048769449987331355,
          "compression_ratio": 1.7958477508650519,
          "no_speech_prob": 0.000318631820846349,
          "confidence": 0.9996813681791537
        }
      ],
      "duration": 27.6400000000001
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1216.52,
      "end_time": 1244.08,
      "text": "so we've learned about different data types conditionals loops functions and importing modules and a bit of the standard library now i think that just about anyone would agree that no matter what specialty you plan on going into for python whether it's back end web development data science building desktop applications no matter what route you decide to take you're going to need the fundamentals that we've covered up until this point but now that you understand these fundamentals the next topics that you learn are up to you so you can jump into learning object-oriented programming in python you can learn how to work",
      "original_segments": [
        {
          "id": 209,
          "start": 1221.52,
          "end": 1226.8,
          "text": "no matter what specialty you plan on going into for python whether it's back end web development",
          "tokens": [
            50364,
            572,
            1871,
            437,
            22000,
            291,
            1393,
            322,
            516,
            666,
            337,
            38797,
            1968,
            309,
            311,
            646,
            917,
            3670,
            3250,
            50628
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05191291774715389,
          "compression_ratio": 1.8390410958904109,
          "no_speech_prob": 0.13070353865623474,
          "confidence": 0.8692964613437653
        },
        {
          "id": 210,
          "start": 1226.8,
          "end": 1231.36,
          "text": "data science building desktop applications no matter what route you decide to take",
          "tokens": [
            50628,
            1412,
            3497,
            2390,
            14502,
            5821,
            572,
            1871,
            437,
            7955,
            291,
            4536,
            281,
            747,
            50856
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05191291774715389,
          "compression_ratio": 1.8390410958904109,
          "no_speech_prob": 0.13070353865623474,
          "confidence": 0.8692964613437653
        },
        {
          "id": 211,
          "start": 1231.36,
          "end": 1235.2,
          "text": "you're going to need the fundamentals that we've covered up until this point",
          "tokens": [
            50856,
            291,
            434,
            516,
            281,
            643,
            264,
            29505,
            300,
            321,
            600,
            5343,
            493,
            1826,
            341,
            935,
            51048
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05191291774715389,
          "compression_ratio": 1.8390410958904109,
          "no_speech_prob": 0.13070353865623474,
          "confidence": 0.8692964613437653
        },
        {
          "id": 212,
          "start": 1235.2,
          "end": 1239.52,
          "text": "but now that you understand these fundamentals the next topics that you learn are up to you",
          "tokens": [
            51048,
            457,
            586,
            300,
            291,
            1223,
            613,
            29505,
            264,
            958,
            8378,
            300,
            291,
            1466,
            366,
            493,
            281,
            291,
            51264
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05191291774715389,
          "compression_ratio": 1.8390410958904109,
          "no_speech_prob": 0.13070353865623474,
          "confidence": 0.8692964613437653
        },
        {
          "id": 213,
          "start": 1239.52,
          "end": 1244.08,
          "text": "so you can jump into learning object-oriented programming in python you can learn how to work",
          "tokens": [
            51264,
            370,
            291,
            393,
            3012,
            666,
            2539,
            2657,
            12,
            27414,
            9410,
            294,
            38797,
            291,
            393,
            1466,
            577,
            281,
            589,
            51492
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05191291774715389,
          "compression_ratio": 1.8390410958904109,
          "no_speech_prob": 0.13070353865623474,
          "confidence": 0.8692964613437653
        }
      ],
      "duration": 27.559999999999945
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1239.08,
      "end_time": 1264.96,
      "text": "but now that you understand these fundamentals the next topics that you learn are up to you so you can jump into learning object-oriented programming in python you can learn how to work with files and file data start learning about a web framework basically anything that you want so i'm going to keep adding additional videos onto this playlist that i believe will be a good progression as you continue to learn python but these videos won't be numbered anymore after this video and the reason for that is that i don't want to give the impression that you have to watch",
      "original_segments": [
        {
          "id": 214,
          "start": 1244.08,
          "end": 1249.92,
          "text": "with files and file data start learning about a web framework basically anything that you want",
          "tokens": [
            51492,
            365,
            7098,
            293,
            3991,
            1412,
            722,
            2539,
            466,
            257,
            3670,
            8388,
            1936,
            1340,
            300,
            291,
            528,
            51784
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05191291774715389,
          "compression_ratio": 1.8390410958904109,
          "no_speech_prob": 0.13070353865623474,
          "confidence": 0.8692964613437653
        },
        {
          "id": 215,
          "start": 1249.92,
          "end": 1254.48,
          "text": "so i'm going to keep adding additional videos onto this playlist that i believe will be",
          "tokens": [
            50364,
            370,
            741,
            478,
            516,
            281,
            1066,
            5127,
            4497,
            2145,
            3911,
            341,
            16788,
            300,
            741,
            1697,
            486,
            312,
            50592
          ],
          "temperature": 0.0,
          "avg_logprob": -0.029187478002954702,
          "compression_ratio": 1.8918918918918919,
          "no_speech_prob": 0.05638594925403595,
          "confidence": 0.943614050745964
        },
        {
          "id": 216,
          "start": 1254.48,
          "end": 1259.8400000000001,
          "text": "a good progression as you continue to learn python but these videos won't be numbered anymore after",
          "tokens": [
            50592,
            257,
            665,
            18733,
            382,
            291,
            2354,
            281,
            1466,
            38797,
            457,
            613,
            2145,
            1582,
            380,
            312,
            40936,
            3602,
            934,
            50860
          ],
          "temperature": 0.0,
          "avg_logprob": -0.029187478002954702,
          "compression_ratio": 1.8918918918918919,
          "no_speech_prob": 0.05638594925403595,
          "confidence": 0.943614050745964
        },
        {
          "id": 217,
          "start": 1259.8400000000001,
          "end": 1264.96,
          "text": "this video and the reason for that is that i don't want to give the impression that you have to watch",
          "tokens": [
            50860,
            341,
            960,
            293,
            264,
            1778,
            337,
            300,
            307,
            300,
            741,
            500,
            380,
            528,
            281,
            976,
            264,
            9995,
            300,
            291,
            362,
            281,
            1159,
            51116
          ],
          "temperature": 0.0,
          "avg_logprob": -0.029187478002954702,
          "compression_ratio": 1.8918918918918919,
          "no_speech_prob": 0.05638594925403595,
          "confidence": 0.943614050745964
        }
      ],
      "duration": 25.88000000000011
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1259.96,
      "end_time": 1289.52,
      "text": "this video and the reason for that is that i don't want to give the impression that you have to watch one before understanding the others so i don't want them to be numbered to make you feel like you have to understand virtual environments before learning how to work with file objects or something like that so you can just skip around depending on what it is that you're wanting to learn so i hope that that makes sense now if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and i'll do my best to answer those if you enjoy these tutorials and would like to support them then there are several ways",
      "original_segments": [
        {
          "id": 218,
          "start": 1264.96,
          "end": 1269.8400000000001,
          "text": "one before understanding the others so i don't want them to be numbered to make you feel like",
          "tokens": [
            51116,
            472,
            949,
            3701,
            264,
            2357,
            370,
            741,
            500,
            380,
            528,
            552,
            281,
            312,
            40936,
            281,
            652,
            291,
            841,
            411,
            51360
          ],
          "temperature": 0.0,
          "avg_logprob": -0.029187478002954702,
          "compression_ratio": 1.8918918918918919,
          "no_speech_prob": 0.05638594925403595,
          "confidence": 0.943614050745964
        },
        {
          "id": 219,
          "start": 1269.8400000000001,
          "end": 1274.16,
          "text": "you have to understand virtual environments before learning how to work with file objects",
          "tokens": [
            51360,
            291,
            362,
            281,
            1223,
            6374,
            12388,
            949,
            2539,
            577,
            281,
            589,
            365,
            3991,
            6565,
            51576
          ],
          "temperature": 0.0,
          "avg_logprob": -0.029187478002954702,
          "compression_ratio": 1.8918918918918919,
          "no_speech_prob": 0.05638594925403595,
          "confidence": 0.943614050745964
        },
        {
          "id": 220,
          "start": 1274.16,
          "end": 1277.8400000000001,
          "text": "or something like that so you can just skip around depending on what it is that you're",
          "tokens": [
            51576,
            420,
            746,
            411,
            300,
            370,
            291,
            393,
            445,
            10023,
            926,
            5413,
            322,
            437,
            309,
            307,
            300,
            291,
            434,
            51760
          ],
          "temperature": 0.0,
          "avg_logprob": -0.029187478002954702,
          "compression_ratio": 1.8918918918918919,
          "no_speech_prob": 0.05638594925403595,
          "confidence": 0.943614050745964
        },
        {
          "id": 221,
          "start": 1277.84,
          "end": 1281.9199999999998,
          "text": "wanting to learn so i hope that that makes sense now if anyone has any questions about what we",
          "tokens": [
            50364,
            7935,
            281,
            1466,
            370,
            741,
            1454,
            300,
            300,
            1669,
            2020,
            586,
            498,
            2878,
            575,
            604,
            1651,
            466,
            437,
            321,
            50568
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030791243216148893,
          "compression_ratio": 1.8422712933753944,
          "no_speech_prob": 0.15240062773227692,
          "confidence": 0.8475993722677231
        },
        {
          "id": 222,
          "start": 1281.9199999999998,
          "end": 1285.6,
          "text": "covered in this video then feel free to ask in the comment section below and i'll do my best to",
          "tokens": [
            50568,
            5343,
            294,
            341,
            960,
            550,
            841,
            1737,
            281,
            1029,
            294,
            264,
            2871,
            3541,
            2507,
            293,
            741,
            603,
            360,
            452,
            1151,
            281,
            50752
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030791243216148893,
          "compression_ratio": 1.8422712933753944,
          "no_speech_prob": 0.15240062773227692,
          "confidence": 0.8475993722677231
        },
        {
          "id": 223,
          "start": 1285.6,
          "end": 1289.52,
          "text": "answer those if you enjoy these tutorials and would like to support them then there are several ways",
          "tokens": [
            50752,
            1867,
            729,
            498,
            291,
            2103,
            613,
            17616,
            293,
            576,
            411,
            281,
            1406,
            552,
            550,
            456,
            366,
            2940,
            2098,
            50948
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030791243216148893,
          "compression_ratio": 1.8422712933753944,
          "no_speech_prob": 0.15240062773227692,
          "confidence": 0.8475993722677231
        }
      ],
      "duration": 29.559999999999945
    },
    {
      "video_id": "a1cc4da19f51",
      "video_path": "videos/Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "video_filename": "Python Tutorial for Beginners 9- Import Modules and Exploring The Standard Library (1).mp4",
      "start_time": 1284.52,
      "end_time": 1308.56,
      "text": "covered in this video then feel free to ask in the comment section below and i'll do my best to answer those if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching",
      "original_segments": [
        {
          "id": 224,
          "start": 1289.52,
          "end": 1293.6799999999998,
          "text": "you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a",
          "tokens": [
            50948,
            291,
            393,
            360,
            300,
            264,
            12889,
            636,
            307,
            281,
            2935,
            411,
            264,
            960,
            293,
            976,
            309,
            257,
            8838,
            493,
            293,
            611,
            309,
            311,
            257,
            51156
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030791243216148893,
          "compression_ratio": 1.8422712933753944,
          "no_speech_prob": 0.15240062773227692,
          "confidence": 0.8475993722677231
        },
        {
          "id": 225,
          "start": 1293.6799999999998,
          "end": 1297.28,
          "text": "huge help to share these videos with anyone who you think would find them useful and if you have",
          "tokens": [
            51156,
            2603,
            854,
            281,
            2073,
            613,
            2145,
            365,
            2878,
            567,
            291,
            519,
            576,
            915,
            552,
            4420,
            293,
            498,
            291,
            362,
            51336
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030791243216148893,
          "compression_ratio": 1.8422712933753944,
          "no_speech_prob": 0.15240062773227692,
          "confidence": 0.8475993722677231
        },
        {
          "id": 226,
          "start": 1297.28,
          "end": 1300.72,
          "text": "the means you can contribute through patreon and there's a link to that page in the description",
          "tokens": [
            51336,
            264,
            1355,
            291,
            393,
            10586,
            807,
            33161,
            293,
            456,
            311,
            257,
            2113,
            281,
            300,
            3028,
            294,
            264,
            3855,
            51508
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030791243216148893,
          "compression_ratio": 1.8422712933753944,
          "no_speech_prob": 0.15240062773227692,
          "confidence": 0.8475993722677231
        },
        {
          "id": 227,
          "start": 1300.72,
          "end": 1308.56,
          "text": "section below be sure to subscribe for future videos and thank you all for watching",
          "tokens": [
            50364,
            3541,
            2507,
            312,
            988,
            281,
            3022,
            337,
            2027,
            2145,
            293,
            1309,
            291,
            439,
            337,
            1976,
            50756
          ],
          "temperature": 0.0,
          "avg_logprob": -0.1933264202541775,
          "compression_ratio": 1.1369863013698631,
          "no_speech_prob": 0.05628151819109917,
          "confidence": 0.9437184818089008
        }
      ],
      "duration": 24.039999999999964
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 0.0,
      "end_time": 25.2,
      "text": "Hey there, how's it going everybody? In this video we'll be learning about lists, tuples, and sets in Python. Now lists and tuples allow us to work with sequential data and sets are unordered collections of values with no duplicates and we'll look at all of these to see exactly what that means. So first let's look at lists and we're going to spend a majority of the time on list just because it has a lot more functionality than the other data types. So just like the name implies",
      "original_segments": [
        {
          "id": 0,
          "start": 0.0,
          "end": 4.08,
          "text": "Hey there, how's it going everybody? In this video we'll be learning about lists, tuples,",
          "tokens": [
            50364,
            1911,
            456,
            11,
            577,
            311,
            309,
            516,
            2201,
            30,
            682,
            341,
            960,
            321,
            603,
            312,
            2539,
            466,
            14511,
            11,
            2604,
            2622,
            11,
            50568
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0934768564560834,
          "compression_ratio": 1.6853146853146854,
          "no_speech_prob": 0.04211403802037239,
          "confidence": 0.9578859619796276
        },
        {
          "id": 1,
          "start": 4.08,
          "end": 9.6,
          "text": "and sets in Python. Now lists and tuples allow us to work with sequential data and sets are",
          "tokens": [
            50568,
            293,
            6352,
            294,
            15329,
            13,
            823,
            14511,
            293,
            2604,
            2622,
            2089,
            505,
            281,
            589,
            365,
            42881,
            1412,
            293,
            6352,
            366,
            50844
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0934768564560834,
          "compression_ratio": 1.6853146853146854,
          "no_speech_prob": 0.04211403802037239,
          "confidence": 0.9578859619796276
        },
        {
          "id": 2,
          "start": 9.6,
          "end": 15.040000000000001,
          "text": "unordered collections of values with no duplicates and we'll look at all of these to see exactly what",
          "tokens": [
            50844,
            517,
            765,
            4073,
            16641,
            295,
            4190,
            365,
            572,
            17154,
            1024,
            293,
            321,
            603,
            574,
            412,
            439,
            295,
            613,
            281,
            536,
            2293,
            437,
            51116
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0934768564560834,
          "compression_ratio": 1.6853146853146854,
          "no_speech_prob": 0.04211403802037239,
          "confidence": 0.9578859619796276
        },
        {
          "id": 3,
          "start": 15.040000000000001,
          "end": 20.16,
          "text": "that means. So first let's look at lists and we're going to spend a majority of the time on list",
          "tokens": [
            51116,
            300,
            1355,
            13,
            407,
            700,
            718,
            311,
            574,
            412,
            14511,
            293,
            321,
            434,
            516,
            281,
            3496,
            257,
            6286,
            295,
            264,
            565,
            322,
            1329,
            51372
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0934768564560834,
          "compression_ratio": 1.6853146853146854,
          "no_speech_prob": 0.04211403802037239,
          "confidence": 0.9578859619796276
        },
        {
          "id": 4,
          "start": 20.16,
          "end": 25.2,
          "text": "just because it has a lot more functionality than the other data types. So just like the name implies",
          "tokens": [
            51372,
            445,
            570,
            309,
            575,
            257,
            688,
            544,
            14980,
            813,
            264,
            661,
            1412,
            3467,
            13,
            407,
            445,
            411,
            264,
            1315,
            18779,
            51624
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0934768564560834,
          "compression_ratio": 1.6853146853146854,
          "no_speech_prob": 0.04211403802037239,
          "confidence": 0.9578859619796276
        }
      ],
      "duration": 25.2
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 20.2,
      "end_time": 44.0,
      "text": "just because it has a lot more functionality than the other data types. So just like the name implies it allows us to work with a list of values. So for example let's say that I wanted a list of courses so I could create a variable here called courses and to create a list we're going to use these square brackets and within these brackets we put each value that we want separated by a comma.",
      "original_segments": [
        {
          "id": 5,
          "start": 25.2,
          "end": 31.28,
          "text": "it allows us to work with a list of values. So for example let's say that I wanted a list of courses",
          "tokens": [
            50364,
            309,
            4045,
            505,
            281,
            589,
            365,
            257,
            1329,
            295,
            4190,
            13,
            407,
            337,
            1365,
            718,
            311,
            584,
            300,
            286,
            1415,
            257,
            1329,
            295,
            7712,
            50668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056892242837459486,
          "compression_ratio": 1.8701923076923077,
          "no_speech_prob": 0.2899825870990753,
          "confidence": 0.7100174129009247
        },
        {
          "id": 6,
          "start": 31.28,
          "end": 37.36,
          "text": "so I could create a variable here called courses and to create a list we're going to use these",
          "tokens": [
            50668,
            370,
            286,
            727,
            1884,
            257,
            7006,
            510,
            1219,
            7712,
            293,
            281,
            1884,
            257,
            1329,
            321,
            434,
            516,
            281,
            764,
            613,
            50972
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056892242837459486,
          "compression_ratio": 1.8701923076923077,
          "no_speech_prob": 0.2899825870990753,
          "confidence": 0.7100174129009247
        },
        {
          "id": 7,
          "start": 37.36,
          "end": 44.0,
          "text": "square brackets and within these brackets we put each value that we want separated by a comma.",
          "tokens": [
            50972,
            3732,
            26179,
            293,
            1951,
            613,
            26179,
            321,
            829,
            1184,
            2158,
            300,
            321,
            528,
            12005,
            538,
            257,
            22117,
            13,
            51304
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056892242837459486,
          "compression_ratio": 1.8701923076923077,
          "no_speech_prob": 0.2899825870990753,
          "confidence": 0.7100174129009247
        }
      ],
      "duration": 23.8
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 39.0,
      "end_time": 68.39999999999999,
      "text": "square brackets and within these brackets we put each value that we want separated by a comma. So for example let's say that we wanted a list of courses so I'll say history and math and physics and also lastly we'll put in compsci. So now if we print out this list so I'll print out courses and run that and we can see that it prints out our entire list. Now if we wanted to see how many",
      "original_segments": [
        {
          "id": 8,
          "start": 44.0,
          "end": 52.8,
          "text": "So for example let's say that we wanted a list of courses so I'll say history and math and physics",
          "tokens": [
            51304,
            407,
            337,
            1365,
            718,
            311,
            584,
            300,
            321,
            1415,
            257,
            1329,
            295,
            7712,
            370,
            286,
            603,
            584,
            2503,
            293,
            5221,
            293,
            10649,
            51744
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056892242837459486,
          "compression_ratio": 1.8701923076923077,
          "no_speech_prob": 0.2899825870990753,
          "confidence": 0.7100174129009247
        },
        {
          "id": 9,
          "start": 53.04,
          "end": 63.04,
          "text": "and also lastly we'll put in compsci. So now if we print out this list so I'll print out courses",
          "tokens": [
            50376,
            293,
            611,
            16386,
            321,
            603,
            829,
            294,
            715,
            82,
            537,
            13,
            407,
            586,
            498,
            321,
            4482,
            484,
            341,
            1329,
            370,
            286,
            603,
            4482,
            484,
            7712,
            50876
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12438817024230957,
          "compression_ratio": 1.9211822660098523,
          "no_speech_prob": 0.00010860015026992187,
          "confidence": 0.9998913998497301
        },
        {
          "id": 10,
          "start": 63.04,
          "end": 68.39999999999999,
          "text": "and run that and we can see that it prints out our entire list. Now if we wanted to see how many",
          "tokens": [
            50876,
            293,
            1190,
            300,
            293,
            321,
            393,
            536,
            300,
            309,
            22305,
            484,
            527,
            2302,
            1329,
            13,
            823,
            498,
            321,
            1415,
            281,
            536,
            577,
            867,
            51144
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12438817024230957,
          "compression_ratio": 1.9211822660098523,
          "no_speech_prob": 0.00010860015026992187,
          "confidence": 0.9998913998497301
        }
      ],
      "duration": 29.39999999999999
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 63.39999999999999,
      "end_time": 87.52,
      "text": "and run that and we can see that it prints out our entire list. Now if we wanted to see how many values are in our list then we can get this by using the len function which stands for length. So if instead we print out the length using len of courses and run that then you can see that it says that we have four values in our list and we can access each of these values individually.",
      "original_segments": [
        {
          "id": 11,
          "start": 68.39999999999999,
          "end": 74.4,
          "text": "values are in our list then we can get this by using the len function which stands for length.",
          "tokens": [
            51144,
            4190,
            366,
            294,
            527,
            1329,
            550,
            321,
            393,
            483,
            341,
            538,
            1228,
            264,
            40116,
            2445,
            597,
            7382,
            337,
            4641,
            13,
            51444
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12438817024230957,
          "compression_ratio": 1.9211822660098523,
          "no_speech_prob": 0.00010860015026992187,
          "confidence": 0.9998913998497301
        },
        {
          "id": 12,
          "start": 74.4,
          "end": 81.44,
          "text": "So if instead we print out the length using len of courses and run that then you can see that it says",
          "tokens": [
            51444,
            407,
            498,
            2602,
            321,
            4482,
            484,
            264,
            4641,
            1228,
            40116,
            295,
            7712,
            293,
            1190,
            300,
            550,
            291,
            393,
            536,
            300,
            309,
            1619,
            51796
          ],
          "temperature": 0.0,
          "avg_logprob": -0.12438817024230957,
          "compression_ratio": 1.9211822660098523,
          "no_speech_prob": 0.00010860015026992187,
          "confidence": 0.9998913998497301
        },
        {
          "id": 13,
          "start": 82.24,
          "end": 87.52,
          "text": "that we have four values in our list and we can access each of these values individually.",
          "tokens": [
            50404,
            300,
            321,
            362,
            1451,
            4190,
            294,
            527,
            1329,
            293,
            321,
            393,
            2105,
            1184,
            295,
            613,
            4190,
            16652,
            13,
            50668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056637917795488914,
          "compression_ratio": 1.8970588235294117,
          "no_speech_prob": 0.005648189224302769,
          "confidence": 0.9943518107756972
        }
      ],
      "duration": 24.120000000000005
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 82.52,
      "end_time": 106.96,
      "text": "that we have four values in our list and we can access each of these values individually. So first let's go back to just printing out our list and running that. So now to access the values in our list we can use square brackets after our list and pass in the location of the value that we want. So we can put in square brackets and this location is called an index and it starts at zero.",
      "original_segments": [
        {
          "id": 14,
          "start": 87.52,
          "end": 94.24,
          "text": "So first let's go back to just printing out our list and running that. So now to access the values",
          "tokens": [
            50668,
            407,
            700,
            718,
            311,
            352,
            646,
            281,
            445,
            14699,
            484,
            527,
            1329,
            293,
            2614,
            300,
            13,
            407,
            586,
            281,
            2105,
            264,
            4190,
            51004
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056637917795488914,
          "compression_ratio": 1.8970588235294117,
          "no_speech_prob": 0.005648189224302769,
          "confidence": 0.9943518107756972
        },
        {
          "id": 15,
          "start": 94.24,
          "end": 100.72,
          "text": "in our list we can use square brackets after our list and pass in the location of the value that",
          "tokens": [
            51004,
            294,
            527,
            1329,
            321,
            393,
            764,
            3732,
            26179,
            934,
            527,
            1329,
            293,
            1320,
            294,
            264,
            4914,
            295,
            264,
            2158,
            300,
            51328
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056637917795488914,
          "compression_ratio": 1.8970588235294117,
          "no_speech_prob": 0.005648189224302769,
          "confidence": 0.9943518107756972
        },
        {
          "id": 16,
          "start": 100.72,
          "end": 106.96,
          "text": "we want. So we can put in square brackets and this location is called an index and it starts at zero.",
          "tokens": [
            51328,
            321,
            528,
            13,
            407,
            321,
            393,
            829,
            294,
            3732,
            26179,
            293,
            341,
            4914,
            307,
            1219,
            364,
            8186,
            293,
            309,
            3719,
            412,
            4018,
            13,
            51640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.056637917795488914,
          "compression_ratio": 1.8970588235294117,
          "no_speech_prob": 0.005648189224302769,
          "confidence": 0.9943518107756972
        }
      ],
      "duration": 24.439999999999998
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 101.96,
      "end_time": 126.8,
      "text": "we want. So we can put in square brackets and this location is called an index and it starts at zero. So to access the first value of our list we can access the location at index zero. If I print that then we can see that we get history. Now since the length of our list is four that means with the first value starting at index zero then the last value will be at index three. So it's our",
      "original_segments": [
        {
          "id": 17,
          "start": 106.96,
          "end": 115.19999999999999,
          "text": "So to access the first value of our list we can access the location at index zero. If I print that",
          "tokens": [
            50364,
            407,
            281,
            2105,
            264,
            700,
            2158,
            295,
            527,
            1329,
            321,
            393,
            2105,
            264,
            4914,
            412,
            8186,
            4018,
            13,
            759,
            286,
            4482,
            300,
            50776
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049515468905670476,
          "compression_ratio": 1.8557692307692308,
          "no_speech_prob": 0.007603735662996769,
          "confidence": 0.9923962643370032
        },
        {
          "id": 18,
          "start": 115.19999999999999,
          "end": 120.08,
          "text": "then we can see that we get history. Now since the length of our list is four that means with",
          "tokens": [
            50776,
            550,
            321,
            393,
            536,
            300,
            321,
            483,
            2503,
            13,
            823,
            1670,
            264,
            4641,
            295,
            527,
            1329,
            307,
            1451,
            300,
            1355,
            365,
            51020
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049515468905670476,
          "compression_ratio": 1.8557692307692308,
          "no_speech_prob": 0.007603735662996769,
          "confidence": 0.9923962643370032
        },
        {
          "id": 19,
          "start": 120.08,
          "end": 126.8,
          "text": "the first value starting at index zero then the last value will be at index three. So it's our",
          "tokens": [
            51020,
            264,
            700,
            2158,
            2891,
            412,
            8186,
            4018,
            550,
            264,
            1036,
            2158,
            486,
            312,
            412,
            8186,
            1045,
            13,
            407,
            309,
            311,
            527,
            51356
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049515468905670476,
          "compression_ratio": 1.8557692307692308,
          "no_speech_prob": 0.007603735662996769,
          "confidence": 0.9923962643370032
        }
      ],
      "duration": 24.840000000000003
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 121.8,
      "end_time": 147.76000000000002,
      "text": "the first value starting at index zero then the last value will be at index three. So it's our total length minus one. So let's say I wanted to grab the last value for my list which is compsci. I could count these indexes out and see which one should be able to access it. So zero one two and three the third index. So if I print out courses three and access that index of three and run that",
      "original_segments": [
        {
          "id": 20,
          "start": 126.8,
          "end": 133.35999999999999,
          "text": "total length minus one. So let's say I wanted to grab the last value for my list which is compsci.",
          "tokens": [
            51356,
            3217,
            4641,
            3175,
            472,
            13,
            407,
            718,
            311,
            584,
            286,
            1415,
            281,
            4444,
            264,
            1036,
            2158,
            337,
            452,
            1329,
            597,
            307,
            715,
            82,
            537,
            13,
            51684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049515468905670476,
          "compression_ratio": 1.8557692307692308,
          "no_speech_prob": 0.007603735662996769,
          "confidence": 0.9923962643370032
        },
        {
          "id": 21,
          "start": 133.44000000000003,
          "end": 140.72000000000003,
          "text": "I could count these indexes out and see which one should be able to access it. So zero one two and",
          "tokens": [
            50368,
            286,
            727,
            1207,
            613,
            8186,
            279,
            484,
            293,
            536,
            597,
            472,
            820,
            312,
            1075,
            281,
            2105,
            309,
            13,
            407,
            4018,
            472,
            732,
            293,
            50732
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05263898790497141,
          "compression_ratio": 1.8160377358490567,
          "no_speech_prob": 0.026271993294358253,
          "confidence": 0.9737280067056417
        },
        {
          "id": 22,
          "start": 140.72000000000003,
          "end": 147.76000000000002,
          "text": "three the third index. So if I print out courses three and access that index of three and run that",
          "tokens": [
            50732,
            1045,
            264,
            2636,
            8186,
            13,
            407,
            498,
            286,
            4482,
            484,
            7712,
            1045,
            293,
            2105,
            300,
            8186,
            295,
            1045,
            293,
            1190,
            300,
            51084
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05263898790497141,
          "compression_ratio": 1.8160377358490567,
          "no_speech_prob": 0.026271993294358253,
          "confidence": 0.9737280067056417
        }
      ],
      "duration": 25.960000000000022
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 142.76000000000002,
      "end_time": 172.56,
      "text": "three the third index. So if I print out courses three and access that index of three and run that then we can see that we printed out compsci. Now we can actually use negative indexes too and negative indexes will just start from the end of the list. So since zero is the first item of our list I can also get the last item of our list using a negative one. So if we print out courses index of negative one and run that then we can see that we got compsci again which is the last item.",
      "original_segments": [
        {
          "id": 23,
          "start": 147.76000000000002,
          "end": 152.72000000000003,
          "text": "then we can see that we printed out compsci. Now we can actually use negative indexes too",
          "tokens": [
            51084,
            550,
            321,
            393,
            536,
            300,
            321,
            13567,
            484,
            715,
            82,
            537,
            13,
            823,
            321,
            393,
            767,
            764,
            3671,
            8186,
            279,
            886,
            51332
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05263898790497141,
          "compression_ratio": 1.8160377358490567,
          "no_speech_prob": 0.026271993294358253,
          "confidence": 0.9737280067056417
        },
        {
          "id": 24,
          "start": 152.72000000000003,
          "end": 158.24,
          "text": "and negative indexes will just start from the end of the list. So since zero is the first item of",
          "tokens": [
            51332,
            293,
            3671,
            8186,
            279,
            486,
            445,
            722,
            490,
            264,
            917,
            295,
            264,
            1329,
            13,
            407,
            1670,
            4018,
            307,
            264,
            700,
            3174,
            295,
            51608
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05263898790497141,
          "compression_ratio": 1.8160377358490567,
          "no_speech_prob": 0.026271993294358253,
          "confidence": 0.9737280067056417
        },
        {
          "id": 25,
          "start": 158.24,
          "end": 165.28,
          "text": "our list I can also get the last item of our list using a negative one. So if we print out courses",
          "tokens": [
            50364,
            527,
            1329,
            286,
            393,
            611,
            483,
            264,
            1036,
            3174,
            295,
            527,
            1329,
            1228,
            257,
            3671,
            472,
            13,
            407,
            498,
            321,
            4482,
            484,
            7712,
            50716
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03984388502517549,
          "compression_ratio": 1.8064516129032258,
          "no_speech_prob": 0.07007540017366409,
          "confidence": 0.9299245998263359
        },
        {
          "id": 26,
          "start": 166.0,
          "end": 172.56,
          "text": "index of negative one and run that then we can see that we got compsci again which is the last item.",
          "tokens": [
            50752,
            8186,
            295,
            3671,
            472,
            293,
            1190,
            300,
            550,
            321,
            393,
            536,
            300,
            321,
            658,
            715,
            82,
            537,
            797,
            597,
            307,
            264,
            1036,
            3174,
            13,
            51080
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03984388502517549,
          "compression_ratio": 1.8064516129032258,
          "no_speech_prob": 0.07007540017366409,
          "confidence": 0.9299245998263359
        }
      ],
      "duration": 29.799999999999983
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 167.56,
      "end_time": 195.44,
      "text": "index of negative one and run that then we can see that we got compsci again which is the last item. It's more convenient a lot of the time using a negative one to get the last item because we don't have to worry about what the length of the list is. So for example if my list grew by 10 items then the third index would no longer be the last item but the negative one will always be the last item. And also if you accidentally try to access an index that doesn't exist then you'll get an",
      "original_segments": [
        {
          "id": 27,
          "start": 172.56,
          "end": 177.84,
          "text": "It's more convenient a lot of the time using a negative one to get the last item because we",
          "tokens": [
            51080,
            467,
            311,
            544,
            10851,
            257,
            688,
            295,
            264,
            565,
            1228,
            257,
            3671,
            472,
            281,
            483,
            264,
            1036,
            3174,
            570,
            321,
            51344
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03984388502517549,
          "compression_ratio": 1.8064516129032258,
          "no_speech_prob": 0.07007540017366409,
          "confidence": 0.9299245998263359
        },
        {
          "id": 28,
          "start": 177.84,
          "end": 184.4,
          "text": "don't have to worry about what the length of the list is. So for example if my list grew by 10 items",
          "tokens": [
            51344,
            500,
            380,
            362,
            281,
            3292,
            466,
            437,
            264,
            4641,
            295,
            264,
            1329,
            307,
            13,
            407,
            337,
            1365,
            498,
            452,
            1329,
            6109,
            538,
            1266,
            4754,
            51672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03984388502517549,
          "compression_ratio": 1.8064516129032258,
          "no_speech_prob": 0.07007540017366409,
          "confidence": 0.9299245998263359
        },
        {
          "id": 29,
          "start": 184.4,
          "end": 190.16,
          "text": "then the third index would no longer be the last item but the negative one will always be the last",
          "tokens": [
            50364,
            550,
            264,
            2636,
            8186,
            576,
            572,
            2854,
            312,
            264,
            1036,
            3174,
            457,
            264,
            3671,
            472,
            486,
            1009,
            312,
            264,
            1036,
            50652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.046970731120998574,
          "compression_ratio": 1.8659003831417624,
          "no_speech_prob": 0.04393697530031204,
          "confidence": 0.956063024699688
        },
        {
          "id": 30,
          "start": 190.16,
          "end": 195.44,
          "text": "item. And also if you accidentally try to access an index that doesn't exist then you'll get an",
          "tokens": [
            50652,
            3174,
            13,
            400,
            611,
            498,
            291,
            15715,
            853,
            281,
            2105,
            364,
            8186,
            300,
            1177,
            380,
            2514,
            550,
            291,
            603,
            483,
            364,
            50916
          ],
          "temperature": 0.0,
          "avg_logprob": -0.046970731120998574,
          "compression_ratio": 1.8659003831417624,
          "no_speech_prob": 0.04393697530031204,
          "confidence": 0.956063024699688
        }
      ],
      "duration": 27.879999999999995
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 190.44,
      "end_time": 213.28,
      "text": "item. And also if you accidentally try to access an index that doesn't exist then you'll get an index error. So in this example if we tried to access an item at index four and run that since there is no index four you can see that we get this list index out of range. Now instead of only grabbing one value we can also access a range of values. So if I wanted to grab the first two values",
      "original_segments": [
        {
          "id": 31,
          "start": 195.44,
          "end": 202.0,
          "text": "index error. So in this example if we tried to access an item at index four and run that since",
          "tokens": [
            50916,
            8186,
            6713,
            13,
            407,
            294,
            341,
            1365,
            498,
            321,
            3031,
            281,
            2105,
            364,
            3174,
            412,
            8186,
            1451,
            293,
            1190,
            300,
            1670,
            51244
          ],
          "temperature": 0.0,
          "avg_logprob": -0.046970731120998574,
          "compression_ratio": 1.8659003831417624,
          "no_speech_prob": 0.04393697530031204,
          "confidence": 0.956063024699688
        },
        {
          "id": 32,
          "start": 202.0,
          "end": 207.20000000000002,
          "text": "there is no index four you can see that we get this list index out of range. Now instead of only",
          "tokens": [
            51244,
            456,
            307,
            572,
            8186,
            1451,
            291,
            393,
            536,
            300,
            321,
            483,
            341,
            1329,
            8186,
            484,
            295,
            3613,
            13,
            823,
            2602,
            295,
            787,
            51504
          ],
          "temperature": 0.0,
          "avg_logprob": -0.046970731120998574,
          "compression_ratio": 1.8659003831417624,
          "no_speech_prob": 0.04393697530031204,
          "confidence": 0.956063024699688
        },
        {
          "id": 33,
          "start": 207.20000000000002,
          "end": 213.28,
          "text": "grabbing one value we can also access a range of values. So if I wanted to grab the first two values",
          "tokens": [
            51504,
            23771,
            472,
            2158,
            321,
            393,
            611,
            2105,
            257,
            3613,
            295,
            4190,
            13,
            407,
            498,
            286,
            1415,
            281,
            4444,
            264,
            700,
            732,
            4190,
            51808
          ],
          "temperature": 0.0,
          "avg_logprob": -0.046970731120998574,
          "compression_ratio": 1.8659003831417624,
          "no_speech_prob": 0.04393697530031204,
          "confidence": 0.956063024699688
        }
      ],
      "duration": 22.840000000000003
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 208.28,
      "end_time": 237.28,
      "text": "grabbing one value we can also access a range of values. So if I wanted to grab the first two values from this list then I could say that I want to access starting at index zero and go to but not including index two. So this first index is our starting point and the second index which is separated by this colon is the stopping point. Now one thing that's a little confusing is that the first index is inclusive but the second index is not and there's good reasons for that but it's",
      "original_segments": [
        {
          "id": 34,
          "start": 213.28,
          "end": 220.88,
          "text": "from this list then I could say that I want to access starting at index zero and go to but not",
          "tokens": [
            50364,
            490,
            341,
            1329,
            550,
            286,
            727,
            584,
            300,
            286,
            528,
            281,
            2105,
            2891,
            412,
            8186,
            4018,
            293,
            352,
            281,
            457,
            406,
            50744
          ],
          "temperature": 0.0,
          "avg_logprob": -0.033165280738573395,
          "compression_ratio": 1.8104265402843602,
          "no_speech_prob": 0.005171104334294796,
          "confidence": 0.9948288956657052
        },
        {
          "id": 35,
          "start": 220.88,
          "end": 226.88,
          "text": "including index two. So this first index is our starting point and the second index which is",
          "tokens": [
            50744,
            3009,
            8186,
            732,
            13,
            407,
            341,
            700,
            8186,
            307,
            527,
            2891,
            935,
            293,
            264,
            1150,
            8186,
            597,
            307,
            51044
          ],
          "temperature": 0.0,
          "avg_logprob": -0.033165280738573395,
          "compression_ratio": 1.8104265402843602,
          "no_speech_prob": 0.005171104334294796,
          "confidence": 0.9948288956657052
        },
        {
          "id": 36,
          "start": 226.88,
          "end": 232.0,
          "text": "separated by this colon is the stopping point. Now one thing that's a little confusing is that",
          "tokens": [
            51044,
            12005,
            538,
            341,
            8255,
            307,
            264,
            12767,
            935,
            13,
            823,
            472,
            551,
            300,
            311,
            257,
            707,
            13181,
            307,
            300,
            51300
          ],
          "temperature": 0.0,
          "avg_logprob": -0.033165280738573395,
          "compression_ratio": 1.8104265402843602,
          "no_speech_prob": 0.005171104334294796,
          "confidence": 0.9948288956657052
        },
        {
          "id": 37,
          "start": 232.0,
          "end": 237.28,
          "text": "the first index is inclusive but the second index is not and there's good reasons for that but it's",
          "tokens": [
            51300,
            264,
            700,
            8186,
            307,
            13429,
            457,
            264,
            1150,
            8186,
            307,
            406,
            293,
            456,
            311,
            665,
            4112,
            337,
            300,
            457,
            309,
            311,
            51564
          ],
          "temperature": 0.0,
          "avg_logprob": -0.033165280738573395,
          "compression_ratio": 1.8104265402843602,
          "no_speech_prob": 0.005171104334294796,
          "confidence": 0.9948288956657052
        }
      ],
      "duration": 29.0
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 232.28,
      "end_time": 257.76,
      "text": "the first index is inclusive but the second index is not and there's good reasons for that but it's easy to forget. So what we're saying here is that we want all of the values between the beginning and up to but not including the second index. So if we run this then we can see that it printed out history and math because it printed out zero and one all the way up to two but not including two",
      "original_segments": [
        {
          "id": 38,
          "start": 237.28,
          "end": 244.8,
          "text": "easy to forget. So what we're saying here is that we want all of the values between the beginning",
          "tokens": [
            50364,
            1858,
            281,
            2870,
            13,
            407,
            437,
            321,
            434,
            1566,
            510,
            307,
            300,
            321,
            528,
            439,
            295,
            264,
            4190,
            1296,
            264,
            2863,
            50740
          ],
          "temperature": 0.0,
          "avg_logprob": -0.029633755379534783,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.20867949724197388,
          "confidence": 0.7913205027580261
        },
        {
          "id": 39,
          "start": 244.8,
          "end": 251.44,
          "text": "and up to but not including the second index. So if we run this then we can see that it printed out",
          "tokens": [
            50740,
            293,
            493,
            281,
            457,
            406,
            3009,
            264,
            1150,
            8186,
            13,
            407,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            309,
            13567,
            484,
            51072
          ],
          "temperature": 0.0,
          "avg_logprob": -0.029633755379534783,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.20867949724197388,
          "confidence": 0.7913205027580261
        },
        {
          "id": 40,
          "start": 251.44,
          "end": 257.76,
          "text": "history and math because it printed out zero and one all the way up to two but not including two",
          "tokens": [
            51072,
            2503,
            293,
            5221,
            570,
            309,
            13567,
            484,
            4018,
            293,
            472,
            439,
            264,
            636,
            493,
            281,
            732,
            457,
            406,
            3009,
            732,
            51388
          ],
          "temperature": 0.0,
          "avg_logprob": -0.029633755379534783,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.20867949724197388,
          "confidence": 0.7913205027580261
        }
      ],
      "duration": 25.47999999999999
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 252.76,
      "end_time": 279.59999999999997,
      "text": "history and math because it printed out zero and one all the way up to two but not including two which is physics. Now since our first index here is just the start of the string we can actually just leave that off and it will assume that we want to start at the beginning. So if we said print the courses with nothing there colon two and run this then you can see that we get the same result because it just assumed that we wanted to start at the beginning. Now if we just wanted to grab",
      "original_segments": [
        {
          "id": 41,
          "start": 257.76,
          "end": 262.64,
          "text": "which is physics. Now since our first index here is just the start of the string we can actually",
          "tokens": [
            51388,
            597,
            307,
            10649,
            13,
            823,
            1670,
            527,
            700,
            8186,
            510,
            307,
            445,
            264,
            722,
            295,
            264,
            6798,
            321,
            393,
            767,
            51632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.029633755379534783,
          "compression_ratio": 1.7853881278538812,
          "no_speech_prob": 0.20867949724197388,
          "confidence": 0.7913205027580261
        },
        {
          "id": 42,
          "start": 262.64,
          "end": 268.15999999999997,
          "text": "just leave that off and it will assume that we want to start at the beginning. So if we said print",
          "tokens": [
            50364,
            445,
            1856,
            300,
            766,
            293,
            309,
            486,
            6552,
            300,
            321,
            528,
            281,
            722,
            412,
            264,
            2863,
            13,
            407,
            498,
            321,
            848,
            4482,
            50640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03636429227631668,
          "compression_ratio": 2.0125,
          "no_speech_prob": 0.17089061439037323,
          "confidence": 0.8291093856096268
        },
        {
          "id": 43,
          "start": 268.15999999999997,
          "end": 275.12,
          "text": "the courses with nothing there colon two and run this then you can see that we get the same result",
          "tokens": [
            50640,
            264,
            7712,
            365,
            1825,
            456,
            8255,
            732,
            293,
            1190,
            341,
            550,
            291,
            393,
            536,
            300,
            321,
            483,
            264,
            912,
            1874,
            50988
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03636429227631668,
          "compression_ratio": 2.0125,
          "no_speech_prob": 0.17089061439037323,
          "confidence": 0.8291093856096268
        },
        {
          "id": 44,
          "start": 275.12,
          "end": 279.59999999999997,
          "text": "because it just assumed that we wanted to start at the beginning. Now if we just wanted to grab",
          "tokens": [
            50988,
            570,
            309,
            445,
            15895,
            300,
            321,
            1415,
            281,
            722,
            412,
            264,
            2863,
            13,
            823,
            498,
            321,
            445,
            1415,
            281,
            4444,
            51212
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03636429227631668,
          "compression_ratio": 2.0125,
          "no_speech_prob": 0.17089061439037323,
          "confidence": 0.8291093856096268
        }
      ],
      "duration": 26.839999999999975
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 274.59999999999997,
      "end_time": 301.36,
      "text": "the courses with nothing there colon two and run this then you can see that we get the same result because it just assumed that we wanted to start at the beginning. Now if we just wanted to grab physics and comp sci from this list then we can say that we want to start at index two and then put in our colon and now just like our starting index if we don't put anything here then it's going to assume that we want to go all the way to the end of the list. So if I run this then you can see that it printed out physics and comp sci because it started at our second index which is",
      "original_segments": [
        {
          "id": 45,
          "start": 279.59999999999997,
          "end": 286.08,
          "text": "physics and comp sci from this list then we can say that we want to start at index two and then",
          "tokens": [
            51212,
            10649,
            293,
            715,
            2180,
            490,
            341,
            1329,
            550,
            321,
            393,
            584,
            300,
            321,
            528,
            281,
            722,
            412,
            8186,
            732,
            293,
            550,
            51536
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03636429227631668,
          "compression_ratio": 2.0125,
          "no_speech_prob": 0.17089061439037323,
          "confidence": 0.8291093856096268
        },
        {
          "id": 46,
          "start": 286.08,
          "end": 291.76,
          "text": "put in our colon and now just like our starting index if we don't put anything here then it's",
          "tokens": [
            51536,
            829,
            294,
            527,
            8255,
            293,
            586,
            445,
            411,
            527,
            2891,
            8186,
            498,
            321,
            500,
            380,
            829,
            1340,
            510,
            550,
            309,
            311,
            51820
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03636429227631668,
          "compression_ratio": 2.0125,
          "no_speech_prob": 0.17089061439037323,
          "confidence": 0.8291093856096268
        },
        {
          "id": 47,
          "start": 291.76,
          "end": 296.64,
          "text": "going to assume that we want to go all the way to the end of the list. So if I run this then you",
          "tokens": [
            50364,
            516,
            281,
            6552,
            300,
            321,
            528,
            281,
            352,
            439,
            264,
            636,
            281,
            264,
            917,
            295,
            264,
            1329,
            13,
            407,
            498,
            286,
            1190,
            341,
            550,
            291,
            50608
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03849908477025674,
          "compression_ratio": 1.8386075949367089,
          "no_speech_prob": 0.0008898044470697641,
          "confidence": 0.9991101955529302
        },
        {
          "id": 48,
          "start": 296.64,
          "end": 301.36,
          "text": "can see that it printed out physics and comp sci because it started at our second index which is",
          "tokens": [
            50608,
            393,
            536,
            300,
            309,
            13567,
            484,
            10649,
            293,
            715,
            2180,
            570,
            309,
            1409,
            412,
            527,
            1150,
            8186,
            597,
            307,
            50844
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03849908477025674,
          "compression_ratio": 1.8386075949367089,
          "no_speech_prob": 0.0008898044470697641,
          "confidence": 0.9991101955529302
        }
      ],
      "duration": 26.760000000000048
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 296.36,
      "end_time": 325.76,
      "text": "going to assume that we want to go all the way to the end of the list. So if I run this then you can see that it printed out physics and comp sci because it started at our second index which is physics and just went all the way to the end. Now what we're doing here is called slicing and if you'd like to learn more about slicing in depth then you can watch my detailed video on that which shows you how you can skip values go in reverse and things like that and I'll leave a link to that video in the description section below. Okay so let's look at some list methods that we have available to us that allow us to modify our list. So first let's say that we wanted to add an item",
      "original_segments": [
        {
          "id": 49,
          "start": 301.36,
          "end": 306.08,
          "text": "physics and just went all the way to the end. Now what we're doing here is called slicing and if",
          "tokens": [
            50844,
            10649,
            293,
            445,
            1437,
            439,
            264,
            636,
            281,
            264,
            917,
            13,
            823,
            437,
            321,
            434,
            884,
            510,
            307,
            1219,
            46586,
            293,
            498,
            51080
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03849908477025674,
          "compression_ratio": 1.8386075949367089,
          "no_speech_prob": 0.0008898044470697641,
          "confidence": 0.9991101955529302
        },
        {
          "id": 50,
          "start": 306.08,
          "end": 310.48,
          "text": "you'd like to learn more about slicing in depth then you can watch my detailed video on that which",
          "tokens": [
            51080,
            291,
            1116,
            411,
            281,
            1466,
            544,
            466,
            46586,
            294,
            7161,
            550,
            291,
            393,
            1159,
            452,
            9942,
            960,
            322,
            300,
            597,
            51300
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03849908477025674,
          "compression_ratio": 1.8386075949367089,
          "no_speech_prob": 0.0008898044470697641,
          "confidence": 0.9991101955529302
        },
        {
          "id": 51,
          "start": 310.48,
          "end": 315.28,
          "text": "shows you how you can skip values go in reverse and things like that and I'll leave a link to",
          "tokens": [
            51300,
            3110,
            291,
            577,
            291,
            393,
            10023,
            4190,
            352,
            294,
            9943,
            293,
            721,
            411,
            300,
            293,
            286,
            603,
            1856,
            257,
            2113,
            281,
            51540
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03849908477025674,
          "compression_ratio": 1.8386075949367089,
          "no_speech_prob": 0.0008898044470697641,
          "confidence": 0.9991101955529302
        },
        {
          "id": 52,
          "start": 315.28,
          "end": 320.24,
          "text": "that video in the description section below. Okay so let's look at some list methods that we have",
          "tokens": [
            51540,
            300,
            960,
            294,
            264,
            3855,
            3541,
            2507,
            13,
            1033,
            370,
            718,
            311,
            574,
            412,
            512,
            1329,
            7150,
            300,
            321,
            362,
            51788
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03849908477025674,
          "compression_ratio": 1.8386075949367089,
          "no_speech_prob": 0.0008898044470697641,
          "confidence": 0.9991101955529302
        },
        {
          "id": 53,
          "start": 320.24,
          "end": 325.76,
          "text": "available to us that allow us to modify our list. So first let's say that we wanted to add an item",
          "tokens": [
            50364,
            2435,
            281,
            505,
            300,
            2089,
            505,
            281,
            16927,
            527,
            1329,
            13,
            407,
            700,
            718,
            311,
            584,
            300,
            321,
            1415,
            281,
            909,
            364,
            3174,
            50640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05650410743860098,
          "compression_ratio": 2.0364583333333335,
          "no_speech_prob": 0.009532056748867035,
          "confidence": 0.990467943251133
        }
      ],
      "duration": 29.399999999999977
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 320.76,
      "end_time": 346.72,
      "text": "available to us that allow us to modify our list. So first let's say that we wanted to add an item to our list there are a couple of ways we can do this. So first if we just wanted to add an item to the end of our list then we could use the append method. So let's say that we want to add art to our courses so we can just say courses dot append and we want to append art. So now if I remove",
      "original_segments": [
        {
          "id": 54,
          "start": 325.76,
          "end": 331.6,
          "text": "to our list there are a couple of ways we can do this. So first if we just wanted to add an item to",
          "tokens": [
            50640,
            281,
            527,
            1329,
            456,
            366,
            257,
            1916,
            295,
            2098,
            321,
            393,
            360,
            341,
            13,
            407,
            700,
            498,
            321,
            445,
            1415,
            281,
            909,
            364,
            3174,
            281,
            50932
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05650410743860098,
          "compression_ratio": 2.0364583333333335,
          "no_speech_prob": 0.009532056748867035,
          "confidence": 0.990467943251133
        },
        {
          "id": 55,
          "start": 331.6,
          "end": 337.68,
          "text": "the end of our list then we could use the append method. So let's say that we want to add art to",
          "tokens": [
            50932,
            264,
            917,
            295,
            527,
            1329,
            550,
            321,
            727,
            764,
            264,
            34116,
            3170,
            13,
            407,
            718,
            311,
            584,
            300,
            321,
            528,
            281,
            909,
            1523,
            281,
            51236
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05650410743860098,
          "compression_ratio": 2.0364583333333335,
          "no_speech_prob": 0.009532056748867035,
          "confidence": 0.990467943251133
        },
        {
          "id": 56,
          "start": 337.68,
          "end": 346.72,
          "text": "our courses so we can just say courses dot append and we want to append art. So now if I remove",
          "tokens": [
            51236,
            527,
            7712,
            370,
            321,
            393,
            445,
            584,
            7712,
            5893,
            34116,
            293,
            321,
            528,
            281,
            34116,
            1523,
            13,
            407,
            586,
            498,
            286,
            4159,
            51688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05650410743860098,
          "compression_ratio": 2.0364583333333335,
          "no_speech_prob": 0.009532056748867035,
          "confidence": 0.990467943251133
        }
      ],
      "duration": 25.960000000000036
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 341.72,
      "end_time": 369.84000000000003,
      "text": "our courses so we can just say courses dot append and we want to append art. So now if I remove this slicing and just print out our courses list and run that then you can see the art was appended here to the end of the list. Now if we wanted to instead add art to a specific location in our list then we could instead use the insert method. Now insert takes two arguments first it takes the index where you want the to insert the value and then the value itself. So if I wanted to insert",
      "original_segments": [
        {
          "id": 57,
          "start": 346.72,
          "end": 352.48,
          "text": "this slicing and just print out our courses list and run that then you can see the art was appended",
          "tokens": [
            50364,
            341,
            46586,
            293,
            445,
            4482,
            484,
            527,
            7712,
            1329,
            293,
            1190,
            300,
            550,
            291,
            393,
            536,
            264,
            1523,
            390,
            724,
            3502,
            50652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04895317426291845,
          "compression_ratio": 1.7935779816513762,
          "no_speech_prob": 0.1041128933429718,
          "confidence": 0.8958871066570282
        },
        {
          "id": 58,
          "start": 352.48,
          "end": 358.64000000000004,
          "text": "here to the end of the list. Now if we wanted to instead add art to a specific location in our list",
          "tokens": [
            50652,
            510,
            281,
            264,
            917,
            295,
            264,
            1329,
            13,
            823,
            498,
            321,
            1415,
            281,
            2602,
            909,
            1523,
            281,
            257,
            2685,
            4914,
            294,
            527,
            1329,
            50960
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04895317426291845,
          "compression_ratio": 1.7935779816513762,
          "no_speech_prob": 0.1041128933429718,
          "confidence": 0.8958871066570282
        },
        {
          "id": 59,
          "start": 358.64000000000004,
          "end": 363.84000000000003,
          "text": "then we could instead use the insert method. Now insert takes two arguments first it takes the",
          "tokens": [
            50960,
            550,
            321,
            727,
            2602,
            764,
            264,
            8969,
            3170,
            13,
            823,
            8969,
            2516,
            732,
            12869,
            700,
            309,
            2516,
            264,
            51220
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04895317426291845,
          "compression_ratio": 1.7935779816513762,
          "no_speech_prob": 0.1041128933429718,
          "confidence": 0.8958871066570282
        },
        {
          "id": 60,
          "start": 363.84000000000003,
          "end": 369.84000000000003,
          "text": "index where you want the to insert the value and then the value itself. So if I wanted to insert",
          "tokens": [
            51220,
            8186,
            689,
            291,
            528,
            264,
            281,
            8969,
            264,
            2158,
            293,
            550,
            264,
            2158,
            2564,
            13,
            407,
            498,
            286,
            1415,
            281,
            8969,
            51520
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04895317426291845,
          "compression_ratio": 1.7935779816513762,
          "no_speech_prob": 0.1041128933429718,
          "confidence": 0.8958871066570282
        }
      ],
      "duration": 28.120000000000005
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 364.84000000000003,
      "end_time": 394.55999999999995,
      "text": "index where you want the to insert the value and then the value itself. So if I wanted to insert art to the beginning of our list then we could say courses dot insert and now the first argument is the location so let's just say location zero which is the beginning and then the value that we want to insert which is art. So if we run this now we can see that art was inserted at position zero. Now that only inserted the value it didn't override anything so you can see that all the",
      "original_segments": [
        {
          "id": 61,
          "start": 370.0,
          "end": 377.76,
          "text": "art to the beginning of our list then we could say courses dot insert and now the first argument",
          "tokens": [
            50372,
            1523,
            281,
            264,
            2863,
            295,
            527,
            1329,
            550,
            321,
            727,
            584,
            7712,
            5893,
            8969,
            293,
            586,
            264,
            700,
            6770,
            50760
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06729547466550555,
          "compression_ratio": 1.8937007874015748,
          "no_speech_prob": 0.24450598657131195,
          "confidence": 0.755494013428688
        },
        {
          "id": 62,
          "start": 377.76,
          "end": 382.64,
          "text": "is the location so let's just say location zero which is the beginning and then the value that",
          "tokens": [
            50760,
            307,
            264,
            4914,
            370,
            718,
            311,
            445,
            584,
            4914,
            4018,
            597,
            307,
            264,
            2863,
            293,
            550,
            264,
            2158,
            300,
            51004
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06729547466550555,
          "compression_ratio": 1.8937007874015748,
          "no_speech_prob": 0.24450598657131195,
          "confidence": 0.755494013428688
        },
        {
          "id": 63,
          "start": 382.64,
          "end": 389.35999999999996,
          "text": "we want to insert which is art. So if we run this now we can see that art was inserted at position",
          "tokens": [
            51004,
            321,
            528,
            281,
            8969,
            597,
            307,
            1523,
            13,
            407,
            498,
            321,
            1190,
            341,
            586,
            321,
            393,
            536,
            300,
            1523,
            390,
            27992,
            412,
            2535,
            51340
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06729547466550555,
          "compression_ratio": 1.8937007874015748,
          "no_speech_prob": 0.24450598657131195,
          "confidence": 0.755494013428688
        },
        {
          "id": 64,
          "start": 389.35999999999996,
          "end": 394.55999999999995,
          "text": "zero. Now that only inserted the value it didn't override anything so you can see that all the",
          "tokens": [
            51340,
            4018,
            13,
            823,
            300,
            787,
            27992,
            264,
            2158,
            309,
            994,
            380,
            42321,
            1340,
            370,
            291,
            393,
            536,
            300,
            439,
            264,
            51600
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06729547466550555,
          "compression_ratio": 1.8937007874015748,
          "no_speech_prob": 0.24450598657131195,
          "confidence": 0.755494013428688
        }
      ],
      "duration": 29.719999999999914
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 389.55999999999995,
      "end_time": 417.68,
      "text": "zero. Now that only inserted the value it didn't override anything so you can see that all the other courses are still here but they just got shifted. Now another way of adding values to our list is using the extend method. Now sometimes this confuses people so let's look at what this does. So we want to use extend when we have multiple values that we want to add to our list. So for example let's say that we have another list here called courses two and we'll set this equal",
      "original_segments": [
        {
          "id": 65,
          "start": 394.55999999999995,
          "end": 399.35999999999996,
          "text": "other courses are still here but they just got shifted. Now another way of adding values to our",
          "tokens": [
            51600,
            661,
            7712,
            366,
            920,
            510,
            457,
            436,
            445,
            658,
            18892,
            13,
            823,
            1071,
            636,
            295,
            5127,
            4190,
            281,
            527,
            51840
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06729547466550555,
          "compression_ratio": 1.8937007874015748,
          "no_speech_prob": 0.24450598657131195,
          "confidence": 0.755494013428688
        },
        {
          "id": 66,
          "start": 399.36,
          "end": 405.04,
          "text": "list is using the extend method. Now sometimes this confuses people so let's look at what this",
          "tokens": [
            50364,
            1329,
            307,
            1228,
            264,
            10101,
            3170,
            13,
            823,
            2171,
            341,
            1497,
            8355,
            561,
            370,
            718,
            311,
            574,
            412,
            437,
            341,
            50648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03894059376050067,
          "compression_ratio": 1.8428571428571427,
          "no_speech_prob": 0.00031537588802166283,
          "confidence": 0.9996846241119783
        },
        {
          "id": 67,
          "start": 405.04,
          "end": 410.96000000000004,
          "text": "does. So we want to use extend when we have multiple values that we want to add to our list.",
          "tokens": [
            50648,
            775,
            13,
            407,
            321,
            528,
            281,
            764,
            10101,
            562,
            321,
            362,
            3866,
            4190,
            300,
            321,
            528,
            281,
            909,
            281,
            527,
            1329,
            13,
            50944
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03894059376050067,
          "compression_ratio": 1.8428571428571427,
          "no_speech_prob": 0.00031537588802166283,
          "confidence": 0.9996846241119783
        },
        {
          "id": 68,
          "start": 410.96000000000004,
          "end": 417.68,
          "text": "So for example let's say that we have another list here called courses two and we'll set this equal",
          "tokens": [
            50944,
            407,
            337,
            1365,
            718,
            311,
            584,
            300,
            321,
            362,
            1071,
            1329,
            510,
            1219,
            7712,
            732,
            293,
            321,
            603,
            992,
            341,
            2681,
            51280
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03894059376050067,
          "compression_ratio": 1.8428571428571427,
          "no_speech_prob": 0.00031537588802166283,
          "confidence": 0.9996846241119783
        }
      ],
      "duration": 28.12000000000006
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 412.68,
      "end_time": 439.59999999999997,
      "text": "So for example let's say that we have another list here called courses two and we'll set this equal to another list with art and education in this list and we want to add these values to our original courses list. So first let's see what happens if we use this insert method. So instead of inserting art to the beginning of our list let's instead insert these courses to the beginning of our list.",
      "original_segments": [
        {
          "id": 69,
          "start": 417.68,
          "end": 427.28000000000003,
          "text": "to another list with art and education in this list and we want to add these values to our original",
          "tokens": [
            51280,
            281,
            1071,
            1329,
            365,
            1523,
            293,
            3309,
            294,
            341,
            1329,
            293,
            321,
            528,
            281,
            909,
            613,
            4190,
            281,
            527,
            3380,
            51760
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03894059376050067,
          "compression_ratio": 1.8428571428571427,
          "no_speech_prob": 0.00031537588802166283,
          "confidence": 0.9996846241119783
        },
        {
          "id": 70,
          "start": 427.28,
          "end": 433.84,
          "text": "courses list. So first let's see what happens if we use this insert method. So instead of inserting",
          "tokens": [
            50364,
            7712,
            1329,
            13,
            407,
            700,
            718,
            311,
            536,
            437,
            2314,
            498,
            321,
            764,
            341,
            8969,
            3170,
            13,
            407,
            2602,
            295,
            46567,
            50692
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04026970964797,
          "compression_ratio": 2.0362694300518136,
          "no_speech_prob": 0.020197268575429916,
          "confidence": 0.9798027314245701
        },
        {
          "id": 71,
          "start": 433.84,
          "end": 439.59999999999997,
          "text": "art to the beginning of our list let's instead insert these courses to the beginning of our list.",
          "tokens": [
            50692,
            1523,
            281,
            264,
            2863,
            295,
            527,
            1329,
            718,
            311,
            2602,
            8969,
            613,
            7712,
            281,
            264,
            2863,
            295,
            527,
            1329,
            13,
            50980
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04026970964797,
          "compression_ratio": 2.0362694300518136,
          "no_speech_prob": 0.020197268575429916,
          "confidence": 0.9798027314245701
        }
      ],
      "duration": 26.91999999999996
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 434.59999999999997,
      "end_time": 459.84000000000003,
      "text": "art to the beginning of our list let's instead insert these courses to the beginning of our list. So let's go ahead and run this. So we can see that at the beginning of our list that it actually added the entire list of courses two and not each individual value. So we can actually have a list within a list like we have here. So if we were to print the first value of our courses list,",
      "original_segments": [
        {
          "id": 72,
          "start": 439.59999999999997,
          "end": 445.44,
          "text": "So let's go ahead and run this. So we can see that at the beginning of our list that it actually",
          "tokens": [
            50980,
            407,
            718,
            311,
            352,
            2286,
            293,
            1190,
            341,
            13,
            407,
            321,
            393,
            536,
            300,
            412,
            264,
            2863,
            295,
            527,
            1329,
            300,
            309,
            767,
            51272
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04026970964797,
          "compression_ratio": 2.0362694300518136,
          "no_speech_prob": 0.020197268575429916,
          "confidence": 0.9798027314245701
        },
        {
          "id": 73,
          "start": 445.44,
          "end": 453.67999999999995,
          "text": "added the entire list of courses two and not each individual value. So we can actually have a list",
          "tokens": [
            51272,
            3869,
            264,
            2302,
            1329,
            295,
            7712,
            732,
            293,
            406,
            1184,
            2609,
            2158,
            13,
            407,
            321,
            393,
            767,
            362,
            257,
            1329,
            51684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04026970964797,
          "compression_ratio": 2.0362694300518136,
          "no_speech_prob": 0.020197268575429916,
          "confidence": 0.9798027314245701
        },
        {
          "id": 74,
          "start": 453.68,
          "end": 459.84000000000003,
          "text": "within a list like we have here. So if we were to print the first value of our courses list,",
          "tokens": [
            50364,
            1951,
            257,
            1329,
            411,
            321,
            362,
            510,
            13,
            407,
            498,
            321,
            645,
            281,
            4482,
            264,
            700,
            2158,
            295,
            527,
            7712,
            1329,
            11,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04509711662928263,
          "compression_ratio": 1.7727272727272727,
          "no_speech_prob": 0.2450704276561737,
          "confidence": 0.7549295723438263
        }
      ],
      "duration": 25.240000000000066
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 454.84000000000003,
      "end_time": 482.24,
      "text": "within a list like we have here. So if we were to print the first value of our courses list, so I'll print out the index of zero and run that, then we can see that now the first value is actually this list itself but this isn't really what we wanted. We wanted to add all of those values from our second list to our original list. Now that is why we use the extend method. So let's go ahead and set this back to the way it was to just print the courses. Now instead of",
      "original_segments": [
        {
          "id": 75,
          "start": 459.84000000000003,
          "end": 465.36,
          "text": "so I'll print out the index of zero and run that, then we can see that now the first value is",
          "tokens": [
            50672,
            370,
            286,
            603,
            4482,
            484,
            264,
            8186,
            295,
            4018,
            293,
            1190,
            300,
            11,
            550,
            321,
            393,
            536,
            300,
            586,
            264,
            700,
            2158,
            307,
            50948
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04509711662928263,
          "compression_ratio": 1.7727272727272727,
          "no_speech_prob": 0.2450704276561737,
          "confidence": 0.7549295723438263
        },
        {
          "id": 76,
          "start": 465.36,
          "end": 471.04,
          "text": "actually this list itself but this isn't really what we wanted. We wanted to add all of those",
          "tokens": [
            50948,
            767,
            341,
            1329,
            2564,
            457,
            341,
            1943,
            380,
            534,
            437,
            321,
            1415,
            13,
            492,
            1415,
            281,
            909,
            439,
            295,
            729,
            51232
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04509711662928263,
          "compression_ratio": 1.7727272727272727,
          "no_speech_prob": 0.2450704276561737,
          "confidence": 0.7549295723438263
        },
        {
          "id": 77,
          "start": 471.04,
          "end": 477.12,
          "text": "values from our second list to our original list. Now that is why we use the extend method.",
          "tokens": [
            51232,
            4190,
            490,
            527,
            1150,
            1329,
            281,
            527,
            3380,
            1329,
            13,
            823,
            300,
            307,
            983,
            321,
            764,
            264,
            10101,
            3170,
            13,
            51536
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04509711662928263,
          "compression_ratio": 1.7727272727272727,
          "no_speech_prob": 0.2450704276561737,
          "confidence": 0.7549295723438263
        },
        {
          "id": 78,
          "start": 477.12,
          "end": 482.24,
          "text": "So let's go ahead and set this back to the way it was to just print the courses. Now instead of",
          "tokens": [
            51536,
            407,
            718,
            311,
            352,
            2286,
            293,
            992,
            341,
            646,
            281,
            264,
            636,
            309,
            390,
            281,
            445,
            4482,
            264,
            7712,
            13,
            823,
            2602,
            295,
            51792
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04509711662928263,
          "compression_ratio": 1.7727272727272727,
          "no_speech_prob": 0.2450704276561737,
          "confidence": 0.7549295723438263
        }
      ],
      "duration": 27.399999999999977
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 477.24,
      "end_time": 502.96000000000004,
      "text": "So let's go ahead and set this back to the way it was to just print the courses. Now instead of inserting here we'll instead use extend and it only takes one argument which is the iterable. So we will extend courses with courses two. So now if we run this then we can see that when we did courses.extend with courses two that it added the values from our second list",
      "original_segments": [
        {
          "id": 79,
          "start": 482.24,
          "end": 488.56,
          "text": "inserting here we'll instead use extend and it only takes one argument which is the",
          "tokens": [
            50364,
            46567,
            510,
            321,
            603,
            2602,
            764,
            10101,
            293,
            309,
            787,
            2516,
            472,
            6770,
            597,
            307,
            264,
            50680
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049655060191730875,
          "compression_ratio": 1.7655502392344498,
          "no_speech_prob": 0.004030878655612469,
          "confidence": 0.9959691213443875
        },
        {
          "id": 80,
          "start": 488.56,
          "end": 496.16,
          "text": "iterable. So we will extend courses with courses two. So now if we run this then we can see that",
          "tokens": [
            50680,
            17138,
            712,
            13,
            407,
            321,
            486,
            10101,
            7712,
            365,
            7712,
            732,
            13,
            407,
            586,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            51060
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049655060191730875,
          "compression_ratio": 1.7655502392344498,
          "no_speech_prob": 0.004030878655612469,
          "confidence": 0.9959691213443875
        },
        {
          "id": 81,
          "start": 496.16,
          "end": 502.96000000000004,
          "text": "when we did courses.extend with courses two that it added the values from our second list",
          "tokens": [
            51060,
            562,
            321,
            630,
            7712,
            13,
            3828,
            521,
            365,
            7712,
            732,
            300,
            309,
            3869,
            264,
            4190,
            490,
            527,
            1150,
            1329,
            51400
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049655060191730875,
          "compression_ratio": 1.7655502392344498,
          "no_speech_prob": 0.004030878655612469,
          "confidence": 0.9959691213443875
        }
      ],
      "duration": 25.720000000000027
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 497.96000000000004,
      "end_time": 523.36,
      "text": "when we did courses.extend with courses two that it added the values from our second list here to our original. So a lot of people get that mixed up with append and extend. So again if you were to append it just like with insert then it's just going to append the list itself on there instead of the each individual item. So if we use extend then now we can see that each individual",
      "original_segments": [
        {
          "id": 82,
          "start": 503.52,
          "end": 510.32,
          "text": "here to our original. So a lot of people get that mixed up with append and extend. So again if you",
          "tokens": [
            51428,
            510,
            281,
            527,
            3380,
            13,
            407,
            257,
            688,
            295,
            561,
            483,
            300,
            7467,
            493,
            365,
            34116,
            293,
            10101,
            13,
            407,
            797,
            498,
            291,
            51768
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049655060191730875,
          "compression_ratio": 1.7655502392344498,
          "no_speech_prob": 0.004030878655612469,
          "confidence": 0.9959691213443875
        },
        {
          "id": 83,
          "start": 510.32,
          "end": 516.48,
          "text": "were to append it just like with insert then it's just going to append the list itself on there",
          "tokens": [
            50364,
            645,
            281,
            34116,
            309,
            445,
            411,
            365,
            8969,
            550,
            309,
            311,
            445,
            516,
            281,
            34116,
            264,
            1329,
            2564,
            322,
            456,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045638716848273024,
          "compression_ratio": 1.8571428571428572,
          "no_speech_prob": 0.001154548255726695,
          "confidence": 0.9988454517442733
        },
        {
          "id": 84,
          "start": 516.48,
          "end": 523.36,
          "text": "instead of the each individual item. So if we use extend then now we can see that each individual",
          "tokens": [
            50672,
            2602,
            295,
            264,
            1184,
            2609,
            3174,
            13,
            407,
            498,
            321,
            764,
            10101,
            550,
            586,
            321,
            393,
            536,
            300,
            1184,
            2609,
            51016
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045638716848273024,
          "compression_ratio": 1.8571428571428572,
          "no_speech_prob": 0.001154548255726695,
          "confidence": 0.9988454517442733
        }
      ],
      "duration": 25.399999999999977
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 518.36,
      "end_time": 545.76,
      "text": "instead of the each individual item. So if we use extend then now we can see that each individual item is extended onto that list. Okay so now let's look at how we can remove some items or remove some values from our list. Now one way to remove values is to just use the remove method. So if we were to say courses.remove then let's say that we wanted to remove math. So if we save that and run",
      "original_segments": [
        {
          "id": 85,
          "start": 523.36,
          "end": 531.12,
          "text": "item is extended onto that list. Okay so now let's look at how we can remove some items or remove",
          "tokens": [
            51016,
            3174,
            307,
            10913,
            3911,
            300,
            1329,
            13,
            1033,
            370,
            586,
            718,
            311,
            574,
            412,
            577,
            321,
            393,
            4159,
            512,
            4754,
            420,
            4159,
            51404
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045638716848273024,
          "compression_ratio": 1.8571428571428572,
          "no_speech_prob": 0.001154548255726695,
          "confidence": 0.9988454517442733
        },
        {
          "id": 86,
          "start": 531.12,
          "end": 537.68,
          "text": "some values from our list. Now one way to remove values is to just use the remove method. So if we",
          "tokens": [
            51404,
            512,
            4190,
            490,
            527,
            1329,
            13,
            823,
            472,
            636,
            281,
            4159,
            4190,
            307,
            281,
            445,
            764,
            264,
            4159,
            3170,
            13,
            407,
            498,
            321,
            51732
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045638716848273024,
          "compression_ratio": 1.8571428571428572,
          "no_speech_prob": 0.001154548255726695,
          "confidence": 0.9988454517442733
        },
        {
          "id": 87,
          "start": 537.68,
          "end": 545.76,
          "text": "were to say courses.remove then let's say that we wanted to remove math. So if we save that and run",
          "tokens": [
            50364,
            645,
            281,
            584,
            7712,
            13,
            2579,
            1682,
            550,
            718,
            311,
            584,
            300,
            321,
            1415,
            281,
            4159,
            5221,
            13,
            407,
            498,
            321,
            3155,
            300,
            293,
            1190,
            50768
          ],
          "temperature": 0.0,
          "avg_logprob": -0.039235857297789375,
          "compression_ratio": 1.8564814814814814,
          "no_speech_prob": 0.002464612480252981,
          "confidence": 0.997535387519747
        }
      ],
      "duration": 27.399999999999977
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 540.76,
      "end_time": 566.8,
      "text": "were to say courses.remove then let's say that we wanted to remove math. So if we save that and run it then we can see that math was removed from the courses list. Now there's also a way of removing values with this pop method. So if we say courses.pop now by default this will remove the last value of our list. Now this is useful if we want to use our list like a stack or a queue. So if we run this",
      "original_segments": [
        {
          "id": 88,
          "start": 545.76,
          "end": 551.76,
          "text": "it then we can see that math was removed from the courses list. Now there's also a way of removing",
          "tokens": [
            50768,
            309,
            550,
            321,
            393,
            536,
            300,
            5221,
            390,
            7261,
            490,
            264,
            7712,
            1329,
            13,
            823,
            456,
            311,
            611,
            257,
            636,
            295,
            12720,
            51068
          ],
          "temperature": 0.0,
          "avg_logprob": -0.039235857297789375,
          "compression_ratio": 1.8564814814814814,
          "no_speech_prob": 0.002464612480252981,
          "confidence": 0.997535387519747
        },
        {
          "id": 89,
          "start": 551.76,
          "end": 560.0799999999999,
          "text": "values with this pop method. So if we say courses.pop now by default this will remove the last value of",
          "tokens": [
            51068,
            4190,
            365,
            341,
            1665,
            3170,
            13,
            407,
            498,
            321,
            584,
            7712,
            13,
            13872,
            586,
            538,
            7576,
            341,
            486,
            4159,
            264,
            1036,
            2158,
            295,
            51484
          ],
          "temperature": 0.0,
          "avg_logprob": -0.039235857297789375,
          "compression_ratio": 1.8564814814814814,
          "no_speech_prob": 0.002464612480252981,
          "confidence": 0.997535387519747
        },
        {
          "id": 90,
          "start": 560.0799999999999,
          "end": 566.8,
          "text": "our list. Now this is useful if we want to use our list like a stack or a queue. So if we run this",
          "tokens": [
            51484,
            527,
            1329,
            13,
            823,
            341,
            307,
            4420,
            498,
            321,
            528,
            281,
            764,
            527,
            1329,
            411,
            257,
            8630,
            420,
            257,
            18639,
            13,
            407,
            498,
            321,
            1190,
            341,
            51820
          ],
          "temperature": 0.0,
          "avg_logprob": -0.039235857297789375,
          "compression_ratio": 1.8564814814814814,
          "no_speech_prob": 0.002464612480252981,
          "confidence": 0.997535387519747
        }
      ],
      "duration": 26.039999999999964
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 561.8,
      "end_time": 586.0799999999999,
      "text": "our list. Now this is useful if we want to use our list like a stack or a queue. So if we run this like it is then we can see that comp sci was popped off of our list and now we just have these three courses. Now one other thing about pop is that it returns the value that it removed. So we can actually set a variable and grab that returned value. So if I set a variable here and say popped",
      "original_segments": [
        {
          "id": 91,
          "start": 566.8,
          "end": 573.1999999999999,
          "text": "like it is then we can see that comp sci was popped off of our list and now we just have these",
          "tokens": [
            50364,
            411,
            309,
            307,
            550,
            321,
            393,
            536,
            300,
            715,
            2180,
            390,
            21545,
            766,
            295,
            527,
            1329,
            293,
            586,
            321,
            445,
            362,
            613,
            50684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05467180954782586,
          "compression_ratio": 1.8130841121495327,
          "no_speech_prob": 0.0012862703297287226,
          "confidence": 0.9987137296702713
        },
        {
          "id": 92,
          "start": 573.1999999999999,
          "end": 579.3599999999999,
          "text": "three courses. Now one other thing about pop is that it returns the value that it removed. So we",
          "tokens": [
            50684,
            1045,
            7712,
            13,
            823,
            472,
            661,
            551,
            466,
            1665,
            307,
            300,
            309,
            11247,
            264,
            2158,
            300,
            309,
            7261,
            13,
            407,
            321,
            50992
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05467180954782586,
          "compression_ratio": 1.8130841121495327,
          "no_speech_prob": 0.0012862703297287226,
          "confidence": 0.9987137296702713
        },
        {
          "id": 93,
          "start": 579.3599999999999,
          "end": 586.0799999999999,
          "text": "can actually set a variable and grab that returned value. So if I set a variable here and say popped",
          "tokens": [
            50992,
            393,
            767,
            992,
            257,
            7006,
            293,
            4444,
            300,
            8752,
            2158,
            13,
            407,
            498,
            286,
            992,
            257,
            7006,
            510,
            293,
            584,
            21545,
            51328
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05467180954782586,
          "compression_ratio": 1.8130841121495327,
          "no_speech_prob": 0.0012862703297287226,
          "confidence": 0.9987137296702713
        }
      ],
      "duration": 24.279999999999973
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 581.0799999999999,
      "end_time": 605.6800000000001,
      "text": "can actually set a variable and grab that returned value. So if I set a variable here and say popped equals courses.pop and then I was to print this above our courses here and run that then we can see that it grabbed that comp sci value that was popped off of the list. So if you had a stack or a queue then you could go through and just keep popping off values until your list is empty.",
      "original_segments": [
        {
          "id": 94,
          "start": 586.0799999999999,
          "end": 594.24,
          "text": "equals courses.pop and then I was to print this above our courses here and run that then we can",
          "tokens": [
            51328,
            6915,
            7712,
            13,
            13872,
            293,
            550,
            286,
            390,
            281,
            4482,
            341,
            3673,
            527,
            7712,
            510,
            293,
            1190,
            300,
            550,
            321,
            393,
            51736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05467180954782586,
          "compression_ratio": 1.8130841121495327,
          "no_speech_prob": 0.0012862703297287226,
          "confidence": 0.9987137296702713
        },
        {
          "id": 95,
          "start": 594.24,
          "end": 599.84,
          "text": "see that it grabbed that comp sci value that was popped off of the list. So if you had a stack or a",
          "tokens": [
            50364,
            536,
            300,
            309,
            18607,
            300,
            715,
            2180,
            2158,
            300,
            390,
            21545,
            766,
            295,
            264,
            1329,
            13,
            407,
            498,
            291,
            632,
            257,
            8630,
            420,
            257,
            50644
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03413536490463629,
          "compression_ratio": 1.7408759124087592,
          "no_speech_prob": 0.031222304329276085,
          "confidence": 0.9687776956707239
        },
        {
          "id": 96,
          "start": 599.84,
          "end": 605.6800000000001,
          "text": "queue then you could go through and just keep popping off values until your list is empty.",
          "tokens": [
            50644,
            18639,
            550,
            291,
            727,
            352,
            807,
            293,
            445,
            1066,
            18374,
            766,
            4190,
            1826,
            428,
            1329,
            307,
            6707,
            13,
            50936
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03413536490463629,
          "compression_ratio": 1.7408759124087592,
          "no_speech_prob": 0.031222304329276085,
          "confidence": 0.9687776956707239
        }
      ],
      "duration": 24.600000000000136
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 600.6800000000001,
      "end_time": 629.84,
      "text": "queue then you could go through and just keep popping off values until your list is empty. Okay so now let's look at how we can sort our list in a couple of different ways here. So first of all let's say that we just wanted to reverse our list as it currently is. Now this is pretty easy so we can just use the reverse method. So as I can say courses.reverse and if we run this then we can see that now it prints out our courses but in reverse. So the last item all the way up",
      "original_segments": [
        {
          "id": 97,
          "start": 605.6800000000001,
          "end": 611.12,
          "text": "Okay so now let's look at how we can sort our list in a couple of different ways here. So first of",
          "tokens": [
            50936,
            1033,
            370,
            586,
            718,
            311,
            574,
            412,
            577,
            321,
            393,
            1333,
            527,
            1329,
            294,
            257,
            1916,
            295,
            819,
            2098,
            510,
            13,
            407,
            700,
            295,
            51208
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03413536490463629,
          "compression_ratio": 1.7408759124087592,
          "no_speech_prob": 0.031222304329276085,
          "confidence": 0.9687776956707239
        },
        {
          "id": 98,
          "start": 611.12,
          "end": 616.08,
          "text": "all let's say that we just wanted to reverse our list as it currently is. Now this is pretty easy",
          "tokens": [
            51208,
            439,
            718,
            311,
            584,
            300,
            321,
            445,
            1415,
            281,
            9943,
            527,
            1329,
            382,
            309,
            4362,
            307,
            13,
            823,
            341,
            307,
            1238,
            1858,
            51456
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03413536490463629,
          "compression_ratio": 1.7408759124087592,
          "no_speech_prob": 0.031222304329276085,
          "confidence": 0.9687776956707239
        },
        {
          "id": 99,
          "start": 616.08,
          "end": 623.36,
          "text": "so we can just use the reverse method. So as I can say courses.reverse and if we run this",
          "tokens": [
            51456,
            370,
            321,
            393,
            445,
            764,
            264,
            9943,
            3170,
            13,
            407,
            382,
            286,
            393,
            584,
            7712,
            13,
            265,
            4308,
            293,
            498,
            321,
            1190,
            341,
            51820
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03413536490463629,
          "compression_ratio": 1.7408759124087592,
          "no_speech_prob": 0.031222304329276085,
          "confidence": 0.9687776956707239
        },
        {
          "id": 100,
          "start": 623.36,
          "end": 629.84,
          "text": "then we can see that now it prints out our courses but in reverse. So the last item all the way up",
          "tokens": [
            50364,
            550,
            321,
            393,
            536,
            300,
            586,
            309,
            22305,
            484,
            527,
            7712,
            457,
            294,
            9943,
            13,
            407,
            264,
            1036,
            3174,
            439,
            264,
            636,
            493,
            50688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07127237319946289,
          "compression_ratio": 1.7857142857142858,
          "no_speech_prob": 0.0003470504016149789,
          "confidence": 0.999652949598385
        }
      ],
      "duration": 29.159999999999968
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 624.84,
      "end_time": 649.84,
      "text": "then we can see that now it prints out our courses but in reverse. So the last item all the way up until the first item. Now instead of reversing our list what if we wanted to sort our list. Now sorting is just as easy we can just use the sort method. So I'll save that and run it and you can see that now our list is sorted in an alphabetical order. So comp sci history math physics. Now if our list",
      "original_segments": [
        {
          "id": 101,
          "start": 629.84,
          "end": 636.48,
          "text": "until the first item. Now instead of reversing our list what if we wanted to sort our list. Now sorting",
          "tokens": [
            50688,
            1826,
            264,
            700,
            3174,
            13,
            823,
            2602,
            295,
            14582,
            278,
            527,
            1329,
            437,
            498,
            321,
            1415,
            281,
            1333,
            527,
            1329,
            13,
            823,
            32411,
            51020
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07127237319946289,
          "compression_ratio": 1.7857142857142858,
          "no_speech_prob": 0.0003470504016149789,
          "confidence": 0.999652949598385
        },
        {
          "id": 102,
          "start": 636.48,
          "end": 642.96,
          "text": "is just as easy we can just use the sort method. So I'll save that and run it and you can see that",
          "tokens": [
            51020,
            307,
            445,
            382,
            1858,
            321,
            393,
            445,
            764,
            264,
            1333,
            3170,
            13,
            407,
            286,
            603,
            3155,
            300,
            293,
            1190,
            309,
            293,
            291,
            393,
            536,
            300,
            51344
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07127237319946289,
          "compression_ratio": 1.7857142857142858,
          "no_speech_prob": 0.0003470504016149789,
          "confidence": 0.999652949598385
        },
        {
          "id": 103,
          "start": 642.96,
          "end": 649.84,
          "text": "now our list is sorted in an alphabetical order. So comp sci history math physics. Now if our list",
          "tokens": [
            51344,
            586,
            527,
            1329,
            307,
            25462,
            294,
            364,
            23339,
            804,
            1668,
            13,
            407,
            715,
            2180,
            2503,
            5221,
            10649,
            13,
            823,
            498,
            527,
            1329,
            51688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07127237319946289,
          "compression_ratio": 1.7857142857142858,
          "no_speech_prob": 0.0003470504016149789,
          "confidence": 0.999652949598385
        }
      ],
      "duration": 25.0
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 644.84,
      "end_time": 669.12,
      "text": "now our list is sorted in an alphabetical order. So comp sci history math physics. Now if our list contained numbers then it would sort those in ascending order. So let me call create another list here of numbers. I'll just call that nums and I'll set this equal to some random values. So I'll say one five four and three and we'll save that. Now below courses we will just say nums dot sort",
      "original_segments": [
        {
          "id": 104,
          "start": 649.84,
          "end": 655.52,
          "text": "contained numbers then it would sort those in ascending order. So let me call create another",
          "tokens": [
            50364,
            16212,
            3547,
            550,
            309,
            576,
            1333,
            729,
            294,
            15526,
            2029,
            1668,
            13,
            407,
            718,
            385,
            818,
            1884,
            1071,
            50648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08024299874597667,
          "compression_ratio": 1.7488584474885844,
          "no_speech_prob": 0.09669604897499084,
          "confidence": 0.9033039510250092
        },
        {
          "id": 105,
          "start": 655.52,
          "end": 660.8000000000001,
          "text": "list here of numbers. I'll just call that nums and I'll set this equal to some random values. So I'll",
          "tokens": [
            50648,
            1329,
            510,
            295,
            3547,
            13,
            286,
            603,
            445,
            818,
            300,
            1031,
            82,
            293,
            286,
            603,
            992,
            341,
            2681,
            281,
            512,
            4974,
            4190,
            13,
            407,
            286,
            603,
            50912
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08024299874597667,
          "compression_ratio": 1.7488584474885844,
          "no_speech_prob": 0.09669604897499084,
          "confidence": 0.9033039510250092
        },
        {
          "id": 106,
          "start": 660.8000000000001,
          "end": 669.12,
          "text": "say one five four and three and we'll save that. Now below courses we will just say nums dot sort",
          "tokens": [
            50912,
            584,
            472,
            1732,
            1451,
            293,
            1045,
            293,
            321,
            603,
            3155,
            300,
            13,
            823,
            2507,
            7712,
            321,
            486,
            445,
            584,
            1031,
            82,
            5893,
            1333,
            51328
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08024299874597667,
          "compression_ratio": 1.7488584474885844,
          "no_speech_prob": 0.09669604897499084,
          "confidence": 0.9033039510250092
        }
      ],
      "duration": 24.279999999999973
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 664.12,
      "end_time": 692.32,
      "text": "say one five four and three and we'll save that. Now below courses we will just say nums dot sort and we will also print these out. So I'll grab that variable print those out and run that. So now we can see that our strings were sorted alphabetically and our numbers were sorted in ascending order. Now what if we wanted our values sorted in descending order. Now one way you might think to do this is just to use our reverse method on the list after they're sorted and that would",
      "original_segments": [
        {
          "id": 107,
          "start": 669.12,
          "end": 676.08,
          "text": "and we will also print these out. So I'll grab that variable print those out and run that.",
          "tokens": [
            51328,
            293,
            321,
            486,
            611,
            4482,
            613,
            484,
            13,
            407,
            286,
            603,
            4444,
            300,
            7006,
            4482,
            729,
            484,
            293,
            1190,
            300,
            13,
            51676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08024299874597667,
          "compression_ratio": 1.7488584474885844,
          "no_speech_prob": 0.09669604897499084,
          "confidence": 0.9033039510250092
        },
        {
          "id": 108,
          "start": 676.08,
          "end": 680.96,
          "text": "So now we can see that our strings were sorted alphabetically and our numbers were sorted in",
          "tokens": [
            50364,
            407,
            586,
            321,
            393,
            536,
            300,
            527,
            13985,
            645,
            25462,
            23339,
            984,
            293,
            527,
            3547,
            645,
            25462,
            294,
            50608
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03549863141158532,
          "compression_ratio": 1.8764478764478765,
          "no_speech_prob": 0.001529290690086782,
          "confidence": 0.9984707093099132
        },
        {
          "id": 109,
          "start": 680.96,
          "end": 686.8000000000001,
          "text": "ascending order. Now what if we wanted our values sorted in descending order. Now one way you might",
          "tokens": [
            50608,
            15526,
            2029,
            1668,
            13,
            823,
            437,
            498,
            321,
            1415,
            527,
            4190,
            25462,
            294,
            40182,
            1668,
            13,
            823,
            472,
            636,
            291,
            1062,
            50900
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03549863141158532,
          "compression_ratio": 1.8764478764478765,
          "no_speech_prob": 0.001529290690086782,
          "confidence": 0.9984707093099132
        },
        {
          "id": 110,
          "start": 686.8000000000001,
          "end": 692.32,
          "text": "think to do this is just to use our reverse method on the list after they're sorted and that would",
          "tokens": [
            50900,
            519,
            281,
            360,
            341,
            307,
            445,
            281,
            764,
            527,
            9943,
            3170,
            322,
            264,
            1329,
            934,
            436,
            434,
            25462,
            293,
            300,
            576,
            51176
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03549863141158532,
          "compression_ratio": 1.8764478764478765,
          "no_speech_prob": 0.001529290690086782,
          "confidence": 0.9984707093099132
        }
      ],
      "duration": 28.200000000000045
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 687.32,
      "end_time": 712.5600000000001,
      "text": "think to do this is just to use our reverse method on the list after they're sorted and that would work but there's an easier way to do this. Instead we can just pass an argument to our sort method called reverse. So if I come up here to the sort method and I pass reverse is equal to true and let me also grab this for our num sort and if I run this you can see that now these sorted are",
      "original_segments": [
        {
          "id": 111,
          "start": 692.32,
          "end": 698.08,
          "text": "work but there's an easier way to do this. Instead we can just pass an argument to our sort method",
          "tokens": [
            51176,
            589,
            457,
            456,
            311,
            364,
            3571,
            636,
            281,
            360,
            341,
            13,
            7156,
            321,
            393,
            445,
            1320,
            364,
            6770,
            281,
            527,
            1333,
            3170,
            51464
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03549863141158532,
          "compression_ratio": 1.8764478764478765,
          "no_speech_prob": 0.001529290690086782,
          "confidence": 0.9984707093099132
        },
        {
          "id": 112,
          "start": 698.08,
          "end": 705.12,
          "text": "called reverse. So if I come up here to the sort method and I pass reverse is equal to true and",
          "tokens": [
            51464,
            1219,
            9943,
            13,
            407,
            498,
            286,
            808,
            493,
            510,
            281,
            264,
            1333,
            3170,
            293,
            286,
            1320,
            9943,
            307,
            2681,
            281,
            2074,
            293,
            51816
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03549863141158532,
          "compression_ratio": 1.8764478764478765,
          "no_speech_prob": 0.001529290690086782,
          "confidence": 0.9984707093099132
        },
        {
          "id": 113,
          "start": 705.12,
          "end": 712.5600000000001,
          "text": "let me also grab this for our num sort and if I run this you can see that now these sorted are",
          "tokens": [
            50364,
            718,
            385,
            611,
            4444,
            341,
            337,
            527,
            1031,
            1333,
            293,
            498,
            286,
            1190,
            341,
            291,
            393,
            536,
            300,
            586,
            613,
            25462,
            366,
            50736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0417687843243281,
          "compression_ratio": 1.6991150442477876,
          "no_speech_prob": 0.0007651010528206825,
          "confidence": 0.9992348989471793
        }
      ],
      "duration": 25.24000000000001
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 707.5600000000001,
      "end_time": 731.2,
      "text": "let me also grab this for our num sort and if I run this you can see that now these sorted are in descending order. They're sorted in reverse order. Now one thing to notice here is that we don't need to reset our variables when we call most of these methods. It's just altering the list in place but there's also a way that we can get a sorted version of our list without altering the",
      "original_segments": [
        {
          "id": 114,
          "start": 712.5600000000001,
          "end": 718.64,
          "text": "in descending order. They're sorted in reverse order. Now one thing to notice here is that we",
          "tokens": [
            50736,
            294,
            40182,
            1668,
            13,
            814,
            434,
            25462,
            294,
            9943,
            1668,
            13,
            823,
            472,
            551,
            281,
            3449,
            510,
            307,
            300,
            321,
            51040
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0417687843243281,
          "compression_ratio": 1.6991150442477876,
          "no_speech_prob": 0.0007651010528206825,
          "confidence": 0.9992348989471793
        },
        {
          "id": 115,
          "start": 718.64,
          "end": 725.36,
          "text": "don't need to reset our variables when we call most of these methods. It's just altering the list",
          "tokens": [
            51040,
            500,
            380,
            643,
            281,
            14322,
            527,
            9102,
            562,
            321,
            818,
            881,
            295,
            613,
            7150,
            13,
            467,
            311,
            445,
            11337,
            278,
            264,
            1329,
            51376
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0417687843243281,
          "compression_ratio": 1.6991150442477876,
          "no_speech_prob": 0.0007651010528206825,
          "confidence": 0.9992348989471793
        },
        {
          "id": 116,
          "start": 725.36,
          "end": 731.2,
          "text": "in place but there's also a way that we can get a sorted version of our list without altering the",
          "tokens": [
            51376,
            294,
            1081,
            457,
            456,
            311,
            611,
            257,
            636,
            300,
            321,
            393,
            483,
            257,
            25462,
            3037,
            295,
            527,
            1329,
            1553,
            11337,
            278,
            264,
            51668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0417687843243281,
          "compression_ratio": 1.6991150442477876,
          "no_speech_prob": 0.0007651010528206825,
          "confidence": 0.9992348989471793
        }
      ],
      "duration": 23.639999999999986
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 726.2,
      "end_time": 752.8000000000001,
      "text": "in place but there's also a way that we can get a sorted version of our list without altering the original list. So what if we wanted a sorted version of our courses list without altering the original. So to do this we can use the sorted function. So instead of calling this sort method on our list we'll instead use this sorted function and I'll pass courses in to sorted there. Now if",
      "original_segments": [
        {
          "id": 117,
          "start": 731.2800000000001,
          "end": 738.8000000000001,
          "text": "original list. So what if we wanted a sorted version of our courses list without altering",
          "tokens": [
            50368,
            3380,
            1329,
            13,
            407,
            437,
            498,
            321,
            1415,
            257,
            25462,
            3037,
            295,
            527,
            7712,
            1329,
            1553,
            11337,
            278,
            50744
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05377250972547029,
          "compression_ratio": 1.8169014084507042,
          "no_speech_prob": 0.031256306916475296,
          "confidence": 0.9687436930835247
        },
        {
          "id": 118,
          "start": 738.8000000000001,
          "end": 745.5200000000001,
          "text": "the original. So to do this we can use the sorted function. So instead of calling this sort method",
          "tokens": [
            50744,
            264,
            3380,
            13,
            407,
            281,
            360,
            341,
            321,
            393,
            764,
            264,
            25462,
            2445,
            13,
            407,
            2602,
            295,
            5141,
            341,
            1333,
            3170,
            51080
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05377250972547029,
          "compression_ratio": 1.8169014084507042,
          "no_speech_prob": 0.031256306916475296,
          "confidence": 0.9687436930835247
        },
        {
          "id": 119,
          "start": 745.5200000000001,
          "end": 752.8000000000001,
          "text": "on our list we'll instead use this sorted function and I'll pass courses in to sorted there. Now if",
          "tokens": [
            51080,
            322,
            527,
            1329,
            321,
            603,
            2602,
            764,
            341,
            25462,
            2445,
            293,
            286,
            603,
            1320,
            7712,
            294,
            281,
            25462,
            456,
            13,
            823,
            498,
            51444
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05377250972547029,
          "compression_ratio": 1.8169014084507042,
          "no_speech_prob": 0.031256306916475296,
          "confidence": 0.9687436930835247
        }
      ],
      "duration": 26.600000000000023
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 747.8000000000001,
      "end_time": 771.36,
      "text": "on our list we'll instead use this sorted function and I'll pass courses in to sorted there. Now if we run this as it is then we can see that our list is not sorted. It's exactly how we described it up here. Now that's because the sorted function doesn't sort the list in place. It returns a sorted version of the list. So to get that sorted list we have to make a new variable",
      "original_segments": [
        {
          "id": 120,
          "start": 752.8000000000001,
          "end": 759.76,
          "text": "we run this as it is then we can see that our list is not sorted. It's exactly how we described it",
          "tokens": [
            51444,
            321,
            1190,
            341,
            382,
            309,
            307,
            550,
            321,
            393,
            536,
            300,
            527,
            1329,
            307,
            406,
            25462,
            13,
            467,
            311,
            2293,
            577,
            321,
            7619,
            309,
            51792
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05377250972547029,
          "compression_ratio": 1.8169014084507042,
          "no_speech_prob": 0.031256306916475296,
          "confidence": 0.9687436930835247
        },
        {
          "id": 121,
          "start": 759.76,
          "end": 765.76,
          "text": "up here. Now that's because the sorted function doesn't sort the list in place. It returns a",
          "tokens": [
            50364,
            493,
            510,
            13,
            823,
            300,
            311,
            570,
            264,
            25462,
            2445,
            1177,
            380,
            1333,
            264,
            1329,
            294,
            1081,
            13,
            467,
            11247,
            257,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03819635412195227,
          "compression_ratio": 1.8316831683168318,
          "no_speech_prob": 0.0025272397324442863,
          "confidence": 0.9974727602675557
        },
        {
          "id": 122,
          "start": 765.76,
          "end": 771.36,
          "text": "sorted version of the list. So to get that sorted list we have to make a new variable",
          "tokens": [
            50664,
            25462,
            3037,
            295,
            264,
            1329,
            13,
            407,
            281,
            483,
            300,
            25462,
            1329,
            321,
            362,
            281,
            652,
            257,
            777,
            7006,
            50944
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03819635412195227,
          "compression_ratio": 1.8316831683168318,
          "no_speech_prob": 0.0025272397324442863,
          "confidence": 0.9974727602675557
        }
      ],
      "duration": 23.559999999999945
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 766.36,
      "end_time": 795.6800000000001,
      "text": "sorted version of the list. So to get that sorted list we have to make a new variable and set it to the return value of the sorted function. So I could just call this sorted courses is equal to the sorted version of that courses list and now if we copy that and print that out. So now we can see that this sorted courses is equal to the sorted version of that list. So that's really useful because a lot of the times you won't want to alter your original list",
      "original_segments": [
        {
          "id": 123,
          "start": 771.36,
          "end": 778.3199999999999,
          "text": "and set it to the return value of the sorted function. So I could just call this sorted courses",
          "tokens": [
            50944,
            293,
            992,
            309,
            281,
            264,
            2736,
            2158,
            295,
            264,
            25462,
            2445,
            13,
            407,
            286,
            727,
            445,
            818,
            341,
            25462,
            7712,
            51292
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03819635412195227,
          "compression_ratio": 1.8316831683168318,
          "no_speech_prob": 0.0025272397324442863,
          "confidence": 0.9974727602675557
        },
        {
          "id": 124,
          "start": 778.3199999999999,
          "end": 785.84,
          "text": "is equal to the sorted version of that courses list and now if we copy that and print that out.",
          "tokens": [
            51292,
            307,
            2681,
            281,
            264,
            25462,
            3037,
            295,
            300,
            7712,
            1329,
            293,
            586,
            498,
            321,
            5055,
            300,
            293,
            4482,
            300,
            484,
            13,
            51668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03819635412195227,
          "compression_ratio": 1.8316831683168318,
          "no_speech_prob": 0.0025272397324442863,
          "confidence": 0.9974727602675557
        },
        {
          "id": 125,
          "start": 785.84,
          "end": 790.5600000000001,
          "text": "So now we can see that this sorted courses is equal to the sorted version of that list.",
          "tokens": [
            50364,
            407,
            586,
            321,
            393,
            536,
            300,
            341,
            25462,
            7712,
            307,
            2681,
            281,
            264,
            25462,
            3037,
            295,
            300,
            1329,
            13,
            50600
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04879527667473103,
          "compression_ratio": 1.9262295081967213,
          "no_speech_prob": 0.001751309260725975,
          "confidence": 0.998248690739274
        },
        {
          "id": 126,
          "start": 790.5600000000001,
          "end": 795.6800000000001,
          "text": "So that's really useful because a lot of the times you won't want to alter your original list",
          "tokens": [
            50600,
            407,
            300,
            311,
            534,
            4420,
            570,
            257,
            688,
            295,
            264,
            1413,
            291,
            1582,
            380,
            528,
            281,
            11337,
            428,
            3380,
            1329,
            50856
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04879527667473103,
          "compression_ratio": 1.9262295081967213,
          "no_speech_prob": 0.001751309260725975,
          "confidence": 0.998248690739274
        }
      ],
      "duration": 29.32000000000005
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 790.6800000000001,
      "end_time": 819.04,
      "text": "So that's really useful because a lot of the times you won't want to alter your original list in any way. So using this sorted function is a nice way to get a sorted version of that list without altering the original. And other than this sorted function there are a couple more useful built-ins that we can use with these sequences. So let's look at a few of these. So we'll look at min max and sum. So it's probably pretty obvious what these will do but if I wanted the minimum",
      "original_segments": [
        {
          "id": 127,
          "start": 795.6800000000001,
          "end": 801.0400000000001,
          "text": "in any way. So using this sorted function is a nice way to get a sorted version of that list",
          "tokens": [
            50856,
            294,
            604,
            636,
            13,
            407,
            1228,
            341,
            25462,
            2445,
            307,
            257,
            1481,
            636,
            281,
            483,
            257,
            25462,
            3037,
            295,
            300,
            1329,
            51124
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04879527667473103,
          "compression_ratio": 1.9262295081967213,
          "no_speech_prob": 0.001751309260725975,
          "confidence": 0.998248690739274
        },
        {
          "id": 128,
          "start": 801.0400000000001,
          "end": 806.32,
          "text": "without altering the original. And other than this sorted function there are a couple more useful",
          "tokens": [
            51124,
            1553,
            11337,
            278,
            264,
            3380,
            13,
            400,
            661,
            813,
            341,
            25462,
            2445,
            456,
            366,
            257,
            1916,
            544,
            4420,
            51388
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04879527667473103,
          "compression_ratio": 1.9262295081967213,
          "no_speech_prob": 0.001751309260725975,
          "confidence": 0.998248690739274
        },
        {
          "id": 129,
          "start": 806.32,
          "end": 812.24,
          "text": "built-ins that we can use with these sequences. So let's look at a few of these. So we'll look at",
          "tokens": [
            51388,
            3094,
            12,
            1292,
            300,
            321,
            393,
            764,
            365,
            613,
            22978,
            13,
            407,
            718,
            311,
            574,
            412,
            257,
            1326,
            295,
            613,
            13,
            407,
            321,
            603,
            574,
            412,
            51684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04879527667473103,
          "compression_ratio": 1.9262295081967213,
          "no_speech_prob": 0.001751309260725975,
          "confidence": 0.998248690739274
        },
        {
          "id": 130,
          "start": 812.24,
          "end": 819.04,
          "text": "min max and sum. So it's probably pretty obvious what these will do but if I wanted the minimum",
          "tokens": [
            50364,
            923,
            11469,
            293,
            2408,
            13,
            407,
            309,
            311,
            1391,
            1238,
            6322,
            437,
            613,
            486,
            360,
            457,
            498,
            286,
            1415,
            264,
            7285,
            50704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08715126911799113,
          "compression_ratio": 1.6740088105726871,
          "no_speech_prob": 0.10923601686954498,
          "confidence": 0.890763983130455
        }
      ],
      "duration": 28.3599999999999
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 814.04,
      "end_time": 842.88,
      "text": "min max and sum. So it's probably pretty obvious what these will do but if I wanted the minimum value of our numbers list here then let me comment out where we're printing out nums. So a built-in function that we can use is just min and call min on our sequence of numbers and if I run that then you can see that it returns one as the minimum number of that list. And if we wanted the max value of that list then we could use max and if I run that you can see it returns five.",
      "original_segments": [
        {
          "id": 131,
          "start": 819.04,
          "end": 826.24,
          "text": "value of our numbers list here then let me comment out where we're printing out nums. So a built-in",
          "tokens": [
            50704,
            2158,
            295,
            527,
            3547,
            1329,
            510,
            550,
            718,
            385,
            2871,
            484,
            689,
            321,
            434,
            14699,
            484,
            1031,
            82,
            13,
            407,
            257,
            3094,
            12,
            259,
            51064
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08715126911799113,
          "compression_ratio": 1.6740088105726871,
          "no_speech_prob": 0.10923601686954498,
          "confidence": 0.890763983130455
        },
        {
          "id": 132,
          "start": 826.24,
          "end": 832.16,
          "text": "function that we can use is just min and call min on our sequence of numbers and if I run that",
          "tokens": [
            51064,
            2445,
            300,
            321,
            393,
            764,
            307,
            445,
            923,
            293,
            818,
            923,
            322,
            527,
            8310,
            295,
            3547,
            293,
            498,
            286,
            1190,
            300,
            51360
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08715126911799113,
          "compression_ratio": 1.6740088105726871,
          "no_speech_prob": 0.10923601686954498,
          "confidence": 0.890763983130455
        },
        {
          "id": 133,
          "start": 832.16,
          "end": 836.96,
          "text": "then you can see that it returns one as the minimum number of that list. And if we wanted",
          "tokens": [
            51360,
            550,
            291,
            393,
            536,
            300,
            309,
            11247,
            472,
            382,
            264,
            7285,
            1230,
            295,
            300,
            1329,
            13,
            400,
            498,
            321,
            1415,
            51600
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08715126911799113,
          "compression_ratio": 1.6740088105726871,
          "no_speech_prob": 0.10923601686954498,
          "confidence": 0.890763983130455
        },
        {
          "id": 134,
          "start": 836.96,
          "end": 842.88,
          "text": "the max value of that list then we could use max and if I run that you can see it returns five.",
          "tokens": [
            50364,
            264,
            11469,
            2158,
            295,
            300,
            1329,
            550,
            321,
            727,
            764,
            11469,
            293,
            498,
            286,
            1190,
            300,
            291,
            393,
            536,
            309,
            11247,
            1732,
            13,
            50660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07898327316900697,
          "compression_ratio": 1.6508620689655173,
          "no_speech_prob": 0.16987137496471405,
          "confidence": 0.830128625035286
        }
      ],
      "duration": 28.840000000000032
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 837.88,
      "end_time": 863.2,
      "text": "the max value of that list then we could use max and if I run that you can see it returns five. Now if we wanted to print the sum of that entire sequence then I can just say sum of numbers. If I print that then it gets 15 because one plus five plus two plus four plus three is equal to 15. Okay so lastly let's see how we can find some values here within our list. So let me go ahead",
      "original_segments": [
        {
          "id": 135,
          "start": 843.6800000000001,
          "end": 850.0,
          "text": "Now if we wanted to print the sum of that entire sequence then I can just say sum of numbers. If",
          "tokens": [
            50700,
            823,
            498,
            321,
            1415,
            281,
            4482,
            264,
            2408,
            295,
            300,
            2302,
            8310,
            550,
            286,
            393,
            445,
            584,
            2408,
            295,
            3547,
            13,
            759,
            51016
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07898327316900697,
          "compression_ratio": 1.6508620689655173,
          "no_speech_prob": 0.16987137496471405,
          "confidence": 0.830128625035286
        },
        {
          "id": 136,
          "start": 850.0,
          "end": 856.5600000000001,
          "text": "I print that then it gets 15 because one plus five plus two plus four plus three is equal to 15.",
          "tokens": [
            51016,
            286,
            4482,
            300,
            550,
            309,
            2170,
            2119,
            570,
            472,
            1804,
            1732,
            1804,
            732,
            1804,
            1451,
            1804,
            1045,
            307,
            2681,
            281,
            2119,
            13,
            51344
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07898327316900697,
          "compression_ratio": 1.6508620689655173,
          "no_speech_prob": 0.16987137496471405,
          "confidence": 0.830128625035286
        },
        {
          "id": 137,
          "start": 856.5600000000001,
          "end": 863.2,
          "text": "Okay so lastly let's see how we can find some values here within our list. So let me go ahead",
          "tokens": [
            51344,
            1033,
            370,
            16386,
            718,
            311,
            536,
            577,
            321,
            393,
            915,
            512,
            4190,
            510,
            1951,
            527,
            1329,
            13,
            407,
            718,
            385,
            352,
            2286,
            51676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07898327316900697,
          "compression_ratio": 1.6508620689655173,
          "no_speech_prob": 0.16987137496471405,
          "confidence": 0.830128625035286
        }
      ],
      "duration": 25.32000000000005
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 858.2,
      "end_time": 886.48,
      "text": "Okay so lastly let's see how we can find some values here within our list. So let me go ahead and clean up here a little bit and uncomment out that. So if we wanted to find the index of a certain value then we can use the index method for this. So if I wanted to find the index of comp sci in our list then we could just print out courses dot index and then search for comp sci.",
      "original_segments": [
        {
          "id": 138,
          "start": 863.2,
          "end": 869.6800000000001,
          "text": "and clean up here a little bit and uncomment out that. So if we wanted to find the index of a",
          "tokens": [
            50364,
            293,
            2541,
            493,
            510,
            257,
            707,
            857,
            293,
            8585,
            518,
            484,
            300,
            13,
            407,
            498,
            321,
            1415,
            281,
            915,
            264,
            8186,
            295,
            257,
            50688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.060669982556215266,
          "compression_ratio": 1.8762376237623761,
          "no_speech_prob": 0.027418499812483788,
          "confidence": 0.9725815001875162
        },
        {
          "id": 139,
          "start": 869.6800000000001,
          "end": 876.1600000000001,
          "text": "certain value then we can use the index method for this. So if I wanted to find the index of",
          "tokens": [
            50688,
            1629,
            2158,
            550,
            321,
            393,
            764,
            264,
            8186,
            3170,
            337,
            341,
            13,
            407,
            498,
            286,
            1415,
            281,
            915,
            264,
            8186,
            295,
            51012
          ],
          "temperature": 0.0,
          "avg_logprob": -0.060669982556215266,
          "compression_ratio": 1.8762376237623761,
          "no_speech_prob": 0.027418499812483788,
          "confidence": 0.9725815001875162
        },
        {
          "id": 140,
          "start": 876.1600000000001,
          "end": 886.48,
          "text": "comp sci in our list then we could just print out courses dot index and then search for comp sci.",
          "tokens": [
            51012,
            715,
            2180,
            294,
            527,
            1329,
            550,
            321,
            727,
            445,
            4482,
            484,
            7712,
            5893,
            8186,
            293,
            550,
            3164,
            337,
            715,
            2180,
            13,
            51528
          ],
          "temperature": 0.0,
          "avg_logprob": -0.060669982556215266,
          "compression_ratio": 1.8762376237623761,
          "no_speech_prob": 0.027418499812483788,
          "confidence": 0.9725815001875162
        }
      ],
      "duration": 28.279999999999973
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 881.48,
      "end_time": 910.08,
      "text": "comp sci in our list then we could just print out courses dot index and then search for comp sci. Now if we run this and we can see that we got three and three is the index where it found that comp sci value. Now if we try to find the index of a value that doesn't exist in the list then we'll get a value error. So if we search that original list of courses for art and run that then we can see that we got a value error and it says art is not in the list. Now if we just wanted",
      "original_segments": [
        {
          "id": 141,
          "start": 886.48,
          "end": 892.0,
          "text": "Now if we run this and we can see that we got three and three is the index where it found that",
          "tokens": [
            51528,
            823,
            498,
            321,
            1190,
            341,
            293,
            321,
            393,
            536,
            300,
            321,
            658,
            1045,
            293,
            1045,
            307,
            264,
            8186,
            689,
            309,
            1352,
            300,
            51804
          ],
          "temperature": 0.0,
          "avg_logprob": -0.060669982556215266,
          "compression_ratio": 1.8762376237623761,
          "no_speech_prob": 0.027418499812483788,
          "confidence": 0.9725815001875162
        },
        {
          "id": 142,
          "start": 892.0,
          "end": 898.24,
          "text": "comp sci value. Now if we try to find the index of a value that doesn't exist in the list then",
          "tokens": [
            50364,
            715,
            2180,
            2158,
            13,
            823,
            498,
            321,
            853,
            281,
            915,
            264,
            8186,
            295,
            257,
            2158,
            300,
            1177,
            380,
            2514,
            294,
            264,
            1329,
            550,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.023100454807281495,
          "compression_ratio": 1.8151658767772512,
          "no_speech_prob": 0.003522378159686923,
          "confidence": 0.9964776218403131
        },
        {
          "id": 143,
          "start": 898.24,
          "end": 904.88,
          "text": "we'll get a value error. So if we search that original list of courses for art and run that",
          "tokens": [
            50676,
            321,
            603,
            483,
            257,
            2158,
            6713,
            13,
            407,
            498,
            321,
            3164,
            300,
            3380,
            1329,
            295,
            7712,
            337,
            1523,
            293,
            1190,
            300,
            51008
          ],
          "temperature": 0.0,
          "avg_logprob": -0.023100454807281495,
          "compression_ratio": 1.8151658767772512,
          "no_speech_prob": 0.003522378159686923,
          "confidence": 0.9964776218403131
        },
        {
          "id": 144,
          "start": 904.88,
          "end": 910.08,
          "text": "then we can see that we got a value error and it says art is not in the list. Now if we just wanted",
          "tokens": [
            51008,
            550,
            321,
            393,
            536,
            300,
            321,
            658,
            257,
            2158,
            6713,
            293,
            309,
            1619,
            1523,
            307,
            406,
            294,
            264,
            1329,
            13,
            823,
            498,
            321,
            445,
            1415,
            51268
          ],
          "temperature": 0.0,
          "avg_logprob": -0.023100454807281495,
          "compression_ratio": 1.8151658767772512,
          "no_speech_prob": 0.003522378159686923,
          "confidence": 0.9964776218403131
        }
      ],
      "duration": 28.600000000000023
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 905.08,
      "end_time": 932.3199999999999,
      "text": "then we can see that we got a value error and it says art is not in the list. Now if we just wanted to simply check if the value was in our list and simply get back a true or false result then for this we can use the in operator. So if I wanted to check if art is in our list then I could say art in courses. So if I run that then we can see that we got false but if instead we said math",
      "original_segments": [
        {
          "id": 145,
          "start": 910.08,
          "end": 916.64,
          "text": "to simply check if the value was in our list and simply get back a true or false result then for",
          "tokens": [
            51268,
            281,
            2935,
            1520,
            498,
            264,
            2158,
            390,
            294,
            527,
            1329,
            293,
            2935,
            483,
            646,
            257,
            2074,
            420,
            7908,
            1874,
            550,
            337,
            51596
          ],
          "temperature": 0.0,
          "avg_logprob": -0.023100454807281495,
          "compression_ratio": 1.8151658767772512,
          "no_speech_prob": 0.003522378159686923,
          "confidence": 0.9964776218403131
        },
        {
          "id": 146,
          "start": 916.64,
          "end": 922.72,
          "text": "this we can use the in operator. So if I wanted to check if art is in our list then I could say",
          "tokens": [
            50364,
            341,
            321,
            393,
            764,
            264,
            294,
            12973,
            13,
            407,
            498,
            286,
            1415,
            281,
            1520,
            498,
            1523,
            307,
            294,
            527,
            1329,
            550,
            286,
            727,
            584,
            50668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05365969962680463,
          "compression_ratio": 1.7685185185185186,
          "no_speech_prob": 0.0671248808503151,
          "confidence": 0.9328751191496849
        },
        {
          "id": 147,
          "start": 923.4399999999999,
          "end": 932.3199999999999,
          "text": "art in courses. So if I run that then we can see that we got false but if instead we said math",
          "tokens": [
            50704,
            1523,
            294,
            7712,
            13,
            407,
            498,
            286,
            1190,
            300,
            550,
            321,
            393,
            536,
            300,
            321,
            658,
            7908,
            457,
            498,
            2602,
            321,
            848,
            5221,
            51148
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05365969962680463,
          "compression_ratio": 1.7685185185185186,
          "no_speech_prob": 0.0671248808503151,
          "confidence": 0.9328751191496849
        }
      ],
      "duration": 27.239999999999895
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 927.3199999999999,
      "end_time": 949.6800000000001,
      "text": "art in courses. So if I run that then we can see that we got false but if instead we said math in courses and ran that then that returned true. Now this is going to be especially useful once we go over the topic of conditionals and if else statements and we're going to go over those in a couple of videos and we can also use this to loop through values of our list by using a for loop.",
      "original_segments": [
        {
          "id": 148,
          "start": 932.3199999999999,
          "end": 937.76,
          "text": "in courses and ran that then that returned true. Now this is going to be especially useful once we",
          "tokens": [
            51148,
            294,
            7712,
            293,
            5872,
            300,
            550,
            300,
            8752,
            2074,
            13,
            823,
            341,
            307,
            516,
            281,
            312,
            2318,
            4420,
            1564,
            321,
            51420
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05365969962680463,
          "compression_ratio": 1.7685185185185186,
          "no_speech_prob": 0.0671248808503151,
          "confidence": 0.9328751191496849
        },
        {
          "id": 149,
          "start": 937.76,
          "end": 942.24,
          "text": "go over the topic of conditionals and if else statements and we're going to go over those in",
          "tokens": [
            51420,
            352,
            670,
            264,
            4829,
            295,
            4188,
            1124,
            293,
            498,
            1646,
            12363,
            293,
            321,
            434,
            516,
            281,
            352,
            670,
            729,
            294,
            51644
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05365969962680463,
          "compression_ratio": 1.7685185185185186,
          "no_speech_prob": 0.0671248808503151,
          "confidence": 0.9328751191496849
        },
        {
          "id": 150,
          "start": 942.24,
          "end": 949.6800000000001,
          "text": "a couple of videos and we can also use this to loop through values of our list by using a for loop.",
          "tokens": [
            50364,
            257,
            1916,
            295,
            2145,
            293,
            321,
            393,
            611,
            764,
            341,
            281,
            6367,
            807,
            4190,
            295,
            527,
            1329,
            538,
            1228,
            257,
            337,
            6367,
            13,
            50736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0440087765455246,
          "compression_ratio": 1.676991150442478,
          "no_speech_prob": 0.17715702950954437,
          "confidence": 0.8228429704904556
        }
      ],
      "duration": 22.360000000000127
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 944.6800000000001,
      "end_time": 971.92,
      "text": "a couple of videos and we can also use this to loop through values of our list by using a for loop. So if I was to say for item in courses and then scoot that over then we will just print out that item. Now this is the first time in our series that we've indented a block of code. Basically what we're saying here is that we want to create a loop where looping through each value",
      "original_segments": [
        {
          "id": 151,
          "start": 949.6800000000001,
          "end": 958.88,
          "text": "So if I was to say for item in courses and then scoot that over then we will just print out",
          "tokens": [
            50736,
            407,
            498,
            286,
            390,
            281,
            584,
            337,
            3174,
            294,
            7712,
            293,
            550,
            21375,
            300,
            670,
            550,
            321,
            486,
            445,
            4482,
            484,
            51196
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0440087765455246,
          "compression_ratio": 1.676991150442478,
          "no_speech_prob": 0.17715702950954437,
          "confidence": 0.8228429704904556
        },
        {
          "id": 152,
          "start": 959.44,
          "end": 966.16,
          "text": "that item. Now this is the first time in our series that we've indented a block of code.",
          "tokens": [
            51224,
            300,
            3174,
            13,
            823,
            341,
            307,
            264,
            700,
            565,
            294,
            527,
            2638,
            300,
            321,
            600,
            1016,
            6003,
            257,
            3461,
            295,
            3089,
            13,
            51560
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0440087765455246,
          "compression_ratio": 1.676991150442478,
          "no_speech_prob": 0.17715702950954437,
          "confidence": 0.8228429704904556
        },
        {
          "id": 153,
          "start": 966.16,
          "end": 971.92,
          "text": "Basically what we're saying here is that we want to create a loop where looping through each value",
          "tokens": [
            51560,
            8537,
            437,
            321,
            434,
            1566,
            510,
            307,
            300,
            321,
            528,
            281,
            1884,
            257,
            6367,
            689,
            6367,
            278,
            807,
            1184,
            2158,
            51848
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0440087765455246,
          "compression_ratio": 1.676991150442478,
          "no_speech_prob": 0.17715702950954437,
          "confidence": 0.8228429704904556
        }
      ],
      "duration": 27.239999999999895
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 966.92,
      "end_time": 996.4,
      "text": "Basically what we're saying here is that we want to create a loop where looping through each value of our list and each loop through this item variable will be equal to the next item in the list. So that's why this line is indented because it tells us that this code is executed from within our for loop. So if we run this then we can see that it prints out each item of our list. Now the reason it prints them all out on a new line is because by default the print statement goes",
      "original_segments": [
        {
          "id": 154,
          "start": 971.92,
          "end": 978.64,
          "text": "of our list and each loop through this item variable will be equal to the next item in the",
          "tokens": [
            50364,
            295,
            527,
            1329,
            293,
            1184,
            6367,
            807,
            341,
            3174,
            7006,
            486,
            312,
            2681,
            281,
            264,
            958,
            3174,
            294,
            264,
            50700
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03245686878592281,
          "compression_ratio": 1.91869918699187,
          "no_speech_prob": 0.00015855774108786136,
          "confidence": 0.9998414422589121
        },
        {
          "id": 155,
          "start": 978.64,
          "end": 984.9599999999999,
          "text": "list. So that's why this line is indented because it tells us that this code is executed from within",
          "tokens": [
            50700,
            1329,
            13,
            407,
            300,
            311,
            983,
            341,
            1622,
            307,
            1016,
            6003,
            570,
            309,
            5112,
            505,
            300,
            341,
            3089,
            307,
            17577,
            490,
            1951,
            51016
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03245686878592281,
          "compression_ratio": 1.91869918699187,
          "no_speech_prob": 0.00015855774108786136,
          "confidence": 0.9998414422589121
        },
        {
          "id": 156,
          "start": 984.9599999999999,
          "end": 991.36,
          "text": "our for loop. So if we run this then we can see that it prints out each item of our list. Now",
          "tokens": [
            51016,
            527,
            337,
            6367,
            13,
            407,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            309,
            22305,
            484,
            1184,
            3174,
            295,
            527,
            1329,
            13,
            823,
            51336
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03245686878592281,
          "compression_ratio": 1.91869918699187,
          "no_speech_prob": 0.00015855774108786136,
          "confidence": 0.9998414422589121
        },
        {
          "id": 157,
          "start": 991.36,
          "end": 996.4,
          "text": "the reason it prints them all out on a new line is because by default the print statement goes",
          "tokens": [
            51336,
            264,
            1778,
            309,
            22305,
            552,
            439,
            484,
            322,
            257,
            777,
            1622,
            307,
            570,
            538,
            7576,
            264,
            4482,
            5629,
            1709,
            51588
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03245686878592281,
          "compression_ratio": 1.91869918699187,
          "no_speech_prob": 0.00015855774108786136,
          "confidence": 0.9998414422589121
        }
      ],
      "duration": 29.480000000000018
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 991.4,
      "end_time": 1016.8800000000001,
      "text": "the reason it prints them all out on a new line is because by default the print statement goes to a new line each time it's executed. Now this item variable is just a variable it's not a keyword or anything we can name this anything we want. So instead if we wanted to you know call this course for course in courses and print that out then you can see that we get the same result. So we can access each value as we're looping through but sometimes it might be useful",
      "original_segments": [
        {
          "id": 158,
          "start": 996.4,
          "end": 1001.4399999999999,
          "text": "to a new line each time it's executed. Now this item variable is just a variable it's not a",
          "tokens": [
            51588,
            281,
            257,
            777,
            1622,
            1184,
            565,
            309,
            311,
            17577,
            13,
            823,
            341,
            3174,
            7006,
            307,
            445,
            257,
            7006,
            309,
            311,
            406,
            257,
            51840
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03245686878592281,
          "compression_ratio": 1.91869918699187,
          "no_speech_prob": 0.00015855774108786136,
          "confidence": 0.9998414422589121
        },
        {
          "id": 159,
          "start": 1001.44,
          "end": 1006.5600000000001,
          "text": "keyword or anything we can name this anything we want. So instead if we wanted to you know call",
          "tokens": [
            50364,
            20428,
            420,
            1340,
            321,
            393,
            1315,
            341,
            1340,
            321,
            528,
            13,
            407,
            2602,
            498,
            321,
            1415,
            281,
            291,
            458,
            818,
            50620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049984137217203774,
          "compression_ratio": 1.8326848249027237,
          "no_speech_prob": 0.00044901538058184087,
          "confidence": 0.9995509846194182
        },
        {
          "id": 160,
          "start": 1006.5600000000001,
          "end": 1011.9200000000001,
          "text": "this course for course in courses and print that out then you can see that we get the same result.",
          "tokens": [
            50620,
            341,
            1164,
            337,
            1164,
            294,
            7712,
            293,
            4482,
            300,
            484,
            550,
            291,
            393,
            536,
            300,
            321,
            483,
            264,
            912,
            1874,
            13,
            50888
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049984137217203774,
          "compression_ratio": 1.8326848249027237,
          "no_speech_prob": 0.00044901538058184087,
          "confidence": 0.9995509846194182
        },
        {
          "id": 161,
          "start": 1011.9200000000001,
          "end": 1016.8800000000001,
          "text": "So we can access each value as we're looping through but sometimes it might be useful",
          "tokens": [
            50888,
            407,
            321,
            393,
            2105,
            1184,
            2158,
            382,
            321,
            434,
            6367,
            278,
            807,
            457,
            2171,
            309,
            1062,
            312,
            4420,
            51136
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049984137217203774,
          "compression_ratio": 1.8326848249027237,
          "no_speech_prob": 0.00044901538058184087,
          "confidence": 0.9995509846194182
        }
      ],
      "duration": 25.480000000000132
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1011.8800000000001,
      "end_time": 1041.6799999999998,
      "text": "this course for course in courses and print that out then you can see that we get the same result. So we can access each value as we're looping through but sometimes it might be useful to also have the index of what value we're on. Now to do this in Python we can access the index and the value by using the enumerate function. So I will say enumerate and I will wrap courses within that enumerate function and this enumerate function returns two values it returns the index that we're on and the value. So instead of just getting the course here we're also going to need",
      "original_segments": [
        {
          "id": 162,
          "start": 1016.8800000000001,
          "end": 1023.2,
          "text": "to also have the index of what value we're on. Now to do this in Python we can access the index",
          "tokens": [
            51136,
            281,
            611,
            362,
            264,
            8186,
            295,
            437,
            2158,
            321,
            434,
            322,
            13,
            823,
            281,
            360,
            341,
            294,
            15329,
            321,
            393,
            2105,
            264,
            8186,
            51452
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049984137217203774,
          "compression_ratio": 1.8326848249027237,
          "no_speech_prob": 0.00044901538058184087,
          "confidence": 0.9995509846194182
        },
        {
          "id": 163,
          "start": 1023.2,
          "end": 1031.1200000000001,
          "text": "and the value by using the enumerate function. So I will say enumerate and I will wrap courses",
          "tokens": [
            51452,
            293,
            264,
            2158,
            538,
            1228,
            264,
            465,
            15583,
            473,
            2445,
            13,
            407,
            286,
            486,
            584,
            465,
            15583,
            473,
            293,
            286,
            486,
            7019,
            7712,
            51848
          ],
          "temperature": 0.0,
          "avg_logprob": -0.049984137217203774,
          "compression_ratio": 1.8326848249027237,
          "no_speech_prob": 0.00044901538058184087,
          "confidence": 0.9995509846194182
        },
        {
          "id": 164,
          "start": 1031.12,
          "end": 1036.4799999999998,
          "text": "within that enumerate function and this enumerate function returns two values it returns the index",
          "tokens": [
            50364,
            1951,
            300,
            465,
            15583,
            473,
            2445,
            293,
            341,
            465,
            15583,
            473,
            2445,
            11247,
            732,
            4190,
            309,
            11247,
            264,
            8186,
            50632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05989775061607361,
          "compression_ratio": 1.9261083743842364,
          "no_speech_prob": 0.00013578413927461952,
          "confidence": 0.9998642158607254
        },
        {
          "id": 165,
          "start": 1036.4799999999998,
          "end": 1041.6799999999998,
          "text": "that we're on and the value. So instead of just getting the course here we're also going to need",
          "tokens": [
            50632,
            300,
            321,
            434,
            322,
            293,
            264,
            2158,
            13,
            407,
            2602,
            295,
            445,
            1242,
            264,
            1164,
            510,
            321,
            434,
            611,
            516,
            281,
            643,
            50892
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05989775061607361,
          "compression_ratio": 1.9261083743842364,
          "no_speech_prob": 0.00013578413927461952,
          "confidence": 0.9998642158607254
        }
      ],
      "duration": 29.799999999999727
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1036.6799999999998,
      "end_time": 1061.84,
      "text": "that we're on and the value. So instead of just getting the course here we're also going to need to get the index. So I'll call that index so for index course in enumerate courses and now if we print out that index and the course and run that then you can see that we had access to each index and value as we're looping through our list and if we don't want to start at zero then we can pass",
      "original_segments": [
        {
          "id": 166,
          "start": 1041.6799999999998,
          "end": 1048.9599999999998,
          "text": "to get the index. So I'll call that index so for index course in enumerate courses and now if we",
          "tokens": [
            50892,
            281,
            483,
            264,
            8186,
            13,
            407,
            286,
            603,
            818,
            300,
            8186,
            370,
            337,
            8186,
            1164,
            294,
            465,
            15583,
            473,
            7712,
            293,
            586,
            498,
            321,
            51256
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05989775061607361,
          "compression_ratio": 1.9261083743842364,
          "no_speech_prob": 0.00013578413927461952,
          "confidence": 0.9998642158607254
        },
        {
          "id": 167,
          "start": 1048.9599999999998,
          "end": 1056.2399999999998,
          "text": "print out that index and the course and run that then you can see that we had access to each index",
          "tokens": [
            51256,
            4482,
            484,
            300,
            8186,
            293,
            264,
            1164,
            293,
            1190,
            300,
            550,
            291,
            393,
            536,
            300,
            321,
            632,
            2105,
            281,
            1184,
            8186,
            51620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05989775061607361,
          "compression_ratio": 1.9261083743842364,
          "no_speech_prob": 0.00013578413927461952,
          "confidence": 0.9998642158607254
        },
        {
          "id": 168,
          "start": 1056.24,
          "end": 1061.84,
          "text": "and value as we're looping through our list and if we don't want to start at zero then we can pass",
          "tokens": [
            50364,
            293,
            2158,
            382,
            321,
            434,
            6367,
            278,
            807,
            527,
            1329,
            293,
            498,
            321,
            500,
            380,
            528,
            281,
            722,
            412,
            4018,
            550,
            321,
            393,
            1320,
            50644
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06309188916845229,
          "compression_ratio": 1.7737556561085972,
          "no_speech_prob": 0.5226021409034729,
          "confidence": 0.4773978590965271
        }
      ],
      "duration": 25.160000000000082
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1056.84,
      "end_time": 1081.36,
      "text": "and value as we're looping through our list and if we don't want to start at zero then we can pass in a start value to our enumerate function. So if instead we wanted to start at one then I can pass in the second argument say start is equal to one. Now if I run this then you can see that now our starting value as one. Okay so there is one more thing that I want to go over before we move on",
      "original_segments": [
        {
          "id": 169,
          "start": 1061.84,
          "end": 1070.32,
          "text": "in a start value to our enumerate function. So if instead we wanted to start at one then I can pass",
          "tokens": [
            50644,
            294,
            257,
            722,
            2158,
            281,
            527,
            465,
            15583,
            473,
            2445,
            13,
            407,
            498,
            2602,
            321,
            1415,
            281,
            722,
            412,
            472,
            550,
            286,
            393,
            1320,
            51068
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06309188916845229,
          "compression_ratio": 1.7737556561085972,
          "no_speech_prob": 0.5226021409034729,
          "confidence": 0.4773978590965271
        },
        {
          "id": 170,
          "start": 1070.32,
          "end": 1075.76,
          "text": "in the second argument say start is equal to one. Now if I run this then you can see that now our",
          "tokens": [
            51068,
            294,
            264,
            1150,
            6770,
            584,
            722,
            307,
            2681,
            281,
            472,
            13,
            823,
            498,
            286,
            1190,
            341,
            550,
            291,
            393,
            536,
            300,
            586,
            527,
            51340
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06309188916845229,
          "compression_ratio": 1.7737556561085972,
          "no_speech_prob": 0.5226021409034729,
          "confidence": 0.4773978590965271
        },
        {
          "id": 171,
          "start": 1075.76,
          "end": 1081.36,
          "text": "starting value as one. Okay so there is one more thing that I want to go over before we move on",
          "tokens": [
            51340,
            2891,
            2158,
            382,
            472,
            13,
            1033,
            370,
            456,
            307,
            472,
            544,
            551,
            300,
            286,
            528,
            281,
            352,
            670,
            949,
            321,
            1286,
            322,
            51620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06309188916845229,
          "compression_ratio": 1.7737556561085972,
          "no_speech_prob": 0.5226021409034729,
          "confidence": 0.4773978590965271
        }
      ],
      "duration": 24.519999999999982
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1076.36,
      "end_time": 1106.24,
      "text": "starting value as one. Okay so there is one more thing that I want to go over before we move on to tuples and sets. So it's pretty common that we'll want to turn our list into strings separated by a certain value. Now to do this we're actually going to use a string method called join and we're going to pass in our list as the argument. So for example let's say that we wanted to turn our list of courses into a string of comma separated values. So we can say course string and that will hold the",
      "original_segments": [
        {
          "id": 172,
          "start": 1081.36,
          "end": 1087.84,
          "text": "to tuples and sets. So it's pretty common that we'll want to turn our list into strings separated",
          "tokens": [
            50364,
            281,
            2604,
            2622,
            293,
            6352,
            13,
            407,
            309,
            311,
            1238,
            2689,
            300,
            321,
            603,
            528,
            281,
            1261,
            527,
            1329,
            666,
            13985,
            12005,
            50688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06446447276105785,
          "compression_ratio": 1.8144796380090498,
          "no_speech_prob": 0.5292671918869019,
          "confidence": 0.47073280811309814
        },
        {
          "id": 173,
          "start": 1087.84,
          "end": 1093.6799999999998,
          "text": "by a certain value. Now to do this we're actually going to use a string method called join and we're",
          "tokens": [
            50688,
            538,
            257,
            1629,
            2158,
            13,
            823,
            281,
            360,
            341,
            321,
            434,
            767,
            516,
            281,
            764,
            257,
            6798,
            3170,
            1219,
            3917,
            293,
            321,
            434,
            50980
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06446447276105785,
          "compression_ratio": 1.8144796380090498,
          "no_speech_prob": 0.5292671918869019,
          "confidence": 0.47073280811309814
        },
        {
          "id": 174,
          "start": 1093.6799999999998,
          "end": 1099.28,
          "text": "going to pass in our list as the argument. So for example let's say that we wanted to turn our list",
          "tokens": [
            50980,
            516,
            281,
            1320,
            294,
            527,
            1329,
            382,
            264,
            6770,
            13,
            407,
            337,
            1365,
            718,
            311,
            584,
            300,
            321,
            1415,
            281,
            1261,
            527,
            1329,
            51260
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06446447276105785,
          "compression_ratio": 1.8144796380090498,
          "no_speech_prob": 0.5292671918869019,
          "confidence": 0.47073280811309814
        },
        {
          "id": 175,
          "start": 1099.28,
          "end": 1106.24,
          "text": "of courses into a string of comma separated values. So we can say course string and that will hold the",
          "tokens": [
            51260,
            295,
            7712,
            666,
            257,
            6798,
            295,
            22117,
            12005,
            4190,
            13,
            407,
            321,
            393,
            584,
            1164,
            6798,
            293,
            300,
            486,
            1797,
            264,
            51608
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06446447276105785,
          "compression_ratio": 1.8144796380090498,
          "no_speech_prob": 0.5292671918869019,
          "confidence": 0.47073280811309814
        }
      ],
      "duration": 29.88000000000011
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1101.24,
      "end_time": 1124.56,
      "text": "of courses into a string of comma separated values. So we can say course string and that will hold the string version of our courses and now we'll type the string that we want to separate each item of our list. So I want these to be comma separated so I'll put in a string of a comma and a space and then I'm going to use the join method to join the values of the list using this string. So I'll",
      "original_segments": [
        {
          "id": 176,
          "start": 1106.24,
          "end": 1111.52,
          "text": "string version of our courses and now we'll type the string that we want to separate each item of",
          "tokens": [
            50364,
            6798,
            3037,
            295,
            527,
            7712,
            293,
            586,
            321,
            603,
            2010,
            264,
            6798,
            300,
            321,
            528,
            281,
            4994,
            1184,
            3174,
            295,
            50628
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04810657595643903,
          "compression_ratio": 1.8476190476190477,
          "no_speech_prob": 0.3638446033000946,
          "confidence": 0.6361553966999054
        },
        {
          "id": 177,
          "start": 1111.52,
          "end": 1118.64,
          "text": "our list. So I want these to be comma separated so I'll put in a string of a comma and a space",
          "tokens": [
            50628,
            527,
            1329,
            13,
            407,
            286,
            528,
            613,
            281,
            312,
            22117,
            12005,
            370,
            286,
            603,
            829,
            294,
            257,
            6798,
            295,
            257,
            22117,
            293,
            257,
            1901,
            50984
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04810657595643903,
          "compression_ratio": 1.8476190476190477,
          "no_speech_prob": 0.3638446033000946,
          "confidence": 0.6361553966999054
        },
        {
          "id": 178,
          "start": 1118.64,
          "end": 1124.56,
          "text": "and then I'm going to use the join method to join the values of the list using this string. So I'll",
          "tokens": [
            50984,
            293,
            550,
            286,
            478,
            516,
            281,
            764,
            264,
            3917,
            3170,
            281,
            3917,
            264,
            4190,
            295,
            264,
            1329,
            1228,
            341,
            6798,
            13,
            407,
            286,
            603,
            51280
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04810657595643903,
          "compression_ratio": 1.8476190476190477,
          "no_speech_prob": 0.3638446033000946,
          "confidence": 0.6361553966999054
        }
      ],
      "duration": 23.319999999999936
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1119.56,
      "end_time": 1143.8400000000001,
      "text": "and then I'm going to use the join method to join the values of the list using this string. So I'll say dot join and I want to join my courses on that string. So now if I come down here and print that string version of our courses and run that then we can see that we get our values comma separated and if we want to change this then we can just change our string within that we're joining",
      "original_segments": [
        {
          "id": 179,
          "start": 1124.56,
          "end": 1132.16,
          "text": "say dot join and I want to join my courses on that string. So now if I come down here and print",
          "tokens": [
            51280,
            584,
            5893,
            3917,
            293,
            286,
            528,
            281,
            3917,
            452,
            7712,
            322,
            300,
            6798,
            13,
            407,
            586,
            498,
            286,
            808,
            760,
            510,
            293,
            4482,
            51660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04810657595643903,
          "compression_ratio": 1.8476190476190477,
          "no_speech_prob": 0.3638446033000946,
          "confidence": 0.6361553966999054
        },
        {
          "id": 180,
          "start": 1132.16,
          "end": 1138.0800000000002,
          "text": "that string version of our courses and run that then we can see that we get our values comma",
          "tokens": [
            50364,
            300,
            6798,
            3037,
            295,
            527,
            7712,
            293,
            1190,
            300,
            550,
            321,
            393,
            536,
            300,
            321,
            483,
            527,
            4190,
            22117,
            50660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042319277922312416,
          "compression_ratio": 2.045643153526971,
          "no_speech_prob": 0.028066080063581467,
          "confidence": 0.9719339199364185
        },
        {
          "id": 181,
          "start": 1138.0800000000002,
          "end": 1143.8400000000001,
          "text": "separated and if we want to change this then we can just change our string within that we're joining",
          "tokens": [
            50660,
            12005,
            293,
            498,
            321,
            528,
            281,
            1319,
            341,
            550,
            321,
            393,
            445,
            1319,
            527,
            6798,
            1951,
            300,
            321,
            434,
            5549,
            50948
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042319277922312416,
          "compression_ratio": 2.045643153526971,
          "no_speech_prob": 0.028066080063581467,
          "confidence": 0.9719339199364185
        }
      ],
      "duration": 24.2800000000002
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1138.8400000000001,
      "end_time": 1167.12,
      "text": "separated and if we want to change this then we can just change our string within that we're joining on. So if we wanted to hyphenate these then I could just change this to space hyphen space and run that and you can see that when we ran that now we're separating these by the hyphen. So this is just one long string with all of our list values joined together. Now we can also do the reverse of this and turn a string back into a list. So we can do this by splitting our string on a certain value.",
      "original_segments": [
        {
          "id": 182,
          "start": 1143.8400000000001,
          "end": 1150.72,
          "text": "on. So if we wanted to hyphenate these then I could just change this to space hyphen space and run that",
          "tokens": [
            50948,
            322,
            13,
            407,
            498,
            321,
            1415,
            281,
            2477,
            47059,
            473,
            613,
            550,
            286,
            727,
            445,
            1319,
            341,
            281,
            1901,
            2477,
            47059,
            1901,
            293,
            1190,
            300,
            51292
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042319277922312416,
          "compression_ratio": 2.045643153526971,
          "no_speech_prob": 0.028066080063581467,
          "confidence": 0.9719339199364185
        },
        {
          "id": 183,
          "start": 1150.72,
          "end": 1155.6000000000001,
          "text": "and you can see that when we ran that now we're separating these by the hyphen. So this is just",
          "tokens": [
            51292,
            293,
            291,
            393,
            536,
            300,
            562,
            321,
            5872,
            300,
            586,
            321,
            434,
            29279,
            613,
            538,
            264,
            2477,
            47059,
            13,
            407,
            341,
            307,
            445,
            51536
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042319277922312416,
          "compression_ratio": 2.045643153526971,
          "no_speech_prob": 0.028066080063581467,
          "confidence": 0.9719339199364185
        },
        {
          "id": 184,
          "start": 1155.6000000000001,
          "end": 1161.1200000000001,
          "text": "one long string with all of our list values joined together. Now we can also do the reverse of this",
          "tokens": [
            51536,
            472,
            938,
            6798,
            365,
            439,
            295,
            527,
            1329,
            4190,
            6869,
            1214,
            13,
            823,
            321,
            393,
            611,
            360,
            264,
            9943,
            295,
            341,
            51812
          ],
          "temperature": 0.0,
          "avg_logprob": -0.042319277922312416,
          "compression_ratio": 2.045643153526971,
          "no_speech_prob": 0.028066080063581467,
          "confidence": 0.9719339199364185
        },
        {
          "id": 185,
          "start": 1161.12,
          "end": 1167.12,
          "text": "and turn a string back into a list. So we can do this by splitting our string on a certain value.",
          "tokens": [
            50364,
            293,
            1261,
            257,
            6798,
            646,
            666,
            257,
            1329,
            13,
            407,
            321,
            393,
            360,
            341,
            538,
            30348,
            527,
            6798,
            322,
            257,
            1629,
            2158,
            13,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03655537203246472,
          "compression_ratio": 1.8932038834951457,
          "no_speech_prob": 0.00036671088309958577,
          "confidence": 0.9996332891169004
        }
      ],
      "duration": 28.279999999999745
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1162.12,
      "end_time": 1186.8,
      "text": "and turn a string back into a list. So we can do this by splitting our string on a certain value. So if I split the string that we just created so let me create a new list here and I'll set this equal to the string version of our list and I'll do a dot split and I'll split it on a space hyphen space. So if we look at the string version that we have down here this is just one whole string",
      "original_segments": [
        {
          "id": 186,
          "start": 1167.12,
          "end": 1173.6799999999998,
          "text": "So if I split the string that we just created so let me create a new list here and I'll set this",
          "tokens": [
            50664,
            407,
            498,
            286,
            7472,
            264,
            6798,
            300,
            321,
            445,
            2942,
            370,
            718,
            385,
            1884,
            257,
            777,
            1329,
            510,
            293,
            286,
            603,
            992,
            341,
            50992
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03655537203246472,
          "compression_ratio": 1.8932038834951457,
          "no_speech_prob": 0.00036671088309958577,
          "confidence": 0.9996332891169004
        },
        {
          "id": 187,
          "start": 1173.6799999999998,
          "end": 1182.0,
          "text": "equal to the string version of our list and I'll do a dot split and I'll split it on a space hyphen",
          "tokens": [
            50992,
            2681,
            281,
            264,
            6798,
            3037,
            295,
            527,
            1329,
            293,
            286,
            603,
            360,
            257,
            5893,
            7472,
            293,
            286,
            603,
            7472,
            309,
            322,
            257,
            1901,
            2477,
            47059,
            51408
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03655537203246472,
          "compression_ratio": 1.8932038834951457,
          "no_speech_prob": 0.00036671088309958577,
          "confidence": 0.9996332891169004
        },
        {
          "id": 188,
          "start": 1182.0,
          "end": 1186.8,
          "text": "space. So if we look at the string version that we have down here this is just one whole string",
          "tokens": [
            51408,
            1901,
            13,
            407,
            498,
            321,
            574,
            412,
            264,
            6798,
            3037,
            300,
            321,
            362,
            760,
            510,
            341,
            307,
            445,
            472,
            1379,
            6798,
            51648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03655537203246472,
          "compression_ratio": 1.8932038834951457,
          "no_speech_prob": 0.00036671088309958577,
          "confidence": 0.9996332891169004
        }
      ],
      "duration": 24.680000000000064
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1181.8,
      "end_time": 1210.3999999999999,
      "text": "equal to the string version of our list and I'll do a dot split and I'll split it on a space hyphen space. So if we look at the string version that we have down here this is just one whole string what that's saying is it's saying hey split up all of these values on this space comma space and make a list out of all those values that you get. So now if we print out our new list so I'll print that new list and run that and you can see that now we're back to the original list. Okay so I know that that was a lot to take in because there's so much that we can do with list",
      "original_segments": [
        {
          "id": 189,
          "start": 1186.8,
          "end": 1192.3999999999999,
          "text": "what that's saying is it's saying hey split up all of these values on this space comma space",
          "tokens": [
            50364,
            437,
            300,
            311,
            1566,
            307,
            309,
            311,
            1566,
            4177,
            7472,
            493,
            439,
            295,
            613,
            4190,
            322,
            341,
            1901,
            22117,
            1901,
            50644
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04934294243169025,
          "compression_ratio": 1.8352941176470587,
          "no_speech_prob": 0.19397518038749695,
          "confidence": 0.806024819612503
        },
        {
          "id": 190,
          "start": 1192.3999999999999,
          "end": 1199.12,
          "text": "and make a list out of all those values that you get. So now if we print out our new list so I'll",
          "tokens": [
            50644,
            293,
            652,
            257,
            1329,
            484,
            295,
            439,
            729,
            4190,
            300,
            291,
            483,
            13,
            407,
            586,
            498,
            321,
            4482,
            484,
            527,
            777,
            1329,
            370,
            286,
            603,
            50980
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04934294243169025,
          "compression_ratio": 1.8352941176470587,
          "no_speech_prob": 0.19397518038749695,
          "confidence": 0.806024819612503
        },
        {
          "id": 191,
          "start": 1199.12,
          "end": 1205.44,
          "text": "print that new list and run that and you can see that now we're back to the original list.",
          "tokens": [
            50980,
            4482,
            300,
            777,
            1329,
            293,
            1190,
            300,
            293,
            291,
            393,
            536,
            300,
            586,
            321,
            434,
            646,
            281,
            264,
            3380,
            1329,
            13,
            51296
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04934294243169025,
          "compression_ratio": 1.8352941176470587,
          "no_speech_prob": 0.19397518038749695,
          "confidence": 0.806024819612503
        },
        {
          "id": 192,
          "start": 1205.44,
          "end": 1210.3999999999999,
          "text": "Okay so I know that that was a lot to take in because there's so much that we can do with list",
          "tokens": [
            51296,
            1033,
            370,
            286,
            458,
            300,
            300,
            390,
            257,
            688,
            281,
            747,
            294,
            570,
            456,
            311,
            370,
            709,
            300,
            321,
            393,
            360,
            365,
            1329,
            51544
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04934294243169025,
          "compression_ratio": 1.8352941176470587,
          "no_speech_prob": 0.19397518038749695,
          "confidence": 0.806024819612503
        }
      ],
      "duration": 28.59999999999991
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1205.3999999999999,
      "end_time": 1234.56,
      "text": "print that new list and run that and you can see that now we're back to the original list. Okay so I know that that was a lot to take in because there's so much that we can do with list but now let's move on to tuples and sets. Now that we're familiar with list then these will probably go pretty quickly. Okay so tuples are very similar to list but with one major difference so we can't modify tuples. Now in programming this is called mutable and immutable so lists are mutable and tuples are not they are immutable. So let's look at what this means so I'm going to",
      "original_segments": [
        {
          "id": 193,
          "start": 1210.3999999999999,
          "end": 1216.32,
          "text": "but now let's move on to tuples and sets. Now that we're familiar with list then these will",
          "tokens": [
            51544,
            457,
            586,
            718,
            311,
            1286,
            322,
            281,
            2604,
            2622,
            293,
            6352,
            13,
            823,
            300,
            321,
            434,
            4963,
            365,
            1329,
            550,
            613,
            486,
            51840
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04934294243169025,
          "compression_ratio": 1.8352941176470587,
          "no_speech_prob": 0.19397518038749695,
          "confidence": 0.806024819612503
        },
        {
          "id": 194,
          "start": 1216.32,
          "end": 1222.08,
          "text": "probably go pretty quickly. Okay so tuples are very similar to list but with one major difference",
          "tokens": [
            50364,
            1391,
            352,
            1238,
            2661,
            13,
            1033,
            370,
            2604,
            2622,
            366,
            588,
            2531,
            281,
            1329,
            457,
            365,
            472,
            2563,
            2649,
            50652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.040961108207702636,
          "compression_ratio": 1.691304347826087,
          "no_speech_prob": 0.0005593487294390798,
          "confidence": 0.9994406512705609
        },
        {
          "id": 195,
          "start": 1222.08,
          "end": 1228.8799999999999,
          "text": "so we can't modify tuples. Now in programming this is called mutable and immutable so lists",
          "tokens": [
            50652,
            370,
            321,
            393,
            380,
            16927,
            2604,
            2622,
            13,
            823,
            294,
            9410,
            341,
            307,
            1219,
            5839,
            712,
            293,
            3397,
            32148,
            370,
            14511,
            50992
          ],
          "temperature": 0.0,
          "avg_logprob": -0.040961108207702636,
          "compression_ratio": 1.691304347826087,
          "no_speech_prob": 0.0005593487294390798,
          "confidence": 0.9994406512705609
        },
        {
          "id": 196,
          "start": 1228.8799999999999,
          "end": 1234.56,
          "text": "are mutable and tuples are not they are immutable. So let's look at what this means so I'm going to",
          "tokens": [
            50992,
            366,
            5839,
            712,
            293,
            2604,
            2622,
            366,
            406,
            436,
            366,
            3397,
            32148,
            13,
            407,
            718,
            311,
            574,
            412,
            437,
            341,
            1355,
            370,
            286,
            478,
            516,
            281,
            51276
          ],
          "temperature": 0.0,
          "avg_logprob": -0.040961108207702636,
          "compression_ratio": 1.691304347826087,
          "no_speech_prob": 0.0005593487294390798,
          "confidence": 0.9994406512705609
        }
      ],
      "duration": 29.160000000000082
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1229.56,
      "end_time": 1254.32,
      "text": "are mutable and tuples are not they are immutable. So let's look at what this means so I'm going to grab a quick snippet of code here from my snippets file just to compare these. So I'm just going to grab from here all the way down to here and just go ahead and paste those in. So first we have a regular list here that we've already looked at and we're going to look at one issue that you might",
      "original_segments": [
        {
          "id": 197,
          "start": 1234.56,
          "end": 1241.04,
          "text": "grab a quick snippet of code here from my snippets file just to compare these. So I'm just going to",
          "tokens": [
            51276,
            4444,
            257,
            1702,
            35623,
            302,
            295,
            3089,
            510,
            490,
            452,
            35623,
            1385,
            3991,
            445,
            281,
            6794,
            613,
            13,
            407,
            286,
            478,
            445,
            516,
            281,
            51600
          ],
          "temperature": 0.0,
          "avg_logprob": -0.040961108207702636,
          "compression_ratio": 1.691304347826087,
          "no_speech_prob": 0.0005593487294390798,
          "confidence": 0.9994406512705609
        },
        {
          "id": 198,
          "start": 1241.04,
          "end": 1249.6,
          "text": "grab from here all the way down to here and just go ahead and paste those in. So first we have a",
          "tokens": [
            50364,
            4444,
            490,
            510,
            439,
            264,
            636,
            760,
            281,
            510,
            293,
            445,
            352,
            2286,
            293,
            9163,
            729,
            294,
            13,
            407,
            700,
            321,
            362,
            257,
            50792
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048076813419659935,
          "compression_ratio": 1.7671232876712328,
          "no_speech_prob": 0.20762471854686737,
          "confidence": 0.7923752814531326
        },
        {
          "id": 199,
          "start": 1249.6,
          "end": 1254.32,
          "text": "regular list here that we've already looked at and we're going to look at one issue that you might",
          "tokens": [
            50792,
            3890,
            1329,
            510,
            300,
            321,
            600,
            1217,
            2956,
            412,
            293,
            321,
            434,
            516,
            281,
            574,
            412,
            472,
            2734,
            300,
            291,
            1062,
            51028
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048076813419659935,
          "compression_ratio": 1.7671232876712328,
          "no_speech_prob": 0.20762471854686737,
          "confidence": 0.7923752814531326
        }
      ],
      "duration": 24.75999999999999
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1249.32,
      "end_time": 1279.04,
      "text": "grab from here all the way down to here and just go ahead and paste those in. So first we have a regular list here that we've already looked at and we're going to look at one issue that you might run into with mutable objects. So what I'm doing here is I'm creating our list of courses and I'm calling this list one and then we're creating another variable here called list two and we're setting that equal to list one and then we're printing out both of these. So if I run this then we can see that both list one and list two have the same values. So now let me uncomment out",
      "original_segments": [
        {
          "id": 200,
          "start": 1254.32,
          "end": 1261.12,
          "text": "run into with mutable objects. So what I'm doing here is I'm creating our list of courses and I'm",
          "tokens": [
            51028,
            1190,
            666,
            365,
            5839,
            712,
            6565,
            13,
            407,
            437,
            286,
            478,
            884,
            510,
            307,
            286,
            478,
            4084,
            527,
            1329,
            295,
            7712,
            293,
            286,
            478,
            51368
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048076813419659935,
          "compression_ratio": 1.7671232876712328,
          "no_speech_prob": 0.20762471854686737,
          "confidence": 0.7923752814531326
        },
        {
          "id": 201,
          "start": 1261.12,
          "end": 1267.2,
          "text": "calling this list one and then we're creating another variable here called list two and we're",
          "tokens": [
            51368,
            5141,
            341,
            1329,
            472,
            293,
            550,
            321,
            434,
            4084,
            1071,
            7006,
            510,
            1219,
            1329,
            732,
            293,
            321,
            434,
            51672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048076813419659935,
          "compression_ratio": 1.7671232876712328,
          "no_speech_prob": 0.20762471854686737,
          "confidence": 0.7923752814531326
        },
        {
          "id": 202,
          "start": 1267.2,
          "end": 1273.3600000000001,
          "text": "setting that equal to list one and then we're printing out both of these. So if I run this",
          "tokens": [
            50364,
            3287,
            300,
            2681,
            281,
            1329,
            472,
            293,
            550,
            321,
            434,
            14699,
            484,
            1293,
            295,
            613,
            13,
            407,
            498,
            286,
            1190,
            341,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03737315689165568,
          "compression_ratio": 1.9736842105263157,
          "no_speech_prob": 0.02438195049762726,
          "confidence": 0.9756180495023727
        },
        {
          "id": 203,
          "start": 1273.3600000000001,
          "end": 1279.04,
          "text": "then we can see that both list one and list two have the same values. So now let me uncomment out",
          "tokens": [
            50672,
            550,
            321,
            393,
            536,
            300,
            1293,
            1329,
            472,
            293,
            1329,
            732,
            362,
            264,
            912,
            4190,
            13,
            407,
            586,
            718,
            385,
            8585,
            518,
            484,
            50956
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03737315689165568,
          "compression_ratio": 1.9736842105263157,
          "no_speech_prob": 0.02438195049762726,
          "confidence": 0.9756180495023727
        }
      ],
      "duration": 29.720000000000027
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1274.04,
      "end_time": 1300.4,
      "text": "then we can see that both list one and list two have the same values. So now let me uncomment out this code where we're changing a value in the first index of list one and then reprinting our values again. So now if I run this then we can see here that all we did was change the value at the first index of list one but by changing list one's first value it also changed list two",
      "original_segments": [
        {
          "id": 204,
          "start": 1279.04,
          "end": 1286.56,
          "text": "this code where we're changing a value in the first index of list one and then reprinting our",
          "tokens": [
            50956,
            341,
            3089,
            689,
            321,
            434,
            4473,
            257,
            2158,
            294,
            264,
            700,
            8186,
            295,
            1329,
            472,
            293,
            550,
            1085,
            19014,
            278,
            527,
            51332
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03737315689165568,
          "compression_ratio": 1.9736842105263157,
          "no_speech_prob": 0.02438195049762726,
          "confidence": 0.9756180495023727
        },
        {
          "id": 205,
          "start": 1286.56,
          "end": 1292.48,
          "text": "values again. So now if I run this then we can see here that all we did was change the value",
          "tokens": [
            51332,
            4190,
            797,
            13,
            407,
            586,
            498,
            286,
            1190,
            341,
            550,
            321,
            393,
            536,
            510,
            300,
            439,
            321,
            630,
            390,
            1319,
            264,
            2158,
            51628
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03737315689165568,
          "compression_ratio": 1.9736842105263157,
          "no_speech_prob": 0.02438195049762726,
          "confidence": 0.9756180495023727
        },
        {
          "id": 206,
          "start": 1292.56,
          "end": 1300.4,
          "text": "at the first index of list one but by changing list one's first value it also changed list two",
          "tokens": [
            50368,
            412,
            264,
            700,
            8186,
            295,
            1329,
            472,
            457,
            538,
            4473,
            1329,
            472,
            311,
            700,
            2158,
            309,
            611,
            3105,
            1329,
            732,
            50760
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048564523753553336,
          "compression_ratio": 1.7545454545454546,
          "no_speech_prob": 0.24273182451725006,
          "confidence": 0.7572681754827499
        }
      ],
      "duration": 26.360000000000127
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1295.4,
      "end_time": 1325.2,
      "text": "at the first index of list one but by changing list one's first value it also changed list two and the reason for that is because they're both the same mutable object. Now if you need to modify your list then this mutability is what you want but if you want a list of values that you know aren't going to change then we can use a tuple. So let's look at a tuple example. So I'm going to comment out our mutable example here and then uncomment out our tuple example. So a tuple looks",
      "original_segments": [
        {
          "id": 207,
          "start": 1300.4,
          "end": 1306.0,
          "text": "and the reason for that is because they're both the same mutable object. Now if you need to modify",
          "tokens": [
            50760,
            293,
            264,
            1778,
            337,
            300,
            307,
            570,
            436,
            434,
            1293,
            264,
            912,
            5839,
            712,
            2657,
            13,
            823,
            498,
            291,
            643,
            281,
            16927,
            51040
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048564523753553336,
          "compression_ratio": 1.7545454545454546,
          "no_speech_prob": 0.24273182451725006,
          "confidence": 0.7572681754827499
        },
        {
          "id": 208,
          "start": 1306.0,
          "end": 1313.04,
          "text": "your list then this mutability is what you want but if you want a list of values that you know",
          "tokens": [
            51040,
            428,
            1329,
            550,
            341,
            5839,
            2310,
            307,
            437,
            291,
            528,
            457,
            498,
            291,
            528,
            257,
            1329,
            295,
            4190,
            300,
            291,
            458,
            51392
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048564523753553336,
          "compression_ratio": 1.7545454545454546,
          "no_speech_prob": 0.24273182451725006,
          "confidence": 0.7572681754827499
        },
        {
          "id": 209,
          "start": 1313.04,
          "end": 1318.8,
          "text": "aren't going to change then we can use a tuple. So let's look at a tuple example. So I'm going to",
          "tokens": [
            51392,
            3212,
            380,
            516,
            281,
            1319,
            550,
            321,
            393,
            764,
            257,
            2604,
            781,
            13,
            407,
            718,
            311,
            574,
            412,
            257,
            2604,
            781,
            1365,
            13,
            407,
            286,
            478,
            516,
            281,
            51680
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048564523753553336,
          "compression_ratio": 1.7545454545454546,
          "no_speech_prob": 0.24273182451725006,
          "confidence": 0.7572681754827499
        },
        {
          "id": 210,
          "start": 1318.8,
          "end": 1325.2,
          "text": "comment out our mutable example here and then uncomment out our tuple example. So a tuple looks",
          "tokens": [
            50364,
            2871,
            484,
            527,
            5839,
            712,
            1365,
            510,
            293,
            550,
            8585,
            518,
            484,
            527,
            2604,
            781,
            1365,
            13,
            407,
            257,
            2604,
            781,
            1542,
            50684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045543983418454406,
          "compression_ratio": 1.881188118811881,
          "no_speech_prob": 0.03725111484527588,
          "confidence": 0.9627488851547241
        }
      ],
      "duration": 29.799999999999955
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1320.2,
      "end_time": 1349.84,
      "text": "comment out our mutable example here and then uncomment out our tuple example. So a tuple looks almost exactly like a list but instead of the square brackets we're using instead using these parentheses and after we create our tuple we're doing the exact same thing. We're calling a creating a variable tuple one that is a tuple and then we're setting this tuple two equal to tuple one and for now I'll just comment out where we're changing that first value and I'll run that",
      "original_segments": [
        {
          "id": 211,
          "start": 1325.2,
          "end": 1331.28,
          "text": "almost exactly like a list but instead of the square brackets we're using instead using these",
          "tokens": [
            50684,
            1920,
            2293,
            411,
            257,
            1329,
            457,
            2602,
            295,
            264,
            3732,
            26179,
            321,
            434,
            1228,
            2602,
            1228,
            613,
            50988
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045543983418454406,
          "compression_ratio": 1.881188118811881,
          "no_speech_prob": 0.03725111484527588,
          "confidence": 0.9627488851547241
        },
        {
          "id": 212,
          "start": 1331.28,
          "end": 1336.8,
          "text": "parentheses and after we create our tuple we're doing the exact same thing. We're calling a",
          "tokens": [
            50988,
            34153,
            293,
            934,
            321,
            1884,
            527,
            2604,
            781,
            321,
            434,
            884,
            264,
            1900,
            912,
            551,
            13,
            492,
            434,
            5141,
            257,
            51264
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045543983418454406,
          "compression_ratio": 1.881188118811881,
          "no_speech_prob": 0.03725111484527588,
          "confidence": 0.9627488851547241
        },
        {
          "id": 213,
          "start": 1337.52,
          "end": 1344.32,
          "text": "creating a variable tuple one that is a tuple and then we're setting this tuple two equal to tuple",
          "tokens": [
            51300,
            4084,
            257,
            7006,
            2604,
            781,
            472,
            300,
            307,
            257,
            2604,
            781,
            293,
            550,
            321,
            434,
            3287,
            341,
            2604,
            781,
            732,
            2681,
            281,
            2604,
            781,
            51640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.045543983418454406,
          "compression_ratio": 1.881188118811881,
          "no_speech_prob": 0.03725111484527588,
          "confidence": 0.9627488851547241
        },
        {
          "id": 214,
          "start": 1344.32,
          "end": 1349.84,
          "text": "one and for now I'll just comment out where we're changing that first value and I'll run that",
          "tokens": [
            50364,
            472,
            293,
            337,
            586,
            286,
            603,
            445,
            2871,
            484,
            689,
            321,
            434,
            4473,
            300,
            700,
            2158,
            293,
            286,
            603,
            1190,
            300,
            50640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.041617476210302234,
          "compression_ratio": 1.7767441860465116,
          "no_speech_prob": 0.025575924664735794,
          "confidence": 0.9744240753352642
        }
      ],
      "duration": 29.639999999999873
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1344.84,
      "end_time": 1368.8799999999999,
      "text": "one and for now I'll just comment out where we're changing that first value and I'll run that and you can see that both of these tuples are equal to the same list of values but now if we try to change that value at the first index of tuple one just like we did with our list if we run that then we can see here that we get an error and it says type error tuple does not support item",
      "original_segments": [
        {
          "id": 215,
          "start": 1349.84,
          "end": 1355.76,
          "text": "and you can see that both of these tuples are equal to the same list of values but now if we",
          "tokens": [
            50640,
            293,
            291,
            393,
            536,
            300,
            1293,
            295,
            613,
            2604,
            2622,
            366,
            2681,
            281,
            264,
            912,
            1329,
            295,
            4190,
            457,
            586,
            498,
            321,
            50936
          ],
          "temperature": 0.0,
          "avg_logprob": -0.041617476210302234,
          "compression_ratio": 1.7767441860465116,
          "no_speech_prob": 0.025575924664735794,
          "confidence": 0.9744240753352642
        },
        {
          "id": 216,
          "start": 1355.76,
          "end": 1362.3999999999999,
          "text": "try to change that value at the first index of tuple one just like we did with our list if we",
          "tokens": [
            50936,
            853,
            281,
            1319,
            300,
            2158,
            412,
            264,
            700,
            8186,
            295,
            2604,
            781,
            472,
            445,
            411,
            321,
            630,
            365,
            527,
            1329,
            498,
            321,
            51268
          ],
          "temperature": 0.0,
          "avg_logprob": -0.041617476210302234,
          "compression_ratio": 1.7767441860465116,
          "no_speech_prob": 0.025575924664735794,
          "confidence": 0.9744240753352642
        },
        {
          "id": 217,
          "start": 1362.3999999999999,
          "end": 1368.8799999999999,
          "text": "run that then we can see here that we get an error and it says type error tuple does not support item",
          "tokens": [
            51268,
            1190,
            300,
            550,
            321,
            393,
            536,
            510,
            300,
            321,
            483,
            364,
            6713,
            293,
            309,
            1619,
            2010,
            6713,
            2604,
            781,
            775,
            406,
            1406,
            3174,
            51592
          ],
          "temperature": 0.0,
          "avg_logprob": -0.041617476210302234,
          "compression_ratio": 1.7767441860465116,
          "no_speech_prob": 0.025575924664735794,
          "confidence": 0.9744240753352642
        }
      ],
      "duration": 24.039999999999964
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1363.8799999999999,
      "end_time": 1388.4,
      "text": "run that then we can see here that we get an error and it says type error tuple does not support item assignment and that's because it's immutable so now since a tuple is immutable it doesn't have nearly as many methods as a list because a lot of those list methods that we looked at involved mutating the values so we can't append we can't remove anything or anything like that but other",
      "original_segments": [
        {
          "id": 218,
          "start": 1368.88,
          "end": 1376.16,
          "text": "assignment and that's because it's immutable so now since a tuple is immutable it doesn't have",
          "tokens": [
            50364,
            15187,
            293,
            300,
            311,
            570,
            309,
            311,
            3397,
            32148,
            370,
            586,
            1670,
            257,
            2604,
            781,
            307,
            3397,
            32148,
            309,
            1177,
            380,
            362,
            50728
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05690961879688305,
          "compression_ratio": 1.8333333333333333,
          "no_speech_prob": 0.3538641035556793,
          "confidence": 0.6461358964443207
        },
        {
          "id": 219,
          "start": 1376.16,
          "end": 1382.0,
          "text": "nearly as many methods as a list because a lot of those list methods that we looked at involved",
          "tokens": [
            50728,
            6217,
            382,
            867,
            7150,
            382,
            257,
            1329,
            570,
            257,
            688,
            295,
            729,
            1329,
            7150,
            300,
            321,
            2956,
            412,
            3288,
            51020
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05690961879688305,
          "compression_ratio": 1.8333333333333333,
          "no_speech_prob": 0.3538641035556793,
          "confidence": 0.6461358964443207
        },
        {
          "id": 220,
          "start": 1382.0,
          "end": 1388.4,
          "text": "mutating the values so we can't append we can't remove anything or anything like that but other",
          "tokens": [
            51020,
            5839,
            990,
            264,
            4190,
            370,
            321,
            393,
            380,
            34116,
            321,
            393,
            380,
            4159,
            1340,
            420,
            1340,
            411,
            300,
            457,
            661,
            51340
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05690961879688305,
          "compression_ratio": 1.8333333333333333,
          "no_speech_prob": 0.3538641035556793,
          "confidence": 0.6461358964443207
        }
      ],
      "duration": 24.52000000000021
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1383.4,
      "end_time": 1410.48,
      "text": "mutating the values so we can't append we can't remove anything or anything like that but other than that they behave pretty much the same we can loop through tuples we can access values and all the other things that we've already seen except for what mutates the list so that's basically the difference between list and tuples if you need something that you can modify then use a list but if you just want something that you can loop through and access then you might want to think",
      "original_segments": [
        {
          "id": 221,
          "start": 1388.4,
          "end": 1394.48,
          "text": "than that they behave pretty much the same we can loop through tuples we can access values and all",
          "tokens": [
            51340,
            813,
            300,
            436,
            15158,
            1238,
            709,
            264,
            912,
            321,
            393,
            6367,
            807,
            2604,
            2622,
            321,
            393,
            2105,
            4190,
            293,
            439,
            51644
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05690961879688305,
          "compression_ratio": 1.8333333333333333,
          "no_speech_prob": 0.3538641035556793,
          "confidence": 0.6461358964443207
        },
        {
          "id": 222,
          "start": 1394.56,
          "end": 1400.0,
          "text": "the other things that we've already seen except for what mutates the list so that's basically",
          "tokens": [
            50368,
            264,
            661,
            721,
            300,
            321,
            600,
            1217,
            1612,
            3993,
            337,
            437,
            5839,
            1024,
            264,
            1329,
            370,
            300,
            311,
            1936,
            50640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03086745428002399,
          "compression_ratio": 1.8682170542635659,
          "no_speech_prob": 0.11428273469209671,
          "confidence": 0.8857172653079033
        },
        {
          "id": 223,
          "start": 1400.0,
          "end": 1406.16,
          "text": "the difference between list and tuples if you need something that you can modify then use a list but",
          "tokens": [
            50640,
            264,
            2649,
            1296,
            1329,
            293,
            2604,
            2622,
            498,
            291,
            643,
            746,
            300,
            291,
            393,
            16927,
            550,
            764,
            257,
            1329,
            457,
            50948
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03086745428002399,
          "compression_ratio": 1.8682170542635659,
          "no_speech_prob": 0.11428273469209671,
          "confidence": 0.8857172653079033
        },
        {
          "id": 224,
          "start": 1406.16,
          "end": 1410.48,
          "text": "if you just want something that you can loop through and access then you might want to think",
          "tokens": [
            50948,
            498,
            291,
            445,
            528,
            746,
            300,
            291,
            393,
            6367,
            807,
            293,
            2105,
            550,
            291,
            1062,
            528,
            281,
            519,
            51164
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03086745428002399,
          "compression_ratio": 1.8682170542635659,
          "no_speech_prob": 0.11428273469209671,
          "confidence": 0.8857172653079033
        }
      ],
      "duration": 27.079999999999927
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1405.48,
      "end_time": 1430.64,
      "text": "the difference between list and tuples if you need something that you can modify then use a list but if you just want something that you can loop through and access then you might want to think about a tuple so that you don't run into the issues that we just saw okay and lastly let's look at sets now sets are values that are unordered and also have no duplicates so let me grab a sample from the snippets file here that we can see so i'm just going to go ahead and grab this small",
      "original_segments": [
        {
          "id": 225,
          "start": 1410.48,
          "end": 1416.16,
          "text": "about a tuple so that you don't run into the issues that we just saw okay and lastly let's",
          "tokens": [
            51164,
            466,
            257,
            2604,
            781,
            370,
            300,
            291,
            500,
            380,
            1190,
            666,
            264,
            2663,
            300,
            321,
            445,
            1866,
            1392,
            293,
            16386,
            718,
            311,
            51448
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03086745428002399,
          "compression_ratio": 1.8682170542635659,
          "no_speech_prob": 0.11428273469209671,
          "confidence": 0.8857172653079033
        },
        {
          "id": 226,
          "start": 1416.16,
          "end": 1424.24,
          "text": "look at sets now sets are values that are unordered and also have no duplicates so let me grab a sample",
          "tokens": [
            51448,
            574,
            412,
            6352,
            586,
            6352,
            366,
            4190,
            300,
            366,
            517,
            765,
            4073,
            293,
            611,
            362,
            572,
            17154,
            1024,
            370,
            718,
            385,
            4444,
            257,
            6889,
            51852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03086745428002399,
          "compression_ratio": 1.8682170542635659,
          "no_speech_prob": 0.11428273469209671,
          "confidence": 0.8857172653079033
        },
        {
          "id": 227,
          "start": 1424.24,
          "end": 1430.64,
          "text": "from the snippets file here that we can see so i'm just going to go ahead and grab this small",
          "tokens": [
            50364,
            490,
            264,
            35623,
            1385,
            3991,
            510,
            300,
            321,
            393,
            536,
            370,
            741,
            478,
            445,
            516,
            281,
            352,
            2286,
            293,
            4444,
            341,
            1359,
            50684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02853542719131861,
          "compression_ratio": 1.9322709163346614,
          "no_speech_prob": 0.00022569677093997598,
          "confidence": 0.99977430322906
        }
      ],
      "duration": 25.160000000000082
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1425.64,
      "end_time": 1454.0,
      "text": "from the snippets file here that we can see so i'm just going to go ahead and grab this small snippet and paste that in so we can see that this looks similar to lists and tuples but instead of the brackets or parentheses we're instead using these curly braces now if i run this code to print this set out then we can see that it prints out the values but if you notice here these aren't in the order that we added them so we had history first here and it has history last down here and",
      "original_segments": [
        {
          "id": 228,
          "start": 1430.64,
          "end": 1436.48,
          "text": "snippet and paste that in so we can see that this looks similar to lists and tuples but instead of",
          "tokens": [
            50684,
            35623,
            302,
            293,
            9163,
            300,
            294,
            370,
            321,
            393,
            536,
            300,
            341,
            1542,
            2531,
            281,
            14511,
            293,
            2604,
            2622,
            457,
            2602,
            295,
            50976
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02853542719131861,
          "compression_ratio": 1.9322709163346614,
          "no_speech_prob": 0.00022569677093997598,
          "confidence": 0.99977430322906
        },
        {
          "id": 229,
          "start": 1436.48,
          "end": 1442.48,
          "text": "the brackets or parentheses we're instead using these curly braces now if i run this code to",
          "tokens": [
            50976,
            264,
            26179,
            420,
            34153,
            321,
            434,
            2602,
            1228,
            613,
            32066,
            41537,
            586,
            498,
            741,
            1190,
            341,
            3089,
            281,
            51276
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02853542719131861,
          "compression_ratio": 1.9322709163346614,
          "no_speech_prob": 0.00022569677093997598,
          "confidence": 0.99977430322906
        },
        {
          "id": 230,
          "start": 1442.48,
          "end": 1447.52,
          "text": "print this set out then we can see that it prints out the values but if you notice here these aren't",
          "tokens": [
            51276,
            4482,
            341,
            992,
            484,
            550,
            321,
            393,
            536,
            300,
            309,
            22305,
            484,
            264,
            4190,
            457,
            498,
            291,
            3449,
            510,
            613,
            3212,
            380,
            51528
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02853542719131861,
          "compression_ratio": 1.9322709163346614,
          "no_speech_prob": 0.00022569677093997598,
          "confidence": 0.99977430322906
        },
        {
          "id": 231,
          "start": 1447.52,
          "end": 1454.0,
          "text": "in the order that we added them so we had history first here and it has history last down here and",
          "tokens": [
            51528,
            294,
            264,
            1668,
            300,
            321,
            3869,
            552,
            370,
            321,
            632,
            2503,
            700,
            510,
            293,
            309,
            575,
            2503,
            1036,
            760,
            510,
            293,
            51852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02853542719131861,
          "compression_ratio": 1.9322709163346614,
          "no_speech_prob": 0.00022569677093997598,
          "confidence": 0.99977430322906
        }
      ],
      "duration": 28.3599999999999
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1449.0,
      "end_time": 1477.44,
      "text": "in the order that we added them so we had history first here and it has history last down here and if i run this a couple more times then we'll see that you know this order can change with each execution now the reason for this is because unlike our lists or tuples sets don't really care about order because some of the main uses for a set is either to test whether a value is part of a set and also it's used a lot to remove duplicate values because sets throw away duplicates",
      "original_segments": [
        {
          "id": 232,
          "start": 1454.0,
          "end": 1458.96,
          "text": "if i run this a couple more times then we'll see that you know this order can change with each",
          "tokens": [
            50364,
            498,
            741,
            1190,
            341,
            257,
            1916,
            544,
            1413,
            550,
            321,
            603,
            536,
            300,
            291,
            458,
            341,
            1668,
            393,
            1319,
            365,
            1184,
            50612
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02912829177720206,
          "compression_ratio": 1.7945736434108528,
          "no_speech_prob": 5.2355062507558614e-05,
          "confidence": 0.9999476449374924
        },
        {
          "id": 233,
          "start": 1458.96,
          "end": 1464.64,
          "text": "execution now the reason for this is because unlike our lists or tuples sets don't really",
          "tokens": [
            50612,
            15058,
            586,
            264,
            1778,
            337,
            341,
            307,
            570,
            8343,
            527,
            14511,
            420,
            2604,
            2622,
            6352,
            500,
            380,
            534,
            50896
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02912829177720206,
          "compression_ratio": 1.7945736434108528,
          "no_speech_prob": 5.2355062507558614e-05,
          "confidence": 0.9999476449374924
        },
        {
          "id": 234,
          "start": 1464.64,
          "end": 1470.96,
          "text": "care about order because some of the main uses for a set is either to test whether a value is",
          "tokens": [
            50896,
            1127,
            466,
            1668,
            570,
            512,
            295,
            264,
            2135,
            4960,
            337,
            257,
            992,
            307,
            2139,
            281,
            1500,
            1968,
            257,
            2158,
            307,
            51212
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02912829177720206,
          "compression_ratio": 1.7945736434108528,
          "no_speech_prob": 5.2355062507558614e-05,
          "confidence": 0.9999476449374924
        },
        {
          "id": 235,
          "start": 1470.96,
          "end": 1477.44,
          "text": "part of a set and also it's used a lot to remove duplicate values because sets throw away duplicates",
          "tokens": [
            51212,
            644,
            295,
            257,
            992,
            293,
            611,
            309,
            311,
            1143,
            257,
            688,
            281,
            4159,
            23976,
            4190,
            570,
            6352,
            3507,
            1314,
            17154,
            1024,
            51536
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02912829177720206,
          "compression_ratio": 1.7945736434108528,
          "no_speech_prob": 5.2355062507558614e-05,
          "confidence": 0.9999476449374924
        }
      ],
      "duration": 28.440000000000055
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1472.44,
      "end_time": 1500.96,
      "text": "part of a set and also it's used a lot to remove duplicate values because sets throw away duplicates so first let's look at how to get rid of duplicates so if i add another math course here to the end of our set and now if i rerun this then we can see that we still only have four courses it got rid of that second math course and it just left us with the one now another thing i mentioned was that it's used to test whether a value is part of a set now this is called a",
      "original_segments": [
        {
          "id": 236,
          "start": 1477.44,
          "end": 1482.24,
          "text": "so first let's look at how to get rid of duplicates so if i add another math course",
          "tokens": [
            51536,
            370,
            700,
            718,
            311,
            574,
            412,
            577,
            281,
            483,
            3973,
            295,
            17154,
            1024,
            370,
            498,
            741,
            909,
            1071,
            5221,
            1164,
            51776
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02912829177720206,
          "compression_ratio": 1.7945736434108528,
          "no_speech_prob": 5.2355062507558614e-05,
          "confidence": 0.9999476449374924
        },
        {
          "id": 237,
          "start": 1482.24,
          "end": 1489.04,
          "text": "here to the end of our set and now if i rerun this then we can see that we still only have",
          "tokens": [
            50364,
            510,
            281,
            264,
            917,
            295,
            527,
            992,
            293,
            586,
            498,
            741,
            43819,
            409,
            341,
            550,
            321,
            393,
            536,
            300,
            321,
            920,
            787,
            362,
            50704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03878889692590592,
          "compression_ratio": 1.7142857142857142,
          "no_speech_prob": 0.01430690661072731,
          "confidence": 0.9856930933892727
        },
        {
          "id": 238,
          "start": 1489.04,
          "end": 1495.44,
          "text": "four courses it got rid of that second math course and it just left us with the one now another thing",
          "tokens": [
            50704,
            1451,
            7712,
            309,
            658,
            3973,
            295,
            300,
            1150,
            5221,
            1164,
            293,
            309,
            445,
            1411,
            505,
            365,
            264,
            472,
            586,
            1071,
            551,
            51024
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03878889692590592,
          "compression_ratio": 1.7142857142857142,
          "no_speech_prob": 0.01430690661072731,
          "confidence": 0.9856930933892727
        },
        {
          "id": 239,
          "start": 1495.44,
          "end": 1500.96,
          "text": "i mentioned was that it's used to test whether a value is part of a set now this is called a",
          "tokens": [
            51024,
            741,
            2835,
            390,
            300,
            309,
            311,
            1143,
            281,
            1500,
            1968,
            257,
            2158,
            307,
            644,
            295,
            257,
            992,
            586,
            341,
            307,
            1219,
            257,
            51300
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03878889692590592,
          "compression_ratio": 1.7142857142857142,
          "no_speech_prob": 0.01430690661072731,
          "confidence": 0.9856930933892727
        }
      ],
      "duration": 28.519999999999982
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1495.96,
      "end_time": 1523.04,
      "text": "i mentioned was that it's used to test whether a value is part of a set now this is called a membership test so sets do this a lot more efficiently than lists and tuples so what i mean by this is that within our print statement if i was to say math in cs courses and i run that then we can see that it prints out true now we could do that with lists and tuples also but sets",
      "original_segments": [
        {
          "id": 240,
          "start": 1500.96,
          "end": 1506.56,
          "text": "membership test so sets do this a lot more efficiently than lists and tuples so what i",
          "tokens": [
            51300,
            16560,
            1500,
            370,
            6352,
            360,
            341,
            257,
            688,
            544,
            19621,
            813,
            14511,
            293,
            2604,
            2622,
            370,
            437,
            741,
            51580
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03878889692590592,
          "compression_ratio": 1.7142857142857142,
          "no_speech_prob": 0.01430690661072731,
          "confidence": 0.9856930933892727
        },
        {
          "id": 241,
          "start": 1506.6399999999999,
          "end": 1517.28,
          "text": "mean by this is that within our print statement if i was to say math in cs courses and i run that",
          "tokens": [
            50368,
            914,
            538,
            341,
            307,
            300,
            1951,
            527,
            4482,
            5629,
            498,
            741,
            390,
            281,
            584,
            5221,
            294,
            28277,
            7712,
            293,
            741,
            1190,
            300,
            50900
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05126671899448742,
          "compression_ratio": 1.7194570135746607,
          "no_speech_prob": 0.03770281374454498,
          "confidence": 0.962297186255455
        },
        {
          "id": 242,
          "start": 1517.28,
          "end": 1523.04,
          "text": "then we can see that it prints out true now we could do that with lists and tuples also but sets",
          "tokens": [
            50900,
            550,
            321,
            393,
            536,
            300,
            309,
            22305,
            484,
            2074,
            586,
            321,
            727,
            360,
            300,
            365,
            14511,
            293,
            2604,
            2622,
            611,
            457,
            6352,
            51188
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05126671899448742,
          "compression_ratio": 1.7194570135746607,
          "no_speech_prob": 0.03770281374454498,
          "confidence": 0.962297186255455
        }
      ],
      "duration": 27.079999999999927
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1518.04,
      "end_time": 1542.24,
      "text": "then we can see that it prints out true now we could do that with lists and tuples also but sets are optimized for this okay and lastly something else really useful that sets can quickly do is determine what values they either share or don't share with other sets so for example let me create another set called art courses and i'll create this pretty similar to cs courses here",
      "original_segments": [
        {
          "id": 243,
          "start": 1523.04,
          "end": 1528.96,
          "text": "are optimized for this okay and lastly something else really useful that sets can quickly do",
          "tokens": [
            51188,
            366,
            26941,
            337,
            341,
            1392,
            293,
            16386,
            746,
            1646,
            534,
            4420,
            300,
            6352,
            393,
            2661,
            360,
            51484
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05126671899448742,
          "compression_ratio": 1.7194570135746607,
          "no_speech_prob": 0.03770281374454498,
          "confidence": 0.962297186255455
        },
        {
          "id": 244,
          "start": 1528.96,
          "end": 1534.96,
          "text": "is determine what values they either share or don't share with other sets so for example let",
          "tokens": [
            51484,
            307,
            6997,
            437,
            4190,
            436,
            2139,
            2073,
            420,
            500,
            380,
            2073,
            365,
            661,
            6352,
            370,
            337,
            1365,
            718,
            51784
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05126671899448742,
          "compression_ratio": 1.7194570135746607,
          "no_speech_prob": 0.03770281374454498,
          "confidence": 0.962297186255455
        },
        {
          "id": 245,
          "start": 1534.96,
          "end": 1542.24,
          "text": "me create another set called art courses and i'll create this pretty similar to cs courses here",
          "tokens": [
            50364,
            385,
            1884,
            1071,
            992,
            1219,
            1523,
            7712,
            293,
            741,
            603,
            1884,
            341,
            1238,
            2531,
            281,
            28277,
            7712,
            510,
            50728
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034011617950771164,
          "compression_ratio": 1.8446601941747574,
          "no_speech_prob": 0.0007551510352641344,
          "confidence": 0.9992448489647359
        }
      ],
      "duration": 24.200000000000045
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1537.24,
      "end_time": 1565.52,
      "text": "me create another set called art courses and i'll create this pretty similar to cs courses here but instead of physics and comp sci i'll instead say art and design and with both of these i'm going to go ahead and take out that extra math on the end just so it's a little bit more clear and instead of this being cs courses i'm going to call this set art courses so now we have two different sets here and some of them have different courses and some of the courses are the same",
      "original_segments": [
        {
          "id": 246,
          "start": 1543.04,
          "end": 1549.8400000000001,
          "text": "but instead of physics and comp sci i'll instead say art and design and with both of these i'm",
          "tokens": [
            50768,
            457,
            2602,
            295,
            10649,
            293,
            715,
            2180,
            741,
            603,
            2602,
            584,
            1523,
            293,
            1715,
            293,
            365,
            1293,
            295,
            613,
            741,
            478,
            51108
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034011617950771164,
          "compression_ratio": 1.8446601941747574,
          "no_speech_prob": 0.0007551510352641344,
          "confidence": 0.9992448489647359
        },
        {
          "id": 247,
          "start": 1549.8400000000001,
          "end": 1555.04,
          "text": "going to go ahead and take out that extra math on the end just so it's a little bit more clear",
          "tokens": [
            51108,
            516,
            281,
            352,
            2286,
            293,
            747,
            484,
            300,
            2857,
            5221,
            322,
            264,
            917,
            445,
            370,
            309,
            311,
            257,
            707,
            857,
            544,
            1850,
            51368
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034011617950771164,
          "compression_ratio": 1.8446601941747574,
          "no_speech_prob": 0.0007551510352641344,
          "confidence": 0.9992448489647359
        },
        {
          "id": 248,
          "start": 1555.04,
          "end": 1560.4,
          "text": "and instead of this being cs courses i'm going to call this set art courses so now we have two",
          "tokens": [
            51368,
            293,
            2602,
            295,
            341,
            885,
            28277,
            7712,
            741,
            478,
            516,
            281,
            818,
            341,
            992,
            1523,
            7712,
            370,
            586,
            321,
            362,
            732,
            51636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.034011617950771164,
          "compression_ratio": 1.8446601941747574,
          "no_speech_prob": 0.0007551510352641344,
          "confidence": 0.9992448489647359
        },
        {
          "id": 249,
          "start": 1560.48,
          "end": 1565.52,
          "text": "different sets here and some of them have different courses and some of the courses are the same",
          "tokens": [
            50368,
            819,
            6352,
            510,
            293,
            512,
            295,
            552,
            362,
            819,
            7712,
            293,
            512,
            295,
            264,
            7712,
            366,
            264,
            912,
            50620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03736252731151795,
          "compression_ratio": 1.9947368421052631,
          "no_speech_prob": 0.27462711930274963,
          "confidence": 0.7253728806972504
        }
      ],
      "duration": 28.279999999999973
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1560.52,
      "end_time": 1587.68,
      "text": "different sets here and some of them have different courses and some of the courses are the same so let's say that i wanted to see what courses these sets had in common so to do this we could use the intersection method so we can say cs courses dot intersection and we will pass in the art courses into that so if we run that then we can see that it shows us that the history and",
      "original_segments": [
        {
          "id": 250,
          "start": 1565.52,
          "end": 1571.52,
          "text": "so let's say that i wanted to see what courses these sets had in common so to do this we could",
          "tokens": [
            50620,
            370,
            718,
            311,
            584,
            300,
            741,
            1415,
            281,
            536,
            437,
            7712,
            613,
            6352,
            632,
            294,
            2689,
            370,
            281,
            360,
            341,
            321,
            727,
            50920
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03736252731151795,
          "compression_ratio": 1.9947368421052631,
          "no_speech_prob": 0.27462711930274963,
          "confidence": 0.7253728806972504
        },
        {
          "id": 251,
          "start": 1571.52,
          "end": 1581.44,
          "text": "use the intersection method so we can say cs courses dot intersection and we will pass in",
          "tokens": [
            50920,
            764,
            264,
            15236,
            3170,
            370,
            321,
            393,
            584,
            28277,
            7712,
            5893,
            15236,
            293,
            321,
            486,
            1320,
            294,
            51416
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03736252731151795,
          "compression_ratio": 1.9947368421052631,
          "no_speech_prob": 0.27462711930274963,
          "confidence": 0.7253728806972504
        },
        {
          "id": 252,
          "start": 1581.44,
          "end": 1587.68,
          "text": "the art courses into that so if we run that then we can see that it shows us that the history and",
          "tokens": [
            51416,
            264,
            1523,
            7712,
            666,
            300,
            370,
            498,
            321,
            1190,
            300,
            550,
            321,
            393,
            536,
            300,
            309,
            3110,
            505,
            300,
            264,
            2503,
            293,
            51728
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03736252731151795,
          "compression_ratio": 1.9947368421052631,
          "no_speech_prob": 0.27462711930274963,
          "confidence": 0.7253728806972504
        }
      ],
      "duration": 27.160000000000082
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1582.68,
      "end_time": 1612.4,
      "text": "the art courses into that so if we run that then we can see that it shows us that the history and math courses are in both of those sets and if i wanted to see what courses are in the cs courses but not the art courses then i could use the difference method so instead of intersection i will instead say difference so if i run that then now we can see that it shows that the physics and comp sci courses weren't in the art courses now if i wanted to combine both of these",
      "original_segments": [
        {
          "id": 253,
          "start": 1587.68,
          "end": 1594.72,
          "text": "math courses are in both of those sets and if i wanted to see what courses are in the cs courses",
          "tokens": [
            50364,
            5221,
            7712,
            366,
            294,
            1293,
            295,
            729,
            6352,
            293,
            498,
            741,
            1415,
            281,
            536,
            437,
            7712,
            366,
            294,
            264,
            28277,
            7712,
            50716
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03542389540836729,
          "compression_ratio": 2.027173913043478,
          "no_speech_prob": 0.1258639693260193,
          "confidence": 0.8741360306739807
        },
        {
          "id": 254,
          "start": 1594.72,
          "end": 1600.24,
          "text": "but not the art courses then i could use the difference method so instead of intersection",
          "tokens": [
            50716,
            457,
            406,
            264,
            1523,
            7712,
            550,
            741,
            727,
            764,
            264,
            2649,
            3170,
            370,
            2602,
            295,
            15236,
            50992
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03542389540836729,
          "compression_ratio": 2.027173913043478,
          "no_speech_prob": 0.1258639693260193,
          "confidence": 0.8741360306739807
        },
        {
          "id": 255,
          "start": 1600.24,
          "end": 1605.2,
          "text": "i will instead say difference so if i run that then now we can see that it shows that the",
          "tokens": [
            50992,
            741,
            486,
            2602,
            584,
            2649,
            370,
            498,
            741,
            1190,
            300,
            550,
            586,
            321,
            393,
            536,
            300,
            309,
            3110,
            300,
            264,
            51240
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03542389540836729,
          "compression_ratio": 2.027173913043478,
          "no_speech_prob": 0.1258639693260193,
          "confidence": 0.8741360306739807
        },
        {
          "id": 256,
          "start": 1606.0,
          "end": 1612.4,
          "text": "physics and comp sci courses weren't in the art courses now if i wanted to combine both of these",
          "tokens": [
            51280,
            10649,
            293,
            715,
            2180,
            7712,
            4999,
            380,
            294,
            264,
            1523,
            7712,
            586,
            498,
            741,
            1415,
            281,
            10432,
            1293,
            295,
            613,
            51600
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03542389540836729,
          "compression_ratio": 2.027173913043478,
          "no_speech_prob": 0.1258639693260193,
          "confidence": 0.8741360306739807
        }
      ],
      "duration": 29.720000000000027
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1607.4,
      "end_time": 1636.4,
      "text": "physics and comp sci courses weren't in the art courses now if i wanted to combine both of these sets and print all of the courses offered then i could use the union method so i'll say cs courses dot union and we want to union with the art courses so if i run that then we can see that now we get all of the courses printed out from both sets so sets can definitely be useful for these kinds of use cases and for these particular problems they're much more performant than lists",
      "original_segments": [
        {
          "id": 257,
          "start": 1612.4,
          "end": 1620.16,
          "text": "sets and print all of the courses offered then i could use the union method so i'll say cs courses",
          "tokens": [
            50364,
            6352,
            293,
            4482,
            439,
            295,
            264,
            7712,
            8059,
            550,
            741,
            727,
            764,
            264,
            11671,
            3170,
            370,
            741,
            603,
            584,
            28277,
            7712,
            50752
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05019704784665789,
          "compression_ratio": 1.8423076923076922,
          "no_speech_prob": 0.13860660791397095,
          "confidence": 0.861393392086029
        },
        {
          "id": 258,
          "start": 1620.16,
          "end": 1625.8400000000001,
          "text": "dot union and we want to union with the art courses so if i run that then we can see that now",
          "tokens": [
            50752,
            5893,
            11671,
            293,
            321,
            528,
            281,
            11671,
            365,
            264,
            1523,
            7712,
            370,
            498,
            741,
            1190,
            300,
            550,
            321,
            393,
            536,
            300,
            586,
            51036
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05019704784665789,
          "compression_ratio": 1.8423076923076922,
          "no_speech_prob": 0.13860660791397095,
          "confidence": 0.861393392086029
        },
        {
          "id": 259,
          "start": 1625.8400000000001,
          "end": 1631.44,
          "text": "we get all of the courses printed out from both sets so sets can definitely be useful for these",
          "tokens": [
            51036,
            321,
            483,
            439,
            295,
            264,
            7712,
            13567,
            484,
            490,
            1293,
            6352,
            370,
            6352,
            393,
            2138,
            312,
            4420,
            337,
            613,
            51316
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05019704784665789,
          "compression_ratio": 1.8423076923076922,
          "no_speech_prob": 0.13860660791397095,
          "confidence": 0.861393392086029
        },
        {
          "id": 260,
          "start": 1631.44,
          "end": 1636.4,
          "text": "kinds of use cases and for these particular problems they're much more performant than lists",
          "tokens": [
            51316,
            3685,
            295,
            764,
            3331,
            293,
            337,
            613,
            1729,
            2740,
            436,
            434,
            709,
            544,
            2042,
            394,
            813,
            14511,
            51564
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05019704784665789,
          "compression_ratio": 1.8423076923076922,
          "no_speech_prob": 0.13860660791397095,
          "confidence": 0.861393392086029
        }
      ],
      "duration": 29.0
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1631.4,
      "end_time": 1656.08,
      "text": "we get all of the courses printed out from both sets so sets can definitely be useful for these kinds of use cases and for these particular problems they're much more performant than lists or tuples okay so we are basically finished up with this video but let me show you one last thing before we close this out and that's going to be how to create empty list tuples and sets so i have these over here in my snippets so let me grab these real quick and copy and paste these over here and",
      "original_segments": [
        {
          "id": 261,
          "start": 1636.4,
          "end": 1641.76,
          "text": "or tuples okay so we are basically finished up with this video but let me show you one last thing",
          "tokens": [
            51564,
            420,
            2604,
            2622,
            1392,
            370,
            321,
            366,
            1936,
            4335,
            493,
            365,
            341,
            960,
            457,
            718,
            385,
            855,
            291,
            472,
            1036,
            551,
            51832
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05019704784665789,
          "compression_ratio": 1.8423076923076922,
          "no_speech_prob": 0.13860660791397095,
          "confidence": 0.861393392086029
        },
        {
          "id": 262,
          "start": 1641.76,
          "end": 1647.52,
          "text": "before we close this out and that's going to be how to create empty list tuples and sets so i have",
          "tokens": [
            50364,
            949,
            321,
            1998,
            341,
            484,
            293,
            300,
            311,
            516,
            281,
            312,
            577,
            281,
            1884,
            6707,
            1329,
            2604,
            2622,
            293,
            6352,
            370,
            741,
            362,
            50652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02494161399369387,
          "compression_ratio": 1.8211009174311927,
          "no_speech_prob": 0.00022737091057933867,
          "confidence": 0.9997726290894207
        },
        {
          "id": 263,
          "start": 1647.52,
          "end": 1656.08,
          "text": "these over here in my snippets so let me grab these real quick and copy and paste these over here and",
          "tokens": [
            50652,
            613,
            670,
            510,
            294,
            452,
            35623,
            1385,
            370,
            718,
            385,
            4444,
            613,
            957,
            1702,
            293,
            5055,
            293,
            9163,
            613,
            670,
            510,
            293,
            51080
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02494161399369387,
          "compression_ratio": 1.8211009174311927,
          "no_speech_prob": 0.00022737091057933867,
          "confidence": 0.9997726290894207
        }
      ],
      "duration": 24.679999999999836
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1651.08,
      "end_time": 1674.48,
      "text": "these over here in my snippets so let me grab these real quick and copy and paste these over here and bring this down a line so i wanted to show this because there's a small gotcha when it comes to creating an empty set so to create an empty list we can either set it equal to empty square brackets or we can use this built-in list class and to create an empty tuple we can use these empty",
      "original_segments": [
        {
          "id": 264,
          "start": 1656.08,
          "end": 1661.44,
          "text": "bring this down a line so i wanted to show this because there's a small gotcha when it comes to",
          "tokens": [
            51080,
            1565,
            341,
            760,
            257,
            1622,
            370,
            741,
            1415,
            281,
            855,
            341,
            570,
            456,
            311,
            257,
            1359,
            658,
            4413,
            562,
            309,
            1487,
            281,
            51348
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02494161399369387,
          "compression_ratio": 1.8211009174311927,
          "no_speech_prob": 0.00022737091057933867,
          "confidence": 0.9997726290894207
        },
        {
          "id": 265,
          "start": 1661.44,
          "end": 1668.56,
          "text": "creating an empty set so to create an empty list we can either set it equal to empty square brackets",
          "tokens": [
            51348,
            4084,
            364,
            6707,
            992,
            370,
            281,
            1884,
            364,
            6707,
            1329,
            321,
            393,
            2139,
            992,
            309,
            2681,
            281,
            6707,
            3732,
            26179,
            51704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02494161399369387,
          "compression_ratio": 1.8211009174311927,
          "no_speech_prob": 0.00022737091057933867,
          "confidence": 0.9997726290894207
        },
        {
          "id": 266,
          "start": 1668.56,
          "end": 1674.48,
          "text": "or we can use this built-in list class and to create an empty tuple we can use these empty",
          "tokens": [
            50364,
            420,
            321,
            393,
            764,
            341,
            3094,
            12,
            259,
            1329,
            1508,
            293,
            281,
            1884,
            364,
            6707,
            2604,
            781,
            321,
            393,
            764,
            613,
            6707,
            50660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0241401221441186,
          "compression_ratio": 2.167630057803468,
          "no_speech_prob": 0.06038708612322807,
          "confidence": 0.9396129138767719
        }
      ],
      "duration": 23.40000000000009
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1669.48,
      "end_time": 1699.44,
      "text": "or we can use this built-in list class and to create an empty tuple we can use these empty parentheses or this built-in tuple class now to create an empty set we actually can't use these empty curly braces so this line right here is wrong that's not an empty set this is actually going to create an empty dictionary so to create an empty set the way to properly do this is to use the built-in set class with no values and speaking of dictionaries that's actually what",
      "original_segments": [
        {
          "id": 267,
          "start": 1674.48,
          "end": 1681.12,
          "text": "parentheses or this built-in tuple class now to create an empty set we actually can't use these",
          "tokens": [
            50660,
            34153,
            420,
            341,
            3094,
            12,
            259,
            2604,
            781,
            1508,
            586,
            281,
            1884,
            364,
            6707,
            992,
            321,
            767,
            393,
            380,
            764,
            613,
            50992
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0241401221441186,
          "compression_ratio": 2.167630057803468,
          "no_speech_prob": 0.06038708612322807,
          "confidence": 0.9396129138767719
        },
        {
          "id": 268,
          "start": 1681.12,
          "end": 1687.6,
          "text": "empty curly braces so this line right here is wrong that's not an empty set this is actually",
          "tokens": [
            50992,
            6707,
            32066,
            41537,
            370,
            341,
            1622,
            558,
            510,
            307,
            2085,
            300,
            311,
            406,
            364,
            6707,
            992,
            341,
            307,
            767,
            51316
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0241401221441186,
          "compression_ratio": 2.167630057803468,
          "no_speech_prob": 0.06038708612322807,
          "confidence": 0.9396129138767719
        },
        {
          "id": 269,
          "start": 1687.6,
          "end": 1694.0,
          "text": "going to create an empty dictionary so to create an empty set the way to properly do this is to",
          "tokens": [
            51316,
            516,
            281,
            1884,
            364,
            6707,
            25890,
            370,
            281,
            1884,
            364,
            6707,
            992,
            264,
            636,
            281,
            6108,
            360,
            341,
            307,
            281,
            51636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0241401221441186,
          "compression_ratio": 2.167630057803468,
          "no_speech_prob": 0.06038708612322807,
          "confidence": 0.9396129138767719
        },
        {
          "id": 270,
          "start": 1694.0,
          "end": 1699.44,
          "text": "use the built-in set class with no values and speaking of dictionaries that's actually what",
          "tokens": [
            50364,
            764,
            264,
            3094,
            12,
            259,
            992,
            1508,
            365,
            572,
            4190,
            293,
            4124,
            295,
            22352,
            4889,
            300,
            311,
            767,
            437,
            50636
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0396995120578342,
          "compression_ratio": 1.7962962962962963,
          "no_speech_prob": 0.30685925483703613,
          "confidence": 0.6931407451629639
        }
      ],
      "duration": 29.960000000000036
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1694.44,
      "end_time": 1721.2,
      "text": "use the built-in set class with no values and speaking of dictionaries that's actually what we're going to cover in our next video but i hope everyone feels comfortable now with working with lists and tuples and sets but if anyone does have any questions about what we covered in this video then feel free to ask in the comment section below and i'll do my best to answer those now if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to",
      "original_segments": [
        {
          "id": 271,
          "start": 1699.44,
          "end": 1704.48,
          "text": "we're going to cover in our next video but i hope everyone feels comfortable now with working with",
          "tokens": [
            50636,
            321,
            434,
            516,
            281,
            2060,
            294,
            527,
            958,
            960,
            457,
            741,
            1454,
            1518,
            3417,
            4619,
            586,
            365,
            1364,
            365,
            50888
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0396995120578342,
          "compression_ratio": 1.7962962962962963,
          "no_speech_prob": 0.30685925483703613,
          "confidence": 0.6931407451629639
        },
        {
          "id": 272,
          "start": 1704.48,
          "end": 1709.28,
          "text": "lists and tuples and sets but if anyone does have any questions about what we covered in this video",
          "tokens": [
            50888,
            14511,
            293,
            2604,
            2622,
            293,
            6352,
            457,
            498,
            2878,
            775,
            362,
            604,
            1651,
            466,
            437,
            321,
            5343,
            294,
            341,
            960,
            51128
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0396995120578342,
          "compression_ratio": 1.7962962962962963,
          "no_speech_prob": 0.30685925483703613,
          "confidence": 0.6931407451629639
        },
        {
          "id": 273,
          "start": 1709.28,
          "end": 1713.36,
          "text": "then feel free to ask in the comment section below and i'll do my best to answer those now if you",
          "tokens": [
            51128,
            550,
            841,
            1737,
            281,
            1029,
            294,
            264,
            2871,
            3541,
            2507,
            293,
            741,
            603,
            360,
            452,
            1151,
            281,
            1867,
            729,
            586,
            498,
            291,
            51332
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0396995120578342,
          "compression_ratio": 1.7962962962962963,
          "no_speech_prob": 0.30685925483703613,
          "confidence": 0.6931407451629639
        },
        {
          "id": 274,
          "start": 1713.36,
          "end": 1717.2,
          "text": "enjoy these tutorials and would like to support them then there are several ways you can do that",
          "tokens": [
            51332,
            2103,
            613,
            17616,
            293,
            576,
            411,
            281,
            1406,
            552,
            550,
            456,
            366,
            2940,
            2098,
            291,
            393,
            360,
            300,
            51524
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0396995120578342,
          "compression_ratio": 1.7962962962962963,
          "no_speech_prob": 0.30685925483703613,
          "confidence": 0.6931407451629639
        },
        {
          "id": 275,
          "start": 1717.2,
          "end": 1721.2,
          "text": "the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to",
          "tokens": [
            51524,
            264,
            12889,
            636,
            307,
            281,
            2935,
            411,
            264,
            960,
            293,
            976,
            309,
            257,
            8838,
            493,
            293,
            611,
            309,
            311,
            257,
            2603,
            854,
            281,
            51724
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0396995120578342,
          "compression_ratio": 1.7962962962962963,
          "no_speech_prob": 0.30685925483703613,
          "confidence": 0.6931407451629639
        }
      ],
      "duration": 26.75999999999999
    },
    {
      "video_id": "104c45663237",
      "video_path": "videos/Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "video_filename": "Python Tutorial for Beginners 4- Lists, Tuples, and Sets (1).mp4",
      "start_time": 1716.2,
      "end_time": 1736.0800000000002,
      "text": "enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching",
      "original_segments": [
        {
          "id": 276,
          "start": 1721.2,
          "end": 1724.96,
          "text": "share these videos with anyone who you think would find them useful and if you have the means",
          "tokens": [
            50364,
            2073,
            613,
            2145,
            365,
            2878,
            567,
            291,
            519,
            576,
            915,
            552,
            4420,
            293,
            498,
            291,
            362,
            264,
            1355,
            50552
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0901067852973938,
          "compression_ratio": 1.593939393939394,
          "no_speech_prob": 0.08825806528329849,
          "confidence": 0.9117419347167015
        },
        {
          "id": 277,
          "start": 1724.96,
          "end": 1729.04,
          "text": "you can contribute through patreon and there's a link to that page in the description section below",
          "tokens": [
            50552,
            291,
            393,
            10586,
            807,
            33161,
            293,
            456,
            311,
            257,
            2113,
            281,
            300,
            3028,
            294,
            264,
            3855,
            3541,
            2507,
            50756
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0901067852973938,
          "compression_ratio": 1.593939393939394,
          "no_speech_prob": 0.08825806528329849,
          "confidence": 0.9117419347167015
        },
        {
          "id": 278,
          "start": 1729.04,
          "end": 1736.0800000000002,
          "text": "be sure to subscribe for future videos and thank you all for watching",
          "tokens": [
            50756,
            312,
            988,
            281,
            3022,
            337,
            2027,
            2145,
            293,
            1309,
            291,
            439,
            337,
            1976,
            51108
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0901067852973938,
          "compression_ratio": 1.593939393939394,
          "no_speech_prob": 0.08825806528329849,
          "confidence": 0.9117419347167015
        }
      ],
      "duration": 19.88000000000011
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 0.0,
      "end_time": 25.84,
      "text": "Hey there how's it going everybody in this video we'll be learning about loops and iterations specifically we'll be going over for loops and while loops now we've seen loops a couple of times in our previous videos when looping through strings or lists but there's some more functionality that we haven't gone over yet that we'll see in this video but first let's just do a quick recap so we've got a list of numbers here with numbers one through five so let's loop through this list",
      "original_segments": [
        {
          "id": 0,
          "start": 0.0,
          "end": 4.32,
          "text": "Hey there how's it going everybody in this video we'll be learning about loops and iterations",
          "tokens": [
            50364,
            1911,
            456,
            577,
            311,
            309,
            516,
            2201,
            294,
            341,
            960,
            321,
            603,
            312,
            2539,
            466,
            16121,
            293,
            36540,
            50580
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06528559246578731,
          "compression_ratio": 1.8505747126436782,
          "no_speech_prob": 0.09251132607460022,
          "confidence": 0.9074886739253998
        },
        {
          "id": 1,
          "start": 4.32,
          "end": 9.36,
          "text": "specifically we'll be going over for loops and while loops now we've seen loops a couple of",
          "tokens": [
            50580,
            4682,
            321,
            603,
            312,
            516,
            670,
            337,
            16121,
            293,
            1339,
            16121,
            586,
            321,
            600,
            1612,
            16121,
            257,
            1916,
            295,
            50832
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06528559246578731,
          "compression_ratio": 1.8505747126436782,
          "no_speech_prob": 0.09251132607460022,
          "confidence": 0.9074886739253998
        },
        {
          "id": 2,
          "start": 9.36,
          "end": 14.72,
          "text": "times in our previous videos when looping through strings or lists but there's some more functionality",
          "tokens": [
            50832,
            1413,
            294,
            527,
            3894,
            2145,
            562,
            6367,
            278,
            807,
            13985,
            420,
            14511,
            457,
            456,
            311,
            512,
            544,
            14980,
            51100
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06528559246578731,
          "compression_ratio": 1.8505747126436782,
          "no_speech_prob": 0.09251132607460022,
          "confidence": 0.9074886739253998
        },
        {
          "id": 3,
          "start": 14.72,
          "end": 20.080000000000002,
          "text": "that we haven't gone over yet that we'll see in this video but first let's just do a quick recap",
          "tokens": [
            51100,
            300,
            321,
            2378,
            380,
            2780,
            670,
            1939,
            300,
            321,
            603,
            536,
            294,
            341,
            960,
            457,
            700,
            718,
            311,
            445,
            360,
            257,
            1702,
            20928,
            51368
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06528559246578731,
          "compression_ratio": 1.8505747126436782,
          "no_speech_prob": 0.09251132607460022,
          "confidence": 0.9074886739253998
        },
        {
          "id": 4,
          "start": 20.080000000000002,
          "end": 25.84,
          "text": "so we've got a list of numbers here with numbers one through five so let's loop through this list",
          "tokens": [
            51368,
            370,
            321,
            600,
            658,
            257,
            1329,
            295,
            3547,
            510,
            365,
            3547,
            472,
            807,
            1732,
            370,
            718,
            311,
            6367,
            807,
            341,
            1329,
            51656
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06528559246578731,
          "compression_ratio": 1.8505747126436782,
          "no_speech_prob": 0.09251132607460022,
          "confidence": 0.9074886739253998
        }
      ],
      "duration": 25.84
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 20.84,
      "end_time": 50.16,
      "text": "so we've got a list of numbers here with numbers one through five so let's loop through this list so to do this we're going to use a for loop so we'll say for num in nums and within here I'm just going to print out that num so what we're saying here is that we want to create a loop where we're looping through each value of our list and each time through the loop this num variable will be equal to the next item in the list so the first time through it'll be equal to one the next",
      "original_segments": [
        {
          "id": 5,
          "start": 25.84,
          "end": 32.24,
          "text": "so to do this we're going to use a for loop so we'll say for num in nums and within here",
          "tokens": [
            50364,
            370,
            281,
            360,
            341,
            321,
            434,
            516,
            281,
            764,
            257,
            337,
            6367,
            370,
            321,
            603,
            584,
            337,
            1031,
            294,
            1031,
            82,
            293,
            1951,
            510,
            50684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.041954479217529296,
          "compression_ratio": 1.8823529411764706,
          "no_speech_prob": 0.3737182319164276,
          "confidence": 0.6262817680835724
        },
        {
          "id": 6,
          "start": 32.24,
          "end": 37.44,
          "text": "I'm just going to print out that num so what we're saying here is that we want to create a loop",
          "tokens": [
            50684,
            286,
            478,
            445,
            516,
            281,
            4482,
            484,
            300,
            1031,
            370,
            437,
            321,
            434,
            1566,
            510,
            307,
            300,
            321,
            528,
            281,
            1884,
            257,
            6367,
            50944
          ],
          "temperature": 0.0,
          "avg_logprob": -0.041954479217529296,
          "compression_ratio": 1.8823529411764706,
          "no_speech_prob": 0.3737182319164276,
          "confidence": 0.6262817680835724
        },
        {
          "id": 7,
          "start": 37.44,
          "end": 44.16,
          "text": "where we're looping through each value of our list and each time through the loop this num variable",
          "tokens": [
            50944,
            689,
            321,
            434,
            6367,
            278,
            807,
            1184,
            2158,
            295,
            527,
            1329,
            293,
            1184,
            565,
            807,
            264,
            6367,
            341,
            1031,
            7006,
            51280
          ],
          "temperature": 0.0,
          "avg_logprob": -0.041954479217529296,
          "compression_ratio": 1.8823529411764706,
          "no_speech_prob": 0.3737182319164276,
          "confidence": 0.6262817680835724
        },
        {
          "id": 8,
          "start": 44.16,
          "end": 50.16,
          "text": "will be equal to the next item in the list so the first time through it'll be equal to one the next",
          "tokens": [
            51280,
            486,
            312,
            2681,
            281,
            264,
            958,
            3174,
            294,
            264,
            1329,
            370,
            264,
            700,
            565,
            807,
            309,
            603,
            312,
            2681,
            281,
            472,
            264,
            958,
            51580
          ],
          "temperature": 0.0,
          "avg_logprob": -0.041954479217529296,
          "compression_ratio": 1.8823529411764706,
          "no_speech_prob": 0.3737182319164276,
          "confidence": 0.6262817680835724
        }
      ],
      "duration": 29.319999999999997
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 45.16,
      "end_time": 69.75999999999999,
      "text": "will be equal to the next item in the list so the first time through it'll be equal to one the next time through it'll be equal to two and so on so if we run this we can see that it looped through and printed each number of our list so now let's look at two important keywords when working with loops and these are the break and continue keywords so the break keyword will completely",
      "original_segments": [
        {
          "id": 9,
          "start": 50.16,
          "end": 56.0,
          "text": "time through it'll be equal to two and so on so if we run this we can see that it looped through",
          "tokens": [
            50364,
            565,
            807,
            309,
            603,
            312,
            2681,
            281,
            732,
            293,
            370,
            322,
            370,
            498,
            321,
            1190,
            341,
            321,
            393,
            536,
            300,
            309,
            6367,
            292,
            807,
            50656
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03345849026333202,
          "compression_ratio": 1.8095238095238095,
          "no_speech_prob": 0.3172096908092499,
          "confidence": 0.6827903091907501
        },
        {
          "id": 10,
          "start": 56.0,
          "end": 63.12,
          "text": "and printed each number of our list so now let's look at two important keywords when working with",
          "tokens": [
            50656,
            293,
            13567,
            1184,
            1230,
            295,
            527,
            1329,
            370,
            586,
            718,
            311,
            574,
            412,
            732,
            1021,
            21009,
            562,
            1364,
            365,
            51012
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03345849026333202,
          "compression_ratio": 1.8095238095238095,
          "no_speech_prob": 0.3172096908092499,
          "confidence": 0.6827903091907501
        },
        {
          "id": 11,
          "start": 63.12,
          "end": 69.75999999999999,
          "text": "loops and these are the break and continue keywords so the break keyword will completely",
          "tokens": [
            51012,
            16121,
            293,
            613,
            366,
            264,
            1821,
            293,
            2354,
            21009,
            370,
            264,
            1821,
            20428,
            486,
            2584,
            51344
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03345849026333202,
          "compression_ratio": 1.8095238095238095,
          "no_speech_prob": 0.3172096908092499,
          "confidence": 0.6827903091907501
        }
      ],
      "duration": 24.599999999999994
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 64.75999999999999,
      "end_time": 93.92,
      "text": "loops and these are the break and continue keywords so the break keyword will completely break out of a loop and the continue keyword moves on to the next iteration of the loop so first let's look at the break statement so let's say that we are looking for a certain number in our list and once we find it we don't need to continue looping through the rest of our values now this is when the break statement comes in handy so let's say that we're looking for the value of three",
      "original_segments": [
        {
          "id": 12,
          "start": 69.75999999999999,
          "end": 76.72,
          "text": "break out of a loop and the continue keyword moves on to the next iteration of the loop so first",
          "tokens": [
            51344,
            1821,
            484,
            295,
            257,
            6367,
            293,
            264,
            2354,
            20428,
            6067,
            322,
            281,
            264,
            958,
            24784,
            295,
            264,
            6367,
            370,
            700,
            51692
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03345849026333202,
          "compression_ratio": 1.8095238095238095,
          "no_speech_prob": 0.3172096908092499,
          "confidence": 0.6827903091907501
        },
        {
          "id": 13,
          "start": 76.72,
          "end": 82.8,
          "text": "let's look at the break statement so let's say that we are looking for a certain number in our",
          "tokens": [
            50364,
            718,
            311,
            574,
            412,
            264,
            1821,
            5629,
            370,
            718,
            311,
            584,
            300,
            321,
            366,
            1237,
            337,
            257,
            1629,
            1230,
            294,
            527,
            50668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.031386505930047284,
          "compression_ratio": 1.9064039408866995,
          "no_speech_prob": 0.015215340070426464,
          "confidence": 0.9847846599295735
        },
        {
          "id": 14,
          "start": 82.8,
          "end": 88.16,
          "text": "list and once we find it we don't need to continue looping through the rest of our values now this is",
          "tokens": [
            50668,
            1329,
            293,
            1564,
            321,
            915,
            309,
            321,
            500,
            380,
            643,
            281,
            2354,
            6367,
            278,
            807,
            264,
            1472,
            295,
            527,
            4190,
            586,
            341,
            307,
            50936
          ],
          "temperature": 0.0,
          "avg_logprob": -0.031386505930047284,
          "compression_ratio": 1.9064039408866995,
          "no_speech_prob": 0.015215340070426464,
          "confidence": 0.9847846599295735
        },
        {
          "id": 15,
          "start": 88.16,
          "end": 93.92,
          "text": "when the break statement comes in handy so let's say that we're looking for the value of three",
          "tokens": [
            50936,
            562,
            264,
            1821,
            5629,
            1487,
            294,
            13239,
            370,
            718,
            311,
            584,
            300,
            321,
            434,
            1237,
            337,
            264,
            2158,
            295,
            1045,
            51224
          ],
          "temperature": 0.0,
          "avg_logprob": -0.031386505930047284,
          "compression_ratio": 1.9064039408866995,
          "no_speech_prob": 0.015215340070426464,
          "confidence": 0.9847846599295735
        }
      ],
      "duration": 29.16000000000001
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 88.92,
      "end_time": 118.56,
      "text": "when the break statement comes in handy so let's say that we're looking for the value of three so I could come in here to our list and I could say if num equals equals three then within this conditional we'll print out that we found it and then we will break out of that loop so now let's go ahead and run this so we can see that it looped through the numbers one and two but it didn't hit",
      "original_segments": [
        {
          "id": 16,
          "start": 93.92,
          "end": 101.84,
          "text": "so I could come in here to our list and I could say if num equals equals three then within this",
          "tokens": [
            51224,
            370,
            286,
            727,
            808,
            294,
            510,
            281,
            527,
            1329,
            293,
            286,
            727,
            584,
            498,
            1031,
            6915,
            6915,
            1045,
            550,
            1951,
            341,
            51620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.031386505930047284,
          "compression_ratio": 1.9064039408866995,
          "no_speech_prob": 0.015215340070426464,
          "confidence": 0.9847846599295735
        },
        {
          "id": 17,
          "start": 102.4,
          "end": 110.80000000000001,
          "text": "conditional we'll print out that we found it and then we will break out of that loop so now let's",
          "tokens": [
            50392,
            27708,
            321,
            603,
            4482,
            484,
            300,
            321,
            1352,
            309,
            293,
            550,
            321,
            486,
            1821,
            484,
            295,
            300,
            6367,
            370,
            586,
            718,
            311,
            50812
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02977425290137222,
          "compression_ratio": 2.046875,
          "no_speech_prob": 0.3001367747783661,
          "confidence": 0.6998632252216339
        },
        {
          "id": 18,
          "start": 110.80000000000001,
          "end": 118.56,
          "text": "go ahead and run this so we can see that it looped through the numbers one and two but it didn't hit",
          "tokens": [
            50812,
            352,
            2286,
            293,
            1190,
            341,
            370,
            321,
            393,
            536,
            300,
            309,
            6367,
            292,
            807,
            264,
            3547,
            472,
            293,
            732,
            457,
            309,
            994,
            380,
            2045,
            51200
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02977425290137222,
          "compression_ratio": 2.046875,
          "no_speech_prob": 0.3001367747783661,
          "confidence": 0.6998632252216339
        }
      ],
      "duration": 29.64
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 113.56,
      "end_time": 140.95999999999998,
      "text": "go ahead and run this so we can see that it looped through the numbers one and two but it didn't hit this conditional when the num equaled one and the num equaled two and since those first two values didn't meet this conditional then it didn't print out found and it didn't break out of the loop but when it got to number three it did meet this conditional so it printed out found and then our break statement broke out of the for loop and when it broke out of the for loop you can see that we",
      "original_segments": [
        {
          "id": 19,
          "start": 118.56,
          "end": 125.04,
          "text": "this conditional when the num equaled one and the num equaled two and since those first two values",
          "tokens": [
            51200,
            341,
            27708,
            562,
            264,
            1031,
            2681,
            292,
            472,
            293,
            264,
            1031,
            2681,
            292,
            732,
            293,
            1670,
            729,
            700,
            732,
            4190,
            51524
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02977425290137222,
          "compression_ratio": 2.046875,
          "no_speech_prob": 0.3001367747783661,
          "confidence": 0.6998632252216339
        },
        {
          "id": 20,
          "start": 125.04,
          "end": 129.92000000000002,
          "text": "didn't meet this conditional then it didn't print out found and it didn't break out of the loop",
          "tokens": [
            51524,
            994,
            380,
            1677,
            341,
            27708,
            550,
            309,
            994,
            380,
            4482,
            484,
            1352,
            293,
            309,
            994,
            380,
            1821,
            484,
            295,
            264,
            6367,
            51768
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02977425290137222,
          "compression_ratio": 2.046875,
          "no_speech_prob": 0.3001367747783661,
          "confidence": 0.6998632252216339
        },
        {
          "id": 21,
          "start": 129.92,
          "end": 136.0,
          "text": "but when it got to number three it did meet this conditional so it printed out found and then our",
          "tokens": [
            50364,
            457,
            562,
            309,
            658,
            281,
            1230,
            1045,
            309,
            630,
            1677,
            341,
            27708,
            370,
            309,
            13567,
            484,
            1352,
            293,
            550,
            527,
            50668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030726841517857144,
          "compression_ratio": 1.9170731707317072,
          "no_speech_prob": 0.05279887840151787,
          "confidence": 0.9472011215984821
        },
        {
          "id": 22,
          "start": 136.0,
          "end": 140.95999999999998,
          "text": "break statement broke out of the for loop and when it broke out of the for loop you can see that we",
          "tokens": [
            50668,
            1821,
            5629,
            6902,
            484,
            295,
            264,
            337,
            6367,
            293,
            562,
            309,
            6902,
            484,
            295,
            264,
            337,
            6367,
            291,
            393,
            536,
            300,
            321,
            50916
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030726841517857144,
          "compression_ratio": 1.9170731707317072,
          "no_speech_prob": 0.05279887840151787,
          "confidence": 0.9472011215984821
        }
      ],
      "duration": 27.399999999999977
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 135.95999999999998,
      "end_time": 160.72,
      "text": "but when it got to number three it did meet this conditional so it printed out found and then our break statement broke out of the for loop and when it broke out of the for loop you can see that we didn't iterate through any more values so we did not get through to values four or values five now notice that we broke out of our loop before we printed the number so the three never got printed out but if our print statement were above this conditional then the three would have been printed",
      "original_segments": [
        {
          "id": 23,
          "start": 140.95999999999998,
          "end": 148.23999999999998,
          "text": "didn't iterate through any more values so we did not get through to values four or values five now",
          "tokens": [
            50916,
            994,
            380,
            44497,
            807,
            604,
            544,
            4190,
            370,
            321,
            630,
            406,
            483,
            807,
            281,
            4190,
            1451,
            420,
            4190,
            1732,
            586,
            51280
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030726841517857144,
          "compression_ratio": 1.9170731707317072,
          "no_speech_prob": 0.05279887840151787,
          "confidence": 0.9472011215984821
        },
        {
          "id": 24,
          "start": 148.23999999999998,
          "end": 155.44,
          "text": "notice that we broke out of our loop before we printed the number so the three never got printed",
          "tokens": [
            51280,
            3449,
            300,
            321,
            6902,
            484,
            295,
            527,
            6367,
            949,
            321,
            13567,
            264,
            1230,
            370,
            264,
            1045,
            1128,
            658,
            13567,
            51640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030726841517857144,
          "compression_ratio": 1.9170731707317072,
          "no_speech_prob": 0.05279887840151787,
          "confidence": 0.9472011215984821
        },
        {
          "id": 25,
          "start": 155.44,
          "end": 160.72,
          "text": "out but if our print statement were above this conditional then the three would have been printed",
          "tokens": [
            50364,
            484,
            457,
            498,
            527,
            4482,
            5629,
            645,
            3673,
            341,
            27708,
            550,
            264,
            1045,
            576,
            362,
            668,
            13567,
            50628
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04612473880543428,
          "compression_ratio": 1.949748743718593,
          "no_speech_prob": 0.2584177255630493,
          "confidence": 0.7415822744369507
        }
      ],
      "duration": 24.76000000000002
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 155.72,
      "end_time": 179.68,
      "text": "out but if our print statement were above this conditional then the three would have been printed out so the break statement breaks out of the loop but what if we wanted to just ignore a value but not break out of the loop completely so to do this we can use the continue statement now continue will skip to the next iteration of a loop so if we replace this break statement with continue",
      "original_segments": [
        {
          "id": 26,
          "start": 160.72,
          "end": 167.28,
          "text": "out so the break statement breaks out of the loop but what if we wanted to just ignore a value but",
          "tokens": [
            50628,
            484,
            370,
            264,
            1821,
            5629,
            9857,
            484,
            295,
            264,
            6367,
            457,
            437,
            498,
            321,
            1415,
            281,
            445,
            11200,
            257,
            2158,
            457,
            50956
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04612473880543428,
          "compression_ratio": 1.949748743718593,
          "no_speech_prob": 0.2584177255630493,
          "confidence": 0.7415822744369507
        },
        {
          "id": 27,
          "start": 167.28,
          "end": 173.44,
          "text": "not break out of the loop completely so to do this we can use the continue statement now continue",
          "tokens": [
            50956,
            406,
            1821,
            484,
            295,
            264,
            6367,
            2584,
            370,
            281,
            360,
            341,
            321,
            393,
            764,
            264,
            2354,
            5629,
            586,
            2354,
            51264
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04612473880543428,
          "compression_ratio": 1.949748743718593,
          "no_speech_prob": 0.2584177255630493,
          "confidence": 0.7415822744369507
        },
        {
          "id": 28,
          "start": 173.44,
          "end": 179.68,
          "text": "will skip to the next iteration of a loop so if we replace this break statement with continue",
          "tokens": [
            51264,
            486,
            10023,
            281,
            264,
            958,
            24784,
            295,
            257,
            6367,
            370,
            498,
            321,
            7406,
            341,
            1821,
            5629,
            365,
            2354,
            51576
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04612473880543428,
          "compression_ratio": 1.949748743718593,
          "no_speech_prob": 0.2584177255630493,
          "confidence": 0.7415822744369507
        }
      ],
      "duration": 23.960000000000008
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 174.68,
      "end_time": 202.0,
      "text": "will skip to the next iteration of a loop so if we replace this break statement with continue and run this so we can see here that just like before the first two times through with one and two it didn't meet this conditional so it didn't do anything within this if block and it just printed out our number but when we got to the number three it did meet this conditional and it came in here and printed out found and then our continue statement just skipped to the next",
      "original_segments": [
        {
          "id": 29,
          "start": 180.48000000000002,
          "end": 186.16,
          "text": "and run this so we can see here that just like before the first two times through with one and",
          "tokens": [
            50404,
            293,
            1190,
            341,
            370,
            321,
            393,
            536,
            510,
            300,
            445,
            411,
            949,
            264,
            700,
            732,
            1413,
            807,
            365,
            472,
            293,
            50688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038553336881241705,
          "compression_ratio": 2.0127659574468084,
          "no_speech_prob": 0.45725521445274353,
          "confidence": 0.5427447855472565
        },
        {
          "id": 30,
          "start": 186.16,
          "end": 191.52,
          "text": "two it didn't meet this conditional so it didn't do anything within this if block and it just",
          "tokens": [
            50688,
            732,
            309,
            994,
            380,
            1677,
            341,
            27708,
            370,
            309,
            994,
            380,
            360,
            1340,
            1951,
            341,
            498,
            3461,
            293,
            309,
            445,
            50956
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038553336881241705,
          "compression_ratio": 2.0127659574468084,
          "no_speech_prob": 0.45725521445274353,
          "confidence": 0.5427447855472565
        },
        {
          "id": 31,
          "start": 191.52,
          "end": 196.56,
          "text": "printed out our number but when we got to the number three it did meet this conditional and",
          "tokens": [
            50956,
            13567,
            484,
            527,
            1230,
            457,
            562,
            321,
            658,
            281,
            264,
            1230,
            1045,
            309,
            630,
            1677,
            341,
            27708,
            293,
            51208
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038553336881241705,
          "compression_ratio": 2.0127659574468084,
          "no_speech_prob": 0.45725521445274353,
          "confidence": 0.5427447855472565
        },
        {
          "id": 32,
          "start": 196.56,
          "end": 202.0,
          "text": "it came in here and printed out found and then our continue statement just skipped to the next",
          "tokens": [
            51208,
            309,
            1361,
            294,
            510,
            293,
            13567,
            484,
            1352,
            293,
            550,
            527,
            2354,
            5629,
            445,
            30193,
            281,
            264,
            958,
            51480
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038553336881241705,
          "compression_ratio": 2.0127659574468084,
          "no_speech_prob": 0.45725521445274353,
          "confidence": 0.5427447855472565
        }
      ],
      "duration": 27.319999999999993
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 197.0,
      "end_time": 222.56,
      "text": "it came in here and printed out found and then our continue statement just skipped to the next iteration without coming out here and printing out the number three so as soon as we hit continue and it just went to the next iteration which was four and five so when four and five ran through they didn't meet these conditionals and it just printed out the number so it's important to understand the break and continue statements and the differences between those because there's a",
      "original_segments": [
        {
          "id": 33,
          "start": 202.0,
          "end": 208.0,
          "text": "iteration without coming out here and printing out the number three so as soon as we hit continue",
          "tokens": [
            51480,
            24784,
            1553,
            1348,
            484,
            510,
            293,
            14699,
            484,
            264,
            1230,
            1045,
            370,
            382,
            2321,
            382,
            321,
            2045,
            2354,
            51780
          ],
          "temperature": 0.0,
          "avg_logprob": -0.038553336881241705,
          "compression_ratio": 2.0127659574468084,
          "no_speech_prob": 0.45725521445274353,
          "confidence": 0.5427447855472565
        },
        {
          "id": 34,
          "start": 208.0,
          "end": 214.16,
          "text": "and it just went to the next iteration which was four and five so when four and five ran through",
          "tokens": [
            50364,
            293,
            309,
            445,
            1437,
            281,
            264,
            958,
            24784,
            597,
            390,
            1451,
            293,
            1732,
            370,
            562,
            1451,
            293,
            1732,
            5872,
            807,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03439188230605353,
          "compression_ratio": 1.7761194029850746,
          "no_speech_prob": 0.00858122855424881,
          "confidence": 0.9914187714457512
        },
        {
          "id": 35,
          "start": 214.16,
          "end": 217.84,
          "text": "they didn't meet these conditionals and it just printed out the number so it's important to",
          "tokens": [
            50672,
            436,
            994,
            380,
            1677,
            613,
            4188,
            1124,
            293,
            309,
            445,
            13567,
            484,
            264,
            1230,
            370,
            309,
            311,
            1021,
            281,
            50856
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03439188230605353,
          "compression_ratio": 1.7761194029850746,
          "no_speech_prob": 0.00858122855424881,
          "confidence": 0.9914187714457512
        },
        {
          "id": 36,
          "start": 217.84,
          "end": 222.56,
          "text": "understand the break and continue statements and the differences between those because there's a",
          "tokens": [
            50856,
            1223,
            264,
            1821,
            293,
            2354,
            12363,
            293,
            264,
            7300,
            1296,
            729,
            570,
            456,
            311,
            257,
            51092
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03439188230605353,
          "compression_ratio": 1.7761194029850746,
          "no_speech_prob": 0.00858122855424881,
          "confidence": 0.9914187714457512
        }
      ],
      "duration": 25.560000000000002
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 217.56,
      "end_time": 246.48000000000002,
      "text": "they didn't meet these conditionals and it just printed out the number so it's important to understand the break and continue statements and the differences between those because there's a lot of different use cases for when they come in handy to solve certain problems okay so now let's look at something that we might run into which is a loop within a loop and this is possible so within our loop here i'm going to replace this conditional with an inner loop so now i'll say four letter n and i'll just uh make a string here of abc now within this inner loop then i'll just",
      "original_segments": [
        {
          "id": 37,
          "start": 222.56,
          "end": 227.36,
          "text": "lot of different use cases for when they come in handy to solve certain problems okay so now",
          "tokens": [
            51092,
            688,
            295,
            819,
            764,
            3331,
            337,
            562,
            436,
            808,
            294,
            13239,
            281,
            5039,
            1629,
            2740,
            1392,
            370,
            586,
            51332
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03439188230605353,
          "compression_ratio": 1.7761194029850746,
          "no_speech_prob": 0.00858122855424881,
          "confidence": 0.9914187714457512
        },
        {
          "id": 38,
          "start": 227.36,
          "end": 233.12,
          "text": "let's look at something that we might run into which is a loop within a loop and this is possible",
          "tokens": [
            51332,
            718,
            311,
            574,
            412,
            746,
            300,
            321,
            1062,
            1190,
            666,
            597,
            307,
            257,
            6367,
            1951,
            257,
            6367,
            293,
            341,
            307,
            1944,
            51620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03439188230605353,
          "compression_ratio": 1.7761194029850746,
          "no_speech_prob": 0.00858122855424881,
          "confidence": 0.9914187714457512
        },
        {
          "id": 39,
          "start": 233.12,
          "end": 239.20000000000002,
          "text": "so within our loop here i'm going to replace this conditional with an inner loop so now i'll say",
          "tokens": [
            50364,
            370,
            1951,
            527,
            6367,
            510,
            741,
            478,
            516,
            281,
            7406,
            341,
            27708,
            365,
            364,
            7284,
            6367,
            370,
            586,
            741,
            603,
            584,
            50668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05351365373489705,
          "compression_ratio": 1.9444444444444444,
          "no_speech_prob": 0.1474606990814209,
          "confidence": 0.8525393009185791
        },
        {
          "id": 40,
          "start": 239.20000000000002,
          "end": 246.48000000000002,
          "text": "four letter n and i'll just uh make a string here of abc now within this inner loop then i'll just",
          "tokens": [
            50668,
            1451,
            5063,
            297,
            293,
            741,
            603,
            445,
            2232,
            652,
            257,
            6798,
            510,
            295,
            410,
            66,
            586,
            1951,
            341,
            7284,
            6367,
            550,
            741,
            603,
            445,
            51032
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05351365373489705,
          "compression_ratio": 1.9444444444444444,
          "no_speech_prob": 0.1474606990814209,
          "confidence": 0.8525393009185791
        }
      ],
      "duration": 28.920000000000016
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 241.48000000000002,
      "end_time": 270.88,
      "text": "four letter n and i'll just uh make a string here of abc now within this inner loop then i'll just go ahead and print out num comma and the letter so now what's going to happen here is that for each number it'll loop through every character in this string and print out the number and the character and then move on to the next number and do it all over again so let's run this and see what we get so now let me make this just a little bit larger here so now we can see that what",
      "original_segments": [
        {
          "id": 41,
          "start": 246.48000000000002,
          "end": 253.6,
          "text": "go ahead and print out num comma and the letter so now what's going to happen here is that for",
          "tokens": [
            51032,
            352,
            2286,
            293,
            4482,
            484,
            1031,
            22117,
            293,
            264,
            5063,
            370,
            586,
            437,
            311,
            516,
            281,
            1051,
            510,
            307,
            300,
            337,
            51388
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05351365373489705,
          "compression_ratio": 1.9444444444444444,
          "no_speech_prob": 0.1474606990814209,
          "confidence": 0.8525393009185791
        },
        {
          "id": 42,
          "start": 253.6,
          "end": 259.6,
          "text": "each number it'll loop through every character in this string and print out the number and the",
          "tokens": [
            51388,
            1184,
            1230,
            309,
            603,
            6367,
            807,
            633,
            2517,
            294,
            341,
            6798,
            293,
            4482,
            484,
            264,
            1230,
            293,
            264,
            51688
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05351365373489705,
          "compression_ratio": 1.9444444444444444,
          "no_speech_prob": 0.1474606990814209,
          "confidence": 0.8525393009185791
        },
        {
          "id": 43,
          "start": 259.6,
          "end": 265.6,
          "text": "character and then move on to the next number and do it all over again so let's run this and see",
          "tokens": [
            50364,
            2517,
            293,
            550,
            1286,
            322,
            281,
            264,
            958,
            1230,
            293,
            360,
            309,
            439,
            670,
            797,
            370,
            718,
            311,
            1190,
            341,
            293,
            536,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03206419442829333,
          "compression_ratio": 1.8224299065420562,
          "no_speech_prob": 0.21343879401683807,
          "confidence": 0.7865612059831619
        },
        {
          "id": 44,
          "start": 265.6,
          "end": 270.88,
          "text": "what we get so now let me make this just a little bit larger here so now we can see that what",
          "tokens": [
            50664,
            437,
            321,
            483,
            370,
            586,
            718,
            385,
            652,
            341,
            445,
            257,
            707,
            857,
            4833,
            510,
            370,
            586,
            321,
            393,
            536,
            300,
            437,
            50928
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03206419442829333,
          "compression_ratio": 1.8224299065420562,
          "no_speech_prob": 0.21343879401683807,
          "confidence": 0.7865612059831619
        }
      ],
      "duration": 29.399999999999977
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 265.88,
      "end_time": 295.84,
      "text": "what we get so now let me make this just a little bit larger here so now we can see that what happened is that for one it looped through every letter in the string and then after it finished that inner loop then it moved on to the next number before doing the exact same thing so we have one a one b one c then it moved on to two two a two b two c and so on so what this really did is it gave us every combination of those numbers and characters now you want to be careful with nested lists",
      "original_segments": [
        {
          "id": 45,
          "start": 270.88,
          "end": 277.52000000000004,
          "text": "happened is that for one it looped through every letter in the string and then after it finished",
          "tokens": [
            50928,
            2011,
            307,
            300,
            337,
            472,
            309,
            6367,
            292,
            807,
            633,
            5063,
            294,
            264,
            6798,
            293,
            550,
            934,
            309,
            4335,
            51260
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03206419442829333,
          "compression_ratio": 1.8224299065420562,
          "no_speech_prob": 0.21343879401683807,
          "confidence": 0.7865612059831619
        },
        {
          "id": 46,
          "start": 277.52000000000004,
          "end": 283.84000000000003,
          "text": "that inner loop then it moved on to the next number before doing the exact same thing so we have one a",
          "tokens": [
            51260,
            300,
            7284,
            6367,
            550,
            309,
            4259,
            322,
            281,
            264,
            958,
            1230,
            949,
            884,
            264,
            1900,
            912,
            551,
            370,
            321,
            362,
            472,
            257,
            51576
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03206419442829333,
          "compression_ratio": 1.8224299065420562,
          "no_speech_prob": 0.21343879401683807,
          "confidence": 0.7865612059831619
        },
        {
          "id": 47,
          "start": 283.84,
          "end": 290.08,
          "text": "one b one c then it moved on to two two a two b two c and so on so what this really did is it gave",
          "tokens": [
            50364,
            472,
            272,
            472,
            269,
            550,
            309,
            4259,
            322,
            281,
            732,
            732,
            257,
            732,
            272,
            732,
            269,
            293,
            370,
            322,
            370,
            437,
            341,
            534,
            630,
            307,
            309,
            2729,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05287910984680716,
          "compression_ratio": 1.8239700374531835,
          "no_speech_prob": 0.19280314445495605,
          "confidence": 0.807196855545044
        },
        {
          "id": 48,
          "start": 290.08,
          "end": 295.84,
          "text": "us every combination of those numbers and characters now you want to be careful with nested lists",
          "tokens": [
            50676,
            505,
            633,
            6562,
            295,
            729,
            3547,
            293,
            4342,
            586,
            291,
            528,
            281,
            312,
            5026,
            365,
            15646,
            292,
            14511,
            50964
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05287910984680716,
          "compression_ratio": 1.8239700374531835,
          "no_speech_prob": 0.19280314445495605,
          "confidence": 0.807196855545044
        }
      ],
      "duration": 29.95999999999998
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 290.84,
      "end_time": 318.0,
      "text": "us every combination of those numbers and characters now you want to be careful with nested lists because these combinations can grow pretty quickly so if you have nested loops with a lot of different values then it may take a while to loop through all of those different combinations okay so something that will probably run into a lot is that there's going to be times when we just want to go through a loop a certain number of times and there's a built-in function called range that",
      "original_segments": [
        {
          "id": 49,
          "start": 295.84,
          "end": 301.44,
          "text": "because these combinations can grow pretty quickly so if you have nested loops with a lot of different",
          "tokens": [
            50964,
            570,
            613,
            21267,
            393,
            1852,
            1238,
            2661,
            370,
            498,
            291,
            362,
            15646,
            292,
            16121,
            365,
            257,
            688,
            295,
            819,
            51244
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05287910984680716,
          "compression_ratio": 1.8239700374531835,
          "no_speech_prob": 0.19280314445495605,
          "confidence": 0.807196855545044
        },
        {
          "id": 50,
          "start": 301.44,
          "end": 306.71999999999997,
          "text": "values then it may take a while to loop through all of those different combinations okay so",
          "tokens": [
            51244,
            4190,
            550,
            309,
            815,
            747,
            257,
            1339,
            281,
            6367,
            807,
            439,
            295,
            729,
            819,
            21267,
            1392,
            370,
            51508
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05287910984680716,
          "compression_ratio": 1.8239700374531835,
          "no_speech_prob": 0.19280314445495605,
          "confidence": 0.807196855545044
        },
        {
          "id": 51,
          "start": 306.71999999999997,
          "end": 311.76,
          "text": "something that will probably run into a lot is that there's going to be times when we just want",
          "tokens": [
            51508,
            746,
            300,
            486,
            1391,
            1190,
            666,
            257,
            688,
            307,
            300,
            456,
            311,
            516,
            281,
            312,
            1413,
            562,
            321,
            445,
            528,
            51760
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05287910984680716,
          "compression_ratio": 1.8239700374531835,
          "no_speech_prob": 0.19280314445495605,
          "confidence": 0.807196855545044
        },
        {
          "id": 52,
          "start": 311.76,
          "end": 318.0,
          "text": "to go through a loop a certain number of times and there's a built-in function called range that",
          "tokens": [
            50364,
            281,
            352,
            807,
            257,
            6367,
            257,
            1629,
            1230,
            295,
            1413,
            293,
            456,
            311,
            257,
            3094,
            12,
            259,
            2445,
            1219,
            3613,
            300,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04523243151212993,
          "compression_ratio": 1.7677725118483412,
          "no_speech_prob": 0.007696617394685745,
          "confidence": 0.9923033826053143
        }
      ],
      "duration": 27.160000000000025
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 313.0,
      "end_time": 339.36,
      "text": "to go through a loop a certain number of times and there's a built-in function called range that is really useful for this so let's say that we wanted to just run through a loop 10 times so to do this we can just say for i in range 10 and within here we will just print out i so now if we run this then we can see that it just prints out zero through nine which is 10 items",
      "original_segments": [
        {
          "id": 53,
          "start": 318.0,
          "end": 323.68,
          "text": "is really useful for this so let's say that we wanted to just run through a loop 10 times",
          "tokens": [
            50676,
            307,
            534,
            4420,
            337,
            341,
            370,
            718,
            311,
            584,
            300,
            321,
            1415,
            281,
            445,
            1190,
            807,
            257,
            6367,
            1266,
            1413,
            50960
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04523243151212993,
          "compression_ratio": 1.7677725118483412,
          "no_speech_prob": 0.007696617394685745,
          "confidence": 0.9923033826053143
        },
        {
          "id": 54,
          "start": 323.68,
          "end": 332.4,
          "text": "so to do this we can just say for i in range 10 and within here we will just print out i",
          "tokens": [
            50960,
            370,
            281,
            360,
            341,
            321,
            393,
            445,
            584,
            337,
            741,
            294,
            3613,
            1266,
            293,
            1951,
            510,
            321,
            486,
            445,
            4482,
            484,
            741,
            51396
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04523243151212993,
          "compression_ratio": 1.7677725118483412,
          "no_speech_prob": 0.007696617394685745,
          "confidence": 0.9923033826053143
        },
        {
          "id": 55,
          "start": 332.4,
          "end": 339.36,
          "text": "so now if we run this then we can see that it just prints out zero through nine which is 10 items",
          "tokens": [
            51396,
            370,
            586,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            309,
            445,
            22305,
            484,
            4018,
            807,
            4949,
            597,
            307,
            1266,
            4754,
            51744
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04523243151212993,
          "compression_ratio": 1.7677725118483412,
          "no_speech_prob": 0.007696617394685745,
          "confidence": 0.9923033826053143
        }
      ],
      "duration": 26.360000000000014
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 334.36,
      "end_time": 358.40000000000003,
      "text": "so now if we run this then we can see that it just prints out zero through nine which is 10 items so we start at zero and go up to but not including this number that we passed into range now if we don't want to start at zero then we can also pass a starting value into range so if we wanted to start at one and print out the the values one through ten then what we could do is say that",
      "original_segments": [
        {
          "id": 56,
          "start": 339.36,
          "end": 346.24,
          "text": "so we start at zero and go up to but not including this number that we passed into range now if we",
          "tokens": [
            50364,
            370,
            321,
            722,
            412,
            4018,
            293,
            352,
            493,
            281,
            457,
            406,
            3009,
            341,
            1230,
            300,
            321,
            4678,
            666,
            3613,
            586,
            498,
            321,
            50708
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03038301418737038,
          "compression_ratio": 1.8768472906403941,
          "no_speech_prob": 0.006623170804232359,
          "confidence": 0.9933768291957676
        },
        {
          "id": 57,
          "start": 346.24,
          "end": 351.92,
          "text": "don't want to start at zero then we can also pass a starting value into range so if we wanted to",
          "tokens": [
            50708,
            500,
            380,
            528,
            281,
            722,
            412,
            4018,
            550,
            321,
            393,
            611,
            1320,
            257,
            2891,
            2158,
            666,
            3613,
            370,
            498,
            321,
            1415,
            281,
            50992
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03038301418737038,
          "compression_ratio": 1.8768472906403941,
          "no_speech_prob": 0.006623170804232359,
          "confidence": 0.9933768291957676
        },
        {
          "id": 58,
          "start": 351.92,
          "end": 358.40000000000003,
          "text": "start at one and print out the the values one through ten then what we could do is say that",
          "tokens": [
            50992,
            722,
            412,
            472,
            293,
            4482,
            484,
            264,
            264,
            4190,
            472,
            807,
            2064,
            550,
            437,
            321,
            727,
            360,
            307,
            584,
            300,
            51316
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03038301418737038,
          "compression_ratio": 1.8768472906403941,
          "no_speech_prob": 0.006623170804232359,
          "confidence": 0.9933768291957676
        }
      ],
      "duration": 24.04000000000002
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 353.40000000000003,
      "end_time": 379.91999999999996,
      "text": "start at one and print out the the values one through ten then what we could do is say that we want to start at one and now we're going to have to go up to 11 because it doesn't include the last value so now if we run this then we can see that now it started at one and goes up to but not including 11 so one through ten okay so now let's take a look at while loops so our for loops",
      "original_segments": [
        {
          "id": 59,
          "start": 358.40000000000003,
          "end": 364.96000000000004,
          "text": "we want to start at one and now we're going to have to go up to 11 because it doesn't include",
          "tokens": [
            51316,
            321,
            528,
            281,
            722,
            412,
            472,
            293,
            586,
            321,
            434,
            516,
            281,
            362,
            281,
            352,
            493,
            281,
            2975,
            570,
            309,
            1177,
            380,
            4090,
            51644
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03038301418737038,
          "compression_ratio": 1.8768472906403941,
          "no_speech_prob": 0.006623170804232359,
          "confidence": 0.9933768291957676
        },
        {
          "id": 60,
          "start": 365.03999999999996,
          "end": 372.0,
          "text": "the last value so now if we run this then we can see that now it started at one and goes up to but",
          "tokens": [
            50368,
            264,
            1036,
            2158,
            370,
            586,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            586,
            309,
            1409,
            412,
            472,
            293,
            1709,
            493,
            281,
            457,
            50716
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06488610819766397,
          "compression_ratio": 1.7354260089686098,
          "no_speech_prob": 0.23168693482875824,
          "confidence": 0.7683130651712418
        },
        {
          "id": 61,
          "start": 372.0,
          "end": 379.91999999999996,
          "text": "not including 11 so one through ten okay so now let's take a look at while loops so our for loops",
          "tokens": [
            50716,
            406,
            3009,
            2975,
            370,
            472,
            807,
            2064,
            1392,
            370,
            586,
            718,
            311,
            747,
            257,
            574,
            412,
            1339,
            16121,
            370,
            527,
            337,
            16121,
            51112
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06488610819766397,
          "compression_ratio": 1.7354260089686098,
          "no_speech_prob": 0.23168693482875824,
          "confidence": 0.7683130651712418
        }
      ],
      "duration": 26.519999999999925
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 374.91999999999996,
      "end_time": 401.20000000000005,
      "text": "not including 11 so one through ten okay so now let's take a look at while loops so our for loops iterated through a certain number of values but while loops will just keep going until a certain condition is met or until we hit a break so for example let's say that we had a variable here of x equal to zero and now we can say that while that x is less than 10 then what we want to do",
      "original_segments": [
        {
          "id": 62,
          "start": 379.91999999999996,
          "end": 386.24,
          "text": "iterated through a certain number of values but while loops will just keep going until a certain",
          "tokens": [
            51112,
            17138,
            770,
            807,
            257,
            1629,
            1230,
            295,
            4190,
            457,
            1339,
            16121,
            486,
            445,
            1066,
            516,
            1826,
            257,
            1629,
            51428
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06488610819766397,
          "compression_ratio": 1.7354260089686098,
          "no_speech_prob": 0.23168693482875824,
          "confidence": 0.7683130651712418
        },
        {
          "id": 63,
          "start": 386.24,
          "end": 392.47999999999996,
          "text": "condition is met or until we hit a break so for example let's say that we had a variable here",
          "tokens": [
            51428,
            4188,
            307,
            1131,
            420,
            1826,
            321,
            2045,
            257,
            1821,
            370,
            337,
            1365,
            718,
            311,
            584,
            300,
            321,
            632,
            257,
            7006,
            510,
            51740
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06488610819766397,
          "compression_ratio": 1.7354260089686098,
          "no_speech_prob": 0.23168693482875824,
          "confidence": 0.7683130651712418
        },
        {
          "id": 64,
          "start": 392.48,
          "end": 401.20000000000005,
          "text": "of x equal to zero and now we can say that while that x is less than 10 then what we want to do",
          "tokens": [
            50364,
            295,
            2031,
            2681,
            281,
            4018,
            293,
            586,
            321,
            393,
            584,
            300,
            1339,
            300,
            2031,
            307,
            1570,
            813,
            1266,
            550,
            437,
            321,
            528,
            281,
            360,
            50800
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03382393469413122,
          "compression_ratio": 1.8487804878048781,
          "no_speech_prob": 0.013417743146419525,
          "confidence": 0.9865822568535805
        }
      ],
      "duration": 26.280000000000086
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 396.20000000000005,
      "end_time": 422.24,
      "text": "of x equal to zero and now we can say that while that x is less than 10 then what we want to do is just print out x and then we will iterate x by one now we have to remember that this loop is going to go on forever until this condition here evaluates to false so if we want this loop to end at some point then we have to remember to increment this x so that at some point it will",
      "original_segments": [
        {
          "id": 65,
          "start": 401.20000000000005,
          "end": 408.64000000000004,
          "text": "is just print out x and then we will iterate x by one now we have to remember that this loop",
          "tokens": [
            50800,
            307,
            445,
            4482,
            484,
            2031,
            293,
            550,
            321,
            486,
            44497,
            2031,
            538,
            472,
            586,
            321,
            362,
            281,
            1604,
            300,
            341,
            6367,
            51172
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03382393469413122,
          "compression_ratio": 1.8487804878048781,
          "no_speech_prob": 0.013417743146419525,
          "confidence": 0.9865822568535805
        },
        {
          "id": 66,
          "start": 408.64000000000004,
          "end": 415.76,
          "text": "is going to go on forever until this condition here evaluates to false so if we want this loop",
          "tokens": [
            51172,
            307,
            516,
            281,
            352,
            322,
            5680,
            1826,
            341,
            4188,
            510,
            6133,
            1024,
            281,
            7908,
            370,
            498,
            321,
            528,
            341,
            6367,
            51528
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03382393469413122,
          "compression_ratio": 1.8487804878048781,
          "no_speech_prob": 0.013417743146419525,
          "confidence": 0.9865822568535805
        },
        {
          "id": 67,
          "start": 415.76,
          "end": 422.24,
          "text": "to end at some point then we have to remember to increment this x so that at some point it will",
          "tokens": [
            51528,
            281,
            917,
            412,
            512,
            935,
            550,
            321,
            362,
            281,
            1604,
            281,
            26200,
            341,
            2031,
            370,
            300,
            412,
            512,
            935,
            309,
            486,
            51852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03382393469413122,
          "compression_ratio": 1.8487804878048781,
          "no_speech_prob": 0.013417743146419525,
          "confidence": 0.9865822568535805
        }
      ],
      "duration": 26.039999999999964
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 417.24,
      "end_time": 442.72,
      "text": "to end at some point then we have to remember to increment this x so that at some point it will be greater than or equal to 10 so that it breaks out so now if we run this then we can see that it prints out zero through nine so it came in and saw that x was zero which is less than 10 so it goes through the loop prints the value and increments x by one now x is equal to one and it does this",
      "original_segments": [
        {
          "id": 68,
          "start": 422.24,
          "end": 428.8,
          "text": "be greater than or equal to 10 so that it breaks out so now if we run this then we can see that it",
          "tokens": [
            50364,
            312,
            5044,
            813,
            420,
            2681,
            281,
            1266,
            370,
            300,
            309,
            9857,
            484,
            370,
            586,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            309,
            50692
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030196299552917482,
          "compression_ratio": 1.9014778325123152,
          "no_speech_prob": 0.0002272949495818466,
          "confidence": 0.9997727050504182
        },
        {
          "id": 69,
          "start": 428.8,
          "end": 436.72,
          "text": "prints out zero through nine so it came in and saw that x was zero which is less than 10 so it goes",
          "tokens": [
            50692,
            22305,
            484,
            4018,
            807,
            4949,
            370,
            309,
            1361,
            294,
            293,
            1866,
            300,
            2031,
            390,
            4018,
            597,
            307,
            1570,
            813,
            1266,
            370,
            309,
            1709,
            51088
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030196299552917482,
          "compression_ratio": 1.9014778325123152,
          "no_speech_prob": 0.0002272949495818466,
          "confidence": 0.9997727050504182
        },
        {
          "id": 70,
          "start": 436.72,
          "end": 442.72,
          "text": "through the loop prints the value and increments x by one now x is equal to one and it does this",
          "tokens": [
            51088,
            807,
            264,
            6367,
            22305,
            264,
            2158,
            293,
            1946,
            1117,
            2031,
            538,
            472,
            586,
            2031,
            307,
            2681,
            281,
            472,
            293,
            309,
            775,
            341,
            51388
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030196299552917482,
          "compression_ratio": 1.9014778325123152,
          "no_speech_prob": 0.0002272949495818466,
          "confidence": 0.9997727050504182
        }
      ],
      "duration": 25.480000000000018
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 437.72,
      "end_time": 462.32,
      "text": "through the loop prints the value and increments x by one now x is equal to one and it does this check again so one is still less than 10 so it stays in the loop and it does this until we increment x from nine to ten and then it'll come in here and make that check and it checks if 10 is less than 10 which it doesn't which evaluates to false so it breaks out of that loop now at",
      "original_segments": [
        {
          "id": 71,
          "start": 442.72,
          "end": 448.88,
          "text": "check again so one is still less than 10 so it stays in the loop and it does this until we",
          "tokens": [
            51388,
            1520,
            797,
            370,
            472,
            307,
            920,
            1570,
            813,
            1266,
            370,
            309,
            10834,
            294,
            264,
            6367,
            293,
            309,
            775,
            341,
            1826,
            321,
            51696
          ],
          "temperature": 0.0,
          "avg_logprob": -0.030196299552917482,
          "compression_ratio": 1.9014778325123152,
          "no_speech_prob": 0.0002272949495818466,
          "confidence": 0.9997727050504182
        },
        {
          "id": 72,
          "start": 448.88,
          "end": 455.44,
          "text": "increment x from nine to ten and then it'll come in here and make that check and it checks if 10",
          "tokens": [
            50364,
            26200,
            2031,
            490,
            4949,
            281,
            2064,
            293,
            550,
            309,
            603,
            808,
            294,
            510,
            293,
            652,
            300,
            1520,
            293,
            309,
            13834,
            498,
            1266,
            50692
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0440440085327741,
          "compression_ratio": 1.8224299065420562,
          "no_speech_prob": 0.08298066258430481,
          "confidence": 0.9170193374156952
        },
        {
          "id": 73,
          "start": 455.44,
          "end": 462.32,
          "text": "is less than 10 which it doesn't which evaluates to false so it breaks out of that loop now at",
          "tokens": [
            50692,
            307,
            1570,
            813,
            1266,
            597,
            309,
            1177,
            380,
            597,
            6133,
            1024,
            281,
            7908,
            370,
            309,
            9857,
            484,
            295,
            300,
            6367,
            586,
            412,
            51036
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0440440085327741,
          "compression_ratio": 1.8224299065420562,
          "no_speech_prob": 0.08298066258430481,
          "confidence": 0.9170193374156952
        }
      ],
      "duration": 24.599999999999966
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 457.32,
      "end_time": 482.72,
      "text": "is less than 10 which it doesn't which evaluates to false so it breaks out of that loop now at any point you can just use a break to break out of the while loop just like we did with the for loop so if i came in here and i said if x is equal to five then we just want to break out so if we run that then we can see that it went zero through four and once x was equal to five then we hit",
      "original_segments": [
        {
          "id": 74,
          "start": 462.32,
          "end": 469.44,
          "text": "any point you can just use a break to break out of the while loop just like we did with the for loop",
          "tokens": [
            51036,
            604,
            935,
            291,
            393,
            445,
            764,
            257,
            1821,
            281,
            1821,
            484,
            295,
            264,
            1339,
            6367,
            445,
            411,
            321,
            630,
            365,
            264,
            337,
            6367,
            51392
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0440440085327741,
          "compression_ratio": 1.8224299065420562,
          "no_speech_prob": 0.08298066258430481,
          "confidence": 0.9170193374156952
        },
        {
          "id": 75,
          "start": 469.44,
          "end": 477.36,
          "text": "so if i came in here and i said if x is equal to five then we just want to break out so if we run",
          "tokens": [
            51392,
            370,
            498,
            741,
            1361,
            294,
            510,
            293,
            741,
            848,
            498,
            2031,
            307,
            2681,
            281,
            1732,
            550,
            321,
            445,
            528,
            281,
            1821,
            484,
            370,
            498,
            321,
            1190,
            51788
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0440440085327741,
          "compression_ratio": 1.8224299065420562,
          "no_speech_prob": 0.08298066258430481,
          "confidence": 0.9170193374156952
        },
        {
          "id": 76,
          "start": 477.36,
          "end": 482.72,
          "text": "that then we can see that it went zero through four and once x was equal to five then we hit",
          "tokens": [
            50364,
            300,
            550,
            321,
            393,
            536,
            300,
            309,
            1437,
            4018,
            807,
            1451,
            293,
            1564,
            2031,
            390,
            2681,
            281,
            1732,
            550,
            321,
            2045,
            50632
          ],
          "temperature": 0.0,
          "avg_logprob": -0.022792193266722532,
          "compression_ratio": 1.9835390946502058,
          "no_speech_prob": 0.010301151312887669,
          "confidence": 0.9896988486871123
        }
      ],
      "duration": 25.400000000000034
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 477.72,
      "end_time": 505.6,
      "text": "that then we can see that it went zero through four and once x was equal to five then we hit that break statement now sometimes you'll just want to create an infinite loop that never ends until we get some input or find some value now to create an infinite loop you can just replace the comparison that we're doing here with a value of true so now that we have an infinite loop there's no conditional here that can break out so now we have to have this break statement in here if we",
      "original_segments": [
        {
          "id": 77,
          "start": 482.72,
          "end": 488.32,
          "text": "that break statement now sometimes you'll just want to create an infinite loop that never ends",
          "tokens": [
            50632,
            300,
            1821,
            5629,
            586,
            2171,
            291,
            603,
            445,
            528,
            281,
            1884,
            364,
            13785,
            6367,
            300,
            1128,
            5314,
            50912
          ],
          "temperature": 0.0,
          "avg_logprob": -0.022792193266722532,
          "compression_ratio": 1.9835390946502058,
          "no_speech_prob": 0.010301151312887669,
          "confidence": 0.9896988486871123
        },
        {
          "id": 78,
          "start": 488.32,
          "end": 494.72,
          "text": "until we get some input or find some value now to create an infinite loop you can just replace the",
          "tokens": [
            50912,
            1826,
            321,
            483,
            512,
            4846,
            420,
            915,
            512,
            2158,
            586,
            281,
            1884,
            364,
            13785,
            6367,
            291,
            393,
            445,
            7406,
            264,
            51232
          ],
          "temperature": 0.0,
          "avg_logprob": -0.022792193266722532,
          "compression_ratio": 1.9835390946502058,
          "no_speech_prob": 0.010301151312887669,
          "confidence": 0.9896988486871123
        },
        {
          "id": 79,
          "start": 494.72,
          "end": 500.72,
          "text": "comparison that we're doing here with a value of true so now that we have an infinite loop there's",
          "tokens": [
            51232,
            9660,
            300,
            321,
            434,
            884,
            510,
            365,
            257,
            2158,
            295,
            2074,
            370,
            586,
            300,
            321,
            362,
            364,
            13785,
            6367,
            456,
            311,
            51532
          ],
          "temperature": 0.0,
          "avg_logprob": -0.022792193266722532,
          "compression_ratio": 1.9835390946502058,
          "no_speech_prob": 0.010301151312887669,
          "confidence": 0.9896988486871123
        },
        {
          "id": 80,
          "start": 500.72,
          "end": 505.6,
          "text": "no conditional here that can break out so now we have to have this break statement in here if we",
          "tokens": [
            51532,
            572,
            27708,
            510,
            300,
            393,
            1821,
            484,
            370,
            586,
            321,
            362,
            281,
            362,
            341,
            1821,
            5629,
            294,
            510,
            498,
            321,
            51776
          ],
          "temperature": 0.0,
          "avg_logprob": -0.022792193266722532,
          "compression_ratio": 1.9835390946502058,
          "no_speech_prob": 0.010301151312887669,
          "confidence": 0.9896988486871123
        }
      ],
      "duration": 27.879999999999995
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 500.6,
      "end_time": 527.6,
      "text": "comparison that we're doing here with a value of true so now that we have an infinite loop there's no conditional here that can break out so now we have to have this break statement in here if we ever want to stop this loop so if we run this then we can see that we get the same output there now in this example we're using a conditional but this is also how you would keep a loop going indefinitely until you find or receive values that you're looking for now if you ever accidentally get stuck in an infinite loop then within most environments or operating systems you can interrupt",
      "original_segments": [
        {
          "id": 81,
          "start": 505.6,
          "end": 511.6,
          "text": "ever want to stop this loop so if we run this then we can see that we get the same output there",
          "tokens": [
            50364,
            1562,
            528,
            281,
            1590,
            341,
            6367,
            370,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            321,
            483,
            264,
            912,
            5598,
            456,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02722467663132142,
          "compression_ratio": 1.8270676691729324,
          "no_speech_prob": 0.004472297616302967,
          "confidence": 0.995527702383697
        },
        {
          "id": 82,
          "start": 511.6,
          "end": 516.4,
          "text": "now in this example we're using a conditional but this is also how you would keep a loop going",
          "tokens": [
            50664,
            586,
            294,
            341,
            1365,
            321,
            434,
            1228,
            257,
            27708,
            457,
            341,
            307,
            611,
            577,
            291,
            576,
            1066,
            257,
            6367,
            516,
            50904
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02722467663132142,
          "compression_ratio": 1.8270676691729324,
          "no_speech_prob": 0.004472297616302967,
          "confidence": 0.995527702383697
        },
        {
          "id": 83,
          "start": 516.4,
          "end": 521.52,
          "text": "indefinitely until you find or receive values that you're looking for now if you ever accidentally",
          "tokens": [
            50904,
            24162,
            10925,
            1826,
            291,
            915,
            420,
            4774,
            4190,
            300,
            291,
            434,
            1237,
            337,
            586,
            498,
            291,
            1562,
            15715,
            51160
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02722467663132142,
          "compression_ratio": 1.8270676691729324,
          "no_speech_prob": 0.004472297616302967,
          "confidence": 0.995527702383697
        },
        {
          "id": 84,
          "start": 521.52,
          "end": 527.6,
          "text": "get stuck in an infinite loop then within most environments or operating systems you can interrupt",
          "tokens": [
            51160,
            483,
            5541,
            294,
            364,
            13785,
            6367,
            550,
            1951,
            881,
            12388,
            420,
            7447,
            3652,
            291,
            393,
            12729,
            51464
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02722467663132142,
          "compression_ratio": 1.8270676691729324,
          "no_speech_prob": 0.004472297616302967,
          "confidence": 0.995527702383697
        }
      ],
      "duration": 27.0
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 522.6,
      "end_time": 552.56,
      "text": "get stuck in an infinite loop then within most environments or operating systems you can interrupt that by pressing control c to stop the process so if we comment out our conditional here with the break statement then this is going to get stuck in an infinite loop and just go on forever so now if we run this code then we can see that we get stuck in this infinite loop where it just keeps incrementing x by one and printing out x now to get out of this on most operating systems you can",
      "original_segments": [
        {
          "id": 85,
          "start": 527.6,
          "end": 534.4,
          "text": "that by pressing control c to stop the process so if we comment out our conditional here with the",
          "tokens": [
            51464,
            300,
            538,
            12417,
            1969,
            269,
            281,
            1590,
            264,
            1399,
            370,
            498,
            321,
            2871,
            484,
            527,
            27708,
            510,
            365,
            264,
            51804
          ],
          "temperature": 0.0,
          "avg_logprob": -0.02722467663132142,
          "compression_ratio": 1.8270676691729324,
          "no_speech_prob": 0.004472297616302967,
          "confidence": 0.995527702383697
        },
        {
          "id": 86,
          "start": 534.4,
          "end": 541.36,
          "text": "break statement then this is going to get stuck in an infinite loop and just go on forever so now",
          "tokens": [
            50364,
            1821,
            5629,
            550,
            341,
            307,
            516,
            281,
            483,
            5541,
            294,
            364,
            13785,
            6367,
            293,
            445,
            352,
            322,
            5680,
            370,
            586,
            50712
          ],
          "temperature": 0.0,
          "avg_logprob": -0.032355611042309836,
          "compression_ratio": 1.8840579710144927,
          "no_speech_prob": 0.005483801476657391,
          "confidence": 0.9945161985233426
        },
        {
          "id": 87,
          "start": 541.36,
          "end": 546.48,
          "text": "if we run this code then we can see that we get stuck in this infinite loop where it just keeps",
          "tokens": [
            50712,
            498,
            321,
            1190,
            341,
            3089,
            550,
            321,
            393,
            536,
            300,
            321,
            483,
            5541,
            294,
            341,
            13785,
            6367,
            689,
            309,
            445,
            5965,
            50968
          ],
          "temperature": 0.0,
          "avg_logprob": -0.032355611042309836,
          "compression_ratio": 1.8840579710144927,
          "no_speech_prob": 0.005483801476657391,
          "confidence": 0.9945161985233426
        },
        {
          "id": 88,
          "start": 546.48,
          "end": 552.56,
          "text": "incrementing x by one and printing out x now to get out of this on most operating systems you can",
          "tokens": [
            50968,
            26200,
            278,
            2031,
            538,
            472,
            293,
            14699,
            484,
            2031,
            586,
            281,
            483,
            484,
            295,
            341,
            322,
            881,
            7447,
            3652,
            291,
            393,
            51272
          ],
          "temperature": 0.0,
          "avg_logprob": -0.032355611042309836,
          "compression_ratio": 1.8840579710144927,
          "no_speech_prob": 0.005483801476657391,
          "confidence": 0.9945161985233426
        }
      ],
      "duration": 29.959999999999923
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 547.56,
      "end_time": 573.84,
      "text": "incrementing x by one and printing out x now to get out of this on most operating systems you can press control c and it'll interrupt that so i press control c and you can see that it was canceled and if you are in your terminal or command prompt then console control c should send a keyboard interrupt okay so i think that is going to do it for this video i hope that now you have a clear understanding of the different loops and how the break and continue statements work in the next",
      "original_segments": [
        {
          "id": 89,
          "start": 552.56,
          "end": 558.72,
          "text": "press control c and it'll interrupt that so i press control c and you can see that it was canceled",
          "tokens": [
            51272,
            1886,
            1969,
            269,
            293,
            309,
            603,
            12729,
            300,
            370,
            741,
            1886,
            1969,
            269,
            293,
            291,
            393,
            536,
            300,
            309,
            390,
            24839,
            51580
          ],
          "temperature": 0.0,
          "avg_logprob": -0.032355611042309836,
          "compression_ratio": 1.8840579710144927,
          "no_speech_prob": 0.005483801476657391,
          "confidence": 0.9945161985233426
        },
        {
          "id": 90,
          "start": 558.72,
          "end": 564.88,
          "text": "and if you are in your terminal or command prompt then console control c should send a keyboard",
          "tokens": [
            50364,
            293,
            498,
            291,
            366,
            294,
            428,
            14709,
            420,
            5622,
            12391,
            550,
            11076,
            1969,
            269,
            820,
            2845,
            257,
            10186,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05316570193268532,
          "compression_ratio": 1.8142414860681115,
          "no_speech_prob": 0.32728657126426697,
          "confidence": 0.672713428735733
        },
        {
          "id": 91,
          "start": 564.88,
          "end": 569.52,
          "text": "interrupt okay so i think that is going to do it for this video i hope that now you have a clear",
          "tokens": [
            50672,
            12729,
            1392,
            370,
            741,
            519,
            300,
            307,
            516,
            281,
            360,
            309,
            337,
            341,
            960,
            741,
            1454,
            300,
            586,
            291,
            362,
            257,
            1850,
            50904
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05316570193268532,
          "compression_ratio": 1.8142414860681115,
          "no_speech_prob": 0.32728657126426697,
          "confidence": 0.672713428735733
        },
        {
          "id": 92,
          "start": 569.52,
          "end": 573.84,
          "text": "understanding of the different loops and how the break and continue statements work in the next",
          "tokens": [
            50904,
            3701,
            295,
            264,
            819,
            16121,
            293,
            577,
            264,
            1821,
            293,
            2354,
            12363,
            589,
            294,
            264,
            958,
            51120
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05316570193268532,
          "compression_ratio": 1.8142414860681115,
          "no_speech_prob": 0.32728657126426697,
          "confidence": 0.672713428735733
        }
      ],
      "duration": 26.280000000000086
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 568.84,
      "end_time": 597.5999999999999,
      "text": "interrupt okay so i think that is going to do it for this video i hope that now you have a clear understanding of the different loops and how the break and continue statements work in the next video we'll be learning how to write functions but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and i'll do my best to answer those if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description",
      "original_segments": [
        {
          "id": 93,
          "start": 573.84,
          "end": 578.48,
          "text": "video we'll be learning how to write functions but if anyone has any questions about what we covered",
          "tokens": [
            51120,
            960,
            321,
            603,
            312,
            2539,
            577,
            281,
            2464,
            6828,
            457,
            498,
            2878,
            575,
            604,
            1651,
            466,
            437,
            321,
            5343,
            51352
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05316570193268532,
          "compression_ratio": 1.8142414860681115,
          "no_speech_prob": 0.32728657126426697,
          "confidence": 0.672713428735733
        },
        {
          "id": 94,
          "start": 578.48,
          "end": 582.5600000000001,
          "text": "in this video then feel free to ask in the comment section below and i'll do my best to answer those",
          "tokens": [
            51352,
            294,
            341,
            960,
            550,
            841,
            1737,
            281,
            1029,
            294,
            264,
            2871,
            3541,
            2507,
            293,
            741,
            603,
            360,
            452,
            1151,
            281,
            1867,
            729,
            51556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05316570193268532,
          "compression_ratio": 1.8142414860681115,
          "no_speech_prob": 0.32728657126426697,
          "confidence": 0.672713428735733
        },
        {
          "id": 95,
          "start": 583.12,
          "end": 586.5600000000001,
          "text": "if you enjoy these tutorials and would like to support them then there are several ways you can",
          "tokens": [
            51584,
            498,
            291,
            2103,
            613,
            17616,
            293,
            576,
            411,
            281,
            1406,
            552,
            550,
            456,
            366,
            2940,
            2098,
            291,
            393,
            51756
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05316570193268532,
          "compression_ratio": 1.8142414860681115,
          "no_speech_prob": 0.32728657126426697,
          "confidence": 0.672713428735733
        },
        {
          "id": 96,
          "start": 586.56,
          "end": 590.4799999999999,
          "text": "do that the easiest way is to simply like the video and give it a thumbs up and also it's a",
          "tokens": [
            50364,
            360,
            300,
            264,
            12889,
            636,
            307,
            281,
            2935,
            411,
            264,
            960,
            293,
            976,
            309,
            257,
            8838,
            493,
            293,
            611,
            309,
            311,
            257,
            50560
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05593629381549892,
          "compression_ratio": 1.632183908045977,
          "no_speech_prob": 0.008250036276876926,
          "confidence": 0.9917499637231231
        },
        {
          "id": 97,
          "start": 590.4799999999999,
          "end": 594.0,
          "text": "huge help to share these videos with anyone who you think would find them useful and if you have",
          "tokens": [
            50560,
            2603,
            854,
            281,
            2073,
            613,
            2145,
            365,
            2878,
            567,
            291,
            519,
            576,
            915,
            552,
            4420,
            293,
            498,
            291,
            362,
            50736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05593629381549892,
          "compression_ratio": 1.632183908045977,
          "no_speech_prob": 0.008250036276876926,
          "confidence": 0.9917499637231231
        },
        {
          "id": 98,
          "start": 594.0,
          "end": 597.5999999999999,
          "text": "the means you can contribute through patreon and there's a link to that page in the description",
          "tokens": [
            50736,
            264,
            1355,
            291,
            393,
            10586,
            807,
            33161,
            293,
            456,
            311,
            257,
            2113,
            281,
            300,
            3028,
            294,
            264,
            3855,
            50916
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05593629381549892,
          "compression_ratio": 1.632183908045977,
          "no_speech_prob": 0.008250036276876926,
          "confidence": 0.9917499637231231
        }
      ],
      "duration": 28.759999999999877
    },
    {
      "video_id": "60dcdddca1ec",
      "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
      "start_time": 592.5999999999999,
      "end_time": 605.44,
      "text": "huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching",
      "original_segments": [
        {
          "id": 99,
          "start": 597.6,
          "end": 605.44,
          "text": "section below be sure to subscribe for future videos and thank you all for watching",
          "tokens": [
            50364,
            3541,
            2507,
            312,
            988,
            281,
            3022,
            337,
            2027,
            2145,
            293,
            1309,
            291,
            439,
            337,
            1976,
            50756
          ],
          "temperature": 0.0,
          "avg_logprob": -0.21547802289326987,
          "compression_ratio": 1.1369863013698631,
          "no_speech_prob": 0.007436633575707674,
          "confidence": 0.9925633664242923
        }
      ],
      "duration": 12.840000000000146
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 0.0,
      "end_time": 28.240000000000002,
      "text": "Hey there, how's it going everybody? In this video we'll be learning about conditionals and how we can control what statements get executed depending on whether certain values evaluate to true or false. And we've mentioned in previous videos that these true and false values are called booleans. So let's look at one of the simplest conditionals that we can write. So we're going to write an if statement and we'll say if and now the condition that we want to check whether it evaluates to true or false. So we're just going to make this obvious for now and just say",
      "original_segments": [
        {
          "id": 0,
          "start": 0.0,
          "end": 2.88,
          "text": "Hey there, how's it going everybody? In this video we'll be learning about",
          "tokens": [
            50364,
            1911,
            456,
            11,
            577,
            311,
            309,
            516,
            2201,
            30,
            682,
            341,
            960,
            321,
            603,
            312,
            2539,
            466,
            50508
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06736700875418526,
          "compression_ratio": 1.867986798679868,
          "no_speech_prob": 0.16611561179161072,
          "confidence": 0.8338843882083893
        },
        {
          "id": 1,
          "start": 2.88,
          "end": 6.16,
          "text": "conditionals and how we can control what statements get executed",
          "tokens": [
            50508,
            4188,
            1124,
            293,
            577,
            321,
            393,
            1969,
            437,
            12363,
            483,
            17577,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06736700875418526,
          "compression_ratio": 1.867986798679868,
          "no_speech_prob": 0.16611561179161072,
          "confidence": 0.8338843882083893
        },
        {
          "id": 2,
          "start": 6.16,
          "end": 9.68,
          "text": "depending on whether certain values evaluate to true or false.",
          "tokens": [
            50672,
            5413,
            322,
            1968,
            1629,
            4190,
            13059,
            281,
            2074,
            420,
            7908,
            13,
            50848
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06736700875418526,
          "compression_ratio": 1.867986798679868,
          "no_speech_prob": 0.16611561179161072,
          "confidence": 0.8338843882083893
        },
        {
          "id": 3,
          "start": 9.68,
          "end": 13.200000000000001,
          "text": "And we've mentioned in previous videos that these true and false values are",
          "tokens": [
            50848,
            400,
            321,
            600,
            2835,
            294,
            3894,
            2145,
            300,
            613,
            2074,
            293,
            7908,
            4190,
            366,
            51024
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06736700875418526,
          "compression_ratio": 1.867986798679868,
          "no_speech_prob": 0.16611561179161072,
          "confidence": 0.8338843882083893
        },
        {
          "id": 4,
          "start": 13.200000000000001,
          "end": 15.84,
          "text": "called booleans. So let's look at one of the simplest",
          "tokens": [
            51024,
            1219,
            748,
            4812,
            599,
            13,
            407,
            718,
            311,
            574,
            412,
            472,
            295,
            264,
            22811,
            51156
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06736700875418526,
          "compression_ratio": 1.867986798679868,
          "no_speech_prob": 0.16611561179161072,
          "confidence": 0.8338843882083893
        },
        {
          "id": 5,
          "start": 15.84,
          "end": 19.2,
          "text": "conditionals that we can write. So we're going to write an if statement",
          "tokens": [
            51156,
            4188,
            1124,
            300,
            321,
            393,
            2464,
            13,
            407,
            321,
            434,
            516,
            281,
            2464,
            364,
            498,
            5629,
            51324
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06736700875418526,
          "compression_ratio": 1.867986798679868,
          "no_speech_prob": 0.16611561179161072,
          "confidence": 0.8338843882083893
        },
        {
          "id": 6,
          "start": 19.2,
          "end": 22.48,
          "text": "and we'll say if and now the condition that we want to",
          "tokens": [
            51324,
            293,
            321,
            603,
            584,
            498,
            293,
            586,
            264,
            4188,
            300,
            321,
            528,
            281,
            51488
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06736700875418526,
          "compression_ratio": 1.867986798679868,
          "no_speech_prob": 0.16611561179161072,
          "confidence": 0.8338843882083893
        },
        {
          "id": 7,
          "start": 22.48,
          "end": 25.04,
          "text": "check whether it evaluates to true or false.",
          "tokens": [
            51488,
            1520,
            1968,
            309,
            6133,
            1024,
            281,
            2074,
            420,
            7908,
            13,
            51616
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06736700875418526,
          "compression_ratio": 1.867986798679868,
          "no_speech_prob": 0.16611561179161072,
          "confidence": 0.8338843882083893
        },
        {
          "id": 8,
          "start": 25.04,
          "end": 28.240000000000002,
          "text": "So we're just going to make this obvious for now and just say",
          "tokens": [
            51616,
            407,
            321,
            434,
            445,
            516,
            281,
            652,
            341,
            6322,
            337,
            586,
            293,
            445,
            584,
            51776
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06736700875418526,
          "compression_ratio": 1.867986798679868,
          "no_speech_prob": 0.16611561179161072,
          "confidence": 0.8338843882083893
        }
      ],
      "duration": 28.240000000000002
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 23.240000000000002,
      "end_time": 50.959999999999994,
      "text": "check whether it evaluates to true or false. So we're just going to make this obvious for now and just say true then we'll put in a colon and hit enter. And now on the next line we want to be sure that we're indented over so that we're writing code within our if block. So now we'll just print out a string here and I'll just say conditional was true. So now if I save that and run it then we can see that it printed out that our condition was true. Now this print statement will only be",
      "original_segments": [
        {
          "id": 9,
          "start": 28.24,
          "end": 31.2,
          "text": "true then we'll put in a colon and hit enter.",
          "tokens": [
            50364,
            2074,
            550,
            321,
            603,
            829,
            294,
            257,
            8255,
            293,
            2045,
            3242,
            13,
            50512
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08152640876123461,
          "compression_ratio": 1.8589211618257262,
          "no_speech_prob": 0.14835141599178314,
          "confidence": 0.8516485840082169
        },
        {
          "id": 10,
          "start": 31.2,
          "end": 34.239999999999995,
          "text": "And now on the next line we want to be sure that we're indented over so that",
          "tokens": [
            50512,
            400,
            586,
            322,
            264,
            958,
            1622,
            321,
            528,
            281,
            312,
            988,
            300,
            321,
            434,
            1016,
            6003,
            670,
            370,
            300,
            50664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08152640876123461,
          "compression_ratio": 1.8589211618257262,
          "no_speech_prob": 0.14835141599178314,
          "confidence": 0.8516485840082169
        },
        {
          "id": 11,
          "start": 34.239999999999995,
          "end": 39.44,
          "text": "we're writing code within our if block. So now we'll just print out a string",
          "tokens": [
            50664,
            321,
            434,
            3579,
            3089,
            1951,
            527,
            498,
            3461,
            13,
            407,
            586,
            321,
            603,
            445,
            4482,
            484,
            257,
            6798,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08152640876123461,
          "compression_ratio": 1.8589211618257262,
          "no_speech_prob": 0.14835141599178314,
          "confidence": 0.8516485840082169
        },
        {
          "id": 12,
          "start": 39.44,
          "end": 44.4,
          "text": "here and I'll just say conditional was true. So now if I save",
          "tokens": [
            50924,
            510,
            293,
            286,
            603,
            445,
            584,
            27708,
            390,
            2074,
            13,
            407,
            586,
            498,
            286,
            3155,
            51172
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08152640876123461,
          "compression_ratio": 1.8589211618257262,
          "no_speech_prob": 0.14835141599178314,
          "confidence": 0.8516485840082169
        },
        {
          "id": 13,
          "start": 44.4,
          "end": 47.2,
          "text": "that and run it then we can see that it printed out",
          "tokens": [
            51172,
            300,
            293,
            1190,
            309,
            550,
            321,
            393,
            536,
            300,
            309,
            13567,
            484,
            51312
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08152640876123461,
          "compression_ratio": 1.8589211618257262,
          "no_speech_prob": 0.14835141599178314,
          "confidence": 0.8516485840082169
        },
        {
          "id": 14,
          "start": 47.2,
          "end": 50.959999999999994,
          "text": "that our condition was true. Now this print statement will only be",
          "tokens": [
            51312,
            300,
            527,
            4188,
            390,
            2074,
            13,
            823,
            341,
            4482,
            5629,
            486,
            787,
            312,
            51500
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08152640876123461,
          "compression_ratio": 1.8589211618257262,
          "no_speech_prob": 0.14835141599178314,
          "confidence": 0.8516485840082169
        }
      ],
      "duration": 27.71999999999999
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 45.959999999999994,
      "end_time": 74.4,
      "text": "that and run it then we can see that it printed out that our condition was true. Now this print statement will only be executed if the condition after our if statement evaluates to true. So what if I was to instead change this over to false. Now if I run this then we can see that it didn't print out the statement within our if block. Now conditionals are usually not hard-coded to true and false values like this. We really want to put in some code that evaluates to true or false.",
      "original_segments": [
        {
          "id": 15,
          "start": 50.959999999999994,
          "end": 55.68,
          "text": "executed if the condition after our if statement evaluates to true.",
          "tokens": [
            51500,
            17577,
            498,
            264,
            4188,
            934,
            527,
            498,
            5629,
            6133,
            1024,
            281,
            2074,
            13,
            51736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08152640876123461,
          "compression_ratio": 1.8589211618257262,
          "no_speech_prob": 0.14835141599178314,
          "confidence": 0.8516485840082169
        },
        {
          "id": 16,
          "start": 55.68,
          "end": 58.8,
          "text": "So what if I was to instead change this over",
          "tokens": [
            50364,
            407,
            437,
            498,
            286,
            390,
            281,
            2602,
            1319,
            341,
            670,
            50520
          ],
          "temperature": 0.0,
          "avg_logprob": -0.060118653752782324,
          "compression_ratio": 1.6842105263157894,
          "no_speech_prob": 0.020957469940185547,
          "confidence": 0.9790425300598145
        },
        {
          "id": 17,
          "start": 58.8,
          "end": 63.28,
          "text": "to false. Now if I run this then we can see that it didn't print out the",
          "tokens": [
            50520,
            281,
            7908,
            13,
            823,
            498,
            286,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            309,
            994,
            380,
            4482,
            484,
            264,
            50744
          ],
          "temperature": 0.0,
          "avg_logprob": -0.060118653752782324,
          "compression_ratio": 1.6842105263157894,
          "no_speech_prob": 0.020957469940185547,
          "confidence": 0.9790425300598145
        },
        {
          "id": 18,
          "start": 63.28,
          "end": 67.6,
          "text": "statement within our if block. Now conditionals are usually not",
          "tokens": [
            50744,
            5629,
            1951,
            527,
            498,
            3461,
            13,
            823,
            4188,
            1124,
            366,
            2673,
            406,
            50960
          ],
          "temperature": 0.0,
          "avg_logprob": -0.060118653752782324,
          "compression_ratio": 1.6842105263157894,
          "no_speech_prob": 0.020957469940185547,
          "confidence": 0.9790425300598145
        },
        {
          "id": 19,
          "start": 67.6,
          "end": 70.4,
          "text": "hard-coded to true and false values like this.",
          "tokens": [
            50960,
            1152,
            12,
            66,
            12340,
            281,
            2074,
            293,
            7908,
            4190,
            411,
            341,
            13,
            51100
          ],
          "temperature": 0.0,
          "avg_logprob": -0.060118653752782324,
          "compression_ratio": 1.6842105263157894,
          "no_speech_prob": 0.020957469940185547,
          "confidence": 0.9790425300598145
        },
        {
          "id": 20,
          "start": 70.4,
          "end": 74.4,
          "text": "We really want to put in some code that evaluates to true or false.",
          "tokens": [
            51100,
            492,
            534,
            528,
            281,
            829,
            294,
            512,
            3089,
            300,
            6133,
            1024,
            281,
            2074,
            420,
            7908,
            13,
            51300
          ],
          "temperature": 0.0,
          "avg_logprob": -0.060118653752782324,
          "compression_ratio": 1.6842105263157894,
          "no_speech_prob": 0.020957469940185547,
          "confidence": 0.9790425300598145
        }
      ],
      "duration": 28.440000000000012
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 69.4,
      "end_time": 99.28,
      "text": "hard-coded to true and false values like this. We really want to put in some code that evaluates to true or false. So for example I'm going to create a variable here and I'll just call this variable language and I'll set this equal to So now let's say that we only want to execute this print statement if the language is equal to python. So to do this we can say if language equals equals python. Now notice that we have a double equals here. So this tests for equality. Now this is",
      "original_segments": [
        {
          "id": 21,
          "start": 74.4,
          "end": 78.8,
          "text": "So for example I'm going to create a variable here and I'll just call this",
          "tokens": [
            51300,
            407,
            337,
            1365,
            286,
            478,
            516,
            281,
            1884,
            257,
            7006,
            510,
            293,
            286,
            603,
            445,
            818,
            341,
            51520
          ],
          "temperature": 0.0,
          "avg_logprob": -0.060118653752782324,
          "compression_ratio": 1.6842105263157894,
          "no_speech_prob": 0.020957469940185547,
          "confidence": 0.9790425300598145
        },
        {
          "id": 22,
          "start": 78.8,
          "end": 81.68,
          "text": "variable language and I'll set this equal to",
          "tokens": [
            51520,
            7006,
            2856,
            293,
            286,
            603,
            992,
            341,
            2681,
            281,
            51664
          ],
          "temperature": 0.0,
          "avg_logprob": -0.060118653752782324,
          "compression_ratio": 1.6842105263157894,
          "no_speech_prob": 0.020957469940185547,
          "confidence": 0.9790425300598145
        },
        {
          "id": 23,
          "start": 82.48,
          "end": 86.24000000000001,
          "text": "So now let's say that we only want to execute this print statement",
          "tokens": [
            50404,
            407,
            586,
            718,
            311,
            584,
            300,
            321,
            787,
            528,
            281,
            14483,
            341,
            4482,
            5629,
            50592
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0774329019629437,
          "compression_ratio": 1.838235294117647,
          "no_speech_prob": 0.05429535731673241,
          "confidence": 0.9457046426832676
        },
        {
          "id": 24,
          "start": 86.24000000000001,
          "end": 90.4,
          "text": "if the language is equal to python. So to do this we can say",
          "tokens": [
            50592,
            498,
            264,
            2856,
            307,
            2681,
            281,
            38797,
            13,
            407,
            281,
            360,
            341,
            321,
            393,
            584,
            50800
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0774329019629437,
          "compression_ratio": 1.838235294117647,
          "no_speech_prob": 0.05429535731673241,
          "confidence": 0.9457046426832676
        },
        {
          "id": 25,
          "start": 90.4,
          "end": 96.16000000000001,
          "text": "if language equals equals python. Now notice that we have a double equals",
          "tokens": [
            50800,
            498,
            2856,
            6915,
            6915,
            38797,
            13,
            823,
            3449,
            300,
            321,
            362,
            257,
            3834,
            6915,
            51088
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0774329019629437,
          "compression_ratio": 1.838235294117647,
          "no_speech_prob": 0.05429535731673241,
          "confidence": 0.9457046426832676
        },
        {
          "id": 26,
          "start": 96.16000000000001,
          "end": 99.28,
          "text": "here. So this tests for equality. Now this is",
          "tokens": [
            51088,
            510,
            13,
            407,
            341,
            6921,
            337,
            14949,
            13,
            823,
            341,
            307,
            51244
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0774329019629437,
          "compression_ratio": 1.838235294117647,
          "no_speech_prob": 0.05429535731673241,
          "confidence": 0.9457046426832676
        }
      ],
      "duration": 29.879999999999995
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 94.28,
      "end_time": 121.76,
      "text": "if language equals equals python. Now notice that we have a double equals here. So this tests for equality. Now this is different from the single equal sign which is for assigning values. So with this double equals here we're testing for equality. And this will evaluate to true or false and that will determine if the code in our if statement is executed. So if we run this then we can see that it executed our print statement that the condition was true. Now there are a lot of different",
      "original_segments": [
        {
          "id": 27,
          "start": 99.28,
          "end": 104.32000000000001,
          "text": "different from the single equal sign which is for assigning values.",
          "tokens": [
            51244,
            819,
            490,
            264,
            2167,
            2681,
            1465,
            597,
            307,
            337,
            49602,
            4190,
            13,
            51496
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0774329019629437,
          "compression_ratio": 1.838235294117647,
          "no_speech_prob": 0.05429535731673241,
          "confidence": 0.9457046426832676
        },
        {
          "id": 28,
          "start": 104.32000000000001,
          "end": 108.0,
          "text": "So with this double equals here we're testing for equality.",
          "tokens": [
            51496,
            407,
            365,
            341,
            3834,
            6915,
            510,
            321,
            434,
            4997,
            337,
            14949,
            13,
            51680
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0774329019629437,
          "compression_ratio": 1.838235294117647,
          "no_speech_prob": 0.05429535731673241,
          "confidence": 0.9457046426832676
        },
        {
          "id": 29,
          "start": 108.0,
          "end": 111.92,
          "text": "And this will evaluate to true or false and that will determine",
          "tokens": [
            50364,
            400,
            341,
            486,
            13059,
            281,
            2074,
            420,
            7908,
            293,
            300,
            486,
            6997,
            50560
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04627066619636477,
          "compression_ratio": 1.78125,
          "no_speech_prob": 0.0675724446773529,
          "confidence": 0.9324275553226471
        },
        {
          "id": 30,
          "start": 111.92,
          "end": 115.12,
          "text": "if the code in our if statement is executed. So",
          "tokens": [
            50560,
            498,
            264,
            3089,
            294,
            527,
            498,
            5629,
            307,
            17577,
            13,
            407,
            50720
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04627066619636477,
          "compression_ratio": 1.78125,
          "no_speech_prob": 0.0675724446773529,
          "confidence": 0.9324275553226471
        },
        {
          "id": 31,
          "start": 115.12,
          "end": 119.2,
          "text": "if we run this then we can see that it executed our print statement that the",
          "tokens": [
            50720,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            309,
            17577,
            527,
            4482,
            5629,
            300,
            264,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04627066619636477,
          "compression_ratio": 1.78125,
          "no_speech_prob": 0.0675724446773529,
          "confidence": 0.9324275553226471
        },
        {
          "id": 32,
          "start": 119.2,
          "end": 121.76,
          "text": "condition was true. Now there are a lot of different",
          "tokens": [
            50924,
            4188,
            390,
            2074,
            13,
            823,
            456,
            366,
            257,
            688,
            295,
            819,
            51052
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04627066619636477,
          "compression_ratio": 1.78125,
          "no_speech_prob": 0.0675724446773529,
          "confidence": 0.9324275553226471
        }
      ],
      "duration": 27.480000000000004
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 116.76,
      "end_time": 143.04000000000002,
      "text": "if we run this then we can see that it executed our print statement that the condition was true. Now there are a lot of different comparisons that we can test for and I've got these written out in a snippets file here. So I'm just going to copy these and paste them in so that we have them as a reference. Now we went over some of these in our numbers tutorial but let's go ahead and just look through here really quick. So double equals tests for equality. Exclamation point equals test if something is not equal.",
      "original_segments": [
        {
          "id": 33,
          "start": 121.76,
          "end": 125.2,
          "text": "comparisons that we can test for and I've got these written out in a",
          "tokens": [
            51052,
            33157,
            300,
            321,
            393,
            1500,
            337,
            293,
            286,
            600,
            658,
            613,
            3720,
            484,
            294,
            257,
            51224
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04627066619636477,
          "compression_ratio": 1.78125,
          "no_speech_prob": 0.0675724446773529,
          "confidence": 0.9324275553226471
        },
        {
          "id": 34,
          "start": 125.2,
          "end": 128.32,
          "text": "snippets file here. So I'm just going to copy these and paste",
          "tokens": [
            51224,
            35623,
            1385,
            3991,
            510,
            13,
            407,
            286,
            478,
            445,
            516,
            281,
            5055,
            613,
            293,
            9163,
            51380
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04627066619636477,
          "compression_ratio": 1.78125,
          "no_speech_prob": 0.0675724446773529,
          "confidence": 0.9324275553226471
        },
        {
          "id": 35,
          "start": 128.32,
          "end": 132.48,
          "text": "them in so that we have them as a reference. Now we went over some of",
          "tokens": [
            51380,
            552,
            294,
            370,
            300,
            321,
            362,
            552,
            382,
            257,
            6408,
            13,
            823,
            321,
            1437,
            670,
            512,
            295,
            51588
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04627066619636477,
          "compression_ratio": 1.78125,
          "no_speech_prob": 0.0675724446773529,
          "confidence": 0.9324275553226471
        },
        {
          "id": 36,
          "start": 132.48,
          "end": 135.68,
          "text": "these in our numbers tutorial but let's go ahead and just look through",
          "tokens": [
            51588,
            613,
            294,
            527,
            3547,
            7073,
            457,
            718,
            311,
            352,
            2286,
            293,
            445,
            574,
            807,
            51748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04627066619636477,
          "compression_ratio": 1.78125,
          "no_speech_prob": 0.0675724446773529,
          "confidence": 0.9324275553226471
        },
        {
          "id": 37,
          "start": 135.68,
          "end": 139.44,
          "text": "here really quick. So double equals tests for equality.",
          "tokens": [
            50364,
            510,
            534,
            1702,
            13,
            407,
            3834,
            6915,
            6921,
            337,
            14949,
            13,
            50552
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07614585840813468,
          "compression_ratio": 1.9601769911504425,
          "no_speech_prob": 0.2754674255847931,
          "confidence": 0.7245325744152069
        },
        {
          "id": 38,
          "start": 139.44,
          "end": 143.04000000000002,
          "text": "Exclamation point equals test if something is not equal.",
          "tokens": [
            50552,
            2111,
            41411,
            935,
            6915,
            1500,
            498,
            746,
            307,
            406,
            2681,
            13,
            50732
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07614585840813468,
          "compression_ratio": 1.9601769911504425,
          "no_speech_prob": 0.2754674255847931,
          "confidence": 0.7245325744152069
        }
      ],
      "duration": 26.280000000000015
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 138.04000000000002,
      "end_time": 166.23999999999998,
      "text": "here really quick. So double equals tests for equality. Exclamation point equals test if something is not equal. Greater than sign is for greater than. Less than sign is for less than. Greater than equal to is for greater than or equal to. Less than equal to is for less or equal. And then we have this object identity. Now some people wonder what the difference is between this and the double equal signs but when we use this is keyword check we're actually checking if values have the same id",
      "original_segments": [
        {
          "id": 39,
          "start": 143.04000000000002,
          "end": 146.8,
          "text": "Greater than sign is for greater than. Less than sign is for less than.",
          "tokens": [
            50732,
            38410,
            813,
            1465,
            307,
            337,
            5044,
            813,
            13,
            18649,
            813,
            1465,
            307,
            337,
            1570,
            813,
            13,
            50920
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07614585840813468,
          "compression_ratio": 1.9601769911504425,
          "no_speech_prob": 0.2754674255847931,
          "confidence": 0.7245325744152069
        },
        {
          "id": 40,
          "start": 146.8,
          "end": 150.88,
          "text": "Greater than equal to is for greater than or equal to. Less than equal to is",
          "tokens": [
            50920,
            38410,
            813,
            2681,
            281,
            307,
            337,
            5044,
            813,
            420,
            2681,
            281,
            13,
            18649,
            813,
            2681,
            281,
            307,
            51124
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07614585840813468,
          "compression_ratio": 1.9601769911504425,
          "no_speech_prob": 0.2754674255847931,
          "confidence": 0.7245325744152069
        },
        {
          "id": 41,
          "start": 150.88,
          "end": 155.28,
          "text": "for less or equal. And then we have this object identity.",
          "tokens": [
            51124,
            337,
            1570,
            420,
            2681,
            13,
            400,
            550,
            321,
            362,
            341,
            2657,
            6575,
            13,
            51344
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07614585840813468,
          "compression_ratio": 1.9601769911504425,
          "no_speech_prob": 0.2754674255847931,
          "confidence": 0.7245325744152069
        },
        {
          "id": 42,
          "start": 155.28,
          "end": 158.56,
          "text": "Now some people wonder what the difference is between this and the",
          "tokens": [
            51344,
            823,
            512,
            561,
            2441,
            437,
            264,
            2649,
            307,
            1296,
            341,
            293,
            264,
            51508
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07614585840813468,
          "compression_ratio": 1.9601769911504425,
          "no_speech_prob": 0.2754674255847931,
          "confidence": 0.7245325744152069
        },
        {
          "id": 43,
          "start": 158.56,
          "end": 163.04000000000002,
          "text": "double equal signs but when we use this is keyword check",
          "tokens": [
            51508,
            3834,
            2681,
            7880,
            457,
            562,
            321,
            764,
            341,
            307,
            20428,
            1520,
            51732
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07614585840813468,
          "compression_ratio": 1.9601769911504425,
          "no_speech_prob": 0.2754674255847931,
          "confidence": 0.7245325744152069
        },
        {
          "id": 44,
          "start": 163.04,
          "end": 166.23999999999998,
          "text": "we're actually checking if values have the same id",
          "tokens": [
            50364,
            321,
            434,
            767,
            8568,
            498,
            4190,
            362,
            264,
            912,
            4496,
            50524
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05481371840810388,
          "compression_ratio": 1.8068181818181819,
          "no_speech_prob": 0.18223784863948822,
          "confidence": 0.8177621513605118
        }
      ],
      "duration": 28.19999999999996
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 161.23999999999998,
      "end_time": 189.6,
      "text": "double equal signs but when we use this is keyword check we're actually checking if values have the same id or basically whether they're the same object in memory. And we're going to look at an example of this in just a bit but right now let's move on to else statements. So what if we wanted to execute one portion of our code if our language was equal to python but another portion of our code if it wasn't. So to do this we're going to use an else statement. So first I'm going to change my print statement here and just print this",
      "original_segments": [
        {
          "id": 45,
          "start": 166.23999999999998,
          "end": 169.44,
          "text": "or basically whether they're the same object in memory.",
          "tokens": [
            50524,
            420,
            1936,
            1968,
            436,
            434,
            264,
            912,
            2657,
            294,
            4675,
            13,
            50684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05481371840810388,
          "compression_ratio": 1.8068181818181819,
          "no_speech_prob": 0.18223784863948822,
          "confidence": 0.8177621513605118
        },
        {
          "id": 46,
          "start": 169.44,
          "end": 172.95999999999998,
          "text": "And we're going to look at an example of this in just a bit but right now let's",
          "tokens": [
            50684,
            400,
            321,
            434,
            516,
            281,
            574,
            412,
            364,
            1365,
            295,
            341,
            294,
            445,
            257,
            857,
            457,
            558,
            586,
            718,
            311,
            50860
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05481371840810388,
          "compression_ratio": 1.8068181818181819,
          "no_speech_prob": 0.18223784863948822,
          "confidence": 0.8177621513605118
        },
        {
          "id": 47,
          "start": 172.95999999999998,
          "end": 176.56,
          "text": "move on to else statements. So what if we wanted to execute one",
          "tokens": [
            50860,
            1286,
            322,
            281,
            1646,
            12363,
            13,
            407,
            437,
            498,
            321,
            1415,
            281,
            14483,
            472,
            51040
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05481371840810388,
          "compression_ratio": 1.8068181818181819,
          "no_speech_prob": 0.18223784863948822,
          "confidence": 0.8177621513605118
        },
        {
          "id": 48,
          "start": 176.56,
          "end": 179.04,
          "text": "portion of our code if our language was equal to",
          "tokens": [
            51040,
            8044,
            295,
            527,
            3089,
            498,
            527,
            2856,
            390,
            2681,
            281,
            51164
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05481371840810388,
          "compression_ratio": 1.8068181818181819,
          "no_speech_prob": 0.18223784863948822,
          "confidence": 0.8177621513605118
        },
        {
          "id": 49,
          "start": 179.04,
          "end": 182.48,
          "text": "python but another portion of our code if it wasn't.",
          "tokens": [
            51164,
            38797,
            457,
            1071,
            8044,
            295,
            527,
            3089,
            498,
            309,
            2067,
            380,
            13,
            51336
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05481371840810388,
          "compression_ratio": 1.8068181818181819,
          "no_speech_prob": 0.18223784863948822,
          "confidence": 0.8177621513605118
        },
        {
          "id": 50,
          "start": 182.48,
          "end": 185.51999999999998,
          "text": "So to do this we're going to use an else statement. So",
          "tokens": [
            51336,
            407,
            281,
            360,
            341,
            321,
            434,
            516,
            281,
            764,
            364,
            1646,
            5629,
            13,
            407,
            51488
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05481371840810388,
          "compression_ratio": 1.8068181818181819,
          "no_speech_prob": 0.18223784863948822,
          "confidence": 0.8177621513605118
        },
        {
          "id": 51,
          "start": 185.51999999999998,
          "end": 189.6,
          "text": "first I'm going to change my print statement here and just print this",
          "tokens": [
            51488,
            700,
            286,
            478,
            516,
            281,
            1319,
            452,
            4482,
            5629,
            510,
            293,
            445,
            4482,
            341,
            51692
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05481371840810388,
          "compression_ratio": 1.8068181818181819,
          "no_speech_prob": 0.18223784863948822,
          "confidence": 0.8177621513605118
        }
      ],
      "duration": 28.360000000000014
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 184.6,
      "end_time": 211.12,
      "text": "So to do this we're going to use an else statement. So first I'm going to change my print statement here and just print this to say that the language is python and now we want to execute some code if the language is not equal to python. So to do this we're just going to put in an else statement and make sure that your else is back here on our baseline and not within our if statement. So now we'll say else and now within our else block we will",
      "original_segments": [
        {
          "id": 52,
          "start": 189.6,
          "end": 195.28,
          "text": "to say that the language is python and now we want to execute some code",
          "tokens": [
            50364,
            281,
            584,
            300,
            264,
            2856,
            307,
            38797,
            293,
            586,
            321,
            528,
            281,
            14483,
            512,
            3089,
            50648
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06829352562244122,
          "compression_ratio": 1.8341013824884793,
          "no_speech_prob": 0.12034107744693756,
          "confidence": 0.8796589225530624
        },
        {
          "id": 53,
          "start": 195.28,
          "end": 198.88,
          "text": "if the language is not equal to python. So to do this we're just",
          "tokens": [
            50648,
            498,
            264,
            2856,
            307,
            406,
            2681,
            281,
            38797,
            13,
            407,
            281,
            360,
            341,
            321,
            434,
            445,
            50828
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06829352562244122,
          "compression_ratio": 1.8341013824884793,
          "no_speech_prob": 0.12034107744693756,
          "confidence": 0.8796589225530624
        },
        {
          "id": 54,
          "start": 198.88,
          "end": 202.64,
          "text": "going to put in an else statement and make sure that your else",
          "tokens": [
            50828,
            516,
            281,
            829,
            294,
            364,
            1646,
            5629,
            293,
            652,
            988,
            300,
            428,
            1646,
            51016
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06829352562244122,
          "compression_ratio": 1.8341013824884793,
          "no_speech_prob": 0.12034107744693756,
          "confidence": 0.8796589225530624
        },
        {
          "id": 55,
          "start": 202.64,
          "end": 205.84,
          "text": "is back here on our baseline and not within",
          "tokens": [
            51016,
            307,
            646,
            510,
            322,
            527,
            20518,
            293,
            406,
            1951,
            51176
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06829352562244122,
          "compression_ratio": 1.8341013824884793,
          "no_speech_prob": 0.12034107744693756,
          "confidence": 0.8796589225530624
        },
        {
          "id": 56,
          "start": 205.84,
          "end": 211.12,
          "text": "our if statement. So now we'll say else and now within our else block we will",
          "tokens": [
            51176,
            527,
            498,
            5629,
            13,
            407,
            586,
            321,
            603,
            584,
            1646,
            293,
            586,
            1951,
            527,
            1646,
            3461,
            321,
            486,
            51440
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06829352562244122,
          "compression_ratio": 1.8341013824884793,
          "no_speech_prob": 0.12034107744693756,
          "confidence": 0.8796589225530624
        }
      ],
      "duration": 26.52000000000001
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 206.12,
      "end_time": 235.6,
      "text": "our if statement. So now we'll say else and now within our else block we will print out a string that just says no match. So now if we run this we can see that it printed out that the language is python. So our check if the language is equal to python is evaluating to true. So it's printing the code within that block and since it meets that conditional it never executes the code within our else block. Now if I was instead to change this language and set that equal to",
      "original_segments": [
        {
          "id": 57,
          "start": 211.12,
          "end": 216.56,
          "text": "print out a string that just says no match. So now if we run this we can see",
          "tokens": [
            51440,
            4482,
            484,
            257,
            6798,
            300,
            445,
            1619,
            572,
            2995,
            13,
            407,
            586,
            498,
            321,
            1190,
            341,
            321,
            393,
            536,
            51712
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06829352562244122,
          "compression_ratio": 1.8341013824884793,
          "no_speech_prob": 0.12034107744693756,
          "confidence": 0.8796589225530624
        },
        {
          "id": 58,
          "start": 216.56,
          "end": 220.32,
          "text": "that it printed out that the language is python. So our",
          "tokens": [
            50364,
            300,
            309,
            13567,
            484,
            300,
            264,
            2856,
            307,
            38797,
            13,
            407,
            527,
            50552
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06799409644944328,
          "compression_ratio": 1.9106382978723404,
          "no_speech_prob": 0.07254553586244583,
          "confidence": 0.9274544641375542
        },
        {
          "id": 59,
          "start": 220.32,
          "end": 224.24,
          "text": "check if the language is equal to python is evaluating to true.",
          "tokens": [
            50552,
            1520,
            498,
            264,
            2856,
            307,
            2681,
            281,
            38797,
            307,
            27479,
            281,
            2074,
            13,
            50748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06799409644944328,
          "compression_ratio": 1.9106382978723404,
          "no_speech_prob": 0.07254553586244583,
          "confidence": 0.9274544641375542
        },
        {
          "id": 60,
          "start": 224.24,
          "end": 228.56,
          "text": "So it's printing the code within that block and since it meets that conditional",
          "tokens": [
            50748,
            407,
            309,
            311,
            14699,
            264,
            3089,
            1951,
            300,
            3461,
            293,
            1670,
            309,
            13961,
            300,
            27708,
            50964
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06799409644944328,
          "compression_ratio": 1.9106382978723404,
          "no_speech_prob": 0.07254553586244583,
          "confidence": 0.9274544641375542
        },
        {
          "id": 61,
          "start": 228.56,
          "end": 231.6,
          "text": "it never executes the code within our else block.",
          "tokens": [
            50964,
            309,
            1128,
            4454,
            1819,
            264,
            3089,
            1951,
            527,
            1646,
            3461,
            13,
            51116
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06799409644944328,
          "compression_ratio": 1.9106382978723404,
          "no_speech_prob": 0.07254553586244583,
          "confidence": 0.9274544641375542
        },
        {
          "id": 62,
          "start": 231.6,
          "end": 235.6,
          "text": "Now if I was instead to change this language and set that equal to",
          "tokens": [
            51116,
            823,
            498,
            286,
            390,
            2602,
            281,
            1319,
            341,
            2856,
            293,
            992,
            300,
            2681,
            281,
            51316
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06799409644944328,
          "compression_ratio": 1.9106382978723404,
          "no_speech_prob": 0.07254553586244583,
          "confidence": 0.9274544641375542
        }
      ],
      "duration": 29.47999999999999
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 230.6,
      "end_time": 257.68,
      "text": "it never executes the code within our else block. Now if I was instead to change this language and set that equal to java and rerun this then we can see that it didn't meet the conditional for our if statement. So that evaluated to false. So then it dropped down to our else statement and executed that code. Okay so what if we wanted to check for multiple languages and execute different code for each one that we encountered. So this is where an elif statement comes in. So let's say that we wanted to check",
      "original_segments": [
        {
          "id": 63,
          "start": 235.6,
          "end": 240.32,
          "text": "java and rerun this then we can see that it didn't meet the conditional for our",
          "tokens": [
            51316,
            361,
            4061,
            293,
            43819,
            409,
            341,
            550,
            321,
            393,
            536,
            300,
            309,
            994,
            380,
            1677,
            264,
            27708,
            337,
            527,
            51552
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06799409644944328,
          "compression_ratio": 1.9106382978723404,
          "no_speech_prob": 0.07254553586244583,
          "confidence": 0.9274544641375542
        },
        {
          "id": 64,
          "start": 240.32,
          "end": 243.6,
          "text": "if statement. So that evaluated to false. So then it",
          "tokens": [
            51552,
            498,
            5629,
            13,
            407,
            300,
            25509,
            281,
            7908,
            13,
            407,
            550,
            309,
            51716
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06799409644944328,
          "compression_ratio": 1.9106382978723404,
          "no_speech_prob": 0.07254553586244583,
          "confidence": 0.9274544641375542
        },
        {
          "id": 65,
          "start": 243.6,
          "end": 246.96,
          "text": "dropped down to our else statement and executed that code.",
          "tokens": [
            50364,
            8119,
            760,
            281,
            527,
            1646,
            5629,
            293,
            17577,
            300,
            3089,
            13,
            50532
          ],
          "temperature": 0.0,
          "avg_logprob": -0.054478402795462774,
          "compression_ratio": 1.8938775510204082,
          "no_speech_prob": 0.0967036634683609,
          "confidence": 0.9032963365316391
        },
        {
          "id": 66,
          "start": 246.96,
          "end": 250.0,
          "text": "Okay so what if we wanted to check for multiple languages",
          "tokens": [
            50532,
            1033,
            370,
            437,
            498,
            321,
            1415,
            281,
            1520,
            337,
            3866,
            8650,
            50684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.054478402795462774,
          "compression_ratio": 1.8938775510204082,
          "no_speech_prob": 0.0967036634683609,
          "confidence": 0.9032963365316391
        },
        {
          "id": 67,
          "start": 250.0,
          "end": 253.2,
          "text": "and execute different code for each one that we encountered.",
          "tokens": [
            50684,
            293,
            14483,
            819,
            3089,
            337,
            1184,
            472,
            300,
            321,
            20381,
            13,
            50844
          ],
          "temperature": 0.0,
          "avg_logprob": -0.054478402795462774,
          "compression_ratio": 1.8938775510204082,
          "no_speech_prob": 0.0967036634683609,
          "confidence": 0.9032963365316391
        },
        {
          "id": 68,
          "start": 253.2,
          "end": 257.68,
          "text": "So this is where an elif statement comes in. So let's say that we wanted to check",
          "tokens": [
            50844,
            407,
            341,
            307,
            689,
            364,
            806,
            351,
            5629,
            1487,
            294,
            13,
            407,
            718,
            311,
            584,
            300,
            321,
            1415,
            281,
            1520,
            51068
          ],
          "temperature": 0.0,
          "avg_logprob": -0.054478402795462774,
          "compression_ratio": 1.8938775510204082,
          "no_speech_prob": 0.0967036634683609,
          "confidence": 0.9032963365316391
        }
      ],
      "duration": 27.080000000000013
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 252.68,
      "end_time": 280.15999999999997,
      "text": "and execute different code for each one that we encountered. So this is where an elif statement comes in. So let's say that we wanted to check if the language was equal to python and if it wasn't then we wanted to check if it was equal to java and if it was neither of those then we would just print out no match. So we'll add our additional check after our if statement by putting in an elif and again make sure that your indentation is back to this base level because we're no longer in the if",
      "original_segments": [
        {
          "id": 69,
          "start": 257.68,
          "end": 262.24,
          "text": "if the language was equal to python and if it wasn't then we wanted to",
          "tokens": [
            51068,
            498,
            264,
            2856,
            390,
            2681,
            281,
            38797,
            293,
            498,
            309,
            2067,
            380,
            550,
            321,
            1415,
            281,
            51296
          ],
          "temperature": 0.0,
          "avg_logprob": -0.054478402795462774,
          "compression_ratio": 1.8938775510204082,
          "no_speech_prob": 0.0967036634683609,
          "confidence": 0.9032963365316391
        },
        {
          "id": 70,
          "start": 262.24,
          "end": 265.68,
          "text": "check if it was equal to java and if it was neither of those",
          "tokens": [
            51296,
            1520,
            498,
            309,
            390,
            2681,
            281,
            361,
            4061,
            293,
            498,
            309,
            390,
            9662,
            295,
            729,
            51468
          ],
          "temperature": 0.0,
          "avg_logprob": -0.054478402795462774,
          "compression_ratio": 1.8938775510204082,
          "no_speech_prob": 0.0967036634683609,
          "confidence": 0.9032963365316391
        },
        {
          "id": 71,
          "start": 265.68,
          "end": 269.76,
          "text": "then we would just print out no match. So we'll add our additional check",
          "tokens": [
            51468,
            550,
            321,
            576,
            445,
            4482,
            484,
            572,
            2995,
            13,
            407,
            321,
            603,
            909,
            527,
            4497,
            1520,
            51672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.054478402795462774,
          "compression_ratio": 1.8938775510204082,
          "no_speech_prob": 0.0967036634683609,
          "confidence": 0.9032963365316391
        },
        {
          "id": 72,
          "start": 269.76,
          "end": 275.92,
          "text": "after our if statement by putting in an elif and again make sure that your",
          "tokens": [
            50364,
            934,
            527,
            498,
            5629,
            538,
            3372,
            294,
            364,
            806,
            351,
            293,
            797,
            652,
            988,
            300,
            428,
            50672
          ],
          "temperature": 0.0,
          "avg_logprob": -0.053776487708091736,
          "compression_ratio": 1.6543778801843319,
          "no_speech_prob": 0.1742256134748459,
          "confidence": 0.8257743865251541
        },
        {
          "id": 73,
          "start": 275.92,
          "end": 280.15999999999997,
          "text": "indentation is back to this base level because we're no longer in the if",
          "tokens": [
            50672,
            44494,
            399,
            307,
            646,
            281,
            341,
            3096,
            1496,
            570,
            321,
            434,
            572,
            2854,
            294,
            264,
            498,
            50884
          ],
          "temperature": 0.0,
          "avg_logprob": -0.053776487708091736,
          "compression_ratio": 1.6543778801843319,
          "no_speech_prob": 0.1742256134748459,
          "confidence": 0.8257743865251541
        }
      ],
      "duration": 27.47999999999996
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 275.15999999999997,
      "end_time": 304.71999999999997,
      "text": "after our if statement by putting in an elif and again make sure that your indentation is back to this base level because we're no longer in the if block. So now I'm just going to copy this code here and say if the language is equal to java and put in our colon and then we'll grab this and just say print language is java. So basically what this is saying is if the language is equal to python then execute this code. If it's not then run a second conditional and see if it's equal to",
      "original_segments": [
        {
          "id": 74,
          "start": 280.15999999999997,
          "end": 283.52,
          "text": "block. So now I'm just going to copy this code",
          "tokens": [
            50884,
            3461,
            13,
            407,
            586,
            286,
            478,
            445,
            516,
            281,
            5055,
            341,
            3089,
            51052
          ],
          "temperature": 0.0,
          "avg_logprob": -0.053776487708091736,
          "compression_ratio": 1.6543778801843319,
          "no_speech_prob": 0.1742256134748459,
          "confidence": 0.8257743865251541
        },
        {
          "id": 75,
          "start": 283.52,
          "end": 287.52,
          "text": "here and say if the language is equal to java",
          "tokens": [
            51052,
            510,
            293,
            584,
            498,
            264,
            2856,
            307,
            2681,
            281,
            361,
            4061,
            51252
          ],
          "temperature": 0.0,
          "avg_logprob": -0.053776487708091736,
          "compression_ratio": 1.6543778801843319,
          "no_speech_prob": 0.1742256134748459,
          "confidence": 0.8257743865251541
        },
        {
          "id": 76,
          "start": 287.52,
          "end": 290.71999999999997,
          "text": "and put in our colon and then we'll grab this",
          "tokens": [
            51252,
            293,
            829,
            294,
            527,
            8255,
            293,
            550,
            321,
            603,
            4444,
            341,
            51412
          ],
          "temperature": 0.0,
          "avg_logprob": -0.053776487708091736,
          "compression_ratio": 1.6543778801843319,
          "no_speech_prob": 0.1742256134748459,
          "confidence": 0.8257743865251541
        },
        {
          "id": 77,
          "start": 290.71999999999997,
          "end": 296.32,
          "text": "and just say print language is java. So basically what this is saying is",
          "tokens": [
            51412,
            293,
            445,
            584,
            4482,
            2856,
            307,
            361,
            4061,
            13,
            407,
            1936,
            437,
            341,
            307,
            1566,
            307,
            51692
          ],
          "temperature": 0.0,
          "avg_logprob": -0.053776487708091736,
          "compression_ratio": 1.6543778801843319,
          "no_speech_prob": 0.1742256134748459,
          "confidence": 0.8257743865251541
        },
        {
          "id": 78,
          "start": 296.32,
          "end": 300.0,
          "text": "if the language is equal to python then execute this code.",
          "tokens": [
            50364,
            498,
            264,
            2856,
            307,
            2681,
            281,
            38797,
            550,
            14483,
            341,
            3089,
            13,
            50548
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06623465850435455,
          "compression_ratio": 1.9787234042553192,
          "no_speech_prob": 0.06732109934091568,
          "confidence": 0.9326789006590843
        },
        {
          "id": 79,
          "start": 300.0,
          "end": 304.71999999999997,
          "text": "If it's not then run a second conditional and see if it's equal to",
          "tokens": [
            50548,
            759,
            309,
            311,
            406,
            550,
            1190,
            257,
            1150,
            27708,
            293,
            536,
            498,
            309,
            311,
            2681,
            281,
            50784
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06623465850435455,
          "compression_ratio": 1.9787234042553192,
          "no_speech_prob": 0.06732109934091568,
          "confidence": 0.9326789006590843
        }
      ],
      "duration": 29.560000000000002
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 299.71999999999997,
      "end_time": 329.35999999999996,
      "text": "if the language is equal to python then execute this code. If it's not then run a second conditional and see if it's equal to java and if it is then run this code and if none of those conditionals are met then print no match. So now if we run this then we can see that it executed the print statement that the language is java and none of these other statements were executed. Now if you're coming from another language you might be wondering if python has a switch case statement. Now if you don't know what a switch case statement is then it's not a big deal. Basically it's just a way to check",
      "original_segments": [
        {
          "id": 80,
          "start": 304.71999999999997,
          "end": 309.36,
          "text": "java and if it is then run this code and if none of those conditionals are met",
          "tokens": [
            50784,
            361,
            4061,
            293,
            498,
            309,
            307,
            550,
            1190,
            341,
            3089,
            293,
            498,
            6022,
            295,
            729,
            4188,
            1124,
            366,
            1131,
            51016
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06623465850435455,
          "compression_ratio": 1.9787234042553192,
          "no_speech_prob": 0.06732109934091568,
          "confidence": 0.9326789006590843
        },
        {
          "id": 81,
          "start": 309.36,
          "end": 314.24,
          "text": "then print no match. So now if we run this then we can see that it executed the",
          "tokens": [
            51016,
            550,
            4482,
            572,
            2995,
            13,
            407,
            586,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            309,
            17577,
            264,
            51260
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06623465850435455,
          "compression_ratio": 1.9787234042553192,
          "no_speech_prob": 0.06732109934091568,
          "confidence": 0.9326789006590843
        },
        {
          "id": 82,
          "start": 314.24,
          "end": 318.15999999999997,
          "text": "print statement that the language is java and none of these other statements",
          "tokens": [
            51260,
            4482,
            5629,
            300,
            264,
            2856,
            307,
            361,
            4061,
            293,
            6022,
            295,
            613,
            661,
            12363,
            51456
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06623465850435455,
          "compression_ratio": 1.9787234042553192,
          "no_speech_prob": 0.06732109934091568,
          "confidence": 0.9326789006590843
        },
        {
          "id": 83,
          "start": 318.15999999999997,
          "end": 320.32,
          "text": "were executed. Now if you're coming from another",
          "tokens": [
            51456,
            645,
            17577,
            13,
            823,
            498,
            291,
            434,
            1348,
            490,
            1071,
            51564
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06623465850435455,
          "compression_ratio": 1.9787234042553192,
          "no_speech_prob": 0.06732109934091568,
          "confidence": 0.9326789006590843
        },
        {
          "id": 84,
          "start": 320.32,
          "end": 323.52,
          "text": "language you might be wondering if python has a switch",
          "tokens": [
            51564,
            2856,
            291,
            1062,
            312,
            6359,
            498,
            38797,
            575,
            257,
            3679,
            51724
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06623465850435455,
          "compression_ratio": 1.9787234042553192,
          "no_speech_prob": 0.06732109934091568,
          "confidence": 0.9326789006590843
        },
        {
          "id": 85,
          "start": 323.52,
          "end": 326.64,
          "text": "case statement. Now if you don't know what a switch case statement is then",
          "tokens": [
            50364,
            1389,
            5629,
            13,
            823,
            498,
            291,
            500,
            380,
            458,
            437,
            257,
            3679,
            1389,
            5629,
            307,
            550,
            50520
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06203182673050185,
          "compression_ratio": 1.7790697674418605,
          "no_speech_prob": 0.31346797943115234,
          "confidence": 0.6865320205688477
        },
        {
          "id": 86,
          "start": 326.64,
          "end": 329.35999999999996,
          "text": "it's not a big deal. Basically it's just a way to check",
          "tokens": [
            50520,
            309,
            311,
            406,
            257,
            955,
            2028,
            13,
            8537,
            309,
            311,
            445,
            257,
            636,
            281,
            1520,
            50656
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06203182673050185,
          "compression_ratio": 1.7790697674418605,
          "no_speech_prob": 0.31346797943115234,
          "confidence": 0.6865320205688477
        }
      ],
      "duration": 29.639999999999986
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 324.35999999999996,
      "end_time": 350.56,
      "text": "case statement. Now if you don't know what a switch case statement is then it's not a big deal. Basically it's just a way to check multiple values and python doesn't have a switch case and the reason is because the if, elif, and else statements are plenty clean enough to do this already. So if we wanted to check another language then we could just keep adding elif statements. So if I wanted to add a javascript check to the list then I could just come down",
      "original_segments": [
        {
          "id": 87,
          "start": 329.35999999999996,
          "end": 332.96,
          "text": "multiple values and python doesn't have a switch case",
          "tokens": [
            50656,
            3866,
            4190,
            293,
            38797,
            1177,
            380,
            362,
            257,
            3679,
            1389,
            50836
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06203182673050185,
          "compression_ratio": 1.7790697674418605,
          "no_speech_prob": 0.31346797943115234,
          "confidence": 0.6865320205688477
        },
        {
          "id": 88,
          "start": 332.96,
          "end": 336.71999999999997,
          "text": "and the reason is because the if, elif, and else statements",
          "tokens": [
            50836,
            293,
            264,
            1778,
            307,
            570,
            264,
            498,
            11,
            806,
            351,
            11,
            293,
            1646,
            12363,
            51024
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06203182673050185,
          "compression_ratio": 1.7790697674418605,
          "no_speech_prob": 0.31346797943115234,
          "confidence": 0.6865320205688477
        },
        {
          "id": 89,
          "start": 336.71999999999997,
          "end": 340.64,
          "text": "are plenty clean enough to do this already. So if we wanted to check",
          "tokens": [
            51024,
            366,
            7140,
            2541,
            1547,
            281,
            360,
            341,
            1217,
            13,
            407,
            498,
            321,
            1415,
            281,
            1520,
            51220
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06203182673050185,
          "compression_ratio": 1.7790697674418605,
          "no_speech_prob": 0.31346797943115234,
          "confidence": 0.6865320205688477
        },
        {
          "id": 90,
          "start": 340.64,
          "end": 344.47999999999996,
          "text": "another language then we could just keep adding elif statements.",
          "tokens": [
            51220,
            1071,
            2856,
            550,
            321,
            727,
            445,
            1066,
            5127,
            806,
            351,
            12363,
            13,
            51412
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06203182673050185,
          "compression_ratio": 1.7790697674418605,
          "no_speech_prob": 0.31346797943115234,
          "confidence": 0.6865320205688477
        },
        {
          "id": 91,
          "start": 344.47999999999996,
          "end": 350.56,
          "text": "So if I wanted to add a javascript check to the list then I could just come down",
          "tokens": [
            51412,
            407,
            498,
            286,
            1415,
            281,
            909,
            257,
            361,
            37331,
            5944,
            1520,
            281,
            264,
            1329,
            550,
            286,
            727,
            445,
            808,
            760,
            51716
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06203182673050185,
          "compression_ratio": 1.7790697674418605,
          "no_speech_prob": 0.31346797943115234,
          "confidence": 0.6865320205688477
        }
      ],
      "duration": 26.200000000000045
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 345.56,
      "end_time": 374.8,
      "text": "So if I wanted to add a javascript check to the list then I could just come down here if I copy all of this then I could just do another test here for javascript and then say if the language is javascript then execute this code here and this basically gives us the same functionality as a switch case from another language. Okay so now I'm going to remove some code here so that we can take a look at another example. Now in addition to these comparisons that we have here",
      "original_segments": [
        {
          "id": 92,
          "start": 350.56,
          "end": 354.96,
          "text": "here if I copy all of this then I could just do",
          "tokens": [
            50364,
            510,
            498,
            286,
            5055,
            439,
            295,
            341,
            550,
            286,
            727,
            445,
            360,
            50584
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05662883845242587,
          "compression_ratio": 1.7903225806451613,
          "no_speech_prob": 0.12304141372442245,
          "confidence": 0.8769585862755775
        },
        {
          "id": 93,
          "start": 354.96,
          "end": 359.76,
          "text": "another test here for javascript and then say if the language is javascript",
          "tokens": [
            50584,
            1071,
            1500,
            510,
            337,
            361,
            37331,
            5944,
            293,
            550,
            584,
            498,
            264,
            2856,
            307,
            361,
            37331,
            5944,
            50824
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05662883845242587,
          "compression_ratio": 1.7903225806451613,
          "no_speech_prob": 0.12304141372442245,
          "confidence": 0.8769585862755775
        },
        {
          "id": 94,
          "start": 359.76,
          "end": 363.36,
          "text": "then execute this code here and this basically gives us the same",
          "tokens": [
            50824,
            550,
            14483,
            341,
            3089,
            510,
            293,
            341,
            1936,
            2709,
            505,
            264,
            912,
            51004
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05662883845242587,
          "compression_ratio": 1.7903225806451613,
          "no_speech_prob": 0.12304141372442245,
          "confidence": 0.8769585862755775
        },
        {
          "id": 95,
          "start": 363.36,
          "end": 367.28,
          "text": "functionality as a switch case from another language. Okay so now I'm",
          "tokens": [
            51004,
            14980,
            382,
            257,
            3679,
            1389,
            490,
            1071,
            2856,
            13,
            1033,
            370,
            586,
            286,
            478,
            51200
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05662883845242587,
          "compression_ratio": 1.7903225806451613,
          "no_speech_prob": 0.12304141372442245,
          "confidence": 0.8769585862755775
        },
        {
          "id": 96,
          "start": 367.28,
          "end": 370.48,
          "text": "going to remove some code here so that we can take a look at",
          "tokens": [
            51200,
            516,
            281,
            4159,
            512,
            3089,
            510,
            370,
            300,
            321,
            393,
            747,
            257,
            574,
            412,
            51360
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05662883845242587,
          "compression_ratio": 1.7903225806451613,
          "no_speech_prob": 0.12304141372442245,
          "confidence": 0.8769585862755775
        },
        {
          "id": 97,
          "start": 370.48,
          "end": 374.8,
          "text": "another example. Now in addition to these comparisons that we have here",
          "tokens": [
            51360,
            1071,
            1365,
            13,
            823,
            294,
            4500,
            281,
            613,
            33157,
            300,
            321,
            362,
            510,
            51576
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05662883845242587,
          "compression_ratio": 1.7903225806451613,
          "no_speech_prob": 0.12304141372442245,
          "confidence": 0.8769585862755775
        }
      ],
      "duration": 29.24000000000001
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 369.8,
      "end_time": 397.84,
      "text": "going to remove some code here so that we can take a look at another example. Now in addition to these comparisons that we have here we also have some boolean operations that we can use and these are and or and not. So for example let me create two variables here and I'll call one of these user and set this equal to a string of admin and then I'll create a another variable here called logged in and I'll set that equal to true. Now let's say that we only wanted to",
      "original_segments": [
        {
          "id": 98,
          "start": 374.8,
          "end": 378.0,
          "text": "we also have some boolean operations that we can use",
          "tokens": [
            51576,
            321,
            611,
            362,
            512,
            748,
            4812,
            282,
            7705,
            300,
            321,
            393,
            764,
            51736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05662883845242587,
          "compression_ratio": 1.7903225806451613,
          "no_speech_prob": 0.12304141372442245,
          "confidence": 0.8769585862755775
        },
        {
          "id": 99,
          "start": 378.0,
          "end": 384.64,
          "text": "and these are and or and not. So for example let me create two",
          "tokens": [
            50364,
            293,
            613,
            366,
            293,
            420,
            293,
            406,
            13,
            407,
            337,
            1365,
            718,
            385,
            1884,
            732,
            50696
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05771946907043457,
          "compression_ratio": 1.9166666666666667,
          "no_speech_prob": 0.1180974468588829,
          "confidence": 0.8819025531411171
        },
        {
          "id": 100,
          "start": 384.64,
          "end": 387.68,
          "text": "variables here and I'll call one of these user and",
          "tokens": [
            50696,
            9102,
            510,
            293,
            286,
            603,
            818,
            472,
            295,
            613,
            4195,
            293,
            50848
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05771946907043457,
          "compression_ratio": 1.9166666666666667,
          "no_speech_prob": 0.1180974468588829,
          "confidence": 0.8819025531411171
        },
        {
          "id": 101,
          "start": 387.68,
          "end": 391.76,
          "text": "set this equal to a string of admin and then I'll",
          "tokens": [
            50848,
            992,
            341,
            2681,
            281,
            257,
            6798,
            295,
            24236,
            293,
            550,
            286,
            603,
            51052
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05771946907043457,
          "compression_ratio": 1.9166666666666667,
          "no_speech_prob": 0.1180974468588829,
          "confidence": 0.8819025531411171
        },
        {
          "id": 102,
          "start": 391.76,
          "end": 394.4,
          "text": "create a another variable here called logged in",
          "tokens": [
            51052,
            1884,
            257,
            1071,
            7006,
            510,
            1219,
            27231,
            294,
            51184
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05771946907043457,
          "compression_ratio": 1.9166666666666667,
          "no_speech_prob": 0.1180974468588829,
          "confidence": 0.8819025531411171
        },
        {
          "id": 103,
          "start": 394.4,
          "end": 397.84,
          "text": "and I'll set that equal to true. Now let's say that we only wanted to",
          "tokens": [
            51184,
            293,
            286,
            603,
            992,
            300,
            2681,
            281,
            2074,
            13,
            823,
            718,
            311,
            584,
            300,
            321,
            787,
            1415,
            281,
            51356
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05771946907043457,
          "compression_ratio": 1.9166666666666667,
          "no_speech_prob": 0.1180974468588829,
          "confidence": 0.8819025531411171
        }
      ],
      "duration": 28.039999999999964
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 392.84,
      "end_time": 420.15999999999997,
      "text": "create a another variable here called logged in and I'll set that equal to true. Now let's say that we only wanted to execute some code if the user is equal to admin and logged in is equal to true. Now to do this we can use the and keyword so I could say if user equal equals admin and then we'll use this and keyword and logged in and now we can write the code if this is true so I'll just print out a",
      "original_segments": [
        {
          "id": 104,
          "start": 397.84,
          "end": 401.84,
          "text": "execute some code if the user is equal to admin and",
          "tokens": [
            51356,
            14483,
            512,
            3089,
            498,
            264,
            4195,
            307,
            2681,
            281,
            24236,
            293,
            51556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05771946907043457,
          "compression_ratio": 1.9166666666666667,
          "no_speech_prob": 0.1180974468588829,
          "confidence": 0.8819025531411171
        },
        {
          "id": 105,
          "start": 401.84,
          "end": 405.2,
          "text": "logged in is equal to true. Now to do this we can use the",
          "tokens": [
            51556,
            27231,
            294,
            307,
            2681,
            281,
            2074,
            13,
            823,
            281,
            360,
            341,
            321,
            393,
            764,
            264,
            51724
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05771946907043457,
          "compression_ratio": 1.9166666666666667,
          "no_speech_prob": 0.1180974468588829,
          "confidence": 0.8819025531411171
        },
        {
          "id": 106,
          "start": 405.2,
          "end": 412.0,
          "text": "and keyword so I could say if user equal equals admin and then we'll use",
          "tokens": [
            50364,
            293,
            20428,
            370,
            286,
            727,
            584,
            498,
            4195,
            2681,
            6915,
            24236,
            293,
            550,
            321,
            603,
            764,
            50704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0824986748073412,
          "compression_ratio": 1.9553072625698324,
          "no_speech_prob": 0.03133018687367439,
          "confidence": 0.9686698131263256
        },
        {
          "id": 107,
          "start": 412.0,
          "end": 416.4,
          "text": "this and keyword and logged in and now we can",
          "tokens": [
            50704,
            341,
            293,
            20428,
            293,
            27231,
            294,
            293,
            586,
            321,
            393,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0824986748073412,
          "compression_ratio": 1.9553072625698324,
          "no_speech_prob": 0.03133018687367439,
          "confidence": 0.9686698131263256
        },
        {
          "id": 108,
          "start": 416.4,
          "end": 420.15999999999997,
          "text": "write the code if this is true so I'll just print out a",
          "tokens": [
            50924,
            2464,
            264,
            3089,
            498,
            341,
            307,
            2074,
            370,
            286,
            603,
            445,
            4482,
            484,
            257,
            51112
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0824986748073412,
          "compression_ratio": 1.9553072625698324,
          "no_speech_prob": 0.03133018687367439,
          "confidence": 0.9686698131263256
        }
      ],
      "duration": 27.319999999999993
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 415.15999999999997,
      "end_time": 441.44,
      "text": "this and keyword and logged in and now we can write the code if this is true so I'll just print out a string that says admin page and now we can put in an else block and then for the else block I'll just say if neither of these are true then print out the string that just says bad creds for credentials and let me bring this down just a little bit here and just to give us a little bit of extra room I'm actually going to delete",
      "original_segments": [
        {
          "id": 109,
          "start": 420.15999999999997,
          "end": 425.03999999999996,
          "text": "string that says admin page and now we can put in an else",
          "tokens": [
            51112,
            6798,
            300,
            1619,
            24236,
            3028,
            293,
            586,
            321,
            393,
            829,
            294,
            364,
            1646,
            51356
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0824986748073412,
          "compression_ratio": 1.9553072625698324,
          "no_speech_prob": 0.03133018687367439,
          "confidence": 0.9686698131263256
        },
        {
          "id": 110,
          "start": 425.03999999999996,
          "end": 428.56,
          "text": "block and then for the else block I'll just say if neither of these",
          "tokens": [
            51356,
            3461,
            293,
            550,
            337,
            264,
            1646,
            3461,
            286,
            603,
            445,
            584,
            498,
            9662,
            295,
            613,
            51532
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0824986748073412,
          "compression_ratio": 1.9553072625698324,
          "no_speech_prob": 0.03133018687367439,
          "confidence": 0.9686698131263256
        },
        {
          "id": 111,
          "start": 428.56,
          "end": 432.88,
          "text": "are true then print out the string that just says",
          "tokens": [
            51532,
            366,
            2074,
            550,
            4482,
            484,
            264,
            6798,
            300,
            445,
            1619,
            51748
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0824986748073412,
          "compression_ratio": 1.9553072625698324,
          "no_speech_prob": 0.03133018687367439,
          "confidence": 0.9686698131263256
        },
        {
          "id": 112,
          "start": 432.88,
          "end": 437.28,
          "text": "bad creds for credentials and let me bring this down just a little bit",
          "tokens": [
            50364,
            1578,
            3864,
            82,
            337,
            27404,
            293,
            718,
            385,
            1565,
            341,
            760,
            445,
            257,
            707,
            857,
            50584
          ],
          "temperature": 0.0,
          "avg_logprob": -0.050426964211252936,
          "compression_ratio": 1.8040816326530613,
          "no_speech_prob": 0.1078154593706131,
          "confidence": 0.8921845406293869
        },
        {
          "id": 113,
          "start": 437.28,
          "end": 441.44,
          "text": "here and just to give us a little bit of extra room I'm actually going to delete",
          "tokens": [
            50584,
            510,
            293,
            445,
            281,
            976,
            505,
            257,
            707,
            857,
            295,
            2857,
            1808,
            286,
            478,
            767,
            516,
            281,
            12097,
            50792
          ],
          "temperature": 0.0,
          "avg_logprob": -0.050426964211252936,
          "compression_ratio": 1.8040816326530613,
          "no_speech_prob": 0.1078154593706131,
          "confidence": 0.8921845406293869
        }
      ],
      "duration": 26.28000000000003
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 436.44,
      "end_time": 466.32,
      "text": "bad creds for credentials and let me bring this down just a little bit here and just to give us a little bit of extra room I'm actually going to delete these comparison comments up here that we have as a reference but I will have a link to these to the github page so that you can download those if you want to have those as a reference. Okay so now if we run the code that we currently have then we can see that it printed out our admin page because both of those evaluated to true our user is equal to admin and our logged in is equal to true",
      "original_segments": [
        {
          "id": 114,
          "start": 441.44,
          "end": 445.2,
          "text": "these comparison comments up here that we have as a reference but I will have a",
          "tokens": [
            50792,
            613,
            9660,
            3053,
            493,
            510,
            300,
            321,
            362,
            382,
            257,
            6408,
            457,
            286,
            486,
            362,
            257,
            50980
          ],
          "temperature": 0.0,
          "avg_logprob": -0.050426964211252936,
          "compression_ratio": 1.8040816326530613,
          "no_speech_prob": 0.1078154593706131,
          "confidence": 0.8921845406293869
        },
        {
          "id": 115,
          "start": 445.2,
          "end": 448.48,
          "text": "link to these to the github page so that you can",
          "tokens": [
            50980,
            2113,
            281,
            613,
            281,
            264,
            290,
            355,
            836,
            3028,
            370,
            300,
            291,
            393,
            51144
          ],
          "temperature": 0.0,
          "avg_logprob": -0.050426964211252936,
          "compression_ratio": 1.8040816326530613,
          "no_speech_prob": 0.1078154593706131,
          "confidence": 0.8921845406293869
        },
        {
          "id": 116,
          "start": 448.48,
          "end": 451.52,
          "text": "download those if you want to have those as a reference.",
          "tokens": [
            51144,
            5484,
            729,
            498,
            291,
            528,
            281,
            362,
            729,
            382,
            257,
            6408,
            13,
            51296
          ],
          "temperature": 0.0,
          "avg_logprob": -0.050426964211252936,
          "compression_ratio": 1.8040816326530613,
          "no_speech_prob": 0.1078154593706131,
          "confidence": 0.8921845406293869
        },
        {
          "id": 117,
          "start": 451.52,
          "end": 455.52,
          "text": "Okay so now if we run the code that we currently have",
          "tokens": [
            51296,
            1033,
            370,
            586,
            498,
            321,
            1190,
            264,
            3089,
            300,
            321,
            4362,
            362,
            51496
          ],
          "temperature": 0.0,
          "avg_logprob": -0.050426964211252936,
          "compression_ratio": 1.8040816326530613,
          "no_speech_prob": 0.1078154593706131,
          "confidence": 0.8921845406293869
        },
        {
          "id": 118,
          "start": 455.52,
          "end": 458.8,
          "text": "then we can see that it printed out our admin page",
          "tokens": [
            51496,
            550,
            321,
            393,
            536,
            300,
            309,
            13567,
            484,
            527,
            24236,
            3028,
            51660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.050426964211252936,
          "compression_ratio": 1.8040816326530613,
          "no_speech_prob": 0.1078154593706131,
          "confidence": 0.8921845406293869
        },
        {
          "id": 119,
          "start": 458.8,
          "end": 462.64,
          "text": "because both of those evaluated to true our user",
          "tokens": [
            50364,
            570,
            1293,
            295,
            729,
            25509,
            281,
            2074,
            527,
            4195,
            50556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04658268909065091,
          "compression_ratio": 2.0358974358974358,
          "no_speech_prob": 0.2434302568435669,
          "confidence": 0.7565697431564331
        },
        {
          "id": 120,
          "start": 462.64,
          "end": 466.32,
          "text": "is equal to admin and our logged in is equal to true",
          "tokens": [
            50556,
            307,
            2681,
            281,
            24236,
            293,
            527,
            27231,
            294,
            307,
            2681,
            281,
            2074,
            50740
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04658268909065091,
          "compression_ratio": 2.0358974358974358,
          "no_speech_prob": 0.2434302568435669,
          "confidence": 0.7565697431564331
        }
      ],
      "duration": 29.879999999999995
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 461.32,
      "end_time": 488.88,
      "text": "because both of those evaluated to true our user is equal to admin and our logged in is equal to true but if I changed our logged in variable to false and rerun this and we can see that it executes our bad credentials statement because both of these didn't evaluate to true so this user equals admin evaluated to true but logged in was equal to false so and make sure that both of these have to be true now if we only care if one of these",
      "original_segments": [
        {
          "id": 121,
          "start": 466.32,
          "end": 469.84000000000003,
          "text": "but if I changed our logged in variable to false",
          "tokens": [
            50740,
            457,
            498,
            286,
            3105,
            527,
            27231,
            294,
            7006,
            281,
            7908,
            50916
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04658268909065091,
          "compression_ratio": 2.0358974358974358,
          "no_speech_prob": 0.2434302568435669,
          "confidence": 0.7565697431564331
        },
        {
          "id": 122,
          "start": 469.84000000000003,
          "end": 473.2,
          "text": "and rerun this and we can see that it executes our",
          "tokens": [
            50916,
            293,
            43819,
            409,
            341,
            293,
            321,
            393,
            536,
            300,
            309,
            4454,
            1819,
            527,
            51084
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04658268909065091,
          "compression_ratio": 2.0358974358974358,
          "no_speech_prob": 0.2434302568435669,
          "confidence": 0.7565697431564331
        },
        {
          "id": 123,
          "start": 473.2,
          "end": 477.92,
          "text": "bad credentials statement because both of these didn't evaluate to true",
          "tokens": [
            51084,
            1578,
            27404,
            5629,
            570,
            1293,
            295,
            613,
            994,
            380,
            13059,
            281,
            2074,
            51320
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04658268909065091,
          "compression_ratio": 2.0358974358974358,
          "no_speech_prob": 0.2434302568435669,
          "confidence": 0.7565697431564331
        },
        {
          "id": 124,
          "start": 477.92,
          "end": 481.68,
          "text": "so this user equals admin evaluated to true",
          "tokens": [
            51320,
            370,
            341,
            4195,
            6915,
            24236,
            25509,
            281,
            2074,
            51508
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04658268909065091,
          "compression_ratio": 2.0358974358974358,
          "no_speech_prob": 0.2434302568435669,
          "confidence": 0.7565697431564331
        },
        {
          "id": 125,
          "start": 481.68,
          "end": 486.24,
          "text": "but logged in was equal to false so and make sure that both of these have to be",
          "tokens": [
            51508,
            457,
            27231,
            294,
            390,
            2681,
            281,
            7908,
            370,
            293,
            652,
            988,
            300,
            1293,
            295,
            613,
            362,
            281,
            312,
            51736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04658268909065091,
          "compression_ratio": 2.0358974358974358,
          "no_speech_prob": 0.2434302568435669,
          "confidence": 0.7565697431564331
        },
        {
          "id": 126,
          "start": 486.24,
          "end": 488.88,
          "text": "true now if we only care if one of these",
          "tokens": [
            50364,
            2074,
            586,
            498,
            321,
            787,
            1127,
            498,
            472,
            295,
            613,
            50496
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06588846445083618,
          "compression_ratio": 1.8387096774193548,
          "no_speech_prob": 0.05223148316144943,
          "confidence": 0.9477685168385506
        }
      ],
      "duration": 27.560000000000002
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 483.88,
      "end_time": 512.96,
      "text": "but logged in was equal to false so and make sure that both of these have to be true now if we only care if one of these evaluate to true then we can use the or keyword so I could change this and to an or and now if I run this then you can see that it printed out our admin page statement because that evaluated to true because only one or the other needed to be true and our user was equal to admin so it didn't matter if the login was false or not because it only had to be one",
      "original_segments": [
        {
          "id": 127,
          "start": 488.88,
          "end": 492.64,
          "text": "evaluate to true then we can use the or keyword so I",
          "tokens": [
            50496,
            13059,
            281,
            2074,
            550,
            321,
            393,
            764,
            264,
            420,
            20428,
            370,
            286,
            50684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06588846445083618,
          "compression_ratio": 1.8387096774193548,
          "no_speech_prob": 0.05223148316144943,
          "confidence": 0.9477685168385506
        },
        {
          "id": 128,
          "start": 492.64,
          "end": 497.44,
          "text": "could change this and to an or and now if I run this then you",
          "tokens": [
            50684,
            727,
            1319,
            341,
            293,
            281,
            364,
            420,
            293,
            586,
            498,
            286,
            1190,
            341,
            550,
            291,
            50924
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06588846445083618,
          "compression_ratio": 1.8387096774193548,
          "no_speech_prob": 0.05223148316144943,
          "confidence": 0.9477685168385506
        },
        {
          "id": 129,
          "start": 497.44,
          "end": 500.08,
          "text": "can see that it printed out our admin page statement",
          "tokens": [
            50924,
            393,
            536,
            300,
            309,
            13567,
            484,
            527,
            24236,
            3028,
            5629,
            51056
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06588846445083618,
          "compression_ratio": 1.8387096774193548,
          "no_speech_prob": 0.05223148316144943,
          "confidence": 0.9477685168385506
        },
        {
          "id": 130,
          "start": 500.08,
          "end": 504.16,
          "text": "because that evaluated to true because only one or the other",
          "tokens": [
            51056,
            570,
            300,
            25509,
            281,
            2074,
            570,
            787,
            472,
            420,
            264,
            661,
            51260
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06588846445083618,
          "compression_ratio": 1.8387096774193548,
          "no_speech_prob": 0.05223148316144943,
          "confidence": 0.9477685168385506
        },
        {
          "id": 131,
          "start": 504.16,
          "end": 509.28000000000003,
          "text": "needed to be true and our user was equal to admin so it didn't matter",
          "tokens": [
            51260,
            2978,
            281,
            312,
            2074,
            293,
            527,
            4195,
            390,
            2681,
            281,
            24236,
            370,
            309,
            994,
            380,
            1871,
            51516
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06588846445083618,
          "compression_ratio": 1.8387096774193548,
          "no_speech_prob": 0.05223148316144943,
          "confidence": 0.9477685168385506
        },
        {
          "id": 132,
          "start": 509.28000000000003,
          "end": 512.96,
          "text": "if the login was false or not because it only had to be one",
          "tokens": [
            51516,
            498,
            264,
            24276,
            390,
            7908,
            420,
            406,
            570,
            309,
            787,
            632,
            281,
            312,
            472,
            51700
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06588846445083618,
          "compression_ratio": 1.8387096774193548,
          "no_speech_prob": 0.05223148316144943,
          "confidence": 0.9477685168385506
        }
      ],
      "duration": 29.08000000000004
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 507.96000000000004,
      "end_time": 536.08,
      "text": "needed to be true and our user was equal to admin so it didn't matter if the login was false or not because it only had to be one or the other now this not operation is just used to switch a bullion so it'll change a true to a false and a false to a true so for example if we were to say if not logged in then we will print a string here that just says please log in and else print",
      "original_segments": [
        {
          "id": 133,
          "start": 512.96,
          "end": 518.72,
          "text": "or the other now this not operation is just used to switch a bullion so",
          "tokens": [
            50364,
            420,
            264,
            661,
            586,
            341,
            406,
            6916,
            307,
            445,
            1143,
            281,
            3679,
            257,
            4693,
            313,
            370,
            50652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06710403139998274,
          "compression_ratio": 1.7087912087912087,
          "no_speech_prob": 0.28194400668144226,
          "confidence": 0.7180559933185577
        },
        {
          "id": 134,
          "start": 518.72,
          "end": 522.1600000000001,
          "text": "it'll change a true to a false and a false to a true",
          "tokens": [
            50652,
            309,
            603,
            1319,
            257,
            2074,
            281,
            257,
            7908,
            293,
            257,
            7908,
            281,
            257,
            2074,
            50824
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06710403139998274,
          "compression_ratio": 1.7087912087912087,
          "no_speech_prob": 0.28194400668144226,
          "confidence": 0.7180559933185577
        },
        {
          "id": 135,
          "start": 522.1600000000001,
          "end": 529.12,
          "text": "so for example if we were to say if not logged in then we will",
          "tokens": [
            50824,
            370,
            337,
            1365,
            498,
            321,
            645,
            281,
            584,
            498,
            406,
            27231,
            294,
            550,
            321,
            486,
            51172
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06710403139998274,
          "compression_ratio": 1.7087912087912087,
          "no_speech_prob": 0.28194400668144226,
          "confidence": 0.7180559933185577
        },
        {
          "id": 136,
          "start": 529.12,
          "end": 536.08,
          "text": "print a string here that just says please log in and else print",
          "tokens": [
            51172,
            4482,
            257,
            6798,
            510,
            300,
            445,
            1619,
            1767,
            3565,
            294,
            293,
            1646,
            4482,
            51520
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06710403139998274,
          "compression_ratio": 1.7087912087912087,
          "no_speech_prob": 0.28194400668144226,
          "confidence": 0.7180559933185577
        }
      ],
      "duration": 28.120000000000005
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 531.08,
      "end_time": 560.8,
      "text": "print a string here that just says please log in and else print welcome so we can see that currently our logged in value is equal to false now when we say not logged in then it'll evaluate to true because this not just switches that false to a true now I know that that can sound a little confusing but basically you can just think of it as saying not false if not false which would evaluate to true so if we run this then it prints out",
      "original_segments": [
        {
          "id": 137,
          "start": 536.08,
          "end": 539.52,
          "text": "welcome so we can see that currently our logged in value is",
          "tokens": [
            51520,
            2928,
            370,
            321,
            393,
            536,
            300,
            4362,
            527,
            27231,
            294,
            2158,
            307,
            51692
          ],
          "temperature": 0.0,
          "avg_logprob": -0.06710403139998274,
          "compression_ratio": 1.7087912087912087,
          "no_speech_prob": 0.28194400668144226,
          "confidence": 0.7180559933185577
        },
        {
          "id": 138,
          "start": 539.52,
          "end": 545.76,
          "text": "equal to false now when we say not logged in then it'll evaluate to true",
          "tokens": [
            50364,
            2681,
            281,
            7908,
            586,
            562,
            321,
            584,
            406,
            27231,
            294,
            550,
            309,
            603,
            13059,
            281,
            2074,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07708844134682104,
          "compression_ratio": 1.8564593301435406,
          "no_speech_prob": 0.06793556362390518,
          "confidence": 0.9320644363760948
        },
        {
          "id": 139,
          "start": 545.76,
          "end": 549.04,
          "text": "because this not just switches that false to a true",
          "tokens": [
            50676,
            570,
            341,
            406,
            445,
            19458,
            300,
            7908,
            281,
            257,
            2074,
            50840
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07708844134682104,
          "compression_ratio": 1.8564593301435406,
          "no_speech_prob": 0.06793556362390518,
          "confidence": 0.9320644363760948
        },
        {
          "id": 140,
          "start": 549.04,
          "end": 552.72,
          "text": "now I know that that can sound a little confusing but basically you can just",
          "tokens": [
            50840,
            586,
            286,
            458,
            300,
            300,
            393,
            1626,
            257,
            707,
            13181,
            457,
            1936,
            291,
            393,
            445,
            51024
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07708844134682104,
          "compression_ratio": 1.8564593301435406,
          "no_speech_prob": 0.06793556362390518,
          "confidence": 0.9320644363760948
        },
        {
          "id": 141,
          "start": 552.72,
          "end": 557.04,
          "text": "think of it as saying not false if not false which would",
          "tokens": [
            51024,
            519,
            295,
            309,
            382,
            1566,
            406,
            7908,
            498,
            406,
            7908,
            597,
            576,
            51240
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07708844134682104,
          "compression_ratio": 1.8564593301435406,
          "no_speech_prob": 0.06793556362390518,
          "confidence": 0.9320644363760948
        },
        {
          "id": 142,
          "start": 557.04,
          "end": 560.8,
          "text": "evaluate to true so if we run this then it prints out",
          "tokens": [
            51240,
            13059,
            281,
            2074,
            370,
            498,
            321,
            1190,
            341,
            550,
            309,
            22305,
            484,
            51428
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07708844134682104,
          "compression_ratio": 1.8564593301435406,
          "no_speech_prob": 0.06793556362390518,
          "confidence": 0.9320644363760948
        }
      ],
      "duration": 29.719999999999914
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 555.8,
      "end_time": 582.48,
      "text": "think of it as saying not false if not false which would evaluate to true so if we run this then it prints out please log in because not logged in evaluated to true so it ran what was in our if statement so when I had the conditionals pulled up here as a reference before so now I'm in my snippets here we remember that we had this object identity with this is keyword and I said that we'd look at the difference between that and the double equals which tests for equality",
      "original_segments": [
        {
          "id": 143,
          "start": 560.8,
          "end": 566.3199999999999,
          "text": "please log in because not logged in evaluated to true so it ran what was in",
          "tokens": [
            51428,
            1767,
            3565,
            294,
            570,
            406,
            27231,
            294,
            25509,
            281,
            2074,
            370,
            309,
            5872,
            437,
            390,
            294,
            51704
          ],
          "temperature": 0.0,
          "avg_logprob": -0.07708844134682104,
          "compression_ratio": 1.8564593301435406,
          "no_speech_prob": 0.06793556362390518,
          "confidence": 0.9320644363760948
        },
        {
          "id": 144,
          "start": 566.4000000000001,
          "end": 570.0,
          "text": "our if statement so when I had the conditionals pulled up here as a",
          "tokens": [
            50368,
            527,
            498,
            5629,
            370,
            562,
            286,
            632,
            264,
            4188,
            1124,
            7373,
            493,
            510,
            382,
            257,
            50548
          ],
          "temperature": 0.0,
          "avg_logprob": -0.062107328935102984,
          "compression_ratio": 1.874493927125506,
          "no_speech_prob": 0.5413039326667786,
          "confidence": 0.45869606733322144
        },
        {
          "id": 145,
          "start": 570.0,
          "end": 572.5600000000001,
          "text": "reference before so now I'm in my snippets here",
          "tokens": [
            50548,
            6408,
            949,
            370,
            586,
            286,
            478,
            294,
            452,
            35623,
            1385,
            510,
            50676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.062107328935102984,
          "compression_ratio": 1.874493927125506,
          "no_speech_prob": 0.5413039326667786,
          "confidence": 0.45869606733322144
        },
        {
          "id": 146,
          "start": 572.5600000000001,
          "end": 576.1600000000001,
          "text": "we remember that we had this object identity with this",
          "tokens": [
            50676,
            321,
            1604,
            300,
            321,
            632,
            341,
            2657,
            6575,
            365,
            341,
            50856
          ],
          "temperature": 0.0,
          "avg_logprob": -0.062107328935102984,
          "compression_ratio": 1.874493927125506,
          "no_speech_prob": 0.5413039326667786,
          "confidence": 0.45869606733322144
        },
        {
          "id": 147,
          "start": 576.1600000000001,
          "end": 579.2,
          "text": "is keyword and I said that we'd look at the difference between",
          "tokens": [
            50856,
            307,
            20428,
            293,
            286,
            848,
            300,
            321,
            1116,
            574,
            412,
            264,
            2649,
            1296,
            51008
          ],
          "temperature": 0.0,
          "avg_logprob": -0.062107328935102984,
          "compression_ratio": 1.874493927125506,
          "no_speech_prob": 0.5413039326667786,
          "confidence": 0.45869606733322144
        },
        {
          "id": 148,
          "start": 579.2,
          "end": 582.48,
          "text": "that and the double equals which tests for equality",
          "tokens": [
            51008,
            300,
            293,
            264,
            3834,
            6915,
            597,
            6921,
            337,
            14949,
            51172
          ],
          "temperature": 0.0,
          "avg_logprob": -0.062107328935102984,
          "compression_ratio": 1.874493927125506,
          "no_speech_prob": 0.5413039326667786,
          "confidence": 0.45869606733322144
        }
      ],
      "duration": 26.680000000000064
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 577.48,
      "end_time": 606.8,
      "text": "is keyword and I said that we'd look at the difference between that and the double equals which tests for equality now like I said before that object identity tests if two objects have the same id which basically means if they're the same object in memory so two objects can actually be equal and not be the same object in memory so for example let me create two different lists here so I'll just call one list equal to a and I'll put in the values of one two three another list",
      "original_segments": [
        {
          "id": 149,
          "start": 582.48,
          "end": 586.08,
          "text": "now like I said before that object identity",
          "tokens": [
            51172,
            586,
            411,
            286,
            848,
            949,
            300,
            2657,
            6575,
            51352
          ],
          "temperature": 0.0,
          "avg_logprob": -0.062107328935102984,
          "compression_ratio": 1.874493927125506,
          "no_speech_prob": 0.5413039326667786,
          "confidence": 0.45869606733322144
        },
        {
          "id": 150,
          "start": 586.08,
          "end": 590.72,
          "text": "tests if two objects have the same id which basically means if they're the",
          "tokens": [
            51352,
            6921,
            498,
            732,
            6565,
            362,
            264,
            912,
            4496,
            597,
            1936,
            1355,
            498,
            436,
            434,
            264,
            51584
          ],
          "temperature": 0.0,
          "avg_logprob": -0.062107328935102984,
          "compression_ratio": 1.874493927125506,
          "no_speech_prob": 0.5413039326667786,
          "confidence": 0.45869606733322144
        },
        {
          "id": 151,
          "start": 590.72,
          "end": 594.6400000000001,
          "text": "same object in memory so two objects can actually be equal",
          "tokens": [
            51584,
            912,
            2657,
            294,
            4675,
            370,
            732,
            6565,
            393,
            767,
            312,
            2681,
            51780
          ],
          "temperature": 0.0,
          "avg_logprob": -0.062107328935102984,
          "compression_ratio": 1.874493927125506,
          "no_speech_prob": 0.5413039326667786,
          "confidence": 0.45869606733322144
        },
        {
          "id": 152,
          "start": 594.64,
          "end": 598.56,
          "text": "and not be the same object in memory so for example",
          "tokens": [
            50364,
            293,
            406,
            312,
            264,
            912,
            2657,
            294,
            4675,
            370,
            337,
            1365,
            50560
          ],
          "temperature": 0.0,
          "avg_logprob": -0.035126141473358755,
          "compression_ratio": 1.8428571428571427,
          "no_speech_prob": 0.037063006311655045,
          "confidence": 0.962936993688345
        },
        {
          "id": 153,
          "start": 598.56,
          "end": 603.1999999999999,
          "text": "let me create two different lists here so I'll just call one list equal to a",
          "tokens": [
            50560,
            718,
            385,
            1884,
            732,
            819,
            14511,
            510,
            370,
            286,
            603,
            445,
            818,
            472,
            1329,
            2681,
            281,
            257,
            50792
          ],
          "temperature": 0.0,
          "avg_logprob": -0.035126141473358755,
          "compression_ratio": 1.8428571428571427,
          "no_speech_prob": 0.037063006311655045,
          "confidence": 0.962936993688345
        },
        {
          "id": 154,
          "start": 603.1999999999999,
          "end": 606.8,
          "text": "and I'll put in the values of one two three another list",
          "tokens": [
            50792,
            293,
            286,
            603,
            829,
            294,
            264,
            4190,
            295,
            472,
            732,
            1045,
            1071,
            1329,
            50972
          ],
          "temperature": 0.0,
          "avg_logprob": -0.035126141473358755,
          "compression_ratio": 1.8428571428571427,
          "no_speech_prob": 0.037063006311655045,
          "confidence": 0.962936993688345
        }
      ],
      "duration": 29.319999999999936
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 601.8,
      "end_time": 630.4,
      "text": "let me create two different lists here so I'll just call one list equal to a and I'll put in the values of one two three another list equal to b and put in the values one two three and now I will print out a double equals b so this should evaluate to true because these two lists are equal so if we run this then we can see that we got true which is what we would expect because a and b are equal but instead if we say a is b and then we run this",
      "original_segments": [
        {
          "id": 155,
          "start": 606.8,
          "end": 610.0,
          "text": "equal to b and put in the values one two three",
          "tokens": [
            50972,
            2681,
            281,
            272,
            293,
            829,
            294,
            264,
            4190,
            472,
            732,
            1045,
            51132
          ],
          "temperature": 0.0,
          "avg_logprob": -0.035126141473358755,
          "compression_ratio": 1.8428571428571427,
          "no_speech_prob": 0.037063006311655045,
          "confidence": 0.962936993688345
        },
        {
          "id": 156,
          "start": 610.0,
          "end": 614.16,
          "text": "and now I will print out a double equals b",
          "tokens": [
            51132,
            293,
            586,
            286,
            486,
            4482,
            484,
            257,
            3834,
            6915,
            272,
            51340
          ],
          "temperature": 0.0,
          "avg_logprob": -0.035126141473358755,
          "compression_ratio": 1.8428571428571427,
          "no_speech_prob": 0.037063006311655045,
          "confidence": 0.962936993688345
        },
        {
          "id": 157,
          "start": 614.16,
          "end": 617.68,
          "text": "so this should evaluate to true because these two lists",
          "tokens": [
            51340,
            370,
            341,
            820,
            13059,
            281,
            2074,
            570,
            613,
            732,
            14511,
            51516
          ],
          "temperature": 0.0,
          "avg_logprob": -0.035126141473358755,
          "compression_ratio": 1.8428571428571427,
          "no_speech_prob": 0.037063006311655045,
          "confidence": 0.962936993688345
        },
        {
          "id": 158,
          "start": 617.68,
          "end": 621.04,
          "text": "are equal so if we run this then we can see that we got",
          "tokens": [
            51516,
            366,
            2681,
            370,
            498,
            321,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            321,
            658,
            51684
          ],
          "temperature": 0.0,
          "avg_logprob": -0.035126141473358755,
          "compression_ratio": 1.8428571428571427,
          "no_speech_prob": 0.037063006311655045,
          "confidence": 0.962936993688345
        },
        {
          "id": 159,
          "start": 621.04,
          "end": 623.52,
          "text": "true which is what we would expect because",
          "tokens": [
            50364,
            2074,
            597,
            307,
            437,
            321,
            576,
            2066,
            570,
            50488
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08205969961065995,
          "compression_ratio": 1.7302325581395348,
          "no_speech_prob": 0.13069097697734833,
          "confidence": 0.8693090230226517
        },
        {
          "id": 160,
          "start": 623.52,
          "end": 630.4,
          "text": "a and b are equal but instead if we say a is b and then we run this",
          "tokens": [
            50488,
            257,
            293,
            272,
            366,
            2681,
            457,
            2602,
            498,
            321,
            584,
            257,
            307,
            272,
            293,
            550,
            321,
            1190,
            341,
            50832
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08205969961065995,
          "compression_ratio": 1.7302325581395348,
          "no_speech_prob": 0.13069097697734833,
          "confidence": 0.8693090230226517
        }
      ],
      "duration": 28.600000000000023
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 625.4,
      "end_time": 653.12,
      "text": "a and b are equal but instead if we say a is b and then we run this then that returns false now the reason is because these are two different objects in memory and we can print out these locations with this built-in id function so right above printing that a is b I'm also going to print out the id of a and I will also print out the id of b so I'll save that and run it",
      "original_segments": [
        {
          "id": 161,
          "start": 630.4,
          "end": 634.48,
          "text": "then that returns false now the reason is because these are two different",
          "tokens": [
            50832,
            550,
            300,
            11247,
            7908,
            586,
            264,
            1778,
            307,
            570,
            613,
            366,
            732,
            819,
            51036
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08205969961065995,
          "compression_ratio": 1.7302325581395348,
          "no_speech_prob": 0.13069097697734833,
          "confidence": 0.8693090230226517
        },
        {
          "id": 162,
          "start": 634.48,
          "end": 637.12,
          "text": "objects in memory and we can print out these",
          "tokens": [
            51036,
            6565,
            294,
            4675,
            293,
            321,
            393,
            4482,
            484,
            613,
            51168
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08205969961065995,
          "compression_ratio": 1.7302325581395348,
          "no_speech_prob": 0.13069097697734833,
          "confidence": 0.8693090230226517
        },
        {
          "id": 163,
          "start": 637.12,
          "end": 642.56,
          "text": "locations with this built-in id function so right above printing that",
          "tokens": [
            51168,
            9253,
            365,
            341,
            3094,
            12,
            259,
            4496,
            2445,
            370,
            558,
            3673,
            14699,
            300,
            51440
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08205969961065995,
          "compression_ratio": 1.7302325581395348,
          "no_speech_prob": 0.13069097697734833,
          "confidence": 0.8693090230226517
        },
        {
          "id": 164,
          "start": 642.56,
          "end": 649.76,
          "text": "a is b I'm also going to print out the id of a and I will also print out",
          "tokens": [
            51440,
            257,
            307,
            272,
            286,
            478,
            611,
            516,
            281,
            4482,
            484,
            264,
            4496,
            295,
            257,
            293,
            286,
            486,
            611,
            4482,
            484,
            51800
          ],
          "temperature": 0.0,
          "avg_logprob": -0.08205969961065995,
          "compression_ratio": 1.7302325581395348,
          "no_speech_prob": 0.13069097697734833,
          "confidence": 0.8693090230226517
        },
        {
          "id": 165,
          "start": 649.76,
          "end": 653.12,
          "text": "the id of b so I'll save that and run it",
          "tokens": [
            50364,
            264,
            4496,
            295,
            272,
            370,
            286,
            603,
            3155,
            300,
            293,
            1190,
            309,
            50532
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05775924699496379,
          "compression_ratio": 1.9345794392523366,
          "no_speech_prob": 0.020589493215084076,
          "confidence": 0.9794105067849159
        }
      ],
      "duration": 27.720000000000027
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 648.12,
      "end_time": 675.52,
      "text": "a is b I'm also going to print out the id of a and I will also print out the id of b so I'll save that and run it and we can see that these ids are different so really this is comparison is really checking whether these ids are the same so up here instead of creating a new list if I just said b equals a and save that and run it now we can see that the id of a and id of b are the same and then when we print a is b",
      "original_segments": [
        {
          "id": 166,
          "start": 653.12,
          "end": 656.48,
          "text": "and we can see that these ids are different so really",
          "tokens": [
            50532,
            293,
            321,
            393,
            536,
            300,
            613,
            220,
            3742,
            366,
            819,
            370,
            534,
            50700
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05775924699496379,
          "compression_ratio": 1.9345794392523366,
          "no_speech_prob": 0.020589493215084076,
          "confidence": 0.9794105067849159
        },
        {
          "id": 167,
          "start": 656.48,
          "end": 661.2,
          "text": "this is comparison is really checking whether these ids are the same",
          "tokens": [
            50700,
            341,
            307,
            9660,
            307,
            534,
            8568,
            1968,
            613,
            220,
            3742,
            366,
            264,
            912,
            50936
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05775924699496379,
          "compression_ratio": 1.9345794392523366,
          "no_speech_prob": 0.020589493215084076,
          "confidence": 0.9794105067849159
        },
        {
          "id": 168,
          "start": 661.2,
          "end": 665.28,
          "text": "so up here instead of creating a new list if I just said",
          "tokens": [
            50936,
            370,
            493,
            510,
            2602,
            295,
            4084,
            257,
            777,
            1329,
            498,
            286,
            445,
            848,
            51140
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05775924699496379,
          "compression_ratio": 1.9345794392523366,
          "no_speech_prob": 0.020589493215084076,
          "confidence": 0.9794105067849159
        },
        {
          "id": 169,
          "start": 665.28,
          "end": 671.76,
          "text": "b equals a and save that and run it now we can see that the id of a and id of",
          "tokens": [
            51140,
            272,
            6915,
            257,
            293,
            3155,
            300,
            293,
            1190,
            309,
            586,
            321,
            393,
            536,
            300,
            264,
            4496,
            295,
            257,
            293,
            4496,
            295,
            51464
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05775924699496379,
          "compression_ratio": 1.9345794392523366,
          "no_speech_prob": 0.020589493215084076,
          "confidence": 0.9794105067849159
        },
        {
          "id": 170,
          "start": 671.76,
          "end": 675.52,
          "text": "b are the same and then when we print a is b",
          "tokens": [
            51464,
            272,
            366,
            264,
            912,
            293,
            550,
            562,
            321,
            4482,
            257,
            307,
            272,
            51652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05775924699496379,
          "compression_ratio": 1.9345794392523366,
          "no_speech_prob": 0.020589493215084076,
          "confidence": 0.9794105067849159
        }
      ],
      "duration": 27.399999999999977
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 670.52,
      "end_time": 698.96,
      "text": "b equals a and save that and run it now we can see that the id of a and id of b are the same and then when we print a is b that evaluates to true because now these are the same object in memory and if I check equality then they're also equal so that's basically the difference there behind the scenes the is comparison if you say a is b it's really the same as saying id of a equals equals the id of b so if I run that",
      "original_segments": [
        {
          "id": 171,
          "start": 675.52,
          "end": 679.52,
          "text": "that evaluates to true because now these are the same object in memory",
          "tokens": [
            51652,
            300,
            6133,
            1024,
            281,
            2074,
            570,
            586,
            613,
            366,
            264,
            912,
            2657,
            294,
            4675,
            51852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05775924699496379,
          "compression_ratio": 1.9345794392523366,
          "no_speech_prob": 0.020589493215084076,
          "confidence": 0.9794105067849159
        },
        {
          "id": 172,
          "start": 679.52,
          "end": 683.68,
          "text": "and if I check equality then they're also equal",
          "tokens": [
            50364,
            293,
            498,
            286,
            1520,
            14949,
            550,
            436,
            434,
            611,
            2681,
            50572
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04387892498059219,
          "compression_ratio": 1.7897435897435898,
          "no_speech_prob": 4.029407136840746e-05,
          "confidence": 0.9999597059286316
        },
        {
          "id": 173,
          "start": 683.68,
          "end": 687.04,
          "text": "so that's basically the difference there behind the scenes",
          "tokens": [
            50572,
            370,
            300,
            311,
            1936,
            264,
            2649,
            456,
            2261,
            264,
            8026,
            50740
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04387892498059219,
          "compression_ratio": 1.7897435897435898,
          "no_speech_prob": 4.029407136840746e-05,
          "confidence": 0.9999597059286316
        },
        {
          "id": 174,
          "start": 687.04,
          "end": 691.12,
          "text": "the is comparison if you say a is b it's really the same",
          "tokens": [
            50740,
            264,
            307,
            9660,
            498,
            291,
            584,
            257,
            307,
            272,
            309,
            311,
            534,
            264,
            912,
            50944
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04387892498059219,
          "compression_ratio": 1.7897435897435898,
          "no_speech_prob": 4.029407136840746e-05,
          "confidence": 0.9999597059286316
        },
        {
          "id": 175,
          "start": 691.12,
          "end": 698.96,
          "text": "as saying id of a equals equals the id of b so if I run that",
          "tokens": [
            50944,
            382,
            1566,
            4496,
            295,
            257,
            6915,
            6915,
            264,
            4496,
            295,
            272,
            370,
            498,
            286,
            1190,
            300,
            51336
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04387892498059219,
          "compression_ratio": 1.7897435897435898,
          "no_speech_prob": 4.029407136840746e-05,
          "confidence": 0.9999597059286316
        }
      ],
      "duration": 28.440000000000055
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 693.96,
      "end_time": 722.1600000000001,
      "text": "as saying id of a equals equals the id of b so if I run that that's equal to true that's basically what the is operator does okay so basically now all the conditionals that we looked at completely depend on what python evaluates to true or false so let's see what all python evaluates to true or false and there are a few things that may be unexpected to us so I have a couple of things pulled up here in my snippets",
      "original_segments": [
        {
          "id": 176,
          "start": 698.96,
          "end": 702.8,
          "text": "that's equal to true that's basically what the is operator does",
          "tokens": [
            51336,
            300,
            311,
            2681,
            281,
            2074,
            300,
            311,
            1936,
            437,
            264,
            307,
            12973,
            775,
            51528
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04387892498059219,
          "compression_ratio": 1.7897435897435898,
          "no_speech_prob": 4.029407136840746e-05,
          "confidence": 0.9999597059286316
        },
        {
          "id": 177,
          "start": 702.8,
          "end": 706.72,
          "text": "okay so basically now all the conditionals that we looked at",
          "tokens": [
            51528,
            1392,
            370,
            1936,
            586,
            439,
            264,
            4188,
            1124,
            300,
            321,
            2956,
            412,
            51724
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04387892498059219,
          "compression_ratio": 1.7897435897435898,
          "no_speech_prob": 4.029407136840746e-05,
          "confidence": 0.9999597059286316
        },
        {
          "id": 178,
          "start": 706.72,
          "end": 711.2,
          "text": "completely depend on what python evaluates to true or false",
          "tokens": [
            50364,
            2584,
            5672,
            322,
            437,
            38797,
            6133,
            1024,
            281,
            2074,
            420,
            7908,
            50588
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04277890336279776,
          "compression_ratio": 1.9904306220095693,
          "no_speech_prob": 0.19661305844783783,
          "confidence": 0.8033869415521622
        },
        {
          "id": 179,
          "start": 711.2,
          "end": 715.0400000000001,
          "text": "so let's see what all python evaluates to true or false",
          "tokens": [
            50588,
            370,
            718,
            311,
            536,
            437,
            439,
            38797,
            6133,
            1024,
            281,
            2074,
            420,
            7908,
            50780
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04277890336279776,
          "compression_ratio": 1.9904306220095693,
          "no_speech_prob": 0.19661305844783783,
          "confidence": 0.8033869415521622
        },
        {
          "id": 180,
          "start": 715.0400000000001,
          "end": 718.1600000000001,
          "text": "and there are a few things that may be unexpected to us",
          "tokens": [
            50780,
            293,
            456,
            366,
            257,
            1326,
            721,
            300,
            815,
            312,
            13106,
            281,
            505,
            50936
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04277890336279776,
          "compression_ratio": 1.9904306220095693,
          "no_speech_prob": 0.19661305844783783,
          "confidence": 0.8033869415521622
        },
        {
          "id": 181,
          "start": 718.1600000000001,
          "end": 722.1600000000001,
          "text": "so I have a couple of things pulled up here in my snippets",
          "tokens": [
            50936,
            370,
            286,
            362,
            257,
            1916,
            295,
            721,
            7373,
            493,
            510,
            294,
            452,
            35623,
            1385,
            51136
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04277890336279776,
          "compression_ratio": 1.9904306220095693,
          "no_speech_prob": 0.19661305844783783,
          "confidence": 0.8033869415521622
        }
      ],
      "duration": 28.200000000000045
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 717.1600000000001,
      "end_time": 745.84,
      "text": "and there are a few things that may be unexpected to us so I have a couple of things pulled up here in my snippets and let me grab these really fast so to determine what python evaluates to true and false it's easier to show everything that evaluates to false and then everything else will by default evaluate to true and we have a quick if else statement here to test all of these so we're going to make a few different conditions here and if that condition evaluates to true",
      "original_segments": [
        {
          "id": 182,
          "start": 722.1600000000001,
          "end": 728.96,
          "text": "and let me grab these really fast so to determine what python evaluates to",
          "tokens": [
            51136,
            293,
            718,
            385,
            4444,
            613,
            534,
            2370,
            370,
            281,
            6997,
            437,
            38797,
            6133,
            1024,
            281,
            51476
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04277890336279776,
          "compression_ratio": 1.9904306220095693,
          "no_speech_prob": 0.19661305844783783,
          "confidence": 0.8033869415521622
        },
        {
          "id": 183,
          "start": 728.96,
          "end": 731.84,
          "text": "true and false it's easier to show everything that",
          "tokens": [
            51476,
            2074,
            293,
            7908,
            309,
            311,
            3571,
            281,
            855,
            1203,
            300,
            51620
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04277890336279776,
          "compression_ratio": 1.9904306220095693,
          "no_speech_prob": 0.19661305844783783,
          "confidence": 0.8033869415521622
        },
        {
          "id": 184,
          "start": 731.84,
          "end": 735.84,
          "text": "evaluates to false and then everything else will by default",
          "tokens": [
            51620,
            6133,
            1024,
            281,
            7908,
            293,
            550,
            1203,
            1646,
            486,
            538,
            7576,
            51820
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04277890336279776,
          "compression_ratio": 1.9904306220095693,
          "no_speech_prob": 0.19661305844783783,
          "confidence": 0.8033869415521622
        },
        {
          "id": 185,
          "start": 735.84,
          "end": 740.08,
          "text": "evaluate to true and we have a quick if else statement",
          "tokens": [
            50364,
            13059,
            281,
            2074,
            293,
            321,
            362,
            257,
            1702,
            498,
            1646,
            5629,
            50576
          ],
          "temperature": 0.0,
          "avg_logprob": -0.040901364951298154,
          "compression_ratio": 1.988,
          "no_speech_prob": 0.01043874491006136,
          "confidence": 0.9895612550899386
        },
        {
          "id": 186,
          "start": 740.08,
          "end": 742.88,
          "text": "here to test all of these so we're going to make a few different",
          "tokens": [
            50576,
            510,
            281,
            1500,
            439,
            295,
            613,
            370,
            321,
            434,
            516,
            281,
            652,
            257,
            1326,
            819,
            50716
          ],
          "temperature": 0.0,
          "avg_logprob": -0.040901364951298154,
          "compression_ratio": 1.988,
          "no_speech_prob": 0.01043874491006136,
          "confidence": 0.9895612550899386
        },
        {
          "id": 187,
          "start": 742.88,
          "end": 745.84,
          "text": "conditions here and if that condition evaluates to true",
          "tokens": [
            50716,
            4487,
            510,
            293,
            498,
            300,
            4188,
            6133,
            1024,
            281,
            2074,
            50864
          ],
          "temperature": 0.0,
          "avg_logprob": -0.040901364951298154,
          "compression_ratio": 1.988,
          "no_speech_prob": 0.01043874491006136,
          "confidence": 0.9895612550899386
        }
      ],
      "duration": 28.67999999999995
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 740.84,
      "end_time": 769.12,
      "text": "here to test all of these so we're going to make a few different conditions here and if that condition evaluates to true we'll print out evaluated true else evaluated to false and my comments here are all the things in python that evaluate to false values so the first one is the most obvious if we set a conditional equal to false then it's going to evaluate to false and this one would include all the comparison operations that we just saw so they would return true or false so if I run this",
      "original_segments": [
        {
          "id": 188,
          "start": 745.84,
          "end": 749.52,
          "text": "we'll print out evaluated true else evaluated to false",
          "tokens": [
            50864,
            321,
            603,
            4482,
            484,
            25509,
            2074,
            1646,
            25509,
            281,
            7908,
            51048
          ],
          "temperature": 0.0,
          "avg_logprob": -0.040901364951298154,
          "compression_ratio": 1.988,
          "no_speech_prob": 0.01043874491006136,
          "confidence": 0.9895612550899386
        },
        {
          "id": 189,
          "start": 749.52,
          "end": 753.52,
          "text": "and my comments here are all the things in python that evaluate to false",
          "tokens": [
            51048,
            293,
            452,
            3053,
            510,
            366,
            439,
            264,
            721,
            294,
            38797,
            300,
            13059,
            281,
            7908,
            51248
          ],
          "temperature": 0.0,
          "avg_logprob": -0.040901364951298154,
          "compression_ratio": 1.988,
          "no_speech_prob": 0.01043874491006136,
          "confidence": 0.9895612550899386
        },
        {
          "id": 190,
          "start": 753.52,
          "end": 756.8000000000001,
          "text": "values so the first one is the most obvious",
          "tokens": [
            51248,
            4190,
            370,
            264,
            700,
            472,
            307,
            264,
            881,
            6322,
            51412
          ],
          "temperature": 0.0,
          "avg_logprob": -0.040901364951298154,
          "compression_ratio": 1.988,
          "no_speech_prob": 0.01043874491006136,
          "confidence": 0.9895612550899386
        },
        {
          "id": 191,
          "start": 756.8000000000001,
          "end": 761.9200000000001,
          "text": "if we set a conditional equal to false then it's going to evaluate to false",
          "tokens": [
            51412,
            498,
            321,
            992,
            257,
            27708,
            2681,
            281,
            7908,
            550,
            309,
            311,
            516,
            281,
            13059,
            281,
            7908,
            51668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.040901364951298154,
          "compression_ratio": 1.988,
          "no_speech_prob": 0.01043874491006136,
          "confidence": 0.9895612550899386
        },
        {
          "id": 192,
          "start": 761.9200000000001,
          "end": 765.76,
          "text": "and this one would include all the comparison operations that we just saw",
          "tokens": [
            51668,
            293,
            341,
            472,
            576,
            4090,
            439,
            264,
            9660,
            7705,
            300,
            321,
            445,
            1866,
            51860
          ],
          "temperature": 0.0,
          "avg_logprob": -0.040901364951298154,
          "compression_ratio": 1.988,
          "no_speech_prob": 0.01043874491006136,
          "confidence": 0.9895612550899386
        },
        {
          "id": 193,
          "start": 765.84,
          "end": 769.12,
          "text": "so they would return true or false so if I run this",
          "tokens": [
            50368,
            370,
            436,
            576,
            2736,
            2074,
            420,
            7908,
            370,
            498,
            286,
            1190,
            341,
            50532
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048707745291969994,
          "compression_ratio": 2.175531914893617,
          "no_speech_prob": 0.000556073384359479,
          "confidence": 0.9994439266156405
        }
      ],
      "duration": 28.279999999999973
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 764.12,
      "end_time": 792.72,
      "text": "and this one would include all the comparison operations that we just saw so they would return true or false so if I run this then we can see that obviously our conditional evaluated to false here since we set our condition equal to false now the next value in our list here is none so none actually evaluates to false as well so if we put that value in as our conditional and run this then we can see that with our condition equal to none that that condition also evaluates to false",
      "original_segments": [
        {
          "id": 194,
          "start": 769.12,
          "end": 772.8,
          "text": "then we can see that obviously our conditional evaluated to false here",
          "tokens": [
            50532,
            550,
            321,
            393,
            536,
            300,
            2745,
            527,
            27708,
            25509,
            281,
            7908,
            510,
            50716
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048707745291969994,
          "compression_ratio": 2.175531914893617,
          "no_speech_prob": 0.000556073384359479,
          "confidence": 0.9994439266156405
        },
        {
          "id": 195,
          "start": 772.8,
          "end": 777.6,
          "text": "since we set our condition equal to false now the next value in our list here",
          "tokens": [
            50716,
            1670,
            321,
            992,
            527,
            4188,
            2681,
            281,
            7908,
            586,
            264,
            958,
            2158,
            294,
            527,
            1329,
            510,
            50956
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048707745291969994,
          "compression_ratio": 2.175531914893617,
          "no_speech_prob": 0.000556073384359479,
          "confidence": 0.9994439266156405
        },
        {
          "id": 196,
          "start": 777.6,
          "end": 782.24,
          "text": "is none so none actually evaluates to false as well",
          "tokens": [
            50956,
            307,
            6022,
            370,
            6022,
            767,
            6133,
            1024,
            281,
            7908,
            382,
            731,
            51188
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048707745291969994,
          "compression_ratio": 2.175531914893617,
          "no_speech_prob": 0.000556073384359479,
          "confidence": 0.9994439266156405
        },
        {
          "id": 197,
          "start": 782.24,
          "end": 785.4399999999999,
          "text": "so if we put that value in as our conditional and",
          "tokens": [
            51188,
            370,
            498,
            321,
            829,
            300,
            2158,
            294,
            382,
            527,
            27708,
            293,
            51348
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048707745291969994,
          "compression_ratio": 2.175531914893617,
          "no_speech_prob": 0.000556073384359479,
          "confidence": 0.9994439266156405
        },
        {
          "id": 198,
          "start": 785.4399999999999,
          "end": 789.2,
          "text": "run this then we can see that with our condition equal to none",
          "tokens": [
            51348,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            365,
            527,
            4188,
            2681,
            281,
            6022,
            51536
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048707745291969994,
          "compression_ratio": 2.175531914893617,
          "no_speech_prob": 0.000556073384359479,
          "confidence": 0.9994439266156405
        },
        {
          "id": 199,
          "start": 789.2,
          "end": 792.72,
          "text": "that that condition also evaluates to false",
          "tokens": [
            51536,
            300,
            300,
            4188,
            611,
            6133,
            1024,
            281,
            7908,
            51712
          ],
          "temperature": 0.0,
          "avg_logprob": -0.048707745291969994,
          "compression_ratio": 2.175531914893617,
          "no_speech_prob": 0.000556073384359479,
          "confidence": 0.9994439266156405
        }
      ],
      "duration": 28.600000000000023
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 787.72,
      "end_time": 815.6,
      "text": "run this then we can see that with our condition equal to none that that condition also evaluates to false now this next one here isn't always so obvious so if you have a numeric data type and pass it into a conditional then zero will evaluate to false so if we set this condition equal to zero and run this then we can see that that evaluated to false but if we set this to any other number so if our condition is 10 instead of zero and run that",
      "original_segments": [
        {
          "id": 200,
          "start": 792.72,
          "end": 797.0400000000001,
          "text": "now this next one here isn't always so obvious so if you have a numeric",
          "tokens": [
            50364,
            586,
            341,
            958,
            472,
            510,
            1943,
            380,
            1009,
            370,
            6322,
            370,
            498,
            291,
            362,
            257,
            7866,
            299,
            50580
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05474931270152599,
          "compression_ratio": 1.9780701754385965,
          "no_speech_prob": 0.0014027991564944386,
          "confidence": 0.9985972008435056
        },
        {
          "id": 201,
          "start": 797.0400000000001,
          "end": 803.0400000000001,
          "text": "data type and pass it into a conditional then zero will evaluate to false so if",
          "tokens": [
            50580,
            1412,
            2010,
            293,
            1320,
            309,
            666,
            257,
            27708,
            550,
            4018,
            486,
            13059,
            281,
            7908,
            370,
            498,
            50880
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05474931270152599,
          "compression_ratio": 1.9780701754385965,
          "no_speech_prob": 0.0014027991564944386,
          "confidence": 0.9985972008435056
        },
        {
          "id": 202,
          "start": 803.0400000000001,
          "end": 807.28,
          "text": "we set this condition equal to zero and run this then we",
          "tokens": [
            50880,
            321,
            992,
            341,
            4188,
            2681,
            281,
            4018,
            293,
            1190,
            341,
            550,
            321,
            51092
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05474931270152599,
          "compression_ratio": 1.9780701754385965,
          "no_speech_prob": 0.0014027991564944386,
          "confidence": 0.9985972008435056
        },
        {
          "id": 203,
          "start": 807.28,
          "end": 811.6800000000001,
          "text": "can see that that evaluated to false but if we set this to any other number",
          "tokens": [
            51092,
            393,
            536,
            300,
            300,
            25509,
            281,
            7908,
            457,
            498,
            321,
            992,
            341,
            281,
            604,
            661,
            1230,
            51312
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05474931270152599,
          "compression_ratio": 1.9780701754385965,
          "no_speech_prob": 0.0014027991564944386,
          "confidence": 0.9985972008435056
        },
        {
          "id": 204,
          "start": 811.6800000000001,
          "end": 815.6,
          "text": "so if our condition is 10 instead of zero and run that",
          "tokens": [
            51312,
            370,
            498,
            527,
            4188,
            307,
            1266,
            2602,
            295,
            4018,
            293,
            1190,
            300,
            51508
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05474931270152599,
          "compression_ratio": 1.9780701754385965,
          "no_speech_prob": 0.0014027991564944386,
          "confidence": 0.9985972008435056
        }
      ],
      "duration": 27.879999999999995
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 810.6,
      "end_time": 838.0799999999999,
      "text": "can see that that evaluated to false but if we set this to any other number so if our condition is 10 instead of zero and run that then we can see that that evaluated to true so that's something to keep in mind there when working with numbers because you don't want to accidentally pass in a zero that you think would be true but it evaluates to false okay so moving on down the list if we have any empty sequence and pass it into a conditional then that will evaluate to false so this can be an empty string",
      "original_segments": [
        {
          "id": 205,
          "start": 815.6,
          "end": 818.5600000000001,
          "text": "then we can see that that evaluated to true",
          "tokens": [
            51508,
            550,
            321,
            393,
            536,
            300,
            300,
            25509,
            281,
            2074,
            51656
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05474931270152599,
          "compression_ratio": 1.9780701754385965,
          "no_speech_prob": 0.0014027991564944386,
          "confidence": 0.9985972008435056
        },
        {
          "id": 206,
          "start": 818.5600000000001,
          "end": 821.6800000000001,
          "text": "so that's something to keep in mind there when working with numbers",
          "tokens": [
            51656,
            370,
            300,
            311,
            746,
            281,
            1066,
            294,
            1575,
            456,
            562,
            1364,
            365,
            3547,
            51812
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05474931270152599,
          "compression_ratio": 1.9780701754385965,
          "no_speech_prob": 0.0014027991564944386,
          "confidence": 0.9985972008435056
        },
        {
          "id": 207,
          "start": 821.68,
          "end": 824.7199999999999,
          "text": "because you don't want to accidentally pass in a",
          "tokens": [
            50364,
            570,
            291,
            500,
            380,
            528,
            281,
            15715,
            1320,
            294,
            257,
            50516
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05512675498295756,
          "compression_ratio": 1.8669724770642202,
          "no_speech_prob": 0.031797632575035095,
          "confidence": 0.9682023674249649
        },
        {
          "id": 208,
          "start": 824.7199999999999,
          "end": 827.76,
          "text": "zero that you think would be true but it evaluates to false",
          "tokens": [
            50516,
            4018,
            300,
            291,
            519,
            576,
            312,
            2074,
            457,
            309,
            6133,
            1024,
            281,
            7908,
            50668
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05512675498295756,
          "compression_ratio": 1.8669724770642202,
          "no_speech_prob": 0.031797632575035095,
          "confidence": 0.9682023674249649
        },
        {
          "id": 209,
          "start": 827.76,
          "end": 830.88,
          "text": "okay so moving on down the list if we have any",
          "tokens": [
            50668,
            1392,
            370,
            2684,
            322,
            760,
            264,
            1329,
            498,
            321,
            362,
            604,
            50824
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05512675498295756,
          "compression_ratio": 1.8669724770642202,
          "no_speech_prob": 0.031797632575035095,
          "confidence": 0.9682023674249649
        },
        {
          "id": 210,
          "start": 830.88,
          "end": 834.0,
          "text": "empty sequence and pass it into a conditional",
          "tokens": [
            50824,
            6707,
            8310,
            293,
            1320,
            309,
            666,
            257,
            27708,
            50980
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05512675498295756,
          "compression_ratio": 1.8669724770642202,
          "no_speech_prob": 0.031797632575035095,
          "confidence": 0.9682023674249649
        },
        {
          "id": 211,
          "start": 834.0,
          "end": 838.0799999999999,
          "text": "then that will evaluate to false so this can be an empty string",
          "tokens": [
            50980,
            550,
            300,
            486,
            13059,
            281,
            7908,
            370,
            341,
            393,
            312,
            364,
            6707,
            6798,
            51184
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05512675498295756,
          "compression_ratio": 1.8669724770642202,
          "no_speech_prob": 0.031797632575035095,
          "confidence": 0.9682023674249649
        }
      ],
      "duration": 27.479999999999905
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 833.0799999999999,
      "end_time": 862.64,
      "text": "empty sequence and pass it into a conditional then that will evaluate to false so this can be an empty string an empty list an empty tuple so for example if i just set this condition to an empty list and run this then we can see that that evaluates to false and if you have an empty string that evaluates to false also and now lastly here in our list empty mapping so an empty mapping which is basically an empty dictionary this evaluates to false as well so if i pass in",
      "original_segments": [
        {
          "id": 212,
          "start": 838.0799999999999,
          "end": 843.1999999999999,
          "text": "an empty list an empty tuple so for example if i just set this condition",
          "tokens": [
            51184,
            364,
            6707,
            1329,
            364,
            6707,
            2604,
            781,
            370,
            337,
            1365,
            498,
            741,
            445,
            992,
            341,
            4188,
            51440
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05512675498295756,
          "compression_ratio": 1.8669724770642202,
          "no_speech_prob": 0.031797632575035095,
          "confidence": 0.9682023674249649
        },
        {
          "id": 213,
          "start": 843.1999999999999,
          "end": 847.92,
          "text": "to an empty list and run this then we can see that that evaluates to",
          "tokens": [
            51440,
            281,
            364,
            6707,
            1329,
            293,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            300,
            6133,
            1024,
            281,
            51676
          ],
          "temperature": 0.0,
          "avg_logprob": -0.05512675498295756,
          "compression_ratio": 1.8669724770642202,
          "no_speech_prob": 0.031797632575035095,
          "confidence": 0.9682023674249649
        },
        {
          "id": 214,
          "start": 847.92,
          "end": 851.76,
          "text": "false and if you have an empty string that evaluates to false",
          "tokens": [
            50364,
            7908,
            293,
            498,
            291,
            362,
            364,
            6707,
            6798,
            300,
            6133,
            1024,
            281,
            7908,
            50556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0603625315044998,
          "compression_ratio": 2.05726872246696,
          "no_speech_prob": 0.16374380886554718,
          "confidence": 0.8362561911344528
        },
        {
          "id": 215,
          "start": 851.76,
          "end": 855.36,
          "text": "also and now lastly here in our list empty",
          "tokens": [
            50556,
            611,
            293,
            586,
            16386,
            510,
            294,
            527,
            1329,
            6707,
            50736
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0603625315044998,
          "compression_ratio": 2.05726872246696,
          "no_speech_prob": 0.16374380886554718,
          "confidence": 0.8362561911344528
        },
        {
          "id": 216,
          "start": 855.36,
          "end": 859.52,
          "text": "mapping so an empty mapping which is basically an empty dictionary",
          "tokens": [
            50736,
            18350,
            370,
            364,
            6707,
            18350,
            597,
            307,
            1936,
            364,
            6707,
            25890,
            50944
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0603625315044998,
          "compression_ratio": 2.05726872246696,
          "no_speech_prob": 0.16374380886554718,
          "confidence": 0.8362561911344528
        },
        {
          "id": 217,
          "start": 859.52,
          "end": 862.64,
          "text": "this evaluates to false as well so if i pass in",
          "tokens": [
            50944,
            341,
            6133,
            1024,
            281,
            7908,
            382,
            731,
            370,
            498,
            741,
            1320,
            294,
            51100
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0603625315044998,
          "compression_ratio": 2.05726872246696,
          "no_speech_prob": 0.16374380886554718,
          "confidence": 0.8362561911344528
        }
      ],
      "duration": 29.56000000000006
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 857.64,
      "end_time": 887.4399999999999,
      "text": "mapping so an empty mapping which is basically an empty dictionary this evaluates to false as well so if i pass in an empty dictionary here and run this then we can see that that empty dictionary also evaluated to false now knowing these types of things can be useful because let's say that you have a function or something that is supposed to return some values now sometimes it's needed to check if those values are actually there so you could just pass in these sequences into a conditional to check whether a string is empty or a dictionary is empty",
      "original_segments": [
        {
          "id": 218,
          "start": 862.64,
          "end": 866.24,
          "text": "an empty dictionary here and run this then we can see that that empty",
          "tokens": [
            51100,
            364,
            6707,
            25890,
            510,
            293,
            1190,
            341,
            550,
            321,
            393,
            536,
            300,
            300,
            6707,
            51280
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0603625315044998,
          "compression_ratio": 2.05726872246696,
          "no_speech_prob": 0.16374380886554718,
          "confidence": 0.8362561911344528
        },
        {
          "id": 219,
          "start": 866.24,
          "end": 870.16,
          "text": "dictionary also evaluated to false now knowing these types of things can be",
          "tokens": [
            51280,
            25890,
            611,
            25509,
            281,
            7908,
            586,
            5276,
            613,
            3467,
            295,
            721,
            393,
            312,
            51476
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0603625315044998,
          "compression_ratio": 2.05726872246696,
          "no_speech_prob": 0.16374380886554718,
          "confidence": 0.8362561911344528
        },
        {
          "id": 220,
          "start": 870.16,
          "end": 872.3199999999999,
          "text": "useful because let's say that you have a",
          "tokens": [
            51476,
            4420,
            570,
            718,
            311,
            584,
            300,
            291,
            362,
            257,
            51584
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0603625315044998,
          "compression_ratio": 2.05726872246696,
          "no_speech_prob": 0.16374380886554718,
          "confidence": 0.8362561911344528
        },
        {
          "id": 221,
          "start": 872.3199999999999,
          "end": 875.68,
          "text": "function or something that is supposed to return some values",
          "tokens": [
            51584,
            2445,
            420,
            746,
            300,
            307,
            3442,
            281,
            2736,
            512,
            4190,
            51752
          ],
          "temperature": 0.0,
          "avg_logprob": -0.0603625315044998,
          "compression_ratio": 2.05726872246696,
          "no_speech_prob": 0.16374380886554718,
          "confidence": 0.8362561911344528
        },
        {
          "id": 222,
          "start": 875.68,
          "end": 879.52,
          "text": "now sometimes it's needed to check if those values are actually there",
          "tokens": [
            50364,
            586,
            2171,
            309,
            311,
            2978,
            281,
            1520,
            498,
            729,
            4190,
            366,
            767,
            456,
            50556
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03554583383985788,
          "compression_ratio": 2.0187265917602994,
          "no_speech_prob": 0.14864316582679749,
          "confidence": 0.8513568341732025
        },
        {
          "id": 223,
          "start": 879.52,
          "end": 884.4,
          "text": "so you could just pass in these sequences into a conditional to check",
          "tokens": [
            50556,
            370,
            291,
            727,
            445,
            1320,
            294,
            613,
            22978,
            666,
            257,
            27708,
            281,
            1520,
            50800
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03554583383985788,
          "compression_ratio": 2.0187265917602994,
          "no_speech_prob": 0.14864316582679749,
          "confidence": 0.8513568341732025
        },
        {
          "id": 224,
          "start": 884.4,
          "end": 887.4399999999999,
          "text": "whether a string is empty or a dictionary is empty",
          "tokens": [
            50800,
            1968,
            257,
            6798,
            307,
            6707,
            420,
            257,
            25890,
            307,
            6707,
            50952
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03554583383985788,
          "compression_ratio": 2.0187265917602994,
          "no_speech_prob": 0.14864316582679749,
          "confidence": 0.8513568341732025
        }
      ],
      "duration": 29.799999999999955
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 882.4399999999999,
      "end_time": 908.72,
      "text": "so you could just pass in these sequences into a conditional to check whether a string is empty or a dictionary is empty and you don't actually have to call any specific method you can just pass in the empty sequence or the empty dictionary and it'll evaluate the true or false if that is empty now there are also some user defined classes that can evaluate to false but these are the majority of the conditions that will be checking so now that we know everything that evaluates to false then everything else is obviously going to",
      "original_segments": [
        {
          "id": 225,
          "start": 887.4399999999999,
          "end": 890.8,
          "text": "and you don't actually have to call any specific method you can just",
          "tokens": [
            50952,
            293,
            291,
            500,
            380,
            767,
            362,
            281,
            818,
            604,
            2685,
            3170,
            291,
            393,
            445,
            51120
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03554583383985788,
          "compression_ratio": 2.0187265917602994,
          "no_speech_prob": 0.14864316582679749,
          "confidence": 0.8513568341732025
        },
        {
          "id": 226,
          "start": 890.8,
          "end": 894.88,
          "text": "pass in the empty sequence or the empty dictionary and it'll evaluate the true",
          "tokens": [
            51120,
            1320,
            294,
            264,
            6707,
            8310,
            420,
            264,
            6707,
            25890,
            293,
            309,
            603,
            13059,
            264,
            2074,
            51324
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03554583383985788,
          "compression_ratio": 2.0187265917602994,
          "no_speech_prob": 0.14864316582679749,
          "confidence": 0.8513568341732025
        },
        {
          "id": 227,
          "start": 894.88,
          "end": 898.2399999999999,
          "text": "or false if that is empty now there are also some user defined",
          "tokens": [
            51324,
            420,
            7908,
            498,
            300,
            307,
            6707,
            586,
            456,
            366,
            611,
            512,
            4195,
            7642,
            51492
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03554583383985788,
          "compression_ratio": 2.0187265917602994,
          "no_speech_prob": 0.14864316582679749,
          "confidence": 0.8513568341732025
        },
        {
          "id": 228,
          "start": 898.2399999999999,
          "end": 901.5999999999999,
          "text": "classes that can evaluate to false but these are the majority of the",
          "tokens": [
            51492,
            5359,
            300,
            393,
            13059,
            281,
            7908,
            457,
            613,
            366,
            264,
            6286,
            295,
            264,
            51660
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03554583383985788,
          "compression_ratio": 2.0187265917602994,
          "no_speech_prob": 0.14864316582679749,
          "confidence": 0.8513568341732025
        },
        {
          "id": 229,
          "start": 901.5999999999999,
          "end": 905.12,
          "text": "conditions that will be checking so now that we know everything that",
          "tokens": [
            51660,
            4487,
            300,
            486,
            312,
            8568,
            370,
            586,
            300,
            321,
            458,
            1203,
            300,
            51836
          ],
          "temperature": 0.0,
          "avg_logprob": -0.03554583383985788,
          "compression_ratio": 2.0187265917602994,
          "no_speech_prob": 0.14864316582679749,
          "confidence": 0.8513568341732025
        },
        {
          "id": 230,
          "start": 905.12,
          "end": 908.72,
          "text": "evaluates to false then everything else is obviously going to",
          "tokens": [
            50364,
            6133,
            1024,
            281,
            7908,
            550,
            1203,
            1646,
            307,
            2745,
            516,
            281,
            50544
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04877020798477472,
          "compression_ratio": 1.9008620689655173,
          "no_speech_prob": 0.006315102335065603,
          "confidence": 0.9936848976649344
        }
      ],
      "duration": 26.280000000000086
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 903.72,
      "end_time": 932.96,
      "text": "conditions that will be checking so now that we know everything that evaluates to false then everything else is obviously going to evaluate to true so you know for example just to do another example here if i set this condition equal to a string that just says test now an empty string would evaluate the false so if we pass that in then we can see that that a string with some characters evaluated to true so that's really important when working with these conditionals is just having an idea of what is going",
      "original_segments": [
        {
          "id": 231,
          "start": 908.72,
          "end": 912.96,
          "text": "evaluate to true so you know for example just to",
          "tokens": [
            50544,
            13059,
            281,
            2074,
            370,
            291,
            458,
            337,
            1365,
            445,
            281,
            50756
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04877020798477472,
          "compression_ratio": 1.9008620689655173,
          "no_speech_prob": 0.006315102335065603,
          "confidence": 0.9936848976649344
        },
        {
          "id": 232,
          "start": 912.96,
          "end": 916.72,
          "text": "do another example here if i set this condition equal to",
          "tokens": [
            50756,
            360,
            1071,
            1365,
            510,
            498,
            741,
            992,
            341,
            4188,
            2681,
            281,
            50944
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04877020798477472,
          "compression_ratio": 1.9008620689655173,
          "no_speech_prob": 0.006315102335065603,
          "confidence": 0.9936848976649344
        },
        {
          "id": 233,
          "start": 916.72,
          "end": 921.76,
          "text": "a string that just says test now an empty string would evaluate the false",
          "tokens": [
            50944,
            257,
            6798,
            300,
            445,
            1619,
            1500,
            586,
            364,
            6707,
            6798,
            576,
            13059,
            264,
            7908,
            51196
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04877020798477472,
          "compression_ratio": 1.9008620689655173,
          "no_speech_prob": 0.006315102335065603,
          "confidence": 0.9936848976649344
        },
        {
          "id": 234,
          "start": 921.76,
          "end": 925.44,
          "text": "so if we pass that in then we can see that that a string",
          "tokens": [
            51196,
            370,
            498,
            321,
            1320,
            300,
            294,
            550,
            321,
            393,
            536,
            300,
            300,
            257,
            6798,
            51380
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04877020798477472,
          "compression_ratio": 1.9008620689655173,
          "no_speech_prob": 0.006315102335065603,
          "confidence": 0.9936848976649344
        },
        {
          "id": 235,
          "start": 925.44,
          "end": 929.36,
          "text": "with some characters evaluated to true so that's really important when working",
          "tokens": [
            51380,
            365,
            512,
            4342,
            25509,
            281,
            2074,
            370,
            300,
            311,
            534,
            1021,
            562,
            1364,
            51576
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04877020798477472,
          "compression_ratio": 1.9008620689655173,
          "no_speech_prob": 0.006315102335065603,
          "confidence": 0.9936848976649344
        },
        {
          "id": 236,
          "start": 929.36,
          "end": 932.96,
          "text": "with these conditionals is just having an idea of what is going",
          "tokens": [
            51576,
            365,
            613,
            4188,
            1124,
            307,
            445,
            1419,
            364,
            1558,
            295,
            437,
            307,
            516,
            51756
          ],
          "temperature": 0.0,
          "avg_logprob": -0.04877020798477472,
          "compression_ratio": 1.9008620689655173,
          "no_speech_prob": 0.006315102335065603,
          "confidence": 0.9936848976649344
        }
      ],
      "duration": 29.24000000000001
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 927.96,
      "end_time": 956.1600000000001,
      "text": "with some characters evaluated to true so that's really important when working with these conditionals is just having an idea of what is going to evaluate the true and what's going to evaluate to false okay so i think that is going to do it for this video i hope that now everyone has a clear understanding of how these conditionals work and all the different ways that python determines what values are true and false now in the next video we'll be learning about loops and iterations but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and i'll do my best to",
      "original_segments": [
        {
          "id": 237,
          "start": 932.96,
          "end": 936.4000000000001,
          "text": "to evaluate the true and what's going to evaluate to false",
          "tokens": [
            50364,
            281,
            13059,
            264,
            2074,
            293,
            437,
            311,
            516,
            281,
            13059,
            281,
            7908,
            50536
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036537487166268486,
          "compression_ratio": 1.9206349206349207,
          "no_speech_prob": 0.2664405405521393,
          "confidence": 0.7335594594478607
        },
        {
          "id": 238,
          "start": 936.4000000000001,
          "end": 939.6800000000001,
          "text": "okay so i think that is going to do it for this video i hope that now everyone",
          "tokens": [
            50536,
            1392,
            370,
            741,
            519,
            300,
            307,
            516,
            281,
            360,
            309,
            337,
            341,
            960,
            741,
            1454,
            300,
            586,
            1518,
            50700
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036537487166268486,
          "compression_ratio": 1.9206349206349207,
          "no_speech_prob": 0.2664405405521393,
          "confidence": 0.7335594594478607
        },
        {
          "id": 239,
          "start": 939.6800000000001,
          "end": 942.72,
          "text": "has a clear understanding of how these conditionals work and all the",
          "tokens": [
            50700,
            575,
            257,
            1850,
            3701,
            295,
            577,
            613,
            4188,
            1124,
            589,
            293,
            439,
            264,
            50852
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036537487166268486,
          "compression_ratio": 1.9206349206349207,
          "no_speech_prob": 0.2664405405521393,
          "confidence": 0.7335594594478607
        },
        {
          "id": 240,
          "start": 942.72,
          "end": 946.4000000000001,
          "text": "different ways that python determines what values are true and false",
          "tokens": [
            50852,
            819,
            2098,
            300,
            38797,
            24799,
            437,
            4190,
            366,
            2074,
            293,
            7908,
            51036
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036537487166268486,
          "compression_ratio": 1.9206349206349207,
          "no_speech_prob": 0.2664405405521393,
          "confidence": 0.7335594594478607
        },
        {
          "id": 241,
          "start": 946.4000000000001,
          "end": 950.32,
          "text": "now in the next video we'll be learning about loops and iterations",
          "tokens": [
            51036,
            586,
            294,
            264,
            958,
            960,
            321,
            603,
            312,
            2539,
            466,
            16121,
            293,
            36540,
            51232
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036537487166268486,
          "compression_ratio": 1.9206349206349207,
          "no_speech_prob": 0.2664405405521393,
          "confidence": 0.7335594594478607
        },
        {
          "id": 242,
          "start": 950.32,
          "end": 953.2800000000001,
          "text": "but if anyone has any questions about what we covered in this video",
          "tokens": [
            51232,
            457,
            498,
            2878,
            575,
            604,
            1651,
            466,
            437,
            321,
            5343,
            294,
            341,
            960,
            51380
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036537487166268486,
          "compression_ratio": 1.9206349206349207,
          "no_speech_prob": 0.2664405405521393,
          "confidence": 0.7335594594478607
        },
        {
          "id": 243,
          "start": 953.2800000000001,
          "end": 956.1600000000001,
          "text": "then feel free to ask in the comment section below and i'll do my best to",
          "tokens": [
            51380,
            550,
            841,
            1737,
            281,
            1029,
            294,
            264,
            2871,
            3541,
            2507,
            293,
            741,
            603,
            360,
            452,
            1151,
            281,
            51524
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036537487166268486,
          "compression_ratio": 1.9206349206349207,
          "no_speech_prob": 0.2664405405521393,
          "confidence": 0.7335594594478607
        }
      ],
      "duration": 28.200000000000045
    },
    {
      "video_id": "f375da0145bb",
      "video_path": "videos/Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "video_filename": "Python Tutorial for Beginners 6- Conditionals and Booleans - If, Else, and Elif Statements.mp4",
      "start_time": 951.1600000000001,
      "end_time": 979.8399999999999,
      "text": "but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and i'll do my best to answer those now if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways is simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching",
      "original_segments": [
        {
          "id": 244,
          "start": 956.1600000000001,
          "end": 958.48,
          "text": "answer those now if you enjoy these tutorials and",
          "tokens": [
            51524,
            1867,
            729,
            586,
            498,
            291,
            2103,
            613,
            17616,
            293,
            51640
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036537487166268486,
          "compression_ratio": 1.9206349206349207,
          "no_speech_prob": 0.2664405405521393,
          "confidence": 0.7335594594478607
        },
        {
          "id": 245,
          "start": 958.48,
          "end": 961.0400000000001,
          "text": "would like to support them then there are several ways you can do that",
          "tokens": [
            51640,
            576,
            411,
            281,
            1406,
            552,
            550,
            456,
            366,
            2940,
            2098,
            291,
            393,
            360,
            300,
            51768
          ],
          "temperature": 0.0,
          "avg_logprob": -0.036537487166268486,
          "compression_ratio": 1.9206349206349207,
          "no_speech_prob": 0.2664405405521393,
          "confidence": 0.7335594594478607
        },
        {
          "id": 246,
          "start": 961.12,
          "end": 963.92,
          "text": "the easiest ways is simply like the video and give it a thumbs up",
          "tokens": [
            50368,
            264,
            12889,
            2098,
            307,
            2935,
            411,
            264,
            960,
            293,
            976,
            309,
            257,
            8838,
            493,
            50508
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11169220152355376,
          "compression_ratio": 1.7047619047619047,
          "no_speech_prob": 0.13629303872585297,
          "confidence": 0.863706961274147
        },
        {
          "id": 247,
          "start": 963.92,
          "end": 966.8,
          "text": "and also it's a huge help to share these videos with anyone who you think would",
          "tokens": [
            50508,
            293,
            611,
            309,
            311,
            257,
            2603,
            854,
            281,
            2073,
            613,
            2145,
            365,
            2878,
            567,
            291,
            519,
            576,
            50652
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11169220152355376,
          "compression_ratio": 1.7047619047619047,
          "no_speech_prob": 0.13629303872585297,
          "confidence": 0.863706961274147
        },
        {
          "id": 248,
          "start": 966.8,
          "end": 968.88,
          "text": "find them useful and if you have the means you can",
          "tokens": [
            50652,
            915,
            552,
            4420,
            293,
            498,
            291,
            362,
            264,
            1355,
            291,
            393,
            50756
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11169220152355376,
          "compression_ratio": 1.7047619047619047,
          "no_speech_prob": 0.13629303872585297,
          "confidence": 0.863706961274147
        },
        {
          "id": 249,
          "start": 968.88,
          "end": 971.8399999999999,
          "text": "contribute through patreon and there's a link to that page in the description",
          "tokens": [
            50756,
            10586,
            807,
            33161,
            293,
            456,
            311,
            257,
            2113,
            281,
            300,
            3028,
            294,
            264,
            3855,
            50904
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11169220152355376,
          "compression_ratio": 1.7047619047619047,
          "no_speech_prob": 0.13629303872585297,
          "confidence": 0.863706961274147
        },
        {
          "id": 250,
          "start": 971.8399999999999,
          "end": 974.48,
          "text": "section below be sure to subscribe for future videos",
          "tokens": [
            50904,
            3541,
            2507,
            312,
            988,
            281,
            3022,
            337,
            2027,
            2145,
            51036
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11169220152355376,
          "compression_ratio": 1.7047619047619047,
          "no_speech_prob": 0.13629303872585297,
          "confidence": 0.863706961274147
        },
        {
          "id": 251,
          "start": 974.48,
          "end": 979.8399999999999,
          "text": "and thank you all for watching",
          "tokens": [
            51036,
            293,
            1309,
            291,
            439,
            337,
            1976,
            51304
          ],
          "temperature": 0.0,
          "avg_logprob": -0.11169220152355376,
          "compression_ratio": 1.7047619047619047,
          "no_speech_prob": 0.13629303872585297,
          "confidence": 0.863706961274147
        }
      ],
      "duration": 28.679999999999836
    }
  ]
}