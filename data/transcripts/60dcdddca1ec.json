{
  "video_id": "60dcdddca1ec",
  "video_path": "videos/Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
  "video_filename": "Python Tutorial for Beginners 7- Loops and Iterations - For-While Loops.mp4",
  "model_size": "medium",
  "language": "en",
  "duration": 0,
  "text": " Hey there how's it going everybody in this video we'll be learning about loops and iterations specifically we'll be going over for loops and while loops now we've seen loops a couple of times in our previous videos when looping through strings or lists but there's some more functionality that we haven't gone over yet that we'll see in this video but first let's just do a quick recap so we've got a list of numbers here with numbers one through five so let's loop through this list so to do this we're going to use a for loop so we'll say for num in nums and within here I'm just going to print out that num so what we're saying here is that we want to create a loop where we're looping through each value of our list and each time through the loop this num variable will be equal to the next item in the list so the first time through it'll be equal to one the next time through it'll be equal to two and so on so if we run this we can see that it looped through and printed each number of our list so now let's look at two important keywords when working with loops and these are the break and continue keywords so the break keyword will completely break out of a loop and the continue keyword moves on to the next iteration of the loop so first let's look at the break statement so let's say that we are looking for a certain number in our list and once we find it we don't need to continue looping through the rest of our values now this is when the break statement comes in handy so let's say that we're looking for the value of three so I could come in here to our list and I could say if num equals equals three then within this conditional we'll print out that we found it and then we will break out of that loop so now let's go ahead and run this so we can see that it looped through the numbers one and two but it didn't hit this conditional when the num equaled one and the num equaled two and since those first two values didn't meet this conditional then it didn't print out found and it didn't break out of the loop but when it got to number three it did meet this conditional so it printed out found and then our break statement broke out of the for loop and when it broke out of the for loop you can see that we didn't iterate through any more values so we did not get through to values four or values five now notice that we broke out of our loop before we printed the number so the three never got printed out but if our print statement were above this conditional then the three would have been printed out so the break statement breaks out of the loop but what if we wanted to just ignore a value but not break out of the loop completely so to do this we can use the continue statement now continue will skip to the next iteration of a loop so if we replace this break statement with continue and run this so we can see here that just like before the first two times through with one and two it didn't meet this conditional so it didn't do anything within this if block and it just printed out our number but when we got to the number three it did meet this conditional and it came in here and printed out found and then our continue statement just skipped to the next iteration without coming out here and printing out the number three so as soon as we hit continue and it just went to the next iteration which was four and five so when four and five ran through they didn't meet these conditionals and it just printed out the number so it's important to understand the break and continue statements and the differences between those because there's a lot of different use cases for when they come in handy to solve certain problems okay so now let's look at something that we might run into which is a loop within a loop and this is possible so within our loop here i'm going to replace this conditional with an inner loop so now i'll say four letter n and i'll just uh make a string here of abc now within this inner loop then i'll just go ahead and print out num comma and the letter so now what's going to happen here is that for each number it'll loop through every character in this string and print out the number and the character and then move on to the next number and do it all over again so let's run this and see what we get so now let me make this just a little bit larger here so now we can see that what happened is that for one it looped through every letter in the string and then after it finished that inner loop then it moved on to the next number before doing the exact same thing so we have one a one b one c then it moved on to two two a two b two c and so on so what this really did is it gave us every combination of those numbers and characters now you want to be careful with nested lists because these combinations can grow pretty quickly so if you have nested loops with a lot of different values then it may take a while to loop through all of those different combinations okay so something that will probably run into a lot is that there's going to be times when we just want to go through a loop a certain number of times and there's a built-in function called range that is really useful for this so let's say that we wanted to just run through a loop 10 times so to do this we can just say for i in range 10 and within here we will just print out i so now if we run this then we can see that it just prints out zero through nine which is 10 items so we start at zero and go up to but not including this number that we passed into range now if we don't want to start at zero then we can also pass a starting value into range so if we wanted to start at one and print out the the values one through ten then what we could do is say that we want to start at one and now we're going to have to go up to 11 because it doesn't include the last value so now if we run this then we can see that now it started at one and goes up to but not including 11 so one through ten okay so now let's take a look at while loops so our for loops iterated through a certain number of values but while loops will just keep going until a certain condition is met or until we hit a break so for example let's say that we had a variable here of x equal to zero and now we can say that while that x is less than 10 then what we want to do is just print out x and then we will iterate x by one now we have to remember that this loop is going to go on forever until this condition here evaluates to false so if we want this loop to end at some point then we have to remember to increment this x so that at some point it will be greater than or equal to 10 so that it breaks out so now if we run this then we can see that it prints out zero through nine so it came in and saw that x was zero which is less than 10 so it goes through the loop prints the value and increments x by one now x is equal to one and it does this check again so one is still less than 10 so it stays in the loop and it does this until we increment x from nine to ten and then it'll come in here and make that check and it checks if 10 is less than 10 which it doesn't which evaluates to false so it breaks out of that loop now at any point you can just use a break to break out of the while loop just like we did with the for loop so if i came in here and i said if x is equal to five then we just want to break out so if we run that then we can see that it went zero through four and once x was equal to five then we hit that break statement now sometimes you'll just want to create an infinite loop that never ends until we get some input or find some value now to create an infinite loop you can just replace the comparison that we're doing here with a value of true so now that we have an infinite loop there's no conditional here that can break out so now we have to have this break statement in here if we ever want to stop this loop so if we run this then we can see that we get the same output there now in this example we're using a conditional but this is also how you would keep a loop going indefinitely until you find or receive values that you're looking for now if you ever accidentally get stuck in an infinite loop then within most environments or operating systems you can interrupt that by pressing control c to stop the process so if we comment out our conditional here with the break statement then this is going to get stuck in an infinite loop and just go on forever so now if we run this code then we can see that we get stuck in this infinite loop where it just keeps incrementing x by one and printing out x now to get out of this on most operating systems you can press control c and it'll interrupt that so i press control c and you can see that it was canceled and if you are in your terminal or command prompt then console control c should send a keyboard interrupt okay so i think that is going to do it for this video i hope that now you have a clear understanding of the different loops and how the break and continue statements work in the next video we'll be learning how to write functions but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and i'll do my best to answer those if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching",
  "segments": [
    {
      "id": 0,
      "start": 0.0,
      "end": 4.32,
      "text": "Hey there how's it going everybody in this video we'll be learning about loops and iterations",
      "tokens": [
        50364,
        1911,
        456,
        577,
        311,
        309,
        516,
        2201,
        294,
        341,
        960,
        321,
        603,
        312,
        2539,
        466,
        16121,
        293,
        36540,
        50580
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06528559246578731,
      "compression_ratio": 1.8505747126436782,
      "no_speech_prob": 0.09251132607460022,
      "confidence": 0.9074886739253998
    },
    {
      "id": 1,
      "start": 4.32,
      "end": 9.36,
      "text": "specifically we'll be going over for loops and while loops now we've seen loops a couple of",
      "tokens": [
        50580,
        4682,
        321,
        603,
        312,
        516,
        670,
        337,
        16121,
        293,
        1339,
        16121,
        586,
        321,
        600,
        1612,
        16121,
        257,
        1916,
        295,
        50832
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06528559246578731,
      "compression_ratio": 1.8505747126436782,
      "no_speech_prob": 0.09251132607460022,
      "confidence": 0.9074886739253998
    },
    {
      "id": 2,
      "start": 9.36,
      "end": 14.72,
      "text": "times in our previous videos when looping through strings or lists but there's some more functionality",
      "tokens": [
        50832,
        1413,
        294,
        527,
        3894,
        2145,
        562,
        6367,
        278,
        807,
        13985,
        420,
        14511,
        457,
        456,
        311,
        512,
        544,
        14980,
        51100
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06528559246578731,
      "compression_ratio": 1.8505747126436782,
      "no_speech_prob": 0.09251132607460022,
      "confidence": 0.9074886739253998
    },
    {
      "id": 3,
      "start": 14.72,
      "end": 20.080000000000002,
      "text": "that we haven't gone over yet that we'll see in this video but first let's just do a quick recap",
      "tokens": [
        51100,
        300,
        321,
        2378,
        380,
        2780,
        670,
        1939,
        300,
        321,
        603,
        536,
        294,
        341,
        960,
        457,
        700,
        718,
        311,
        445,
        360,
        257,
        1702,
        20928,
        51368
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06528559246578731,
      "compression_ratio": 1.8505747126436782,
      "no_speech_prob": 0.09251132607460022,
      "confidence": 0.9074886739253998
    },
    {
      "id": 4,
      "start": 20.080000000000002,
      "end": 25.84,
      "text": "so we've got a list of numbers here with numbers one through five so let's loop through this list",
      "tokens": [
        51368,
        370,
        321,
        600,
        658,
        257,
        1329,
        295,
        3547,
        510,
        365,
        3547,
        472,
        807,
        1732,
        370,
        718,
        311,
        6367,
        807,
        341,
        1329,
        51656
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06528559246578731,
      "compression_ratio": 1.8505747126436782,
      "no_speech_prob": 0.09251132607460022,
      "confidence": 0.9074886739253998
    },
    {
      "id": 5,
      "start": 25.84,
      "end": 32.24,
      "text": "so to do this we're going to use a for loop so we'll say for num in nums and within here",
      "tokens": [
        50364,
        370,
        281,
        360,
        341,
        321,
        434,
        516,
        281,
        764,
        257,
        337,
        6367,
        370,
        321,
        603,
        584,
        337,
        1031,
        294,
        1031,
        82,
        293,
        1951,
        510,
        50684
      ],
      "temperature": 0.0,
      "avg_logprob": -0.041954479217529296,
      "compression_ratio": 1.8823529411764706,
      "no_speech_prob": 0.3737182319164276,
      "confidence": 0.6262817680835724
    },
    {
      "id": 6,
      "start": 32.24,
      "end": 37.44,
      "text": "I'm just going to print out that num so what we're saying here is that we want to create a loop",
      "tokens": [
        50684,
        286,
        478,
        445,
        516,
        281,
        4482,
        484,
        300,
        1031,
        370,
        437,
        321,
        434,
        1566,
        510,
        307,
        300,
        321,
        528,
        281,
        1884,
        257,
        6367,
        50944
      ],
      "temperature": 0.0,
      "avg_logprob": -0.041954479217529296,
      "compression_ratio": 1.8823529411764706,
      "no_speech_prob": 0.3737182319164276,
      "confidence": 0.6262817680835724
    },
    {
      "id": 7,
      "start": 37.44,
      "end": 44.16,
      "text": "where we're looping through each value of our list and each time through the loop this num variable",
      "tokens": [
        50944,
        689,
        321,
        434,
        6367,
        278,
        807,
        1184,
        2158,
        295,
        527,
        1329,
        293,
        1184,
        565,
        807,
        264,
        6367,
        341,
        1031,
        7006,
        51280
      ],
      "temperature": 0.0,
      "avg_logprob": -0.041954479217529296,
      "compression_ratio": 1.8823529411764706,
      "no_speech_prob": 0.3737182319164276,
      "confidence": 0.6262817680835724
    },
    {
      "id": 8,
      "start": 44.16,
      "end": 50.16,
      "text": "will be equal to the next item in the list so the first time through it'll be equal to one the next",
      "tokens": [
        51280,
        486,
        312,
        2681,
        281,
        264,
        958,
        3174,
        294,
        264,
        1329,
        370,
        264,
        700,
        565,
        807,
        309,
        603,
        312,
        2681,
        281,
        472,
        264,
        958,
        51580
      ],
      "temperature": 0.0,
      "avg_logprob": -0.041954479217529296,
      "compression_ratio": 1.8823529411764706,
      "no_speech_prob": 0.3737182319164276,
      "confidence": 0.6262817680835724
    },
    {
      "id": 9,
      "start": 50.16,
      "end": 56.0,
      "text": "time through it'll be equal to two and so on so if we run this we can see that it looped through",
      "tokens": [
        50364,
        565,
        807,
        309,
        603,
        312,
        2681,
        281,
        732,
        293,
        370,
        322,
        370,
        498,
        321,
        1190,
        341,
        321,
        393,
        536,
        300,
        309,
        6367,
        292,
        807,
        50656
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03345849026333202,
      "compression_ratio": 1.8095238095238095,
      "no_speech_prob": 0.3172096908092499,
      "confidence": 0.6827903091907501
    },
    {
      "id": 10,
      "start": 56.0,
      "end": 63.12,
      "text": "and printed each number of our list so now let's look at two important keywords when working with",
      "tokens": [
        50656,
        293,
        13567,
        1184,
        1230,
        295,
        527,
        1329,
        370,
        586,
        718,
        311,
        574,
        412,
        732,
        1021,
        21009,
        562,
        1364,
        365,
        51012
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03345849026333202,
      "compression_ratio": 1.8095238095238095,
      "no_speech_prob": 0.3172096908092499,
      "confidence": 0.6827903091907501
    },
    {
      "id": 11,
      "start": 63.12,
      "end": 69.75999999999999,
      "text": "loops and these are the break and continue keywords so the break keyword will completely",
      "tokens": [
        51012,
        16121,
        293,
        613,
        366,
        264,
        1821,
        293,
        2354,
        21009,
        370,
        264,
        1821,
        20428,
        486,
        2584,
        51344
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03345849026333202,
      "compression_ratio": 1.8095238095238095,
      "no_speech_prob": 0.3172096908092499,
      "confidence": 0.6827903091907501
    },
    {
      "id": 12,
      "start": 69.75999999999999,
      "end": 76.72,
      "text": "break out of a loop and the continue keyword moves on to the next iteration of the loop so first",
      "tokens": [
        51344,
        1821,
        484,
        295,
        257,
        6367,
        293,
        264,
        2354,
        20428,
        6067,
        322,
        281,
        264,
        958,
        24784,
        295,
        264,
        6367,
        370,
        700,
        51692
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03345849026333202,
      "compression_ratio": 1.8095238095238095,
      "no_speech_prob": 0.3172096908092499,
      "confidence": 0.6827903091907501
    },
    {
      "id": 13,
      "start": 76.72,
      "end": 82.8,
      "text": "let's look at the break statement so let's say that we are looking for a certain number in our",
      "tokens": [
        50364,
        718,
        311,
        574,
        412,
        264,
        1821,
        5629,
        370,
        718,
        311,
        584,
        300,
        321,
        366,
        1237,
        337,
        257,
        1629,
        1230,
        294,
        527,
        50668
      ],
      "temperature": 0.0,
      "avg_logprob": -0.031386505930047284,
      "compression_ratio": 1.9064039408866995,
      "no_speech_prob": 0.015215340070426464,
      "confidence": 0.9847846599295735
    },
    {
      "id": 14,
      "start": 82.8,
      "end": 88.16,
      "text": "list and once we find it we don't need to continue looping through the rest of our values now this is",
      "tokens": [
        50668,
        1329,
        293,
        1564,
        321,
        915,
        309,
        321,
        500,
        380,
        643,
        281,
        2354,
        6367,
        278,
        807,
        264,
        1472,
        295,
        527,
        4190,
        586,
        341,
        307,
        50936
      ],
      "temperature": 0.0,
      "avg_logprob": -0.031386505930047284,
      "compression_ratio": 1.9064039408866995,
      "no_speech_prob": 0.015215340070426464,
      "confidence": 0.9847846599295735
    },
    {
      "id": 15,
      "start": 88.16,
      "end": 93.92,
      "text": "when the break statement comes in handy so let's say that we're looking for the value of three",
      "tokens": [
        50936,
        562,
        264,
        1821,
        5629,
        1487,
        294,
        13239,
        370,
        718,
        311,
        584,
        300,
        321,
        434,
        1237,
        337,
        264,
        2158,
        295,
        1045,
        51224
      ],
      "temperature": 0.0,
      "avg_logprob": -0.031386505930047284,
      "compression_ratio": 1.9064039408866995,
      "no_speech_prob": 0.015215340070426464,
      "confidence": 0.9847846599295735
    },
    {
      "id": 16,
      "start": 93.92,
      "end": 101.84,
      "text": "so I could come in here to our list and I could say if num equals equals three then within this",
      "tokens": [
        51224,
        370,
        286,
        727,
        808,
        294,
        510,
        281,
        527,
        1329,
        293,
        286,
        727,
        584,
        498,
        1031,
        6915,
        6915,
        1045,
        550,
        1951,
        341,
        51620
      ],
      "temperature": 0.0,
      "avg_logprob": -0.031386505930047284,
      "compression_ratio": 1.9064039408866995,
      "no_speech_prob": 0.015215340070426464,
      "confidence": 0.9847846599295735
    },
    {
      "id": 17,
      "start": 102.4,
      "end": 110.80000000000001,
      "text": "conditional we'll print out that we found it and then we will break out of that loop so now let's",
      "tokens": [
        50392,
        27708,
        321,
        603,
        4482,
        484,
        300,
        321,
        1352,
        309,
        293,
        550,
        321,
        486,
        1821,
        484,
        295,
        300,
        6367,
        370,
        586,
        718,
        311,
        50812
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02977425290137222,
      "compression_ratio": 2.046875,
      "no_speech_prob": 0.3001367747783661,
      "confidence": 0.6998632252216339
    },
    {
      "id": 18,
      "start": 110.80000000000001,
      "end": 118.56,
      "text": "go ahead and run this so we can see that it looped through the numbers one and two but it didn't hit",
      "tokens": [
        50812,
        352,
        2286,
        293,
        1190,
        341,
        370,
        321,
        393,
        536,
        300,
        309,
        6367,
        292,
        807,
        264,
        3547,
        472,
        293,
        732,
        457,
        309,
        994,
        380,
        2045,
        51200
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02977425290137222,
      "compression_ratio": 2.046875,
      "no_speech_prob": 0.3001367747783661,
      "confidence": 0.6998632252216339
    },
    {
      "id": 19,
      "start": 118.56,
      "end": 125.04,
      "text": "this conditional when the num equaled one and the num equaled two and since those first two values",
      "tokens": [
        51200,
        341,
        27708,
        562,
        264,
        1031,
        2681,
        292,
        472,
        293,
        264,
        1031,
        2681,
        292,
        732,
        293,
        1670,
        729,
        700,
        732,
        4190,
        51524
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02977425290137222,
      "compression_ratio": 2.046875,
      "no_speech_prob": 0.3001367747783661,
      "confidence": 0.6998632252216339
    },
    {
      "id": 20,
      "start": 125.04,
      "end": 129.92000000000002,
      "text": "didn't meet this conditional then it didn't print out found and it didn't break out of the loop",
      "tokens": [
        51524,
        994,
        380,
        1677,
        341,
        27708,
        550,
        309,
        994,
        380,
        4482,
        484,
        1352,
        293,
        309,
        994,
        380,
        1821,
        484,
        295,
        264,
        6367,
        51768
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02977425290137222,
      "compression_ratio": 2.046875,
      "no_speech_prob": 0.3001367747783661,
      "confidence": 0.6998632252216339
    },
    {
      "id": 21,
      "start": 129.92,
      "end": 136.0,
      "text": "but when it got to number three it did meet this conditional so it printed out found and then our",
      "tokens": [
        50364,
        457,
        562,
        309,
        658,
        281,
        1230,
        1045,
        309,
        630,
        1677,
        341,
        27708,
        370,
        309,
        13567,
        484,
        1352,
        293,
        550,
        527,
        50668
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030726841517857144,
      "compression_ratio": 1.9170731707317072,
      "no_speech_prob": 0.05279887840151787,
      "confidence": 0.9472011215984821
    },
    {
      "id": 22,
      "start": 136.0,
      "end": 140.95999999999998,
      "text": "break statement broke out of the for loop and when it broke out of the for loop you can see that we",
      "tokens": [
        50668,
        1821,
        5629,
        6902,
        484,
        295,
        264,
        337,
        6367,
        293,
        562,
        309,
        6902,
        484,
        295,
        264,
        337,
        6367,
        291,
        393,
        536,
        300,
        321,
        50916
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030726841517857144,
      "compression_ratio": 1.9170731707317072,
      "no_speech_prob": 0.05279887840151787,
      "confidence": 0.9472011215984821
    },
    {
      "id": 23,
      "start": 140.95999999999998,
      "end": 148.23999999999998,
      "text": "didn't iterate through any more values so we did not get through to values four or values five now",
      "tokens": [
        50916,
        994,
        380,
        44497,
        807,
        604,
        544,
        4190,
        370,
        321,
        630,
        406,
        483,
        807,
        281,
        4190,
        1451,
        420,
        4190,
        1732,
        586,
        51280
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030726841517857144,
      "compression_ratio": 1.9170731707317072,
      "no_speech_prob": 0.05279887840151787,
      "confidence": 0.9472011215984821
    },
    {
      "id": 24,
      "start": 148.23999999999998,
      "end": 155.44,
      "text": "notice that we broke out of our loop before we printed the number so the three never got printed",
      "tokens": [
        51280,
        3449,
        300,
        321,
        6902,
        484,
        295,
        527,
        6367,
        949,
        321,
        13567,
        264,
        1230,
        370,
        264,
        1045,
        1128,
        658,
        13567,
        51640
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030726841517857144,
      "compression_ratio": 1.9170731707317072,
      "no_speech_prob": 0.05279887840151787,
      "confidence": 0.9472011215984821
    },
    {
      "id": 25,
      "start": 155.44,
      "end": 160.72,
      "text": "out but if our print statement were above this conditional then the three would have been printed",
      "tokens": [
        50364,
        484,
        457,
        498,
        527,
        4482,
        5629,
        645,
        3673,
        341,
        27708,
        550,
        264,
        1045,
        576,
        362,
        668,
        13567,
        50628
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04612473880543428,
      "compression_ratio": 1.949748743718593,
      "no_speech_prob": 0.2584177255630493,
      "confidence": 0.7415822744369507
    },
    {
      "id": 26,
      "start": 160.72,
      "end": 167.28,
      "text": "out so the break statement breaks out of the loop but what if we wanted to just ignore a value but",
      "tokens": [
        50628,
        484,
        370,
        264,
        1821,
        5629,
        9857,
        484,
        295,
        264,
        6367,
        457,
        437,
        498,
        321,
        1415,
        281,
        445,
        11200,
        257,
        2158,
        457,
        50956
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04612473880543428,
      "compression_ratio": 1.949748743718593,
      "no_speech_prob": 0.2584177255630493,
      "confidence": 0.7415822744369507
    },
    {
      "id": 27,
      "start": 167.28,
      "end": 173.44,
      "text": "not break out of the loop completely so to do this we can use the continue statement now continue",
      "tokens": [
        50956,
        406,
        1821,
        484,
        295,
        264,
        6367,
        2584,
        370,
        281,
        360,
        341,
        321,
        393,
        764,
        264,
        2354,
        5629,
        586,
        2354,
        51264
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04612473880543428,
      "compression_ratio": 1.949748743718593,
      "no_speech_prob": 0.2584177255630493,
      "confidence": 0.7415822744369507
    },
    {
      "id": 28,
      "start": 173.44,
      "end": 179.68,
      "text": "will skip to the next iteration of a loop so if we replace this break statement with continue",
      "tokens": [
        51264,
        486,
        10023,
        281,
        264,
        958,
        24784,
        295,
        257,
        6367,
        370,
        498,
        321,
        7406,
        341,
        1821,
        5629,
        365,
        2354,
        51576
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04612473880543428,
      "compression_ratio": 1.949748743718593,
      "no_speech_prob": 0.2584177255630493,
      "confidence": 0.7415822744369507
    },
    {
      "id": 29,
      "start": 180.48000000000002,
      "end": 186.16,
      "text": "and run this so we can see here that just like before the first two times through with one and",
      "tokens": [
        50404,
        293,
        1190,
        341,
        370,
        321,
        393,
        536,
        510,
        300,
        445,
        411,
        949,
        264,
        700,
        732,
        1413,
        807,
        365,
        472,
        293,
        50688
      ],
      "temperature": 0.0,
      "avg_logprob": -0.038553336881241705,
      "compression_ratio": 2.0127659574468084,
      "no_speech_prob": 0.45725521445274353,
      "confidence": 0.5427447855472565
    },
    {
      "id": 30,
      "start": 186.16,
      "end": 191.52,
      "text": "two it didn't meet this conditional so it didn't do anything within this if block and it just",
      "tokens": [
        50688,
        732,
        309,
        994,
        380,
        1677,
        341,
        27708,
        370,
        309,
        994,
        380,
        360,
        1340,
        1951,
        341,
        498,
        3461,
        293,
        309,
        445,
        50956
      ],
      "temperature": 0.0,
      "avg_logprob": -0.038553336881241705,
      "compression_ratio": 2.0127659574468084,
      "no_speech_prob": 0.45725521445274353,
      "confidence": 0.5427447855472565
    },
    {
      "id": 31,
      "start": 191.52,
      "end": 196.56,
      "text": "printed out our number but when we got to the number three it did meet this conditional and",
      "tokens": [
        50956,
        13567,
        484,
        527,
        1230,
        457,
        562,
        321,
        658,
        281,
        264,
        1230,
        1045,
        309,
        630,
        1677,
        341,
        27708,
        293,
        51208
      ],
      "temperature": 0.0,
      "avg_logprob": -0.038553336881241705,
      "compression_ratio": 2.0127659574468084,
      "no_speech_prob": 0.45725521445274353,
      "confidence": 0.5427447855472565
    },
    {
      "id": 32,
      "start": 196.56,
      "end": 202.0,
      "text": "it came in here and printed out found and then our continue statement just skipped to the next",
      "tokens": [
        51208,
        309,
        1361,
        294,
        510,
        293,
        13567,
        484,
        1352,
        293,
        550,
        527,
        2354,
        5629,
        445,
        30193,
        281,
        264,
        958,
        51480
      ],
      "temperature": 0.0,
      "avg_logprob": -0.038553336881241705,
      "compression_ratio": 2.0127659574468084,
      "no_speech_prob": 0.45725521445274353,
      "confidence": 0.5427447855472565
    },
    {
      "id": 33,
      "start": 202.0,
      "end": 208.0,
      "text": "iteration without coming out here and printing out the number three so as soon as we hit continue",
      "tokens": [
        51480,
        24784,
        1553,
        1348,
        484,
        510,
        293,
        14699,
        484,
        264,
        1230,
        1045,
        370,
        382,
        2321,
        382,
        321,
        2045,
        2354,
        51780
      ],
      "temperature": 0.0,
      "avg_logprob": -0.038553336881241705,
      "compression_ratio": 2.0127659574468084,
      "no_speech_prob": 0.45725521445274353,
      "confidence": 0.5427447855472565
    },
    {
      "id": 34,
      "start": 208.0,
      "end": 214.16,
      "text": "and it just went to the next iteration which was four and five so when four and five ran through",
      "tokens": [
        50364,
        293,
        309,
        445,
        1437,
        281,
        264,
        958,
        24784,
        597,
        390,
        1451,
        293,
        1732,
        370,
        562,
        1451,
        293,
        1732,
        5872,
        807,
        50672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03439188230605353,
      "compression_ratio": 1.7761194029850746,
      "no_speech_prob": 0.00858122855424881,
      "confidence": 0.9914187714457512
    },
    {
      "id": 35,
      "start": 214.16,
      "end": 217.84,
      "text": "they didn't meet these conditionals and it just printed out the number so it's important to",
      "tokens": [
        50672,
        436,
        994,
        380,
        1677,
        613,
        4188,
        1124,
        293,
        309,
        445,
        13567,
        484,
        264,
        1230,
        370,
        309,
        311,
        1021,
        281,
        50856
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03439188230605353,
      "compression_ratio": 1.7761194029850746,
      "no_speech_prob": 0.00858122855424881,
      "confidence": 0.9914187714457512
    },
    {
      "id": 36,
      "start": 217.84,
      "end": 222.56,
      "text": "understand the break and continue statements and the differences between those because there's a",
      "tokens": [
        50856,
        1223,
        264,
        1821,
        293,
        2354,
        12363,
        293,
        264,
        7300,
        1296,
        729,
        570,
        456,
        311,
        257,
        51092
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03439188230605353,
      "compression_ratio": 1.7761194029850746,
      "no_speech_prob": 0.00858122855424881,
      "confidence": 0.9914187714457512
    },
    {
      "id": 37,
      "start": 222.56,
      "end": 227.36,
      "text": "lot of different use cases for when they come in handy to solve certain problems okay so now",
      "tokens": [
        51092,
        688,
        295,
        819,
        764,
        3331,
        337,
        562,
        436,
        808,
        294,
        13239,
        281,
        5039,
        1629,
        2740,
        1392,
        370,
        586,
        51332
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03439188230605353,
      "compression_ratio": 1.7761194029850746,
      "no_speech_prob": 0.00858122855424881,
      "confidence": 0.9914187714457512
    },
    {
      "id": 38,
      "start": 227.36,
      "end": 233.12,
      "text": "let's look at something that we might run into which is a loop within a loop and this is possible",
      "tokens": [
        51332,
        718,
        311,
        574,
        412,
        746,
        300,
        321,
        1062,
        1190,
        666,
        597,
        307,
        257,
        6367,
        1951,
        257,
        6367,
        293,
        341,
        307,
        1944,
        51620
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03439188230605353,
      "compression_ratio": 1.7761194029850746,
      "no_speech_prob": 0.00858122855424881,
      "confidence": 0.9914187714457512
    },
    {
      "id": 39,
      "start": 233.12,
      "end": 239.20000000000002,
      "text": "so within our loop here i'm going to replace this conditional with an inner loop so now i'll say",
      "tokens": [
        50364,
        370,
        1951,
        527,
        6367,
        510,
        741,
        478,
        516,
        281,
        7406,
        341,
        27708,
        365,
        364,
        7284,
        6367,
        370,
        586,
        741,
        603,
        584,
        50668
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05351365373489705,
      "compression_ratio": 1.9444444444444444,
      "no_speech_prob": 0.1474606990814209,
      "confidence": 0.8525393009185791
    },
    {
      "id": 40,
      "start": 239.20000000000002,
      "end": 246.48000000000002,
      "text": "four letter n and i'll just uh make a string here of abc now within this inner loop then i'll just",
      "tokens": [
        50668,
        1451,
        5063,
        297,
        293,
        741,
        603,
        445,
        2232,
        652,
        257,
        6798,
        510,
        295,
        410,
        66,
        586,
        1951,
        341,
        7284,
        6367,
        550,
        741,
        603,
        445,
        51032
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05351365373489705,
      "compression_ratio": 1.9444444444444444,
      "no_speech_prob": 0.1474606990814209,
      "confidence": 0.8525393009185791
    },
    {
      "id": 41,
      "start": 246.48000000000002,
      "end": 253.6,
      "text": "go ahead and print out num comma and the letter so now what's going to happen here is that for",
      "tokens": [
        51032,
        352,
        2286,
        293,
        4482,
        484,
        1031,
        22117,
        293,
        264,
        5063,
        370,
        586,
        437,
        311,
        516,
        281,
        1051,
        510,
        307,
        300,
        337,
        51388
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05351365373489705,
      "compression_ratio": 1.9444444444444444,
      "no_speech_prob": 0.1474606990814209,
      "confidence": 0.8525393009185791
    },
    {
      "id": 42,
      "start": 253.6,
      "end": 259.6,
      "text": "each number it'll loop through every character in this string and print out the number and the",
      "tokens": [
        51388,
        1184,
        1230,
        309,
        603,
        6367,
        807,
        633,
        2517,
        294,
        341,
        6798,
        293,
        4482,
        484,
        264,
        1230,
        293,
        264,
        51688
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05351365373489705,
      "compression_ratio": 1.9444444444444444,
      "no_speech_prob": 0.1474606990814209,
      "confidence": 0.8525393009185791
    },
    {
      "id": 43,
      "start": 259.6,
      "end": 265.6,
      "text": "character and then move on to the next number and do it all over again so let's run this and see",
      "tokens": [
        50364,
        2517,
        293,
        550,
        1286,
        322,
        281,
        264,
        958,
        1230,
        293,
        360,
        309,
        439,
        670,
        797,
        370,
        718,
        311,
        1190,
        341,
        293,
        536,
        50664
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03206419442829333,
      "compression_ratio": 1.8224299065420562,
      "no_speech_prob": 0.21343879401683807,
      "confidence": 0.7865612059831619
    },
    {
      "id": 44,
      "start": 265.6,
      "end": 270.88,
      "text": "what we get so now let me make this just a little bit larger here so now we can see that what",
      "tokens": [
        50664,
        437,
        321,
        483,
        370,
        586,
        718,
        385,
        652,
        341,
        445,
        257,
        707,
        857,
        4833,
        510,
        370,
        586,
        321,
        393,
        536,
        300,
        437,
        50928
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03206419442829333,
      "compression_ratio": 1.8224299065420562,
      "no_speech_prob": 0.21343879401683807,
      "confidence": 0.7865612059831619
    },
    {
      "id": 45,
      "start": 270.88,
      "end": 277.52000000000004,
      "text": "happened is that for one it looped through every letter in the string and then after it finished",
      "tokens": [
        50928,
        2011,
        307,
        300,
        337,
        472,
        309,
        6367,
        292,
        807,
        633,
        5063,
        294,
        264,
        6798,
        293,
        550,
        934,
        309,
        4335,
        51260
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03206419442829333,
      "compression_ratio": 1.8224299065420562,
      "no_speech_prob": 0.21343879401683807,
      "confidence": 0.7865612059831619
    },
    {
      "id": 46,
      "start": 277.52000000000004,
      "end": 283.84000000000003,
      "text": "that inner loop then it moved on to the next number before doing the exact same thing so we have one a",
      "tokens": [
        51260,
        300,
        7284,
        6367,
        550,
        309,
        4259,
        322,
        281,
        264,
        958,
        1230,
        949,
        884,
        264,
        1900,
        912,
        551,
        370,
        321,
        362,
        472,
        257,
        51576
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03206419442829333,
      "compression_ratio": 1.8224299065420562,
      "no_speech_prob": 0.21343879401683807,
      "confidence": 0.7865612059831619
    },
    {
      "id": 47,
      "start": 283.84,
      "end": 290.08,
      "text": "one b one c then it moved on to two two a two b two c and so on so what this really did is it gave",
      "tokens": [
        50364,
        472,
        272,
        472,
        269,
        550,
        309,
        4259,
        322,
        281,
        732,
        732,
        257,
        732,
        272,
        732,
        269,
        293,
        370,
        322,
        370,
        437,
        341,
        534,
        630,
        307,
        309,
        2729,
        50676
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05287910984680716,
      "compression_ratio": 1.8239700374531835,
      "no_speech_prob": 0.19280314445495605,
      "confidence": 0.807196855545044
    },
    {
      "id": 48,
      "start": 290.08,
      "end": 295.84,
      "text": "us every combination of those numbers and characters now you want to be careful with nested lists",
      "tokens": [
        50676,
        505,
        633,
        6562,
        295,
        729,
        3547,
        293,
        4342,
        586,
        291,
        528,
        281,
        312,
        5026,
        365,
        15646,
        292,
        14511,
        50964
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05287910984680716,
      "compression_ratio": 1.8239700374531835,
      "no_speech_prob": 0.19280314445495605,
      "confidence": 0.807196855545044
    },
    {
      "id": 49,
      "start": 295.84,
      "end": 301.44,
      "text": "because these combinations can grow pretty quickly so if you have nested loops with a lot of different",
      "tokens": [
        50964,
        570,
        613,
        21267,
        393,
        1852,
        1238,
        2661,
        370,
        498,
        291,
        362,
        15646,
        292,
        16121,
        365,
        257,
        688,
        295,
        819,
        51244
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05287910984680716,
      "compression_ratio": 1.8239700374531835,
      "no_speech_prob": 0.19280314445495605,
      "confidence": 0.807196855545044
    },
    {
      "id": 50,
      "start": 301.44,
      "end": 306.71999999999997,
      "text": "values then it may take a while to loop through all of those different combinations okay so",
      "tokens": [
        51244,
        4190,
        550,
        309,
        815,
        747,
        257,
        1339,
        281,
        6367,
        807,
        439,
        295,
        729,
        819,
        21267,
        1392,
        370,
        51508
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05287910984680716,
      "compression_ratio": 1.8239700374531835,
      "no_speech_prob": 0.19280314445495605,
      "confidence": 0.807196855545044
    },
    {
      "id": 51,
      "start": 306.71999999999997,
      "end": 311.76,
      "text": "something that will probably run into a lot is that there's going to be times when we just want",
      "tokens": [
        51508,
        746,
        300,
        486,
        1391,
        1190,
        666,
        257,
        688,
        307,
        300,
        456,
        311,
        516,
        281,
        312,
        1413,
        562,
        321,
        445,
        528,
        51760
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05287910984680716,
      "compression_ratio": 1.8239700374531835,
      "no_speech_prob": 0.19280314445495605,
      "confidence": 0.807196855545044
    },
    {
      "id": 52,
      "start": 311.76,
      "end": 318.0,
      "text": "to go through a loop a certain number of times and there's a built-in function called range that",
      "tokens": [
        50364,
        281,
        352,
        807,
        257,
        6367,
        257,
        1629,
        1230,
        295,
        1413,
        293,
        456,
        311,
        257,
        3094,
        12,
        259,
        2445,
        1219,
        3613,
        300,
        50676
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04523243151212993,
      "compression_ratio": 1.7677725118483412,
      "no_speech_prob": 0.007696617394685745,
      "confidence": 0.9923033826053143
    },
    {
      "id": 53,
      "start": 318.0,
      "end": 323.68,
      "text": "is really useful for this so let's say that we wanted to just run through a loop 10 times",
      "tokens": [
        50676,
        307,
        534,
        4420,
        337,
        341,
        370,
        718,
        311,
        584,
        300,
        321,
        1415,
        281,
        445,
        1190,
        807,
        257,
        6367,
        1266,
        1413,
        50960
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04523243151212993,
      "compression_ratio": 1.7677725118483412,
      "no_speech_prob": 0.007696617394685745,
      "confidence": 0.9923033826053143
    },
    {
      "id": 54,
      "start": 323.68,
      "end": 332.4,
      "text": "so to do this we can just say for i in range 10 and within here we will just print out i",
      "tokens": [
        50960,
        370,
        281,
        360,
        341,
        321,
        393,
        445,
        584,
        337,
        741,
        294,
        3613,
        1266,
        293,
        1951,
        510,
        321,
        486,
        445,
        4482,
        484,
        741,
        51396
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04523243151212993,
      "compression_ratio": 1.7677725118483412,
      "no_speech_prob": 0.007696617394685745,
      "confidence": 0.9923033826053143
    },
    {
      "id": 55,
      "start": 332.4,
      "end": 339.36,
      "text": "so now if we run this then we can see that it just prints out zero through nine which is 10 items",
      "tokens": [
        51396,
        370,
        586,
        498,
        321,
        1190,
        341,
        550,
        321,
        393,
        536,
        300,
        309,
        445,
        22305,
        484,
        4018,
        807,
        4949,
        597,
        307,
        1266,
        4754,
        51744
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04523243151212993,
      "compression_ratio": 1.7677725118483412,
      "no_speech_prob": 0.007696617394685745,
      "confidence": 0.9923033826053143
    },
    {
      "id": 56,
      "start": 339.36,
      "end": 346.24,
      "text": "so we start at zero and go up to but not including this number that we passed into range now if we",
      "tokens": [
        50364,
        370,
        321,
        722,
        412,
        4018,
        293,
        352,
        493,
        281,
        457,
        406,
        3009,
        341,
        1230,
        300,
        321,
        4678,
        666,
        3613,
        586,
        498,
        321,
        50708
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03038301418737038,
      "compression_ratio": 1.8768472906403941,
      "no_speech_prob": 0.006623170804232359,
      "confidence": 0.9933768291957676
    },
    {
      "id": 57,
      "start": 346.24,
      "end": 351.92,
      "text": "don't want to start at zero then we can also pass a starting value into range so if we wanted to",
      "tokens": [
        50708,
        500,
        380,
        528,
        281,
        722,
        412,
        4018,
        550,
        321,
        393,
        611,
        1320,
        257,
        2891,
        2158,
        666,
        3613,
        370,
        498,
        321,
        1415,
        281,
        50992
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03038301418737038,
      "compression_ratio": 1.8768472906403941,
      "no_speech_prob": 0.006623170804232359,
      "confidence": 0.9933768291957676
    },
    {
      "id": 58,
      "start": 351.92,
      "end": 358.40000000000003,
      "text": "start at one and print out the the values one through ten then what we could do is say that",
      "tokens": [
        50992,
        722,
        412,
        472,
        293,
        4482,
        484,
        264,
        264,
        4190,
        472,
        807,
        2064,
        550,
        437,
        321,
        727,
        360,
        307,
        584,
        300,
        51316
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03038301418737038,
      "compression_ratio": 1.8768472906403941,
      "no_speech_prob": 0.006623170804232359,
      "confidence": 0.9933768291957676
    },
    {
      "id": 59,
      "start": 358.40000000000003,
      "end": 364.96000000000004,
      "text": "we want to start at one and now we're going to have to go up to 11 because it doesn't include",
      "tokens": [
        51316,
        321,
        528,
        281,
        722,
        412,
        472,
        293,
        586,
        321,
        434,
        516,
        281,
        362,
        281,
        352,
        493,
        281,
        2975,
        570,
        309,
        1177,
        380,
        4090,
        51644
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03038301418737038,
      "compression_ratio": 1.8768472906403941,
      "no_speech_prob": 0.006623170804232359,
      "confidence": 0.9933768291957676
    },
    {
      "id": 60,
      "start": 365.03999999999996,
      "end": 372.0,
      "text": "the last value so now if we run this then we can see that now it started at one and goes up to but",
      "tokens": [
        50368,
        264,
        1036,
        2158,
        370,
        586,
        498,
        321,
        1190,
        341,
        550,
        321,
        393,
        536,
        300,
        586,
        309,
        1409,
        412,
        472,
        293,
        1709,
        493,
        281,
        457,
        50716
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06488610819766397,
      "compression_ratio": 1.7354260089686098,
      "no_speech_prob": 0.23168693482875824,
      "confidence": 0.7683130651712418
    },
    {
      "id": 61,
      "start": 372.0,
      "end": 379.91999999999996,
      "text": "not including 11 so one through ten okay so now let's take a look at while loops so our for loops",
      "tokens": [
        50716,
        406,
        3009,
        2975,
        370,
        472,
        807,
        2064,
        1392,
        370,
        586,
        718,
        311,
        747,
        257,
        574,
        412,
        1339,
        16121,
        370,
        527,
        337,
        16121,
        51112
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06488610819766397,
      "compression_ratio": 1.7354260089686098,
      "no_speech_prob": 0.23168693482875824,
      "confidence": 0.7683130651712418
    },
    {
      "id": 62,
      "start": 379.91999999999996,
      "end": 386.24,
      "text": "iterated through a certain number of values but while loops will just keep going until a certain",
      "tokens": [
        51112,
        17138,
        770,
        807,
        257,
        1629,
        1230,
        295,
        4190,
        457,
        1339,
        16121,
        486,
        445,
        1066,
        516,
        1826,
        257,
        1629,
        51428
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06488610819766397,
      "compression_ratio": 1.7354260089686098,
      "no_speech_prob": 0.23168693482875824,
      "confidence": 0.7683130651712418
    },
    {
      "id": 63,
      "start": 386.24,
      "end": 392.47999999999996,
      "text": "condition is met or until we hit a break so for example let's say that we had a variable here",
      "tokens": [
        51428,
        4188,
        307,
        1131,
        420,
        1826,
        321,
        2045,
        257,
        1821,
        370,
        337,
        1365,
        718,
        311,
        584,
        300,
        321,
        632,
        257,
        7006,
        510,
        51740
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06488610819766397,
      "compression_ratio": 1.7354260089686098,
      "no_speech_prob": 0.23168693482875824,
      "confidence": 0.7683130651712418
    },
    {
      "id": 64,
      "start": 392.48,
      "end": 401.20000000000005,
      "text": "of x equal to zero and now we can say that while that x is less than 10 then what we want to do",
      "tokens": [
        50364,
        295,
        2031,
        2681,
        281,
        4018,
        293,
        586,
        321,
        393,
        584,
        300,
        1339,
        300,
        2031,
        307,
        1570,
        813,
        1266,
        550,
        437,
        321,
        528,
        281,
        360,
        50800
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03382393469413122,
      "compression_ratio": 1.8487804878048781,
      "no_speech_prob": 0.013417743146419525,
      "confidence": 0.9865822568535805
    },
    {
      "id": 65,
      "start": 401.20000000000005,
      "end": 408.64000000000004,
      "text": "is just print out x and then we will iterate x by one now we have to remember that this loop",
      "tokens": [
        50800,
        307,
        445,
        4482,
        484,
        2031,
        293,
        550,
        321,
        486,
        44497,
        2031,
        538,
        472,
        586,
        321,
        362,
        281,
        1604,
        300,
        341,
        6367,
        51172
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03382393469413122,
      "compression_ratio": 1.8487804878048781,
      "no_speech_prob": 0.013417743146419525,
      "confidence": 0.9865822568535805
    },
    {
      "id": 66,
      "start": 408.64000000000004,
      "end": 415.76,
      "text": "is going to go on forever until this condition here evaluates to false so if we want this loop",
      "tokens": [
        51172,
        307,
        516,
        281,
        352,
        322,
        5680,
        1826,
        341,
        4188,
        510,
        6133,
        1024,
        281,
        7908,
        370,
        498,
        321,
        528,
        341,
        6367,
        51528
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03382393469413122,
      "compression_ratio": 1.8487804878048781,
      "no_speech_prob": 0.013417743146419525,
      "confidence": 0.9865822568535805
    },
    {
      "id": 67,
      "start": 415.76,
      "end": 422.24,
      "text": "to end at some point then we have to remember to increment this x so that at some point it will",
      "tokens": [
        51528,
        281,
        917,
        412,
        512,
        935,
        550,
        321,
        362,
        281,
        1604,
        281,
        26200,
        341,
        2031,
        370,
        300,
        412,
        512,
        935,
        309,
        486,
        51852
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03382393469413122,
      "compression_ratio": 1.8487804878048781,
      "no_speech_prob": 0.013417743146419525,
      "confidence": 0.9865822568535805
    },
    {
      "id": 68,
      "start": 422.24,
      "end": 428.8,
      "text": "be greater than or equal to 10 so that it breaks out so now if we run this then we can see that it",
      "tokens": [
        50364,
        312,
        5044,
        813,
        420,
        2681,
        281,
        1266,
        370,
        300,
        309,
        9857,
        484,
        370,
        586,
        498,
        321,
        1190,
        341,
        550,
        321,
        393,
        536,
        300,
        309,
        50692
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030196299552917482,
      "compression_ratio": 1.9014778325123152,
      "no_speech_prob": 0.0002272949495818466,
      "confidence": 0.9997727050504182
    },
    {
      "id": 69,
      "start": 428.8,
      "end": 436.72,
      "text": "prints out zero through nine so it came in and saw that x was zero which is less than 10 so it goes",
      "tokens": [
        50692,
        22305,
        484,
        4018,
        807,
        4949,
        370,
        309,
        1361,
        294,
        293,
        1866,
        300,
        2031,
        390,
        4018,
        597,
        307,
        1570,
        813,
        1266,
        370,
        309,
        1709,
        51088
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030196299552917482,
      "compression_ratio": 1.9014778325123152,
      "no_speech_prob": 0.0002272949495818466,
      "confidence": 0.9997727050504182
    },
    {
      "id": 70,
      "start": 436.72,
      "end": 442.72,
      "text": "through the loop prints the value and increments x by one now x is equal to one and it does this",
      "tokens": [
        51088,
        807,
        264,
        6367,
        22305,
        264,
        2158,
        293,
        1946,
        1117,
        2031,
        538,
        472,
        586,
        2031,
        307,
        2681,
        281,
        472,
        293,
        309,
        775,
        341,
        51388
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030196299552917482,
      "compression_ratio": 1.9014778325123152,
      "no_speech_prob": 0.0002272949495818466,
      "confidence": 0.9997727050504182
    },
    {
      "id": 71,
      "start": 442.72,
      "end": 448.88,
      "text": "check again so one is still less than 10 so it stays in the loop and it does this until we",
      "tokens": [
        51388,
        1520,
        797,
        370,
        472,
        307,
        920,
        1570,
        813,
        1266,
        370,
        309,
        10834,
        294,
        264,
        6367,
        293,
        309,
        775,
        341,
        1826,
        321,
        51696
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030196299552917482,
      "compression_ratio": 1.9014778325123152,
      "no_speech_prob": 0.0002272949495818466,
      "confidence": 0.9997727050504182
    },
    {
      "id": 72,
      "start": 448.88,
      "end": 455.44,
      "text": "increment x from nine to ten and then it'll come in here and make that check and it checks if 10",
      "tokens": [
        50364,
        26200,
        2031,
        490,
        4949,
        281,
        2064,
        293,
        550,
        309,
        603,
        808,
        294,
        510,
        293,
        652,
        300,
        1520,
        293,
        309,
        13834,
        498,
        1266,
        50692
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0440440085327741,
      "compression_ratio": 1.8224299065420562,
      "no_speech_prob": 0.08298066258430481,
      "confidence": 0.9170193374156952
    },
    {
      "id": 73,
      "start": 455.44,
      "end": 462.32,
      "text": "is less than 10 which it doesn't which evaluates to false so it breaks out of that loop now at",
      "tokens": [
        50692,
        307,
        1570,
        813,
        1266,
        597,
        309,
        1177,
        380,
        597,
        6133,
        1024,
        281,
        7908,
        370,
        309,
        9857,
        484,
        295,
        300,
        6367,
        586,
        412,
        51036
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0440440085327741,
      "compression_ratio": 1.8224299065420562,
      "no_speech_prob": 0.08298066258430481,
      "confidence": 0.9170193374156952
    },
    {
      "id": 74,
      "start": 462.32,
      "end": 469.44,
      "text": "any point you can just use a break to break out of the while loop just like we did with the for loop",
      "tokens": [
        51036,
        604,
        935,
        291,
        393,
        445,
        764,
        257,
        1821,
        281,
        1821,
        484,
        295,
        264,
        1339,
        6367,
        445,
        411,
        321,
        630,
        365,
        264,
        337,
        6367,
        51392
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0440440085327741,
      "compression_ratio": 1.8224299065420562,
      "no_speech_prob": 0.08298066258430481,
      "confidence": 0.9170193374156952
    },
    {
      "id": 75,
      "start": 469.44,
      "end": 477.36,
      "text": "so if i came in here and i said if x is equal to five then we just want to break out so if we run",
      "tokens": [
        51392,
        370,
        498,
        741,
        1361,
        294,
        510,
        293,
        741,
        848,
        498,
        2031,
        307,
        2681,
        281,
        1732,
        550,
        321,
        445,
        528,
        281,
        1821,
        484,
        370,
        498,
        321,
        1190,
        51788
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0440440085327741,
      "compression_ratio": 1.8224299065420562,
      "no_speech_prob": 0.08298066258430481,
      "confidence": 0.9170193374156952
    },
    {
      "id": 76,
      "start": 477.36,
      "end": 482.72,
      "text": "that then we can see that it went zero through four and once x was equal to five then we hit",
      "tokens": [
        50364,
        300,
        550,
        321,
        393,
        536,
        300,
        309,
        1437,
        4018,
        807,
        1451,
        293,
        1564,
        2031,
        390,
        2681,
        281,
        1732,
        550,
        321,
        2045,
        50632
      ],
      "temperature": 0.0,
      "avg_logprob": -0.022792193266722532,
      "compression_ratio": 1.9835390946502058,
      "no_speech_prob": 0.010301151312887669,
      "confidence": 0.9896988486871123
    },
    {
      "id": 77,
      "start": 482.72,
      "end": 488.32,
      "text": "that break statement now sometimes you'll just want to create an infinite loop that never ends",
      "tokens": [
        50632,
        300,
        1821,
        5629,
        586,
        2171,
        291,
        603,
        445,
        528,
        281,
        1884,
        364,
        13785,
        6367,
        300,
        1128,
        5314,
        50912
      ],
      "temperature": 0.0,
      "avg_logprob": -0.022792193266722532,
      "compression_ratio": 1.9835390946502058,
      "no_speech_prob": 0.010301151312887669,
      "confidence": 0.9896988486871123
    },
    {
      "id": 78,
      "start": 488.32,
      "end": 494.72,
      "text": "until we get some input or find some value now to create an infinite loop you can just replace the",
      "tokens": [
        50912,
        1826,
        321,
        483,
        512,
        4846,
        420,
        915,
        512,
        2158,
        586,
        281,
        1884,
        364,
        13785,
        6367,
        291,
        393,
        445,
        7406,
        264,
        51232
      ],
      "temperature": 0.0,
      "avg_logprob": -0.022792193266722532,
      "compression_ratio": 1.9835390946502058,
      "no_speech_prob": 0.010301151312887669,
      "confidence": 0.9896988486871123
    },
    {
      "id": 79,
      "start": 494.72,
      "end": 500.72,
      "text": "comparison that we're doing here with a value of true so now that we have an infinite loop there's",
      "tokens": [
        51232,
        9660,
        300,
        321,
        434,
        884,
        510,
        365,
        257,
        2158,
        295,
        2074,
        370,
        586,
        300,
        321,
        362,
        364,
        13785,
        6367,
        456,
        311,
        51532
      ],
      "temperature": 0.0,
      "avg_logprob": -0.022792193266722532,
      "compression_ratio": 1.9835390946502058,
      "no_speech_prob": 0.010301151312887669,
      "confidence": 0.9896988486871123
    },
    {
      "id": 80,
      "start": 500.72,
      "end": 505.6,
      "text": "no conditional here that can break out so now we have to have this break statement in here if we",
      "tokens": [
        51532,
        572,
        27708,
        510,
        300,
        393,
        1821,
        484,
        370,
        586,
        321,
        362,
        281,
        362,
        341,
        1821,
        5629,
        294,
        510,
        498,
        321,
        51776
      ],
      "temperature": 0.0,
      "avg_logprob": -0.022792193266722532,
      "compression_ratio": 1.9835390946502058,
      "no_speech_prob": 0.010301151312887669,
      "confidence": 0.9896988486871123
    },
    {
      "id": 81,
      "start": 505.6,
      "end": 511.6,
      "text": "ever want to stop this loop so if we run this then we can see that we get the same output there",
      "tokens": [
        50364,
        1562,
        528,
        281,
        1590,
        341,
        6367,
        370,
        498,
        321,
        1190,
        341,
        550,
        321,
        393,
        536,
        300,
        321,
        483,
        264,
        912,
        5598,
        456,
        50664
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02722467663132142,
      "compression_ratio": 1.8270676691729324,
      "no_speech_prob": 0.004472297616302967,
      "confidence": 0.995527702383697
    },
    {
      "id": 82,
      "start": 511.6,
      "end": 516.4,
      "text": "now in this example we're using a conditional but this is also how you would keep a loop going",
      "tokens": [
        50664,
        586,
        294,
        341,
        1365,
        321,
        434,
        1228,
        257,
        27708,
        457,
        341,
        307,
        611,
        577,
        291,
        576,
        1066,
        257,
        6367,
        516,
        50904
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02722467663132142,
      "compression_ratio": 1.8270676691729324,
      "no_speech_prob": 0.004472297616302967,
      "confidence": 0.995527702383697
    },
    {
      "id": 83,
      "start": 516.4,
      "end": 521.52,
      "text": "indefinitely until you find or receive values that you're looking for now if you ever accidentally",
      "tokens": [
        50904,
        24162,
        10925,
        1826,
        291,
        915,
        420,
        4774,
        4190,
        300,
        291,
        434,
        1237,
        337,
        586,
        498,
        291,
        1562,
        15715,
        51160
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02722467663132142,
      "compression_ratio": 1.8270676691729324,
      "no_speech_prob": 0.004472297616302967,
      "confidence": 0.995527702383697
    },
    {
      "id": 84,
      "start": 521.52,
      "end": 527.6,
      "text": "get stuck in an infinite loop then within most environments or operating systems you can interrupt",
      "tokens": [
        51160,
        483,
        5541,
        294,
        364,
        13785,
        6367,
        550,
        1951,
        881,
        12388,
        420,
        7447,
        3652,
        291,
        393,
        12729,
        51464
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02722467663132142,
      "compression_ratio": 1.8270676691729324,
      "no_speech_prob": 0.004472297616302967,
      "confidence": 0.995527702383697
    },
    {
      "id": 85,
      "start": 527.6,
      "end": 534.4,
      "text": "that by pressing control c to stop the process so if we comment out our conditional here with the",
      "tokens": [
        51464,
        300,
        538,
        12417,
        1969,
        269,
        281,
        1590,
        264,
        1399,
        370,
        498,
        321,
        2871,
        484,
        527,
        27708,
        510,
        365,
        264,
        51804
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02722467663132142,
      "compression_ratio": 1.8270676691729324,
      "no_speech_prob": 0.004472297616302967,
      "confidence": 0.995527702383697
    },
    {
      "id": 86,
      "start": 534.4,
      "end": 541.36,
      "text": "break statement then this is going to get stuck in an infinite loop and just go on forever so now",
      "tokens": [
        50364,
        1821,
        5629,
        550,
        341,
        307,
        516,
        281,
        483,
        5541,
        294,
        364,
        13785,
        6367,
        293,
        445,
        352,
        322,
        5680,
        370,
        586,
        50712
      ],
      "temperature": 0.0,
      "avg_logprob": -0.032355611042309836,
      "compression_ratio": 1.8840579710144927,
      "no_speech_prob": 0.005483801476657391,
      "confidence": 0.9945161985233426
    },
    {
      "id": 87,
      "start": 541.36,
      "end": 546.48,
      "text": "if we run this code then we can see that we get stuck in this infinite loop where it just keeps",
      "tokens": [
        50712,
        498,
        321,
        1190,
        341,
        3089,
        550,
        321,
        393,
        536,
        300,
        321,
        483,
        5541,
        294,
        341,
        13785,
        6367,
        689,
        309,
        445,
        5965,
        50968
      ],
      "temperature": 0.0,
      "avg_logprob": -0.032355611042309836,
      "compression_ratio": 1.8840579710144927,
      "no_speech_prob": 0.005483801476657391,
      "confidence": 0.9945161985233426
    },
    {
      "id": 88,
      "start": 546.48,
      "end": 552.56,
      "text": "incrementing x by one and printing out x now to get out of this on most operating systems you can",
      "tokens": [
        50968,
        26200,
        278,
        2031,
        538,
        472,
        293,
        14699,
        484,
        2031,
        586,
        281,
        483,
        484,
        295,
        341,
        322,
        881,
        7447,
        3652,
        291,
        393,
        51272
      ],
      "temperature": 0.0,
      "avg_logprob": -0.032355611042309836,
      "compression_ratio": 1.8840579710144927,
      "no_speech_prob": 0.005483801476657391,
      "confidence": 0.9945161985233426
    },
    {
      "id": 89,
      "start": 552.56,
      "end": 558.72,
      "text": "press control c and it'll interrupt that so i press control c and you can see that it was canceled",
      "tokens": [
        51272,
        1886,
        1969,
        269,
        293,
        309,
        603,
        12729,
        300,
        370,
        741,
        1886,
        1969,
        269,
        293,
        291,
        393,
        536,
        300,
        309,
        390,
        24839,
        51580
      ],
      "temperature": 0.0,
      "avg_logprob": -0.032355611042309836,
      "compression_ratio": 1.8840579710144927,
      "no_speech_prob": 0.005483801476657391,
      "confidence": 0.9945161985233426
    },
    {
      "id": 90,
      "start": 558.72,
      "end": 564.88,
      "text": "and if you are in your terminal or command prompt then console control c should send a keyboard",
      "tokens": [
        50364,
        293,
        498,
        291,
        366,
        294,
        428,
        14709,
        420,
        5622,
        12391,
        550,
        11076,
        1969,
        269,
        820,
        2845,
        257,
        10186,
        50672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05316570193268532,
      "compression_ratio": 1.8142414860681115,
      "no_speech_prob": 0.32728657126426697,
      "confidence": 0.672713428735733
    },
    {
      "id": 91,
      "start": 564.88,
      "end": 569.52,
      "text": "interrupt okay so i think that is going to do it for this video i hope that now you have a clear",
      "tokens": [
        50672,
        12729,
        1392,
        370,
        741,
        519,
        300,
        307,
        516,
        281,
        360,
        309,
        337,
        341,
        960,
        741,
        1454,
        300,
        586,
        291,
        362,
        257,
        1850,
        50904
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05316570193268532,
      "compression_ratio": 1.8142414860681115,
      "no_speech_prob": 0.32728657126426697,
      "confidence": 0.672713428735733
    },
    {
      "id": 92,
      "start": 569.52,
      "end": 573.84,
      "text": "understanding of the different loops and how the break and continue statements work in the next",
      "tokens": [
        50904,
        3701,
        295,
        264,
        819,
        16121,
        293,
        577,
        264,
        1821,
        293,
        2354,
        12363,
        589,
        294,
        264,
        958,
        51120
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05316570193268532,
      "compression_ratio": 1.8142414860681115,
      "no_speech_prob": 0.32728657126426697,
      "confidence": 0.672713428735733
    },
    {
      "id": 93,
      "start": 573.84,
      "end": 578.48,
      "text": "video we'll be learning how to write functions but if anyone has any questions about what we covered",
      "tokens": [
        51120,
        960,
        321,
        603,
        312,
        2539,
        577,
        281,
        2464,
        6828,
        457,
        498,
        2878,
        575,
        604,
        1651,
        466,
        437,
        321,
        5343,
        51352
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05316570193268532,
      "compression_ratio": 1.8142414860681115,
      "no_speech_prob": 0.32728657126426697,
      "confidence": 0.672713428735733
    },
    {
      "id": 94,
      "start": 578.48,
      "end": 582.5600000000001,
      "text": "in this video then feel free to ask in the comment section below and i'll do my best to answer those",
      "tokens": [
        51352,
        294,
        341,
        960,
        550,
        841,
        1737,
        281,
        1029,
        294,
        264,
        2871,
        3541,
        2507,
        293,
        741,
        603,
        360,
        452,
        1151,
        281,
        1867,
        729,
        51556
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05316570193268532,
      "compression_ratio": 1.8142414860681115,
      "no_speech_prob": 0.32728657126426697,
      "confidence": 0.672713428735733
    },
    {
      "id": 95,
      "start": 583.12,
      "end": 586.5600000000001,
      "text": "if you enjoy these tutorials and would like to support them then there are several ways you can",
      "tokens": [
        51584,
        498,
        291,
        2103,
        613,
        17616,
        293,
        576,
        411,
        281,
        1406,
        552,
        550,
        456,
        366,
        2940,
        2098,
        291,
        393,
        51756
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05316570193268532,
      "compression_ratio": 1.8142414860681115,
      "no_speech_prob": 0.32728657126426697,
      "confidence": 0.672713428735733
    },
    {
      "id": 96,
      "start": 586.56,
      "end": 590.4799999999999,
      "text": "do that the easiest way is to simply like the video and give it a thumbs up and also it's a",
      "tokens": [
        50364,
        360,
        300,
        264,
        12889,
        636,
        307,
        281,
        2935,
        411,
        264,
        960,
        293,
        976,
        309,
        257,
        8838,
        493,
        293,
        611,
        309,
        311,
        257,
        50560
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05593629381549892,
      "compression_ratio": 1.632183908045977,
      "no_speech_prob": 0.008250036276876926,
      "confidence": 0.9917499637231231
    },
    {
      "id": 97,
      "start": 590.4799999999999,
      "end": 594.0,
      "text": "huge help to share these videos with anyone who you think would find them useful and if you have",
      "tokens": [
        50560,
        2603,
        854,
        281,
        2073,
        613,
        2145,
        365,
        2878,
        567,
        291,
        519,
        576,
        915,
        552,
        4420,
        293,
        498,
        291,
        362,
        50736
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05593629381549892,
      "compression_ratio": 1.632183908045977,
      "no_speech_prob": 0.008250036276876926,
      "confidence": 0.9917499637231231
    },
    {
      "id": 98,
      "start": 594.0,
      "end": 597.5999999999999,
      "text": "the means you can contribute through patreon and there's a link to that page in the description",
      "tokens": [
        50736,
        264,
        1355,
        291,
        393,
        10586,
        807,
        33161,
        293,
        456,
        311,
        257,
        2113,
        281,
        300,
        3028,
        294,
        264,
        3855,
        50916
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05593629381549892,
      "compression_ratio": 1.632183908045977,
      "no_speech_prob": 0.008250036276876926,
      "confidence": 0.9917499637231231
    },
    {
      "id": 99,
      "start": 597.6,
      "end": 605.44,
      "text": "section below be sure to subscribe for future videos and thank you all for watching",
      "tokens": [
        50364,
        3541,
        2507,
        312,
        988,
        281,
        3022,
        337,
        2027,
        2145,
        293,
        1309,
        291,
        439,
        337,
        1976,
        50756
      ],
      "temperature": 0.0,
      "avg_logprob": -0.21547802289326987,
      "compression_ratio": 1.1369863013698631,
      "no_speech_prob": 0.007436633575707674,
      "confidence": 0.9925633664242923
    }
  ]
}