{
  "video_id": "34f4164b7362",
  "video_path": "videos/Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
  "video_filename": "Python Tutorial for Beginners 3- Integers and Floats - Working with Numeric Data.mp4",
  "model_size": "medium",
  "language": "en",
  "duration": 0,
  "text": " Hey there, how's it going everybody? In this video, we'll be learning how to work with numeric data in Python and numbers are most commonly represented with integers and floats and the difference between an integer and a float is that an integer is a whole number and a float is a decimal. So to see an example of this, let's create a variable called num and let's just set this equal to three. Now Python has a built-in function called type where we can see the data type of an object. So if we print out the type of num and run this, then we can see that it returns that that is of the class integer. Now if we were to set this number instead to 3.14 and now rerun this, then we can see that now the type of number is a float. So that's the main difference between an integer and a float. Now when working with numeric data, it's common that you'll need to use some basic arithmetic. So let me grab some comments from my snippets here just so that we have a reference for everything that we can do. So I'll copy these arithmetic operators and paste these in and now let's go ahead and just run through each of these. So the first four we've likely already seen a lot and are familiar with. So for example, addition, if we print it out three plus two, then we can expect that that's equal to five. If we print out three minus two, that should be one. Three times two should be equal to six and three divided by two should be equal to 1.5. Now for division to behave this way, this is actually new in Python 3. If you run in Python 2, then this will actually equal one because it drops the decimal. But in Python 3, that gives us the right answer of 1.5. Now if we don't want to drop that decimal, then we do have a floor division and floor division can be performed by adding two division signs. So if I run this and now we can see it drops that decimal and it's equal to one. So if you ever see these two division signs, then that is this floor division. Now if you wanted to work with exponents and powers and we can use these two multiplication signs. So if we wanted to print three to the second power, then we could just say three with these two multiplication signs and if I print that, then we can see that that equals nine because three squared is equal to nine. Now this last operator here is called a modulo operator and it gives us the remainder after a division. So three mod two will have a remainder of one because two goes into three once with one left over. So if we say three mod two and run that, then we can see that that is equal to one. Now a common use case for this is to tell if a number is even or odd. Now the reason for this is because every time you divide a number by two, there are only two possible remainders. It's either going to be zero or one. So for example, if we look at a few more examples here, so let me just print out a few more module operators and I'll do two mod two, three mod two, four mod two, and five mod two. So if we run this, then we can see that two goes into two once with no remainders, that's why we get a zero, two goes into three once with one as a remainder, so two goes into four twice with no remainder, and two goes into five twice with one as a remainder. So we can see from this pattern that if you do a mod two on any number and there is no remainder, then that number is even. If you do a mod two on any number and the remainder is one, then that number is odd, and that's a pretty common check that you'll use a lot throughout Python programming. Okay, so now let's look at the order of operations. Just like we would expect, we can also use parentheses to change the order of operations just like with normal arithmetic. So for example, if we were to say, let's see, three times two plus one, then with the normal order of operations, we would multiply three and two, which would give us six, and then we would add one, which would give us seven. So if we run that, then we can see that we got seven as our answer. But if I put a parenthesis here around this two plus one, then now with normal arithmetic, the way that this would work is that it should first add up these numbers in the parentheses, which should give us three, and then three times three should give us nine. So now if we run this, then we can see that we got nine. So the order of operations does work correctly within Python like we would expect. Okay, so now let's look at another common operation that you'll see a lot, and that is incrementing a variable. So if I make a variable here called num, and I set this equal to one, then what are some ways that we can increment that value by one? Well, one way that we could do this is to say that num is equal to num plus one, and if we print out that num, then we can see that it did increment it by one, and now it's equal to two. But incrementing values is such a common operation that there is a shorthand for this. So instead, we can just say num plus equals one. So if we run that, then we can see that it still incremented that value up to two. And you can use this syntax with the other operations as well. So instead, if we were to say num times equals ten, and ran this, then we can see that we got ten because it took our original number and multiplied one by ten. Okay, so a couple more things here. We also have some built-in functions available to us to work with numbers, and one of these is abs for absolute value. And basically, this will just remove the sign from any negative numbers. So if I took the absolute value of negative three, and I'll just clean up a couple of lines there. Okay, so if we were to print out the absolute value of negative three and run that, then we can see down here that we just got the absolute value, which is three. Now another built-in function that we have is round, and by default, this will round our values to the nearest integer value. So if we said print the round of 3.75 and run that, then we can see that 3.75 rounded up to four. And we can also pass a second argument into our round function that tells it how many digits that we want to round to. So if I put in a comma here and pass in a one as a second argument and now run this, and what we're saying is that we want to round to the first digit after the decimal. So we can see that that rounded to 3.8. Okay, so another common thing that you need to do when working with numbers is to use comparisons. Now we'll want to know if two values are equal, greater than, less than, and all of that. So to test this, we can use comparison operators. And I have some comments over here in my snippets with the comparison operators as well, and I'm just going to paste over the arithmetic operators that we've already gone over and paste those in. Now these comparisons are going to return Booleans, which are true false values. We'll be learning more about Booleans in a future video when we go over conditionals, but we'll see them here for the first time. So let's say I have two variables here, and we'll just call these two variables num one and set that equal to three, and we'll do num two is equal to two. So now let's run through all of these comparisons. So first, let's say that we wanted to check if these two variables were equal. So I could say num one, and you can see up here that the equals comparison is double equals. Now you don't want to use the single equals because the single equals is this assignment here. So the double equals is comparison, the single equals is assignment. So we want to compare. Is num one equal to num two? And if we run that, then we can see that it returns false because those two values are not equal. Now if I wanted to check if they weren't equal, then I could use the exclamation point before the equal sign here, exclamation point equals. And if we run that, then we can see that we got true because these two values are not equal. Now I can check if num one is greater than num two by using the greater than sign. So I can save that and run it, and we can see that we got true because num one is three, num two is two, so three is greater than two. And if you wanted to check less than, then you can just use the less than sign. So if we run that, you can see we got false. And you can also use the equal signs with these as well. So if I wanted to check if this was greater than or equal to, then we could run that. We can see that it's true. And if we want to check less than or equal to, then we can use those as well. And if we print that, we can see that we got false. Okay, so now we're going to look at one more thing, and I'm just going to delete these in order to get some more room. Now I will have these comments up on my GitHub page if you want a reference to the arithmetic operators and the comparisons that we just looked at. Okay, so in the last video we learned about strings. Now it's possible that you have something that looks like a number, but it could actually be a string. So let's look at a problem that we can run into if that's the case, and then we'll see how to solve it. So let's say that you have some variables that look like numbers. So maybe we read these in from a text file or got them from a website or something like that. So just to give an example, let's recreate our num one, but this time we're going to set these equal in single quotes here. We'll set this to 100, and num two will set equal to inside single quotes 200. So I explicitly set these equal to strings, so it's obvious to us that they're strings, but it might not be so obvious to us if we got these values from somewhere else. So now let's say that we want to add these values together. So if I was to say print num one plus num two, and if we run this, then we can see that this isn't the result that we thought it would be. Now if you remember from our string video, when we add strings together, it just concatenates those together. So this is what we would expect with strings, but with numbers we would expect this to be 300. So in order to turn these into integers, we're going to have to do something called casting, and casting is super easy in Python. So to cast these values from string to integers, then we'll just add a couple lines here, and I will copy these, and we'll just say that num one equals int num one. So we just casted that to an integer, and we can do the same thing here with num two. So now if we save that and run it, then we can see that we got 300. So if you have an integer that's actually a string, and you want to cast that to an integer, then you can wrap that string in this int function or this int class here to create an integer. Okay, so I think that is going to do it for this video. I hope that now you feel comfortable working with integers and floating point values, and in the next video we'll be learning about lists, sets, and tuples, which basically allow us to hold sequences of data and is extremely useful to learn how to use properly. But if anyone has any questions about what we covered in this video, then feel free to ask in the comment section below, and I'll do my best to answer those. If you enjoy these tutorials and would like to support them, then there are several ways you can do that. The easiest ways is simply like the video and give it a thumbs up, and also it's a huge help to share these videos with anyone who you think would find them useful. And if you have the means, you can contribute through Patreon, and there's a link to that page in the description section below. Be sure to subscribe for future videos, and thank you all for watching.",
  "segments": [
    {
      "id": 0,
      "start": 0.0,
      "end": 3.12,
      "text": "Hey there, how's it going everybody? In this video, we'll be learning how to work with",
      "tokens": [
        50364,
        1911,
        456,
        11,
        577,
        311,
        309,
        516,
        2201,
        30,
        682,
        341,
        960,
        11,
        321,
        603,
        312,
        2539,
        577,
        281,
        589,
        365,
        50520
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09395879559812292,
      "compression_ratio": 1.6859205776173285,
      "no_speech_prob": 0.12976038455963135,
      "confidence": 0.8702396154403687
    },
    {
      "id": 1,
      "start": 3.12,
      "end": 8.32,
      "text": "numeric data in Python and numbers are most commonly represented with integers and floats",
      "tokens": [
        50520,
        7866,
        299,
        1412,
        294,
        15329,
        293,
        3547,
        366,
        881,
        12719,
        10379,
        365,
        41674,
        293,
        37878,
        50780
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09395879559812292,
      "compression_ratio": 1.6859205776173285,
      "no_speech_prob": 0.12976038455963135,
      "confidence": 0.8702396154403687
    },
    {
      "id": 2,
      "start": 8.32,
      "end": 13.200000000000001,
      "text": "and the difference between an integer and a float is that an integer is a whole number and a float",
      "tokens": [
        50780,
        293,
        264,
        2649,
        1296,
        364,
        24922,
        293,
        257,
        15706,
        307,
        300,
        364,
        24922,
        307,
        257,
        1379,
        1230,
        293,
        257,
        15706,
        51024
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09395879559812292,
      "compression_ratio": 1.6859205776173285,
      "no_speech_prob": 0.12976038455963135,
      "confidence": 0.8702396154403687
    },
    {
      "id": 3,
      "start": 13.200000000000001,
      "end": 18.72,
      "text": "is a decimal. So to see an example of this, let's create a variable called num and let's just set",
      "tokens": [
        51024,
        307,
        257,
        26601,
        13,
        407,
        281,
        536,
        364,
        1365,
        295,
        341,
        11,
        718,
        311,
        1884,
        257,
        7006,
        1219,
        1031,
        293,
        718,
        311,
        445,
        992,
        51300
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09395879559812292,
      "compression_ratio": 1.6859205776173285,
      "no_speech_prob": 0.12976038455963135,
      "confidence": 0.8702396154403687
    },
    {
      "id": 4,
      "start": 18.72,
      "end": 25.36,
      "text": "this equal to three. Now Python has a built-in function called type where we can see the data",
      "tokens": [
        51300,
        341,
        2681,
        281,
        1045,
        13,
        823,
        15329,
        575,
        257,
        3094,
        12,
        259,
        2445,
        1219,
        2010,
        689,
        321,
        393,
        536,
        264,
        1412,
        51632
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09395879559812292,
      "compression_ratio": 1.6859205776173285,
      "no_speech_prob": 0.12976038455963135,
      "confidence": 0.8702396154403687
    },
    {
      "id": 5,
      "start": 25.36,
      "end": 33.28,
      "text": "type of an object. So if we print out the type of num and run this, then we can see that it returns",
      "tokens": [
        50364,
        2010,
        295,
        364,
        2657,
        13,
        407,
        498,
        321,
        4482,
        484,
        264,
        2010,
        295,
        1031,
        293,
        1190,
        341,
        11,
        550,
        321,
        393,
        536,
        300,
        309,
        11247,
        50760
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05256086531139555,
      "compression_ratio": 1.7972350230414746,
      "no_speech_prob": 0.4647594690322876,
      "confidence": 0.5352405309677124
    },
    {
      "id": 6,
      "start": 33.28,
      "end": 41.84,
      "text": "that that is of the class integer. Now if we were to set this number instead to 3.14 and now rerun",
      "tokens": [
        50760,
        300,
        300,
        307,
        295,
        264,
        1508,
        24922,
        13,
        823,
        498,
        321,
        645,
        281,
        992,
        341,
        1230,
        2602,
        281,
        805,
        13,
        7271,
        293,
        586,
        43819,
        409,
        51188
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05256086531139555,
      "compression_ratio": 1.7972350230414746,
      "no_speech_prob": 0.4647594690322876,
      "confidence": 0.5352405309677124
    },
    {
      "id": 7,
      "start": 41.84,
      "end": 48.0,
      "text": "this, then we can see that now the type of number is a float. So that's the main difference between",
      "tokens": [
        51188,
        341,
        11,
        550,
        321,
        393,
        536,
        300,
        586,
        264,
        2010,
        295,
        1230,
        307,
        257,
        15706,
        13,
        407,
        300,
        311,
        264,
        2135,
        2649,
        1296,
        51496
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05256086531139555,
      "compression_ratio": 1.7972350230414746,
      "no_speech_prob": 0.4647594690322876,
      "confidence": 0.5352405309677124
    },
    {
      "id": 8,
      "start": 48.0,
      "end": 52.64,
      "text": "an integer and a float. Now when working with numeric data, it's common that you'll need to",
      "tokens": [
        51496,
        364,
        24922,
        293,
        257,
        15706,
        13,
        823,
        562,
        1364,
        365,
        7866,
        299,
        1412,
        11,
        309,
        311,
        2689,
        300,
        291,
        603,
        643,
        281,
        51728
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05256086531139555,
      "compression_ratio": 1.7972350230414746,
      "no_speech_prob": 0.4647594690322876,
      "confidence": 0.5352405309677124
    },
    {
      "id": 9,
      "start": 52.64,
      "end": 58.4,
      "text": "use some basic arithmetic. So let me grab some comments from my snippets here just so that we",
      "tokens": [
        50364,
        764,
        512,
        3875,
        42973,
        13,
        407,
        718,
        385,
        4444,
        512,
        3053,
        490,
        452,
        35623,
        1385,
        510,
        445,
        370,
        300,
        321,
        50652
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07099279583009899,
      "compression_ratio": 1.728937728937729,
      "no_speech_prob": 0.4928174614906311,
      "confidence": 0.5071825385093689
    },
    {
      "id": 10,
      "start": 58.4,
      "end": 63.44,
      "text": "have a reference for everything that we can do. So I'll copy these arithmetic operators and paste",
      "tokens": [
        50652,
        362,
        257,
        6408,
        337,
        1203,
        300,
        321,
        393,
        360,
        13,
        407,
        286,
        603,
        5055,
        613,
        42973,
        19077,
        293,
        9163,
        50904
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07099279583009899,
      "compression_ratio": 1.728937728937729,
      "no_speech_prob": 0.4928174614906311,
      "confidence": 0.5071825385093689
    },
    {
      "id": 11,
      "start": 63.44,
      "end": 68.16,
      "text": "these in and now let's go ahead and just run through each of these. So the first four we've",
      "tokens": [
        50904,
        613,
        294,
        293,
        586,
        718,
        311,
        352,
        2286,
        293,
        445,
        1190,
        807,
        1184,
        295,
        613,
        13,
        407,
        264,
        700,
        1451,
        321,
        600,
        51140
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07099279583009899,
      "compression_ratio": 1.728937728937729,
      "no_speech_prob": 0.4928174614906311,
      "confidence": 0.5071825385093689
    },
    {
      "id": 12,
      "start": 68.16,
      "end": 74.48,
      "text": "likely already seen a lot and are familiar with. So for example, addition, if we print it out",
      "tokens": [
        51140,
        3700,
        1217,
        1612,
        257,
        688,
        293,
        366,
        4963,
        365,
        13,
        407,
        337,
        1365,
        11,
        4500,
        11,
        498,
        321,
        4482,
        309,
        484,
        51456
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07099279583009899,
      "compression_ratio": 1.728937728937729,
      "no_speech_prob": 0.4928174614906311,
      "confidence": 0.5071825385093689
    },
    {
      "id": 13,
      "start": 74.48,
      "end": 80.64,
      "text": "three plus two, then we can expect that that's equal to five. If we print out three minus two,",
      "tokens": [
        51456,
        1045,
        1804,
        732,
        11,
        550,
        321,
        393,
        2066,
        300,
        300,
        311,
        2681,
        281,
        1732,
        13,
        759,
        321,
        4482,
        484,
        1045,
        3175,
        732,
        11,
        51764
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07099279583009899,
      "compression_ratio": 1.728937728937729,
      "no_speech_prob": 0.4928174614906311,
      "confidence": 0.5071825385093689
    },
    {
      "id": 14,
      "start": 80.64,
      "end": 86.56,
      "text": "that should be one. Three times two should be equal to six and three divided by two should be",
      "tokens": [
        50364,
        300,
        820,
        312,
        472,
        13,
        6244,
        1413,
        732,
        820,
        312,
        2681,
        281,
        2309,
        293,
        1045,
        6666,
        538,
        732,
        820,
        312,
        50660
      ],
      "temperature": 0.0,
      "avg_logprob": -0.061367974561803484,
      "compression_ratio": 1.7557603686635945,
      "no_speech_prob": 0.037682704627513885,
      "confidence": 0.9623172953724861
    },
    {
      "id": 15,
      "start": 86.56,
      "end": 92.88,
      "text": "equal to 1.5. Now for division to behave this way, this is actually new in Python 3. If you run in",
      "tokens": [
        50660,
        2681,
        281,
        502,
        13,
        20,
        13,
        823,
        337,
        10044,
        281,
        15158,
        341,
        636,
        11,
        341,
        307,
        767,
        777,
        294,
        15329,
        805,
        13,
        759,
        291,
        1190,
        294,
        50976
      ],
      "temperature": 0.0,
      "avg_logprob": -0.061367974561803484,
      "compression_ratio": 1.7557603686635945,
      "no_speech_prob": 0.037682704627513885,
      "confidence": 0.9623172953724861
    },
    {
      "id": 16,
      "start": 92.88,
      "end": 99.36,
      "text": "Python 2, then this will actually equal one because it drops the decimal. But in Python 3,",
      "tokens": [
        50976,
        15329,
        568,
        11,
        550,
        341,
        486,
        767,
        2681,
        472,
        570,
        309,
        11438,
        264,
        26601,
        13,
        583,
        294,
        15329,
        805,
        11,
        51300
      ],
      "temperature": 0.0,
      "avg_logprob": -0.061367974561803484,
      "compression_ratio": 1.7557603686635945,
      "no_speech_prob": 0.037682704627513885,
      "confidence": 0.9623172953724861
    },
    {
      "id": 17,
      "start": 99.36,
      "end": 104.72,
      "text": "that gives us the right answer of 1.5. Now if we don't want to drop that decimal, then we do have",
      "tokens": [
        51300,
        300,
        2709,
        505,
        264,
        558,
        1867,
        295,
        502,
        13,
        20,
        13,
        823,
        498,
        321,
        500,
        380,
        528,
        281,
        3270,
        300,
        26601,
        11,
        550,
        321,
        360,
        362,
        51568
      ],
      "temperature": 0.0,
      "avg_logprob": -0.061367974561803484,
      "compression_ratio": 1.7557603686635945,
      "no_speech_prob": 0.037682704627513885,
      "confidence": 0.9623172953724861
    },
    {
      "id": 18,
      "start": 104.72,
      "end": 110.96,
      "text": "a floor division and floor division can be performed by adding two division signs. So if I",
      "tokens": [
        50364,
        257,
        4123,
        10044,
        293,
        4123,
        10044,
        393,
        312,
        10332,
        538,
        5127,
        732,
        10044,
        7880,
        13,
        407,
        498,
        286,
        50676
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06381215128982276,
      "compression_ratio": 2.064655172413793,
      "no_speech_prob": 0.2530480921268463,
      "confidence": 0.7469519078731537
    },
    {
      "id": 19,
      "start": 110.96,
      "end": 116.4,
      "text": "run this and now we can see it drops that decimal and it's equal to one. So if you ever see these",
      "tokens": [
        50676,
        1190,
        341,
        293,
        586,
        321,
        393,
        536,
        309,
        11438,
        300,
        26601,
        293,
        309,
        311,
        2681,
        281,
        472,
        13,
        407,
        498,
        291,
        1562,
        536,
        613,
        50948
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06381215128982276,
      "compression_ratio": 2.064655172413793,
      "no_speech_prob": 0.2530480921268463,
      "confidence": 0.7469519078731537
    },
    {
      "id": 20,
      "start": 116.4,
      "end": 121.36,
      "text": "two division signs, then that is this floor division. Now if you wanted to work with exponents",
      "tokens": [
        50948,
        732,
        10044,
        7880,
        11,
        550,
        300,
        307,
        341,
        4123,
        10044,
        13,
        823,
        498,
        291,
        1415,
        281,
        589,
        365,
        12680,
        791,
        51196
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06381215128982276,
      "compression_ratio": 2.064655172413793,
      "no_speech_prob": 0.2530480921268463,
      "confidence": 0.7469519078731537
    },
    {
      "id": 21,
      "start": 121.36,
      "end": 127.28,
      "text": "and powers and we can use these two multiplication signs. So if we wanted to print three to the second",
      "tokens": [
        51196,
        293,
        8674,
        293,
        321,
        393,
        764,
        613,
        732,
        27290,
        7880,
        13,
        407,
        498,
        321,
        1415,
        281,
        4482,
        1045,
        281,
        264,
        1150,
        51492
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06381215128982276,
      "compression_ratio": 2.064655172413793,
      "no_speech_prob": 0.2530480921268463,
      "confidence": 0.7469519078731537
    },
    {
      "id": 22,
      "start": 127.28,
      "end": 133.76,
      "text": "power, then we could just say three with these two multiplication signs and if I print that,",
      "tokens": [
        51492,
        1347,
        11,
        550,
        321,
        727,
        445,
        584,
        1045,
        365,
        613,
        732,
        27290,
        7880,
        293,
        498,
        286,
        4482,
        300,
        11,
        51816
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06381215128982276,
      "compression_ratio": 2.064655172413793,
      "no_speech_prob": 0.2530480921268463,
      "confidence": 0.7469519078731537
    },
    {
      "id": 23,
      "start": 133.76,
      "end": 137.84,
      "text": "then we can see that that equals nine because three squared is equal to nine.",
      "tokens": [
        50364,
        550,
        321,
        393,
        536,
        300,
        300,
        6915,
        4949,
        570,
        1045,
        8889,
        307,
        2681,
        281,
        4949,
        13,
        50568
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05270656479729546,
      "compression_ratio": 1.8477157360406091,
      "no_speech_prob": 0.0003412014339119196,
      "confidence": 0.9996587985660881
    },
    {
      "id": 24,
      "start": 137.84,
      "end": 144.07999999999998,
      "text": "Now this last operator here is called a modulo operator and it gives us the remainder after a",
      "tokens": [
        50568,
        823,
        341,
        1036,
        12973,
        510,
        307,
        1219,
        257,
        1072,
        13455,
        12973,
        293,
        309,
        2709,
        505,
        264,
        29837,
        934,
        257,
        50880
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05270656479729546,
      "compression_ratio": 1.8477157360406091,
      "no_speech_prob": 0.0003412014339119196,
      "confidence": 0.9996587985660881
    },
    {
      "id": 25,
      "start": 144.07999999999998,
      "end": 152.07999999999998,
      "text": "division. So three mod two will have a remainder of one because two goes into three once with one",
      "tokens": [
        50880,
        10044,
        13,
        407,
        1045,
        1072,
        732,
        486,
        362,
        257,
        29837,
        295,
        472,
        570,
        732,
        1709,
        666,
        1045,
        1564,
        365,
        472,
        51280
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05270656479729546,
      "compression_ratio": 1.8477157360406091,
      "no_speech_prob": 0.0003412014339119196,
      "confidence": 0.9996587985660881
    },
    {
      "id": 26,
      "start": 152.07999999999998,
      "end": 159.68,
      "text": "left over. So if we say three mod two and run that, then we can see that that is equal to one.",
      "tokens": [
        51280,
        1411,
        670,
        13,
        407,
        498,
        321,
        584,
        1045,
        1072,
        732,
        293,
        1190,
        300,
        11,
        550,
        321,
        393,
        536,
        300,
        300,
        307,
        2681,
        281,
        472,
        13,
        51660
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05270656479729546,
      "compression_ratio": 1.8477157360406091,
      "no_speech_prob": 0.0003412014339119196,
      "confidence": 0.9996587985660881
    },
    {
      "id": 27,
      "start": 159.68,
      "end": 165.84,
      "text": "Now a common use case for this is to tell if a number is even or odd. Now the reason for this",
      "tokens": [
        50364,
        823,
        257,
        2689,
        764,
        1389,
        337,
        341,
        307,
        281,
        980,
        498,
        257,
        1230,
        307,
        754,
        420,
        7401,
        13,
        823,
        264,
        1778,
        337,
        341,
        50672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06371749122187777,
      "compression_ratio": 1.6824034334763949,
      "no_speech_prob": 0.005599503871053457,
      "confidence": 0.9944004961289465
    },
    {
      "id": 28,
      "start": 165.84,
      "end": 170.72,
      "text": "is because every time you divide a number by two, there are only two possible remainders. It's",
      "tokens": [
        50672,
        307,
        570,
        633,
        565,
        291,
        9845,
        257,
        1230,
        538,
        732,
        11,
        456,
        366,
        787,
        732,
        1944,
        28986,
        471,
        433,
        13,
        467,
        311,
        50916
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06371749122187777,
      "compression_ratio": 1.6824034334763949,
      "no_speech_prob": 0.005599503871053457,
      "confidence": 0.9944004961289465
    },
    {
      "id": 29,
      "start": 170.72,
      "end": 177.20000000000002,
      "text": "either going to be zero or one. So for example, if we look at a few more examples here, so let me just",
      "tokens": [
        50916,
        2139,
        516,
        281,
        312,
        4018,
        420,
        472,
        13,
        407,
        337,
        1365,
        11,
        498,
        321,
        574,
        412,
        257,
        1326,
        544,
        5110,
        510,
        11,
        370,
        718,
        385,
        445,
        51240
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06371749122187777,
      "compression_ratio": 1.6824034334763949,
      "no_speech_prob": 0.005599503871053457,
      "confidence": 0.9944004961289465
    },
    {
      "id": 30,
      "start": 177.76000000000002,
      "end": 184.24,
      "text": "print out a few more module operators and I'll do two mod two, three mod two, four mod two, and five",
      "tokens": [
        51268,
        4482,
        484,
        257,
        1326,
        544,
        10088,
        19077,
        293,
        286,
        603,
        360,
        732,
        1072,
        732,
        11,
        1045,
        1072,
        732,
        11,
        1451,
        1072,
        732,
        11,
        293,
        1732,
        51592
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06371749122187777,
      "compression_ratio": 1.6824034334763949,
      "no_speech_prob": 0.005599503871053457,
      "confidence": 0.9944004961289465
    },
    {
      "id": 31,
      "start": 184.24,
      "end": 190.72,
      "text": "mod two. So if we run this, then we can see that two goes into two once with no remainders, that's",
      "tokens": [
        50364,
        1072,
        732,
        13,
        407,
        498,
        321,
        1190,
        341,
        11,
        550,
        321,
        393,
        536,
        300,
        732,
        1709,
        666,
        732,
        1564,
        365,
        572,
        28986,
        471,
        433,
        11,
        300,
        311,
        50688
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05448501223609561,
      "compression_ratio": 2.074074074074074,
      "no_speech_prob": 0.3386569321155548,
      "confidence": 0.6613430678844452
    },
    {
      "id": 32,
      "start": 190.72,
      "end": 198.56,
      "text": "why we get a zero, two goes into three once with one as a remainder, so two goes into four twice",
      "tokens": [
        50688,
        983,
        321,
        483,
        257,
        4018,
        11,
        732,
        1709,
        666,
        1045,
        1564,
        365,
        472,
        382,
        257,
        29837,
        11,
        370,
        732,
        1709,
        666,
        1451,
        6091,
        51080
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05448501223609561,
      "compression_ratio": 2.074074074074074,
      "no_speech_prob": 0.3386569321155548,
      "confidence": 0.6613430678844452
    },
    {
      "id": 33,
      "start": 198.56,
      "end": 205.12,
      "text": "with no remainder, and two goes into five twice with one as a remainder. So we can see from this",
      "tokens": [
        51080,
        365,
        572,
        29837,
        11,
        293,
        732,
        1709,
        666,
        1732,
        6091,
        365,
        472,
        382,
        257,
        29837,
        13,
        407,
        321,
        393,
        536,
        490,
        341,
        51408
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05448501223609561,
      "compression_ratio": 2.074074074074074,
      "no_speech_prob": 0.3386569321155548,
      "confidence": 0.6613430678844452
    },
    {
      "id": 34,
      "start": 205.12,
      "end": 211.36,
      "text": "pattern that if you do a mod two on any number and there is no remainder, then that number is even.",
      "tokens": [
        51408,
        5102,
        300,
        498,
        291,
        360,
        257,
        1072,
        732,
        322,
        604,
        1230,
        293,
        456,
        307,
        572,
        29837,
        11,
        550,
        300,
        1230,
        307,
        754,
        13,
        51720
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05448501223609561,
      "compression_ratio": 2.074074074074074,
      "no_speech_prob": 0.3386569321155548,
      "confidence": 0.6613430678844452
    },
    {
      "id": 35,
      "start": 211.36,
      "end": 216.48000000000002,
      "text": "If you do a mod two on any number and the remainder is one, then that number is odd,",
      "tokens": [
        50364,
        759,
        291,
        360,
        257,
        1072,
        732,
        322,
        604,
        1230,
        293,
        264,
        29837,
        307,
        472,
        11,
        550,
        300,
        1230,
        307,
        7401,
        11,
        50620
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0609588081186468,
      "compression_ratio": 1.6116071428571428,
      "no_speech_prob": 0.06770030409097672,
      "confidence": 0.9322996959090233
    },
    {
      "id": 36,
      "start": 216.48000000000002,
      "end": 220.64000000000001,
      "text": "and that's a pretty common check that you'll use a lot throughout Python programming.",
      "tokens": [
        50620,
        293,
        300,
        311,
        257,
        1238,
        2689,
        1520,
        300,
        291,
        603,
        764,
        257,
        688,
        3710,
        15329,
        9410,
        13,
        50828
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0609588081186468,
      "compression_ratio": 1.6116071428571428,
      "no_speech_prob": 0.06770030409097672,
      "confidence": 0.9322996959090233
    },
    {
      "id": 37,
      "start": 220.64000000000001,
      "end": 226.08,
      "text": "Okay, so now let's look at the order of operations. Just like we would expect, we can also use",
      "tokens": [
        50828,
        1033,
        11,
        370,
        586,
        718,
        311,
        574,
        412,
        264,
        1668,
        295,
        7705,
        13,
        1449,
        411,
        321,
        576,
        2066,
        11,
        321,
        393,
        611,
        764,
        51100
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0609588081186468,
      "compression_ratio": 1.6116071428571428,
      "no_speech_prob": 0.06770030409097672,
      "confidence": 0.9322996959090233
    },
    {
      "id": 38,
      "start": 226.08,
      "end": 232.24,
      "text": "parentheses to change the order of operations just like with normal arithmetic. So for example,",
      "tokens": [
        51100,
        34153,
        281,
        1319,
        264,
        1668,
        295,
        7705,
        445,
        411,
        365,
        2710,
        42973,
        13,
        407,
        337,
        1365,
        11,
        51408
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0609588081186468,
      "compression_ratio": 1.6116071428571428,
      "no_speech_prob": 0.06770030409097672,
      "confidence": 0.9322996959090233
    },
    {
      "id": 39,
      "start": 232.24,
      "end": 240.88,
      "text": "if we were to say, let's see, three times two plus one, then with the normal order of operations,",
      "tokens": [
        50364,
        498,
        321,
        645,
        281,
        584,
        11,
        718,
        311,
        536,
        11,
        1045,
        1413,
        732,
        1804,
        472,
        11,
        550,
        365,
        264,
        2710,
        1668,
        295,
        7705,
        11,
        50796
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08484929341536301,
      "compression_ratio": 1.8294930875576036,
      "no_speech_prob": 0.10910207778215408,
      "confidence": 0.8908979222178459
    },
    {
      "id": 40,
      "start": 240.88,
      "end": 246.8,
      "text": "we would multiply three and two, which would give us six, and then we would add one, which would give",
      "tokens": [
        50796,
        321,
        576,
        12972,
        1045,
        293,
        732,
        11,
        597,
        576,
        976,
        505,
        2309,
        11,
        293,
        550,
        321,
        576,
        909,
        472,
        11,
        597,
        576,
        976,
        51092
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08484929341536301,
      "compression_ratio": 1.8294930875576036,
      "no_speech_prob": 0.10910207778215408,
      "confidence": 0.8908979222178459
    },
    {
      "id": 41,
      "start": 246.8,
      "end": 253.68,
      "text": "us seven. So if we run that, then we can see that we got seven as our answer. But if I put a parenthesis",
      "tokens": [
        51092,
        505,
        3407,
        13,
        407,
        498,
        321,
        1190,
        300,
        11,
        550,
        321,
        393,
        536,
        300,
        321,
        658,
        3407,
        382,
        527,
        1867,
        13,
        583,
        498,
        286,
        829,
        257,
        23350,
        9374,
        51436
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08484929341536301,
      "compression_ratio": 1.8294930875576036,
      "no_speech_prob": 0.10910207778215408,
      "confidence": 0.8908979222178459
    },
    {
      "id": 42,
      "start": 253.68,
      "end": 259.68,
      "text": "here around this two plus one, then now with normal arithmetic, the way that this would work",
      "tokens": [
        51436,
        510,
        926,
        341,
        732,
        1804,
        472,
        11,
        550,
        586,
        365,
        2710,
        42973,
        11,
        264,
        636,
        300,
        341,
        576,
        589,
        51736
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08484929341536301,
      "compression_ratio": 1.8294930875576036,
      "no_speech_prob": 0.10910207778215408,
      "confidence": 0.8908979222178459
    },
    {
      "id": 43,
      "start": 259.68,
      "end": 264.32,
      "text": "is that it should first add up these numbers in the parentheses, which should give us three,",
      "tokens": [
        50364,
        307,
        300,
        309,
        820,
        700,
        909,
        493,
        613,
        3547,
        294,
        264,
        34153,
        11,
        597,
        820,
        976,
        505,
        1045,
        11,
        50596
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05456335791226091,
      "compression_ratio": 1.7566539923954372,
      "no_speech_prob": 0.1557932049036026,
      "confidence": 0.8442067950963974
    },
    {
      "id": 44,
      "start": 264.32,
      "end": 269.84000000000003,
      "text": "and then three times three should give us nine. So now if we run this, then we can see that we",
      "tokens": [
        50596,
        293,
        550,
        1045,
        1413,
        1045,
        820,
        976,
        505,
        4949,
        13,
        407,
        586,
        498,
        321,
        1190,
        341,
        11,
        550,
        321,
        393,
        536,
        300,
        321,
        50872
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05456335791226091,
      "compression_ratio": 1.7566539923954372,
      "no_speech_prob": 0.1557932049036026,
      "confidence": 0.8442067950963974
    },
    {
      "id": 45,
      "start": 269.84000000000003,
      "end": 274.24,
      "text": "got nine. So the order of operations does work correctly within Python like we would expect.",
      "tokens": [
        50872,
        658,
        4949,
        13,
        407,
        264,
        1668,
        295,
        7705,
        775,
        589,
        8944,
        1951,
        15329,
        411,
        321,
        576,
        2066,
        13,
        51092
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05456335791226091,
      "compression_ratio": 1.7566539923954372,
      "no_speech_prob": 0.1557932049036026,
      "confidence": 0.8442067950963974
    },
    {
      "id": 46,
      "start": 274.8,
      "end": 279.36,
      "text": "Okay, so now let's look at another common operation that you'll see a lot, and that is",
      "tokens": [
        51120,
        1033,
        11,
        370,
        586,
        718,
        311,
        574,
        412,
        1071,
        2689,
        6916,
        300,
        291,
        603,
        536,
        257,
        688,
        11,
        293,
        300,
        307,
        51348
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05456335791226091,
      "compression_ratio": 1.7566539923954372,
      "no_speech_prob": 0.1557932049036026,
      "confidence": 0.8442067950963974
    },
    {
      "id": 47,
      "start": 279.36,
      "end": 286.16,
      "text": "incrementing a variable. So if I make a variable here called num, and I set this equal to one,",
      "tokens": [
        51348,
        26200,
        278,
        257,
        7006,
        13,
        407,
        498,
        286,
        652,
        257,
        7006,
        510,
        1219,
        1031,
        11,
        293,
        286,
        992,
        341,
        2681,
        281,
        472,
        11,
        51688
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05456335791226091,
      "compression_ratio": 1.7566539923954372,
      "no_speech_prob": 0.1557932049036026,
      "confidence": 0.8442067950963974
    },
    {
      "id": 48,
      "start": 286.16,
      "end": 291.04,
      "text": "then what are some ways that we can increment that value by one? Well, one way that we could",
      "tokens": [
        50364,
        550,
        437,
        366,
        512,
        2098,
        300,
        321,
        393,
        26200,
        300,
        2158,
        538,
        472,
        30,
        1042,
        11,
        472,
        636,
        300,
        321,
        727,
        50608
      ],
      "temperature": 0.0,
      "avg_logprob": -0.046273310353436806,
      "compression_ratio": 1.9915254237288136,
      "no_speech_prob": 0.00311021925881505,
      "confidence": 0.996889780741185
    },
    {
      "id": 49,
      "start": 291.04,
      "end": 299.68,
      "text": "do this is to say that num is equal to num plus one, and if we print out that num, then we can",
      "tokens": [
        50608,
        360,
        341,
        307,
        281,
        584,
        300,
        1031,
        307,
        2681,
        281,
        1031,
        1804,
        472,
        11,
        293,
        498,
        321,
        4482,
        484,
        300,
        1031,
        11,
        550,
        321,
        393,
        51040
      ],
      "temperature": 0.0,
      "avg_logprob": -0.046273310353436806,
      "compression_ratio": 1.9915254237288136,
      "no_speech_prob": 0.00311021925881505,
      "confidence": 0.996889780741185
    },
    {
      "id": 50,
      "start": 299.68,
      "end": 304.24,
      "text": "see that it did increment it by one, and now it's equal to two. But incrementing values is such a",
      "tokens": [
        51040,
        536,
        300,
        309,
        630,
        26200,
        309,
        538,
        472,
        11,
        293,
        586,
        309,
        311,
        2681,
        281,
        732,
        13,
        583,
        26200,
        278,
        4190,
        307,
        1270,
        257,
        51268
      ],
      "temperature": 0.0,
      "avg_logprob": -0.046273310353436806,
      "compression_ratio": 1.9915254237288136,
      "no_speech_prob": 0.00311021925881505,
      "confidence": 0.996889780741185
    },
    {
      "id": 51,
      "start": 304.24,
      "end": 310.96000000000004,
      "text": "common operation that there is a shorthand for this. So instead, we can just say num plus equals",
      "tokens": [
        51268,
        2689,
        6916,
        300,
        456,
        307,
        257,
        402,
        2652,
        474,
        337,
        341,
        13,
        407,
        2602,
        11,
        321,
        393,
        445,
        584,
        1031,
        1804,
        6915,
        51604
      ],
      "temperature": 0.0,
      "avg_logprob": -0.046273310353436806,
      "compression_ratio": 1.9915254237288136,
      "no_speech_prob": 0.00311021925881505,
      "confidence": 0.996889780741185
    },
    {
      "id": 52,
      "start": 310.96000000000004,
      "end": 315.92,
      "text": "one. So if we run that, then we can see that it still incremented that value up to two.",
      "tokens": [
        51604,
        472,
        13,
        407,
        498,
        321,
        1190,
        300,
        11,
        550,
        321,
        393,
        536,
        300,
        309,
        920,
        1946,
        14684,
        300,
        2158,
        493,
        281,
        732,
        13,
        51852
      ],
      "temperature": 0.0,
      "avg_logprob": -0.046273310353436806,
      "compression_ratio": 1.9915254237288136,
      "no_speech_prob": 0.00311021925881505,
      "confidence": 0.996889780741185
    },
    {
      "id": 53,
      "start": 315.92,
      "end": 320.48,
      "text": "And you can use this syntax with the other operations as well. So instead, if we were to",
      "tokens": [
        50364,
        400,
        291,
        393,
        764,
        341,
        28431,
        365,
        264,
        661,
        7705,
        382,
        731,
        13,
        407,
        2602,
        11,
        498,
        321,
        645,
        281,
        50592
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0609359997575001,
      "compression_ratio": 1.578723404255319,
      "no_speech_prob": 0.0002461644762661308,
      "confidence": 0.9997538355237339
    },
    {
      "id": 54,
      "start": 320.48,
      "end": 327.76,
      "text": "say num times equals ten, and ran this, then we can see that we got ten because it took our",
      "tokens": [
        50592,
        584,
        1031,
        1413,
        6915,
        2064,
        11,
        293,
        5872,
        341,
        11,
        550,
        321,
        393,
        536,
        300,
        321,
        658,
        2064,
        570,
        309,
        1890,
        527,
        50956
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0609359997575001,
      "compression_ratio": 1.578723404255319,
      "no_speech_prob": 0.0002461644762661308,
      "confidence": 0.9997538355237339
    },
    {
      "id": 55,
      "start": 327.76,
      "end": 335.04,
      "text": "original number and multiplied one by ten. Okay, so a couple more things here. We also have some",
      "tokens": [
        50956,
        3380,
        1230,
        293,
        17207,
        472,
        538,
        2064,
        13,
        1033,
        11,
        370,
        257,
        1916,
        544,
        721,
        510,
        13,
        492,
        611,
        362,
        512,
        51320
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0609359997575001,
      "compression_ratio": 1.578723404255319,
      "no_speech_prob": 0.0002461644762661308,
      "confidence": 0.9997538355237339
    },
    {
      "id": 56,
      "start": 335.04,
      "end": 341.04,
      "text": "built-in functions available to us to work with numbers, and one of these is abs for absolute",
      "tokens": [
        51320,
        3094,
        12,
        259,
        6828,
        2435,
        281,
        505,
        281,
        589,
        365,
        3547,
        11,
        293,
        472,
        295,
        613,
        307,
        1950,
        337,
        8236,
        51620
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0609359997575001,
      "compression_ratio": 1.578723404255319,
      "no_speech_prob": 0.0002461644762661308,
      "confidence": 0.9997538355237339
    },
    {
      "id": 57,
      "start": 341.04,
      "end": 346.72,
      "text": "value. And basically, this will just remove the sign from any negative numbers. So if I took the",
      "tokens": [
        50364,
        2158,
        13,
        400,
        1936,
        11,
        341,
        486,
        445,
        4159,
        264,
        1465,
        490,
        604,
        3671,
        3547,
        13,
        407,
        498,
        286,
        1890,
        264,
        50648
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06576759474618095,
      "compression_ratio": 1.751111111111111,
      "no_speech_prob": 0.1813393235206604,
      "confidence": 0.8186606764793396
    },
    {
      "id": 58,
      "start": 346.72,
      "end": 353.52000000000004,
      "text": "absolute value of negative three, and I'll just clean up a couple of lines there. Okay, so if we",
      "tokens": [
        50648,
        8236,
        2158,
        295,
        3671,
        1045,
        11,
        293,
        286,
        603,
        445,
        2541,
        493,
        257,
        1916,
        295,
        3876,
        456,
        13,
        1033,
        11,
        370,
        498,
        321,
        50988
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06576759474618095,
      "compression_ratio": 1.751111111111111,
      "no_speech_prob": 0.1813393235206604,
      "confidence": 0.8186606764793396
    },
    {
      "id": 59,
      "start": 353.52000000000004,
      "end": 359.36,
      "text": "were to print out the absolute value of negative three and run that, then we can see down here that",
      "tokens": [
        50988,
        645,
        281,
        4482,
        484,
        264,
        8236,
        2158,
        295,
        3671,
        1045,
        293,
        1190,
        300,
        11,
        550,
        321,
        393,
        536,
        760,
        510,
        300,
        51280
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06576759474618095,
      "compression_ratio": 1.751111111111111,
      "no_speech_prob": 0.1813393235206604,
      "confidence": 0.8186606764793396
    },
    {
      "id": 60,
      "start": 359.36,
      "end": 365.04,
      "text": "we just got the absolute value, which is three. Now another built-in function that we have is round,",
      "tokens": [
        51280,
        321,
        445,
        658,
        264,
        8236,
        2158,
        11,
        597,
        307,
        1045,
        13,
        823,
        1071,
        3094,
        12,
        259,
        2445,
        300,
        321,
        362,
        307,
        3098,
        11,
        51564
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06576759474618095,
      "compression_ratio": 1.751111111111111,
      "no_speech_prob": 0.1813393235206604,
      "confidence": 0.8186606764793396
    },
    {
      "id": 61,
      "start": 365.12,
      "end": 371.92,
      "text": "and by default, this will round our values to the nearest integer value. So if we said print",
      "tokens": [
        50368,
        293,
        538,
        7576,
        11,
        341,
        486,
        3098,
        527,
        4190,
        281,
        264,
        23831,
        24922,
        2158,
        13,
        407,
        498,
        321,
        848,
        4482,
        50708
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0671666233163131,
      "compression_ratio": 1.6145251396648044,
      "no_speech_prob": 0.07524280995130539,
      "confidence": 0.9247571900486946
    },
    {
      "id": 62,
      "start": 373.04,
      "end": 382.16,
      "text": "the round of 3.75 and run that, then we can see that 3.75 rounded up to four. And we can also pass",
      "tokens": [
        50764,
        264,
        3098,
        295,
        805,
        13,
        11901,
        293,
        1190,
        300,
        11,
        550,
        321,
        393,
        536,
        300,
        805,
        13,
        11901,
        23382,
        493,
        281,
        1451,
        13,
        400,
        321,
        393,
        611,
        1320,
        51220
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0671666233163131,
      "compression_ratio": 1.6145251396648044,
      "no_speech_prob": 0.07524280995130539,
      "confidence": 0.9247571900486946
    },
    {
      "id": 63,
      "start": 382.16,
      "end": 387.52000000000004,
      "text": "a second argument into our round function that tells it how many digits that we want to round to.",
      "tokens": [
        51220,
        257,
        1150,
        6770,
        666,
        527,
        3098,
        2445,
        300,
        5112,
        309,
        577,
        867,
        27011,
        300,
        321,
        528,
        281,
        3098,
        281,
        13,
        51488
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0671666233163131,
      "compression_ratio": 1.6145251396648044,
      "no_speech_prob": 0.07524280995130539,
      "confidence": 0.9247571900486946
    },
    {
      "id": 64,
      "start": 387.52,
      "end": 396.08,
      "text": "So if I put in a comma here and pass in a one as a second argument and now run this, and what we're",
      "tokens": [
        50364,
        407,
        498,
        286,
        829,
        294,
        257,
        22117,
        510,
        293,
        1320,
        294,
        257,
        472,
        382,
        257,
        1150,
        6770,
        293,
        586,
        1190,
        341,
        11,
        293,
        437,
        321,
        434,
        50792
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0653558627213582,
      "compression_ratio": 1.6075949367088607,
      "no_speech_prob": 0.14135313034057617,
      "confidence": 0.8586468696594238
    },
    {
      "id": 65,
      "start": 396.08,
      "end": 401.03999999999996,
      "text": "saying is that we want to round to the first digit after the decimal. So we can see that that",
      "tokens": [
        50792,
        1566,
        307,
        300,
        321,
        528,
        281,
        3098,
        281,
        264,
        700,
        14293,
        934,
        264,
        26601,
        13,
        407,
        321,
        393,
        536,
        300,
        300,
        51040
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0653558627213582,
      "compression_ratio": 1.6075949367088607,
      "no_speech_prob": 0.14135313034057617,
      "confidence": 0.8586468696594238
    },
    {
      "id": 66,
      "start": 401.03999999999996,
      "end": 406.96,
      "text": "rounded to 3.8. Okay, so another common thing that you need to do when working with numbers",
      "tokens": [
        51040,
        23382,
        281,
        805,
        13,
        23,
        13,
        1033,
        11,
        370,
        1071,
        2689,
        551,
        300,
        291,
        643,
        281,
        360,
        562,
        1364,
        365,
        3547,
        51336
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0653558627213582,
      "compression_ratio": 1.6075949367088607,
      "no_speech_prob": 0.14135313034057617,
      "confidence": 0.8586468696594238
    },
    {
      "id": 67,
      "start": 406.96,
      "end": 412.88,
      "text": "is to use comparisons. Now we'll want to know if two values are equal, greater than, less than,",
      "tokens": [
        51336,
        307,
        281,
        764,
        33157,
        13,
        823,
        321,
        603,
        528,
        281,
        458,
        498,
        732,
        4190,
        366,
        2681,
        11,
        5044,
        813,
        11,
        1570,
        813,
        11,
        51632
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0653558627213582,
      "compression_ratio": 1.6075949367088607,
      "no_speech_prob": 0.14135313034057617,
      "confidence": 0.8586468696594238
    },
    {
      "id": 68,
      "start": 412.88,
      "end": 417.84,
      "text": "and all of that. So to test this, we can use comparison operators. And I have some comments",
      "tokens": [
        50364,
        293,
        439,
        295,
        300,
        13,
        407,
        281,
        1500,
        341,
        11,
        321,
        393,
        764,
        9660,
        19077,
        13,
        400,
        286,
        362,
        512,
        3053,
        50612
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05653465421576249,
      "compression_ratio": 1.7389705882352942,
      "no_speech_prob": 0.29011741280555725,
      "confidence": 0.7098825871944427
    },
    {
      "id": 69,
      "start": 417.84,
      "end": 423.36,
      "text": "over here in my snippets with the comparison operators as well, and I'm just going to paste",
      "tokens": [
        50612,
        670,
        510,
        294,
        452,
        35623,
        1385,
        365,
        264,
        9660,
        19077,
        382,
        731,
        11,
        293,
        286,
        478,
        445,
        516,
        281,
        9163,
        50888
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05653465421576249,
      "compression_ratio": 1.7389705882352942,
      "no_speech_prob": 0.29011741280555725,
      "confidence": 0.7098825871944427
    },
    {
      "id": 70,
      "start": 423.36,
      "end": 428.8,
      "text": "over the arithmetic operators that we've already gone over and paste those in. Now these comparisons",
      "tokens": [
        50888,
        670,
        264,
        42973,
        19077,
        300,
        321,
        600,
        1217,
        2780,
        670,
        293,
        9163,
        729,
        294,
        13,
        823,
        613,
        33157,
        51160
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05653465421576249,
      "compression_ratio": 1.7389705882352942,
      "no_speech_prob": 0.29011741280555725,
      "confidence": 0.7098825871944427
    },
    {
      "id": 71,
      "start": 428.8,
      "end": 434.0,
      "text": "are going to return Booleans, which are true false values. We'll be learning more about Booleans in",
      "tokens": [
        51160,
        366,
        516,
        281,
        2736,
        23351,
        24008,
        11,
        597,
        366,
        2074,
        7908,
        4190,
        13,
        492,
        603,
        312,
        2539,
        544,
        466,
        23351,
        24008,
        294,
        51420
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05653465421576249,
      "compression_ratio": 1.7389705882352942,
      "no_speech_prob": 0.29011741280555725,
      "confidence": 0.7098825871944427
    },
    {
      "id": 72,
      "start": 434.0,
      "end": 438.8,
      "text": "a future video when we go over conditionals, but we'll see them here for the first time.",
      "tokens": [
        51420,
        257,
        2027,
        960,
        562,
        321,
        352,
        670,
        4188,
        1124,
        11,
        457,
        321,
        603,
        536,
        552,
        510,
        337,
        264,
        700,
        565,
        13,
        51660
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05653465421576249,
      "compression_ratio": 1.7389705882352942,
      "no_speech_prob": 0.29011741280555725,
      "confidence": 0.7098825871944427
    },
    {
      "id": 73,
      "start": 438.8,
      "end": 444.96000000000004,
      "text": "So let's say I have two variables here, and we'll just call these two variables num one and set",
      "tokens": [
        50364,
        407,
        718,
        311,
        584,
        286,
        362,
        732,
        9102,
        510,
        11,
        293,
        321,
        603,
        445,
        818,
        613,
        732,
        9102,
        1031,
        472,
        293,
        992,
        50672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07189216136932373,
      "compression_ratio": 1.8780487804878048,
      "no_speech_prob": 0.22154004871845245,
      "confidence": 0.7784599512815475
    },
    {
      "id": 74,
      "start": 444.96000000000004,
      "end": 452.32,
      "text": "that equal to three, and we'll do num two is equal to two. So now let's run through all of these",
      "tokens": [
        50672,
        300,
        2681,
        281,
        1045,
        11,
        293,
        321,
        603,
        360,
        1031,
        732,
        307,
        2681,
        281,
        732,
        13,
        407,
        586,
        718,
        311,
        1190,
        807,
        439,
        295,
        613,
        51040
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07189216136932373,
      "compression_ratio": 1.8780487804878048,
      "no_speech_prob": 0.22154004871845245,
      "confidence": 0.7784599512815475
    },
    {
      "id": 75,
      "start": 452.32,
      "end": 458.32,
      "text": "comparisons. So first, let's say that we wanted to check if these two variables were equal. So I",
      "tokens": [
        51040,
        33157,
        13,
        407,
        700,
        11,
        718,
        311,
        584,
        300,
        321,
        1415,
        281,
        1520,
        498,
        613,
        732,
        9102,
        645,
        2681,
        13,
        407,
        286,
        51340
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07189216136932373,
      "compression_ratio": 1.8780487804878048,
      "no_speech_prob": 0.22154004871845245,
      "confidence": 0.7784599512815475
    },
    {
      "id": 76,
      "start": 458.32,
      "end": 464.88,
      "text": "could say num one, and you can see up here that the equals comparison is double equals. Now you",
      "tokens": [
        51340,
        727,
        584,
        1031,
        472,
        11,
        293,
        291,
        393,
        536,
        493,
        510,
        300,
        264,
        6915,
        9660,
        307,
        3834,
        6915,
        13,
        823,
        291,
        51668
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07189216136932373,
      "compression_ratio": 1.8780487804878048,
      "no_speech_prob": 0.22154004871845245,
      "confidence": 0.7784599512815475
    },
    {
      "id": 77,
      "start": 464.88,
      "end": 469.92,
      "text": "don't want to use the single equals because the single equals is this assignment here. So the double",
      "tokens": [
        50364,
        500,
        380,
        528,
        281,
        764,
        264,
        2167,
        6915,
        570,
        264,
        2167,
        6915,
        307,
        341,
        15187,
        510,
        13,
        407,
        264,
        3834,
        50616
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06781876087188721,
      "compression_ratio": 2.117391304347826,
      "no_speech_prob": 0.030646419152617455,
      "confidence": 0.9693535808473825
    },
    {
      "id": 78,
      "start": 469.92,
      "end": 475.92,
      "text": "equals is comparison, the single equals is assignment. So we want to compare. Is num one",
      "tokens": [
        50616,
        6915,
        307,
        9660,
        11,
        264,
        2167,
        6915,
        307,
        15187,
        13,
        407,
        321,
        528,
        281,
        6794,
        13,
        1119,
        1031,
        472,
        50916
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06781876087188721,
      "compression_ratio": 2.117391304347826,
      "no_speech_prob": 0.030646419152617455,
      "confidence": 0.9693535808473825
    },
    {
      "id": 79,
      "start": 475.92,
      "end": 481.68,
      "text": "equal to num two? And if we run that, then we can see that it returns false because those two values",
      "tokens": [
        50916,
        2681,
        281,
        1031,
        732,
        30,
        400,
        498,
        321,
        1190,
        300,
        11,
        550,
        321,
        393,
        536,
        300,
        309,
        11247,
        7908,
        570,
        729,
        732,
        4190,
        51204
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06781876087188721,
      "compression_ratio": 2.117391304347826,
      "no_speech_prob": 0.030646419152617455,
      "confidence": 0.9693535808473825
    },
    {
      "id": 80,
      "start": 481.68,
      "end": 487.92,
      "text": "are not equal. Now if I wanted to check if they weren't equal, then I could use the exclamation",
      "tokens": [
        51204,
        366,
        406,
        2681,
        13,
        823,
        498,
        286,
        1415,
        281,
        1520,
        498,
        436,
        4999,
        380,
        2681,
        11,
        550,
        286,
        727,
        764,
        264,
        1624,
        43233,
        51516
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06781876087188721,
      "compression_ratio": 2.117391304347826,
      "no_speech_prob": 0.030646419152617455,
      "confidence": 0.9693535808473825
    },
    {
      "id": 81,
      "start": 487.92,
      "end": 494.15999999999997,
      "text": "point before the equal sign here, exclamation point equals. And if we run that, then we can see that",
      "tokens": [
        51516,
        935,
        949,
        264,
        2681,
        1465,
        510,
        11,
        1624,
        43233,
        935,
        6915,
        13,
        400,
        498,
        321,
        1190,
        300,
        11,
        550,
        321,
        393,
        536,
        300,
        51828
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06781876087188721,
      "compression_ratio": 2.117391304347826,
      "no_speech_prob": 0.030646419152617455,
      "confidence": 0.9693535808473825
    },
    {
      "id": 82,
      "start": 494.16,
      "end": 500.16,
      "text": "we got true because these two values are not equal. Now I can check if num one is greater than",
      "tokens": [
        50364,
        321,
        658,
        2074,
        570,
        613,
        732,
        4190,
        366,
        406,
        2681,
        13,
        823,
        286,
        393,
        1520,
        498,
        1031,
        472,
        307,
        5044,
        813,
        50664
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04189020575899066,
      "compression_ratio": 2.071129707112971,
      "no_speech_prob": 0.0039029137697070837,
      "confidence": 0.9960970862302929
    },
    {
      "id": 83,
      "start": 500.16,
      "end": 506.96000000000004,
      "text": "num two by using the greater than sign. So I can save that and run it, and we can see that we got",
      "tokens": [
        50664,
        1031,
        732,
        538,
        1228,
        264,
        5044,
        813,
        1465,
        13,
        407,
        286,
        393,
        3155,
        300,
        293,
        1190,
        309,
        11,
        293,
        321,
        393,
        536,
        300,
        321,
        658,
        51004
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04189020575899066,
      "compression_ratio": 2.071129707112971,
      "no_speech_prob": 0.0039029137697070837,
      "confidence": 0.9960970862302929
    },
    {
      "id": 84,
      "start": 506.96000000000004,
      "end": 512.64,
      "text": "true because num one is three, num two is two, so three is greater than two. And if you wanted to",
      "tokens": [
        51004,
        2074,
        570,
        1031,
        472,
        307,
        1045,
        11,
        1031,
        732,
        307,
        732,
        11,
        370,
        1045,
        307,
        5044,
        813,
        732,
        13,
        400,
        498,
        291,
        1415,
        281,
        51288
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04189020575899066,
      "compression_ratio": 2.071129707112971,
      "no_speech_prob": 0.0039029137697070837,
      "confidence": 0.9960970862302929
    },
    {
      "id": 85,
      "start": 512.64,
      "end": 518.08,
      "text": "check less than, then you can just use the less than sign. So if we run that, you can see we got false.",
      "tokens": [
        51288,
        1520,
        1570,
        813,
        11,
        550,
        291,
        393,
        445,
        764,
        264,
        1570,
        813,
        1465,
        13,
        407,
        498,
        321,
        1190,
        300,
        11,
        291,
        393,
        536,
        321,
        658,
        7908,
        13,
        51560
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04189020575899066,
      "compression_ratio": 2.071129707112971,
      "no_speech_prob": 0.0039029137697070837,
      "confidence": 0.9960970862302929
    },
    {
      "id": 86,
      "start": 518.08,
      "end": 522.4,
      "text": "And you can also use the equal signs with these as well. So if I wanted to check if this was greater",
      "tokens": [
        51560,
        400,
        291,
        393,
        611,
        764,
        264,
        2681,
        7880,
        365,
        613,
        382,
        731,
        13,
        407,
        498,
        286,
        1415,
        281,
        1520,
        498,
        341,
        390,
        5044,
        51776
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04189020575899066,
      "compression_ratio": 2.071129707112971,
      "no_speech_prob": 0.0039029137697070837,
      "confidence": 0.9960970862302929
    },
    {
      "id": 87,
      "start": 522.4,
      "end": 528.4,
      "text": "than or equal to, then we could run that. We can see that it's true. And if we want to check less",
      "tokens": [
        50364,
        813,
        420,
        2681,
        281,
        11,
        550,
        321,
        727,
        1190,
        300,
        13,
        492,
        393,
        536,
        300,
        309,
        311,
        2074,
        13,
        400,
        498,
        321,
        528,
        281,
        1520,
        1570,
        50664
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06268192782546535,
      "compression_ratio": 1.7934782608695652,
      "no_speech_prob": 0.04685208946466446,
      "confidence": 0.9531479105353355
    },
    {
      "id": 88,
      "start": 528.4,
      "end": 533.6,
      "text": "than or equal to, then we can use those as well. And if we print that, we can see that we got false.",
      "tokens": [
        50664,
        813,
        420,
        2681,
        281,
        11,
        550,
        321,
        393,
        764,
        729,
        382,
        731,
        13,
        400,
        498,
        321,
        4482,
        300,
        11,
        321,
        393,
        536,
        300,
        321,
        658,
        7908,
        13,
        50924
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06268192782546535,
      "compression_ratio": 1.7934782608695652,
      "no_speech_prob": 0.04685208946466446,
      "confidence": 0.9531479105353355
    },
    {
      "id": 89,
      "start": 533.6,
      "end": 537.68,
      "text": "Okay, so now we're going to look at one more thing, and I'm just going to delete these in order to get",
      "tokens": [
        50924,
        1033,
        11,
        370,
        586,
        321,
        434,
        516,
        281,
        574,
        412,
        472,
        544,
        551,
        11,
        293,
        286,
        478,
        445,
        516,
        281,
        12097,
        613,
        294,
        1668,
        281,
        483,
        51128
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06268192782546535,
      "compression_ratio": 1.7934782608695652,
      "no_speech_prob": 0.04685208946466446,
      "confidence": 0.9531479105353355
    },
    {
      "id": 90,
      "start": 537.68,
      "end": 543.36,
      "text": "some more room. Now I will have these comments up on my GitHub page if you want a reference to the",
      "tokens": [
        51128,
        512,
        544,
        1808,
        13,
        823,
        286,
        486,
        362,
        613,
        3053,
        493,
        322,
        452,
        23331,
        3028,
        498,
        291,
        528,
        257,
        6408,
        281,
        264,
        51412
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06268192782546535,
      "compression_ratio": 1.7934782608695652,
      "no_speech_prob": 0.04685208946466446,
      "confidence": 0.9531479105353355
    },
    {
      "id": 91,
      "start": 543.36,
      "end": 548.72,
      "text": "arithmetic operators and the comparisons that we just looked at. Okay, so in the last video we",
      "tokens": [
        51412,
        42973,
        19077,
        293,
        264,
        33157,
        300,
        321,
        445,
        2956,
        412,
        13,
        1033,
        11,
        370,
        294,
        264,
        1036,
        960,
        321,
        51680
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06268192782546535,
      "compression_ratio": 1.7934782608695652,
      "no_speech_prob": 0.04685208946466446,
      "confidence": 0.9531479105353355
    },
    {
      "id": 92,
      "start": 548.72,
      "end": 553.44,
      "text": "learned about strings. Now it's possible that you have something that looks like a number,",
      "tokens": [
        50364,
        3264,
        466,
        13985,
        13,
        823,
        309,
        311,
        1944,
        300,
        291,
        362,
        746,
        300,
        1542,
        411,
        257,
        1230,
        11,
        50600
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04000167308315154,
      "compression_ratio": 1.8059701492537314,
      "no_speech_prob": 0.2095947414636612,
      "confidence": 0.7904052585363388
    },
    {
      "id": 93,
      "start": 553.44,
      "end": 558.32,
      "text": "but it could actually be a string. So let's look at a problem that we can run into if that's the",
      "tokens": [
        50600,
        457,
        309,
        727,
        767,
        312,
        257,
        6798,
        13,
        407,
        718,
        311,
        574,
        412,
        257,
        1154,
        300,
        321,
        393,
        1190,
        666,
        498,
        300,
        311,
        264,
        50844
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04000167308315154,
      "compression_ratio": 1.8059701492537314,
      "no_speech_prob": 0.2095947414636612,
      "confidence": 0.7904052585363388
    },
    {
      "id": 94,
      "start": 558.32,
      "end": 562.72,
      "text": "case, and then we'll see how to solve it. So let's say that you have some variables that look like",
      "tokens": [
        50844,
        1389,
        11,
        293,
        550,
        321,
        603,
        536,
        577,
        281,
        5039,
        309,
        13,
        407,
        718,
        311,
        584,
        300,
        291,
        362,
        512,
        9102,
        300,
        574,
        411,
        51064
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04000167308315154,
      "compression_ratio": 1.8059701492537314,
      "no_speech_prob": 0.2095947414636612,
      "confidence": 0.7904052585363388
    },
    {
      "id": 95,
      "start": 562.72,
      "end": 567.84,
      "text": "numbers. So maybe we read these in from a text file or got them from a website or something like",
      "tokens": [
        51064,
        3547,
        13,
        407,
        1310,
        321,
        1401,
        613,
        294,
        490,
        257,
        2487,
        3991,
        420,
        658,
        552,
        490,
        257,
        3144,
        420,
        746,
        411,
        51320
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04000167308315154,
      "compression_ratio": 1.8059701492537314,
      "no_speech_prob": 0.2095947414636612,
      "confidence": 0.7904052585363388
    },
    {
      "id": 96,
      "start": 567.84,
      "end": 574.0,
      "text": "that. So just to give an example, let's recreate our num one, but this time we're going to set these",
      "tokens": [
        51320,
        300,
        13,
        407,
        445,
        281,
        976,
        364,
        1365,
        11,
        718,
        311,
        25833,
        527,
        1031,
        472,
        11,
        457,
        341,
        565,
        321,
        434,
        516,
        281,
        992,
        613,
        51628
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04000167308315154,
      "compression_ratio": 1.8059701492537314,
      "no_speech_prob": 0.2095947414636612,
      "confidence": 0.7904052585363388
    },
    {
      "id": 97,
      "start": 574.0,
      "end": 581.84,
      "text": "equal in single quotes here. We'll set this to 100, and num two will set equal to inside single",
      "tokens": [
        50364,
        2681,
        294,
        2167,
        19963,
        510,
        13,
        492,
        603,
        992,
        341,
        281,
        2319,
        11,
        293,
        1031,
        732,
        486,
        992,
        2681,
        281,
        1854,
        2167,
        50756
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06770952224731445,
      "compression_ratio": 1.7568807339449541,
      "no_speech_prob": 0.19300633668899536,
      "confidence": 0.8069936633110046
    },
    {
      "id": 98,
      "start": 581.84,
      "end": 587.68,
      "text": "quotes 200. So I explicitly set these equal to strings, so it's obvious to us that they're",
      "tokens": [
        50756,
        19963,
        2331,
        13,
        407,
        286,
        20803,
        992,
        613,
        2681,
        281,
        13985,
        11,
        370,
        309,
        311,
        6322,
        281,
        505,
        300,
        436,
        434,
        51048
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06770952224731445,
      "compression_ratio": 1.7568807339449541,
      "no_speech_prob": 0.19300633668899536,
      "confidence": 0.8069936633110046
    },
    {
      "id": 99,
      "start": 587.68,
      "end": 592.8,
      "text": "strings, but it might not be so obvious to us if we got these values from somewhere else. So now",
      "tokens": [
        51048,
        13985,
        11,
        457,
        309,
        1062,
        406,
        312,
        370,
        6322,
        281,
        505,
        498,
        321,
        658,
        613,
        4190,
        490,
        4079,
        1646,
        13,
        407,
        586,
        51304
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06770952224731445,
      "compression_ratio": 1.7568807339449541,
      "no_speech_prob": 0.19300633668899536,
      "confidence": 0.8069936633110046
    },
    {
      "id": 100,
      "start": 592.8,
      "end": 601.68,
      "text": "let's say that we want to add these values together. So if I was to say print num one plus num two,",
      "tokens": [
        51304,
        718,
        311,
        584,
        300,
        321,
        528,
        281,
        909,
        613,
        4190,
        1214,
        13,
        407,
        498,
        286,
        390,
        281,
        584,
        4482,
        1031,
        472,
        1804,
        1031,
        732,
        11,
        51748
      ],
      "temperature": 0.0,
      "avg_logprob": -0.06770952224731445,
      "compression_ratio": 1.7568807339449541,
      "no_speech_prob": 0.19300633668899536,
      "confidence": 0.8069936633110046
    },
    {
      "id": 101,
      "start": 602.56,
      "end": 608.4799999999999,
      "text": "and if we run this, then we can see that this isn't the result that we thought it would be.",
      "tokens": [
        50408,
        293,
        498,
        321,
        1190,
        341,
        11,
        550,
        321,
        393,
        536,
        300,
        341,
        1943,
        380,
        264,
        1874,
        300,
        321,
        1194,
        309,
        576,
        312,
        13,
        50704
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05557705644975629,
      "compression_ratio": 1.7906976744186047,
      "no_speech_prob": 0.0014078323729336262,
      "confidence": 0.9985921676270664
    },
    {
      "id": 102,
      "start": 608.4799999999999,
      "end": 612.9599999999999,
      "text": "Now if you remember from our string video, when we add strings together,",
      "tokens": [
        50704,
        823,
        498,
        291,
        1604,
        490,
        527,
        6798,
        960,
        11,
        562,
        321,
        909,
        13985,
        1214,
        11,
        50928
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05557705644975629,
      "compression_ratio": 1.7906976744186047,
      "no_speech_prob": 0.0014078323729336262,
      "confidence": 0.9985921676270664
    },
    {
      "id": 103,
      "start": 612.9599999999999,
      "end": 619.1999999999999,
      "text": "it just concatenates those together. So this is what we would expect with strings, but with numbers",
      "tokens": [
        50928,
        309,
        445,
        1588,
        7186,
        1024,
        729,
        1214,
        13,
        407,
        341,
        307,
        437,
        321,
        576,
        2066,
        365,
        13985,
        11,
        457,
        365,
        3547,
        51240
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05557705644975629,
      "compression_ratio": 1.7906976744186047,
      "no_speech_prob": 0.0014078323729336262,
      "confidence": 0.9985921676270664
    },
    {
      "id": 104,
      "start": 619.1999999999999,
      "end": 624.4799999999999,
      "text": "we would expect this to be 300. So in order to turn these into integers, we're going to have to",
      "tokens": [
        51240,
        321,
        576,
        2066,
        341,
        281,
        312,
        6641,
        13,
        407,
        294,
        1668,
        281,
        1261,
        613,
        666,
        41674,
        11,
        321,
        434,
        516,
        281,
        362,
        281,
        51504
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05557705644975629,
      "compression_ratio": 1.7906976744186047,
      "no_speech_prob": 0.0014078323729336262,
      "confidence": 0.9985921676270664
    },
    {
      "id": 105,
      "start": 624.4799999999999,
      "end": 630.9599999999999,
      "text": "do something called casting, and casting is super easy in Python. So to cast these values from string",
      "tokens": [
        51504,
        360,
        746,
        1219,
        17301,
        11,
        293,
        17301,
        307,
        1687,
        1858,
        294,
        15329,
        13,
        407,
        281,
        4193,
        613,
        4190,
        490,
        6798,
        51828
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05557705644975629,
      "compression_ratio": 1.7906976744186047,
      "no_speech_prob": 0.0014078323729336262,
      "confidence": 0.9985921676270664
    },
    {
      "id": 106,
      "start": 630.96,
      "end": 637.76,
      "text": "to integers, then we'll just add a couple lines here, and I will copy these, and we'll just say",
      "tokens": [
        50364,
        281,
        41674,
        11,
        550,
        321,
        603,
        445,
        909,
        257,
        1916,
        3876,
        510,
        11,
        293,
        286,
        486,
        5055,
        613,
        11,
        293,
        321,
        603,
        445,
        584,
        50704
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04349336190657182,
      "compression_ratio": 1.8511627906976744,
      "no_speech_prob": 0.001273779314942658,
      "confidence": 0.9987262206850573
    },
    {
      "id": 107,
      "start": 637.76,
      "end": 644.88,
      "text": "that num one equals int num one. So we just casted that to an integer, and we can do the same thing",
      "tokens": [
        50704,
        300,
        1031,
        472,
        6915,
        560,
        1031,
        472,
        13,
        407,
        321,
        445,
        4193,
        292,
        300,
        281,
        364,
        24922,
        11,
        293,
        321,
        393,
        360,
        264,
        912,
        551,
        51060
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04349336190657182,
      "compression_ratio": 1.8511627906976744,
      "no_speech_prob": 0.001273779314942658,
      "confidence": 0.9987262206850573
    },
    {
      "id": 108,
      "start": 644.88,
      "end": 652.64,
      "text": "here with num two. So now if we save that and run it, then we can see that we got 300. So if you have",
      "tokens": [
        51060,
        510,
        365,
        1031,
        732,
        13,
        407,
        586,
        498,
        321,
        3155,
        300,
        293,
        1190,
        309,
        11,
        550,
        321,
        393,
        536,
        300,
        321,
        658,
        6641,
        13,
        407,
        498,
        291,
        362,
        51448
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04349336190657182,
      "compression_ratio": 1.8511627906976744,
      "no_speech_prob": 0.001273779314942658,
      "confidence": 0.9987262206850573
    },
    {
      "id": 109,
      "start": 652.64,
      "end": 657.84,
      "text": "an integer that's actually a string, and you want to cast that to an integer, then you can wrap that",
      "tokens": [
        51448,
        364,
        24922,
        300,
        311,
        767,
        257,
        6798,
        11,
        293,
        291,
        528,
        281,
        4193,
        300,
        281,
        364,
        24922,
        11,
        550,
        291,
        393,
        7019,
        300,
        51708
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04349336190657182,
      "compression_ratio": 1.8511627906976744,
      "no_speech_prob": 0.001273779314942658,
      "confidence": 0.9987262206850573
    },
    {
      "id": 110,
      "start": 657.84,
      "end": 663.76,
      "text": "string in this int function or this int class here to create an integer. Okay, so I think that is going",
      "tokens": [
        50364,
        6798,
        294,
        341,
        560,
        2445,
        420,
        341,
        560,
        1508,
        510,
        281,
        1884,
        364,
        24922,
        13,
        1033,
        11,
        370,
        286,
        519,
        300,
        307,
        516,
        50660
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05242052976635919,
      "compression_ratio": 1.7606060606060605,
      "no_speech_prob": 0.17841531336307526,
      "confidence": 0.8215846866369247
    },
    {
      "id": 111,
      "start": 663.76,
      "end": 667.76,
      "text": "to do it for this video. I hope that now you feel comfortable working with integers and floating",
      "tokens": [
        50660,
        281,
        360,
        309,
        337,
        341,
        960,
        13,
        286,
        1454,
        300,
        586,
        291,
        841,
        4619,
        1364,
        365,
        41674,
        293,
        12607,
        50860
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05242052976635919,
      "compression_ratio": 1.7606060606060605,
      "no_speech_prob": 0.17841531336307526,
      "confidence": 0.8215846866369247
    },
    {
      "id": 112,
      "start": 667.76,
      "end": 672.64,
      "text": "point values, and in the next video we'll be learning about lists, sets, and tuples, which",
      "tokens": [
        50860,
        935,
        4190,
        11,
        293,
        294,
        264,
        958,
        960,
        321,
        603,
        312,
        2539,
        466,
        14511,
        11,
        6352,
        11,
        293,
        2604,
        2622,
        11,
        597,
        51104
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05242052976635919,
      "compression_ratio": 1.7606060606060605,
      "no_speech_prob": 0.17841531336307526,
      "confidence": 0.8215846866369247
    },
    {
      "id": 113,
      "start": 672.64,
      "end": 678.48,
      "text": "basically allow us to hold sequences of data and is extremely useful to learn how to use properly.",
      "tokens": [
        51104,
        1936,
        2089,
        505,
        281,
        1797,
        22978,
        295,
        1412,
        293,
        307,
        4664,
        4420,
        281,
        1466,
        577,
        281,
        764,
        6108,
        13,
        51396
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05242052976635919,
      "compression_ratio": 1.7606060606060605,
      "no_speech_prob": 0.17841531336307526,
      "confidence": 0.8215846866369247
    },
    {
      "id": 114,
      "start": 678.48,
      "end": 682.1600000000001,
      "text": "But if anyone has any questions about what we covered in this video, then feel free to ask in",
      "tokens": [
        51396,
        583,
        498,
        2878,
        575,
        604,
        1651,
        466,
        437,
        321,
        5343,
        294,
        341,
        960,
        11,
        550,
        841,
        1737,
        281,
        1029,
        294,
        51580
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05242052976635919,
      "compression_ratio": 1.7606060606060605,
      "no_speech_prob": 0.17841531336307526,
      "confidence": 0.8215846866369247
    },
    {
      "id": 115,
      "start": 682.1600000000001,
      "end": 685.9200000000001,
      "text": "the comment section below, and I'll do my best to answer those. If you enjoy these tutorials and",
      "tokens": [
        51580,
        264,
        2871,
        3541,
        2507,
        11,
        293,
        286,
        603,
        360,
        452,
        1151,
        281,
        1867,
        729,
        13,
        759,
        291,
        2103,
        613,
        17616,
        293,
        51768
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05242052976635919,
      "compression_ratio": 1.7606060606060605,
      "no_speech_prob": 0.17841531336307526,
      "confidence": 0.8215846866369247
    },
    {
      "id": 116,
      "start": 685.92,
      "end": 689.52,
      "text": "would like to support them, then there are several ways you can do that. The easiest ways is simply",
      "tokens": [
        50364,
        576,
        411,
        281,
        1406,
        552,
        11,
        550,
        456,
        366,
        2940,
        2098,
        291,
        393,
        360,
        300,
        13,
        440,
        12889,
        2098,
        307,
        2935,
        50544
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09135982876732236,
      "compression_ratio": 1.691119691119691,
      "no_speech_prob": 0.03370967507362366,
      "confidence": 0.9662903249263763
    },
    {
      "id": 117,
      "start": 689.52,
      "end": 693.52,
      "text": "like the video and give it a thumbs up, and also it's a huge help to share these videos with anyone",
      "tokens": [
        50544,
        411,
        264,
        960,
        293,
        976,
        309,
        257,
        8838,
        493,
        11,
        293,
        611,
        309,
        311,
        257,
        2603,
        854,
        281,
        2073,
        613,
        2145,
        365,
        2878,
        50744
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09135982876732236,
      "compression_ratio": 1.691119691119691,
      "no_speech_prob": 0.03370967507362366,
      "confidence": 0.9662903249263763
    },
    {
      "id": 118,
      "start": 693.52,
      "end": 697.12,
      "text": "who you think would find them useful. And if you have the means, you can contribute through Patreon,",
      "tokens": [
        50744,
        567,
        291,
        519,
        576,
        915,
        552,
        4420,
        13,
        400,
        498,
        291,
        362,
        264,
        1355,
        11,
        291,
        393,
        10586,
        807,
        15692,
        11,
        50924
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09135982876732236,
      "compression_ratio": 1.691119691119691,
      "no_speech_prob": 0.03370967507362366,
      "confidence": 0.9662903249263763
    },
    {
      "id": 119,
      "start": 697.12,
      "end": 700.9599999999999,
      "text": "and there's a link to that page in the description section below. Be sure to subscribe for future",
      "tokens": [
        50924,
        293,
        456,
        311,
        257,
        2113,
        281,
        300,
        3028,
        294,
        264,
        3855,
        3541,
        2507,
        13,
        879,
        988,
        281,
        3022,
        337,
        2027,
        51116
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09135982876732236,
      "compression_ratio": 1.691119691119691,
      "no_speech_prob": 0.03370967507362366,
      "confidence": 0.9662903249263763
    },
    {
      "id": 120,
      "start": 700.9599999999999,
      "end": 706.8,
      "text": "videos, and thank you all for watching.",
      "tokens": [
        51116,
        2145,
        11,
        293,
        1309,
        291,
        439,
        337,
        1976,
        13,
        51408
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09135982876732236,
      "compression_ratio": 1.691119691119691,
      "no_speech_prob": 0.03370967507362366,
      "confidence": 0.9662903249263763
    }
  ]
}