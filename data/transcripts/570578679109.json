{
  "video_id": "570578679109",
  "video_path": "videos/Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
  "video_filename": "Python Tutorial- Comprehensions - How they work and why you should be using them.mp4",
  "model_size": "medium",
  "language": "en",
  "duration": 0,
  "text": " Hey everybody, how's it going? In this video we're going to be taking a look at list comprehensions in Python. So basically a list comprehension is an easier and more readable way to create a list. Now I think the best way to learn list comprehensions is to first show what it would look like in a for loop because I think everybody is familiar with for loops and even if you're coming from another language you'll be familiar with that as well. So let's take a look at some of these examples and I'll show you some of the advantages to list comprehensions in terms of how easy they are to write and also in how easy they are to read. So let's go ahead and take a look at this first example here. So in this first example I have this comment here that this is just going to be the easiest loop. All it does is pretty much copy it. So I'm saying that I want n for each n in nums. So if you were to write this in a for loop, first you would create an empty list and then you see here I have a list of numbers 1 through 10 and then I have this empty list myNums. So we're doing for n in nums, so it's going to loop through all these numbers, myList.append n, so it's just going to add each number to this list. Now we're going to print out that list. So let's go ahead and run that and you can see that it's exactly what we've expected. It's just a copy of the top list here. Now let's see what this looks like in a list comprehension and also notice how similar the list comprehension is to my comment here. So what I'm going to say is I'm going to make myList equal to and then brackets. So the brackets means that we're making a list and then let's try to pretty much copy exactly what is in the comment here. So I want n and then for each n in nums. That's a list comprehension. So this is what we're returning. This is what we want. I want n and then this is the for loop here, for n in nums. So if I save that and run it, then I actually have to print this out so that it shows up. So we'll run that and you'll see that it's the exact same result that we had from the for loop but this is much easier to write and it's pretty easy to understand also. So that's about the easiest list comprehension that you can do. So let's do a slightly more complicated example. So in this example here, if we read the comment, I'm saying that I want n squared, so n times n, for each n in nums. So this is pretty similar to our previous example but now we're actually returning the square event instead of just copying all the values. So to do this in a for loop, we would create an empty list and then we would loop through all the numbers and then we would append the square to the list and then when we're done we can print the list. So if I run this code, then you can see that our result, we get all of the squares of each number in this 1 through 10 list. Okay now let's see the same example but in a list comprehension and also let's notice how similar it is to the comment again. So it's almost like reading exactly what we want. So we want n times n, for n, in nums. So this is what we are appending to our list and this is the for loop here. So if I save that and then let me remember to print it out this time and then run it, then we get the exact same result as our for loop. Now there's another way to do something like this that's very similar. If you know how to use maps and lambdas, then maybe you've made something like this before. So let me comment out this code. So map pretty much runs everything in the list through a certain function and lambda is an anonymous function. So if I save this and print it out, you can see that we got the same result but list comprehensions pretty much do away with these map functions because they're no longer needed. This works and it's a one-liner just like the comprehension but you can't read this and understand exactly what it's doing unless you already knew about these to begin with. If you compare this readability to the list comprehension, somebody who's completely new to Python can see this and say n times n for n and nums and that just is readable. It just kind of flows together and you can kind of understand what's going on with these maps and lambdas. It says map lambda n n times n nums. It just doesn't read very well and you have to be experienced with those before you understand what's going on. So if you are using maps and lambdas from within your code, then you might want to check and see if those can be converted to list comprehensions because 99% of the time they can be. So I'm going to comment these out here and erase these and we'll move on to a slightly more difficult example. Okay so in the comment for this example, I'm saying that I want n for each n n nums if n is even. So this is going to create a list that is all the even numbers of our original 1 through 10 list. So what's going on in our for loop here is we're creating our empty list and then we're saying for each item in the numbers list, then if that number mod 2 which will give us the remainder after we divide it by 2 is equal to 0, that means that it's even. So then append that to our list and then at the end we'll print out our list. So if we run that then you can see that it works. We get 2 4 6 8 10. So now let's look at this same example using a list comprehension. So I'm going to say my list equal to brackets which means that we're making a list. So we want n for n n nums if n mod 2 equals equals 0. So what we're saying is that we want we want an item for each item n nums if that item mod 2 equals equals 0. So let's save that and actually let me print it out here and then run that and you can see that we get the exact same result as our for loop. Now just like the map and lambda functions there's also the filter and lambda functions which is pretty much the same thing. So instead of map we have filter and what this does is it filters it runs the list through this function and only gives us the values that are even. So if we print this out you can see that it works but the same with the map lambda function people just aren't going to know what this is if they're new to it. It's just not as readable as this list comprehension is. So let's go ahead and delete all of this stuff and move on to a slightly more difficult example. So in this example here I'm saying that I want a letter number pair for each letter and ABCD and each number in 0 1 2 3. So for example I would want a 0 a 1 a 2 a 3 b 0 b 1 b 2 b 3 and so on. So if we were to do this with a for loop then we would create our empty list then we would do a for loop for letter in ABC and then within that for loop we're gonna have another nested for loop and say for num and range for which will give us 0 1 2 3 and then we're going to do a my list dot append a tuple of the pair letter and number. So if I save that and I run it then you can see that we got all of our pairs we got a 0 a 1 a 2 a 3 b 0 b 1 b 2 b 3 and so on. So we can have these nested for loops and list comprehensions as well. So if I was to do this in a list comprehension I would say my list equals create an empty list here and now what I want is I want letter num for letter in ABCD and then right after that for loop for num in range for. So let's save this and print it out and make sure I typed everything right. So we print that out and we see that we get the exact same result as our for loop. Now let's walk through this one one more time. So what we're saying is that we want a list so we open up our brackets and we're saying that we want this tuple letter number for letter in ABCD for num in range for. So one thing I probably should have mentioned earlier is that these values that we're saying that we want they have to match these values that we assign here. So I couldn't just call this number here I couldn't say that I want letter num for letter in ABCD for number in range for because it's not going to know what this value is this num value. We have to use the same values that we want whenever we say that we want those values in the list. So you can see how we can start to do some complicated lists here that take you know a good bit of lines of code that we can write as a one-liner and it's slightly more readable as well. But it's not only lists that you can do these comprehensions with you can also do this with dictionaries and sets also. So if I delete that then let's move down to our next example here. Now this is going to be an example of a dictionary comprehension. So I have two lists here I have names and then I have their superhero name that matches up with their first name. So if you've never seen this zip function here let me just print out this zip function here so that you know what it does. So what the zip function does is so all these match up one to one so the first index of names is matches up with the first index of the heroes list here. Now if we run zip then it's going to create a list of tuples that match those up for us. So it's going to say it's going to be a tuple of Bruce, Batman and then the next tuple will be Clark, Superman and so on. So I'm going to make a dictionary comprehension using this zip function. So let me take that out and now you can see that in my comment here I'm saying that I want a dictionary of the name as the key, hero as the value for each name hero in zip names and heroes and this is going to be a list of tuples. So here in the for loop I am making an empty dictionary and then I'm looping through these tuples and saying that for the name of that tuple I want to be my key in the dictionary and for the hero of that tuple I want to be the value in the dictionary and then I'll print out the dictionary here. So if I save that and run it then you can see that we get our dictionary using our for loop. So now let's say that we want to do this as a list or as a dictionary comprehension. So I'm going to do my dict equal to now instead of the brackets this isn't a list anymore it's a dictionary. So we're going to use these braces instead. So for the dictionary comprehension I'm going to say name and then colon hero for name comma hero in zip heroes or actually that's going to be names comma heroes. So save that and now let's print this out and you can see that we get the exact same result that we did with our for loop and it's easy to add restrictions on to the ends of these comprehensions. So like in this comment here I want to do the same thing but I don't want Peter added to this list. So here at the end I can just say if name is not equal to Peter and then run that and you can see that we get our list without Peter and Spider-Man included in the list. So comprehensions really make it easy to add those loops and those conditionals on to the existing comprehension. So now let's go ahead and delete the dictionary comprehension example and we'll move on to the set comprehensions. So if you don't know what a set is, a set is pretty much like a list except it has all unique values. So you see here that we have this jumbled mess of a bunch of values between zero and ten and so whenever we make a set and loop through and add those values to the set the final set is going to have all unique values. So if I have this list of nums to do this in a for loop I'm going to say my set equal to an empty set and then for each item and nums my set dot add that item and now I'm going to print out my set. So let's save that and run it and you can see that I get all the unique values from that nums list. So now if I wanted to turn this into a set comprehension then I can comment out the for loop there and I'm just going to say my set equal to and this is going to be braces again just like the dictionary comprehension but we're not going to have a colon like the dictionary comprehension had. So now we can do this just like the other list comprehension so we want n for n in nums. So save that now this is doing exactly what this for loop did it's just adding in for each number in the nums list. So if I print this out and run it then you can see that we get the exact same result that we got with the for loop and just like with the list comprehensions you can add nested loops and conditionals on to the end of this as much as you want. So let's go ahead and delete that and so that does it for the comprehensions. Now I do have this one last example here of generator expressions. Now generators are a lot different than lists and dictionaries and sets but I wanted to include them in this tutorial because a generator expression is so similar to a list comprehension. So if you do want a more in-depth look at the advantages of generators then you can watch my video that I made specifically on generators but in this example I'm just going to focus on generator expressions. Okay so if we uncomment out this code here this is just a regular generator this isn't an expression. So if we look at the comment I'm saying that I want to yield n times n so the square of n for each n and nums just like our other examples. So here our generator function we are passing in this nums list and then we're saying for n in nums yield the square of n and then here we're saying my gen equals this gen function and we're passing in that list of numbers and then finally here at the bottom we are looping through that generator and printing out each i. So let's save that and run it and you can see that it ran the for loop and printed out all of the values in that generator. Now if I was to do this with a generator expression the syntax is almost identical to a list comprehension but instead of the brackets or the braces we're going to use parentheses. So now just like the other examples we can say I want n times n for n in nums. Save that and then we still need to keep our for loop here because we have to iterate through that generator. So if I save that and print it out then you can see that we got the exact same result as we did with these lines of code that where we had to create the generator function and do the for loop and then create the generator using the function and all of that. So you can see how this one line of code is not only a lot easier to write and maintain but it's also a lot more readable as well. So that about does it for this video on list comprehensions. You'll be surprised at how often you'll use these and how much code that you can go through your code base and replace these long nested for loops with these list comprehensions. So if you guys do have any questions just ask in the comment section below. Be sure to subscribe for future Python videos and thank you guys for watching.",
  "segments": [
    {
      "id": 0,
      "start": 0.0,
      "end": 3.84,
      "text": "Hey everybody, how's it going? In this video we're going to be taking a look at",
      "tokens": [
        50364,
        1911,
        2201,
        11,
        577,
        311,
        309,
        516,
        30,
        682,
        341,
        960,
        321,
        434,
        516,
        281,
        312,
        1940,
        257,
        574,
        412,
        50556
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11635922534125191,
      "compression_ratio": 1.7586206896551724,
      "no_speech_prob": 0.02111496590077877,
      "confidence": 0.9788850340992212
    },
    {
      "id": 1,
      "start": 3.84,
      "end": 9.28,
      "text": "list comprehensions in Python. So basically a list comprehension is an",
      "tokens": [
        50556,
        1329,
        10753,
        8302,
        294,
        15329,
        13,
        407,
        1936,
        257,
        1329,
        44991,
        307,
        364,
        50828
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11635922534125191,
      "compression_ratio": 1.7586206896551724,
      "no_speech_prob": 0.02111496590077877,
      "confidence": 0.9788850340992212
    },
    {
      "id": 2,
      "start": 9.28,
      "end": 15.52,
      "text": "easier and more readable way to create a list. Now I think the best way to learn",
      "tokens": [
        50828,
        3571,
        293,
        544,
        49857,
        636,
        281,
        1884,
        257,
        1329,
        13,
        823,
        286,
        519,
        264,
        1151,
        636,
        281,
        1466,
        51140
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11635922534125191,
      "compression_ratio": 1.7586206896551724,
      "no_speech_prob": 0.02111496590077877,
      "confidence": 0.9788850340992212
    },
    {
      "id": 3,
      "start": 15.52,
      "end": 19.34,
      "text": "list comprehensions is to first show what it would look like in a for loop",
      "tokens": [
        51140,
        1329,
        10753,
        8302,
        307,
        281,
        700,
        855,
        437,
        309,
        576,
        574,
        411,
        294,
        257,
        337,
        6367,
        51331
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11635922534125191,
      "compression_ratio": 1.7586206896551724,
      "no_speech_prob": 0.02111496590077877,
      "confidence": 0.9788850340992212
    },
    {
      "id": 4,
      "start": 19.34,
      "end": 23.76,
      "text": "because I think everybody is familiar with for loops and even if you're",
      "tokens": [
        51331,
        570,
        286,
        519,
        2201,
        307,
        4963,
        365,
        337,
        16121,
        293,
        754,
        498,
        291,
        434,
        51552
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11635922534125191,
      "compression_ratio": 1.7586206896551724,
      "no_speech_prob": 0.02111496590077877,
      "confidence": 0.9788850340992212
    },
    {
      "id": 5,
      "start": 23.76,
      "end": 28.32,
      "text": "coming from another language you'll be familiar with that as well. So let's take",
      "tokens": [
        51552,
        1348,
        490,
        1071,
        2856,
        291,
        603,
        312,
        4963,
        365,
        300,
        382,
        731,
        13,
        407,
        718,
        311,
        747,
        51780
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11635922534125191,
      "compression_ratio": 1.7586206896551724,
      "no_speech_prob": 0.02111496590077877,
      "confidence": 0.9788850340992212
    },
    {
      "id": 6,
      "start": 28.32,
      "end": 32.52,
      "text": "a look at some of these examples and I'll show you some of the advantages to",
      "tokens": [
        50364,
        257,
        574,
        412,
        512,
        295,
        613,
        5110,
        293,
        286,
        603,
        855,
        291,
        512,
        295,
        264,
        14906,
        281,
        50574
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09330928915798074,
      "compression_ratio": 1.768181818181818,
      "no_speech_prob": 0.11016180366277695,
      "confidence": 0.889838196337223
    },
    {
      "id": 7,
      "start": 32.52,
      "end": 39.16,
      "text": "list comprehensions in terms of how easy they are to write and also in how easy",
      "tokens": [
        50574,
        1329,
        10753,
        8302,
        294,
        2115,
        295,
        577,
        1858,
        436,
        366,
        281,
        2464,
        293,
        611,
        294,
        577,
        1858,
        50906
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09330928915798074,
      "compression_ratio": 1.768181818181818,
      "no_speech_prob": 0.11016180366277695,
      "confidence": 0.889838196337223
    },
    {
      "id": 8,
      "start": 39.16,
      "end": 43.92,
      "text": "they are to read. So let's go ahead and take a look at this first example here.",
      "tokens": [
        50906,
        436,
        366,
        281,
        1401,
        13,
        407,
        718,
        311,
        352,
        2286,
        293,
        747,
        257,
        574,
        412,
        341,
        700,
        1365,
        510,
        13,
        51144
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09330928915798074,
      "compression_ratio": 1.768181818181818,
      "no_speech_prob": 0.11016180366277695,
      "confidence": 0.889838196337223
    },
    {
      "id": 9,
      "start": 43.92,
      "end": 48.96,
      "text": "So in this first example I have this comment here that this is just going to",
      "tokens": [
        51144,
        407,
        294,
        341,
        700,
        1365,
        286,
        362,
        341,
        2871,
        510,
        300,
        341,
        307,
        445,
        516,
        281,
        51396
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09330928915798074,
      "compression_ratio": 1.768181818181818,
      "no_speech_prob": 0.11016180366277695,
      "confidence": 0.889838196337223
    },
    {
      "id": 10,
      "start": 48.96,
      "end": 53.16,
      "text": "be the easiest loop. All it does is pretty much copy it. So I'm saying that",
      "tokens": [
        51396,
        312,
        264,
        12889,
        6367,
        13,
        1057,
        309,
        775,
        307,
        1238,
        709,
        5055,
        309,
        13,
        407,
        286,
        478,
        1566,
        300,
        51606
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09330928915798074,
      "compression_ratio": 1.768181818181818,
      "no_speech_prob": 0.11016180366277695,
      "confidence": 0.889838196337223
    },
    {
      "id": 11,
      "start": 53.16,
      "end": 59.519999999999996,
      "text": "I want n for each n in nums. So if you were to write this in a for loop, first you",
      "tokens": [
        50364,
        286,
        528,
        297,
        337,
        1184,
        297,
        294,
        1031,
        82,
        13,
        407,
        498,
        291,
        645,
        281,
        2464,
        341,
        294,
        257,
        337,
        6367,
        11,
        700,
        291,
        50682
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14894702280168054,
      "compression_ratio": 1.84765625,
      "no_speech_prob": 0.17285221815109253,
      "confidence": 0.8271477818489075
    },
    {
      "id": 12,
      "start": 59.519999999999996,
      "end": 64.28,
      "text": "would create an empty list and then you see here I have a list of numbers 1",
      "tokens": [
        50682,
        576,
        1884,
        364,
        6707,
        1329,
        293,
        550,
        291,
        536,
        510,
        286,
        362,
        257,
        1329,
        295,
        3547,
        502,
        50920
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14894702280168054,
      "compression_ratio": 1.84765625,
      "no_speech_prob": 0.17285221815109253,
      "confidence": 0.8271477818489075
    },
    {
      "id": 13,
      "start": 64.28,
      "end": 69.8,
      "text": "through 10 and then I have this empty list myNums. So we're doing for n in",
      "tokens": [
        50920,
        807,
        1266,
        293,
        550,
        286,
        362,
        341,
        6707,
        1329,
        452,
        45,
        8099,
        13,
        407,
        321,
        434,
        884,
        337,
        297,
        294,
        51196
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14894702280168054,
      "compression_ratio": 1.84765625,
      "no_speech_prob": 0.17285221815109253,
      "confidence": 0.8271477818489075
    },
    {
      "id": 14,
      "start": 69.8,
      "end": 75.12,
      "text": "nums, so it's going to loop through all these numbers, myList.append n, so it's",
      "tokens": [
        51196,
        1031,
        82,
        11,
        370,
        309,
        311,
        516,
        281,
        6367,
        807,
        439,
        613,
        3547,
        11,
        452,
        43,
        468,
        13,
        1746,
        521,
        297,
        11,
        370,
        309,
        311,
        51462
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14894702280168054,
      "compression_ratio": 1.84765625,
      "no_speech_prob": 0.17285221815109253,
      "confidence": 0.8271477818489075
    },
    {
      "id": 15,
      "start": 75.12,
      "end": 78.67999999999999,
      "text": "just going to add each number to this list. Now we're going to print out that",
      "tokens": [
        51462,
        445,
        516,
        281,
        909,
        1184,
        1230,
        281,
        341,
        1329,
        13,
        823,
        321,
        434,
        516,
        281,
        4482,
        484,
        300,
        51640
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14894702280168054,
      "compression_ratio": 1.84765625,
      "no_speech_prob": 0.17285221815109253,
      "confidence": 0.8271477818489075
    },
    {
      "id": 16,
      "start": 78.67999999999999,
      "end": 82.92,
      "text": "list. So let's go ahead and run that and you can see that it's exactly what we've",
      "tokens": [
        51640,
        1329,
        13,
        407,
        718,
        311,
        352,
        2286,
        293,
        1190,
        300,
        293,
        291,
        393,
        536,
        300,
        309,
        311,
        2293,
        437,
        321,
        600,
        51852
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14894702280168054,
      "compression_ratio": 1.84765625,
      "no_speech_prob": 0.17285221815109253,
      "confidence": 0.8271477818489075
    },
    {
      "id": 17,
      "start": 82.92,
      "end": 87.2,
      "text": "expected. It's just a copy of the top list here. Now let's see what this looks",
      "tokens": [
        50364,
        5176,
        13,
        467,
        311,
        445,
        257,
        5055,
        295,
        264,
        1192,
        1329,
        510,
        13,
        823,
        718,
        311,
        536,
        437,
        341,
        1542,
        50578
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09848213195800781,
      "compression_ratio": 1.7660550458715596,
      "no_speech_prob": 0.008050685748457909,
      "confidence": 0.9919493142515421
    },
    {
      "id": 18,
      "start": 87.2,
      "end": 92.12,
      "text": "like in a list comprehension and also notice how similar the list",
      "tokens": [
        50578,
        411,
        294,
        257,
        1329,
        44991,
        293,
        611,
        3449,
        577,
        2531,
        264,
        1329,
        50824
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09848213195800781,
      "compression_ratio": 1.7660550458715596,
      "no_speech_prob": 0.008050685748457909,
      "confidence": 0.9919493142515421
    },
    {
      "id": 19,
      "start": 92.12,
      "end": 97.44,
      "text": "comprehension is to my comment here. So what I'm going to say is I'm going to",
      "tokens": [
        50824,
        44991,
        307,
        281,
        452,
        2871,
        510,
        13,
        407,
        437,
        286,
        478,
        516,
        281,
        584,
        307,
        286,
        478,
        516,
        281,
        51090
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09848213195800781,
      "compression_ratio": 1.7660550458715596,
      "no_speech_prob": 0.008050685748457909,
      "confidence": 0.9919493142515421
    },
    {
      "id": 20,
      "start": 97.44,
      "end": 102.44,
      "text": "make myList equal to and then brackets. So the brackets means that we're making",
      "tokens": [
        51090,
        652,
        452,
        43,
        468,
        2681,
        281,
        293,
        550,
        26179,
        13,
        407,
        264,
        26179,
        1355,
        300,
        321,
        434,
        1455,
        51340
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09848213195800781,
      "compression_ratio": 1.7660550458715596,
      "no_speech_prob": 0.008050685748457909,
      "confidence": 0.9919493142515421
    },
    {
      "id": 21,
      "start": 102.44,
      "end": 109.04,
      "text": "a list and then let's try to pretty much copy exactly what is in the comment here.",
      "tokens": [
        51340,
        257,
        1329,
        293,
        550,
        718,
        311,
        853,
        281,
        1238,
        709,
        5055,
        2293,
        437,
        307,
        294,
        264,
        2871,
        510,
        13,
        51670
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09848213195800781,
      "compression_ratio": 1.7660550458715596,
      "no_speech_prob": 0.008050685748457909,
      "confidence": 0.9919493142515421
    },
    {
      "id": 22,
      "start": 109.04,
      "end": 118.68,
      "text": "So I want n and then for each n in nums. That's a list comprehension. So",
      "tokens": [
        50364,
        407,
        286,
        528,
        297,
        293,
        550,
        337,
        1184,
        297,
        294,
        1031,
        82,
        13,
        663,
        311,
        257,
        1329,
        44991,
        13,
        407,
        50846
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13754575995988744,
      "compression_ratio": 1.7247191011235956,
      "no_speech_prob": 0.08324097096920013,
      "confidence": 0.9167590290307999
    },
    {
      "id": 23,
      "start": 118.68,
      "end": 123.16000000000001,
      "text": "this is what we're returning. This is what we want. I want n and then this is",
      "tokens": [
        50846,
        341,
        307,
        437,
        321,
        434,
        12678,
        13,
        639,
        307,
        437,
        321,
        528,
        13,
        286,
        528,
        297,
        293,
        550,
        341,
        307,
        51070
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13754575995988744,
      "compression_ratio": 1.7247191011235956,
      "no_speech_prob": 0.08324097096920013,
      "confidence": 0.9167590290307999
    },
    {
      "id": 24,
      "start": 123.16000000000001,
      "end": 129.44,
      "text": "the for loop here, for n in nums. So if I save that and run it, then I actually",
      "tokens": [
        51070,
        264,
        337,
        6367,
        510,
        11,
        337,
        297,
        294,
        1031,
        82,
        13,
        407,
        498,
        286,
        3155,
        300,
        293,
        1190,
        309,
        11,
        550,
        286,
        767,
        51384
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13754575995988744,
      "compression_ratio": 1.7247191011235956,
      "no_speech_prob": 0.08324097096920013,
      "confidence": 0.9167590290307999
    },
    {
      "id": 25,
      "start": 129.44,
      "end": 135.36,
      "text": "have to print this out so that it shows up. So we'll run that and you'll see",
      "tokens": [
        51384,
        362,
        281,
        4482,
        341,
        484,
        370,
        300,
        309,
        3110,
        493,
        13,
        407,
        321,
        603,
        1190,
        300,
        293,
        291,
        603,
        536,
        51680
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13754575995988744,
      "compression_ratio": 1.7247191011235956,
      "no_speech_prob": 0.08324097096920013,
      "confidence": 0.9167590290307999
    },
    {
      "id": 26,
      "start": 135.36,
      "end": 140.28,
      "text": "that it's the exact same result that we had from the for loop but this is much",
      "tokens": [
        50364,
        300,
        309,
        311,
        264,
        1900,
        912,
        1874,
        300,
        321,
        632,
        490,
        264,
        337,
        6367,
        457,
        341,
        307,
        709,
        50610
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10676581188313013,
      "compression_ratio": 1.6853448275862069,
      "no_speech_prob": 0.24839626252651215,
      "confidence": 0.7516037374734879
    },
    {
      "id": 27,
      "start": 140.28,
      "end": 144.88000000000002,
      "text": "easier to write and it's pretty easy to understand also. So that's about the",
      "tokens": [
        50610,
        3571,
        281,
        2464,
        293,
        309,
        311,
        1238,
        1858,
        281,
        1223,
        611,
        13,
        407,
        300,
        311,
        466,
        264,
        50840
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10676581188313013,
      "compression_ratio": 1.6853448275862069,
      "no_speech_prob": 0.24839626252651215,
      "confidence": 0.7516037374734879
    },
    {
      "id": 28,
      "start": 144.88000000000002,
      "end": 150.16000000000003,
      "text": "easiest list comprehension that you can do. So let's do a slightly more",
      "tokens": [
        50840,
        12889,
        1329,
        44991,
        300,
        291,
        393,
        360,
        13,
        407,
        718,
        311,
        360,
        257,
        4748,
        544,
        51104
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10676581188313013,
      "compression_ratio": 1.6853448275862069,
      "no_speech_prob": 0.24839626252651215,
      "confidence": 0.7516037374734879
    },
    {
      "id": 29,
      "start": 150.16000000000003,
      "end": 156.12,
      "text": "complicated example. So in this example here, if we read the comment, I'm saying",
      "tokens": [
        51104,
        6179,
        1365,
        13,
        407,
        294,
        341,
        1365,
        510,
        11,
        498,
        321,
        1401,
        264,
        2871,
        11,
        286,
        478,
        1566,
        51402
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10676581188313013,
      "compression_ratio": 1.6853448275862069,
      "no_speech_prob": 0.24839626252651215,
      "confidence": 0.7516037374734879
    },
    {
      "id": 30,
      "start": 156.12,
      "end": 162.8,
      "text": "that I want n squared, so n times n, for each n in nums. So this is pretty similar",
      "tokens": [
        51402,
        300,
        286,
        528,
        297,
        8889,
        11,
        370,
        297,
        1413,
        297,
        11,
        337,
        1184,
        297,
        294,
        1031,
        82,
        13,
        407,
        341,
        307,
        1238,
        2531,
        51736
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10676581188313013,
      "compression_ratio": 1.6853448275862069,
      "no_speech_prob": 0.24839626252651215,
      "confidence": 0.7516037374734879
    },
    {
      "id": 31,
      "start": 162.96,
      "end": 166.64000000000001,
      "text": "to our previous example but now we're actually returning the square event",
      "tokens": [
        50372,
        281,
        527,
        3894,
        1365,
        457,
        586,
        321,
        434,
        767,
        12678,
        264,
        3732,
        2280,
        50556
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11026489834825531,
      "compression_ratio": 1.8352941176470587,
      "no_speech_prob": 0.2399153858423233,
      "confidence": 0.7600846141576767
    },
    {
      "id": 32,
      "start": 166.64000000000001,
      "end": 171.0,
      "text": "instead of just copying all the values. So to do this in a for loop, we would",
      "tokens": [
        50556,
        2602,
        295,
        445,
        27976,
        439,
        264,
        4190,
        13,
        407,
        281,
        360,
        341,
        294,
        257,
        337,
        6367,
        11,
        321,
        576,
        50774
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11026489834825531,
      "compression_ratio": 1.8352941176470587,
      "no_speech_prob": 0.2399153858423233,
      "confidence": 0.7600846141576767
    },
    {
      "id": 33,
      "start": 171.0,
      "end": 176.28,
      "text": "create an empty list and then we would loop through all the numbers and then we",
      "tokens": [
        50774,
        1884,
        364,
        6707,
        1329,
        293,
        550,
        321,
        576,
        6367,
        807,
        439,
        264,
        3547,
        293,
        550,
        321,
        51038
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11026489834825531,
      "compression_ratio": 1.8352941176470587,
      "no_speech_prob": 0.2399153858423233,
      "confidence": 0.7600846141576767
    },
    {
      "id": 34,
      "start": 176.28,
      "end": 181.44,
      "text": "would append the square to the list and then when we're done we can print the",
      "tokens": [
        51038,
        576,
        34116,
        264,
        3732,
        281,
        264,
        1329,
        293,
        550,
        562,
        321,
        434,
        1096,
        321,
        393,
        4482,
        264,
        51296
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11026489834825531,
      "compression_ratio": 1.8352941176470587,
      "no_speech_prob": 0.2399153858423233,
      "confidence": 0.7600846141576767
    },
    {
      "id": 35,
      "start": 181.44,
      "end": 186.88000000000002,
      "text": "list. So if I run this code, then you can see that our result, we get all of the",
      "tokens": [
        51296,
        1329,
        13,
        407,
        498,
        286,
        1190,
        341,
        3089,
        11,
        550,
        291,
        393,
        536,
        300,
        527,
        1874,
        11,
        321,
        483,
        439,
        295,
        264,
        51568
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11026489834825531,
      "compression_ratio": 1.8352941176470587,
      "no_speech_prob": 0.2399153858423233,
      "confidence": 0.7600846141576767
    },
    {
      "id": 36,
      "start": 186.88000000000002,
      "end": 192.12,
      "text": "squares of each number in this 1 through 10 list. Okay now let's see the same",
      "tokens": [
        51568,
        19368,
        295,
        1184,
        1230,
        294,
        341,
        502,
        807,
        1266,
        1329,
        13,
        1033,
        586,
        718,
        311,
        536,
        264,
        912,
        51830
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11026489834825531,
      "compression_ratio": 1.8352941176470587,
      "no_speech_prob": 0.2399153858423233,
      "confidence": 0.7600846141576767
    },
    {
      "id": 37,
      "start": 192.12,
      "end": 200.70000000000002,
      "text": "example but in a list comprehension and also let's notice how similar it is to",
      "tokens": [
        50364,
        1365,
        457,
        294,
        257,
        1329,
        44991,
        293,
        611,
        718,
        311,
        3449,
        577,
        2531,
        309,
        307,
        281,
        50793
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08941736004569313,
      "compression_ratio": 1.6161616161616161,
      "no_speech_prob": 0.010802810080349445,
      "confidence": 0.9891971899196506
    },
    {
      "id": 38,
      "start": 200.70000000000002,
      "end": 206.0,
      "text": "the comment again. So it's almost like reading exactly what we want. So we want",
      "tokens": [
        50793,
        264,
        2871,
        797,
        13,
        407,
        309,
        311,
        1920,
        411,
        3760,
        2293,
        437,
        321,
        528,
        13,
        407,
        321,
        528,
        51058
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08941736004569313,
      "compression_ratio": 1.6161616161616161,
      "no_speech_prob": 0.010802810080349445,
      "confidence": 0.9891971899196506
    },
    {
      "id": 39,
      "start": 206.0,
      "end": 215.32,
      "text": "n times n, for n, in nums. So this is what we are appending to our list and this is",
      "tokens": [
        51058,
        297,
        1413,
        297,
        11,
        337,
        297,
        11,
        294,
        1031,
        82,
        13,
        407,
        341,
        307,
        437,
        321,
        366,
        724,
        2029,
        281,
        527,
        1329,
        293,
        341,
        307,
        51524
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08941736004569313,
      "compression_ratio": 1.6161616161616161,
      "no_speech_prob": 0.010802810080349445,
      "confidence": 0.9891971899196506
    },
    {
      "id": 40,
      "start": 215.32,
      "end": 219.84,
      "text": "the for loop here. So if I save that and then let me remember to print it out",
      "tokens": [
        51524,
        264,
        337,
        6367,
        510,
        13,
        407,
        498,
        286,
        3155,
        300,
        293,
        550,
        718,
        385,
        1604,
        281,
        4482,
        309,
        484,
        51750
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08941736004569313,
      "compression_ratio": 1.6161616161616161,
      "no_speech_prob": 0.010802810080349445,
      "confidence": 0.9891971899196506
    },
    {
      "id": 41,
      "start": 219.84,
      "end": 225.8,
      "text": "this time and then run it, then we get the exact same result as our for loop.",
      "tokens": [
        50364,
        341,
        565,
        293,
        550,
        1190,
        309,
        11,
        550,
        321,
        483,
        264,
        1900,
        912,
        1874,
        382,
        527,
        337,
        6367,
        13,
        50662
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08529683521815709,
      "compression_ratio": 1.6824034334763949,
      "no_speech_prob": 0.06498918682336807,
      "confidence": 0.9350108131766319
    },
    {
      "id": 42,
      "start": 225.8,
      "end": 230.32,
      "text": "Now there's another way to do something like this that's very similar. If you",
      "tokens": [
        50662,
        823,
        456,
        311,
        1071,
        636,
        281,
        360,
        746,
        411,
        341,
        300,
        311,
        588,
        2531,
        13,
        759,
        291,
        50888
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08529683521815709,
      "compression_ratio": 1.6824034334763949,
      "no_speech_prob": 0.06498918682336807,
      "confidence": 0.9350108131766319
    },
    {
      "id": 43,
      "start": 230.32,
      "end": 236.6,
      "text": "know how to use maps and lambdas, then maybe you've made something like this",
      "tokens": [
        50888,
        458,
        577,
        281,
        764,
        11317,
        293,
        10097,
        27476,
        11,
        550,
        1310,
        291,
        600,
        1027,
        746,
        411,
        341,
        51202
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08529683521815709,
      "compression_ratio": 1.6824034334763949,
      "no_speech_prob": 0.06498918682336807,
      "confidence": 0.9350108131766319
    },
    {
      "id": 44,
      "start": 236.6,
      "end": 243.24,
      "text": "before. So let me comment out this code. So map pretty much runs everything in",
      "tokens": [
        51202,
        949,
        13,
        407,
        718,
        385,
        2871,
        484,
        341,
        3089,
        13,
        407,
        4471,
        1238,
        709,
        6676,
        1203,
        294,
        51534
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08529683521815709,
      "compression_ratio": 1.6824034334763949,
      "no_speech_prob": 0.06498918682336807,
      "confidence": 0.9350108131766319
    },
    {
      "id": 45,
      "start": 243.24,
      "end": 249.16,
      "text": "the list through a certain function and lambda is an anonymous function. So if I",
      "tokens": [
        51534,
        264,
        1329,
        807,
        257,
        1629,
        2445,
        293,
        13607,
        307,
        364,
        24932,
        2445,
        13,
        407,
        498,
        286,
        51830
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08529683521815709,
      "compression_ratio": 1.6824034334763949,
      "no_speech_prob": 0.06498918682336807,
      "confidence": 0.9350108131766319
    },
    {
      "id": 46,
      "start": 249.16,
      "end": 255.28,
      "text": "save this and print it out, you can see that we got the same result but list",
      "tokens": [
        50364,
        3155,
        341,
        293,
        4482,
        309,
        484,
        11,
        291,
        393,
        536,
        300,
        321,
        658,
        264,
        912,
        1874,
        457,
        1329,
        50670
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08454317416784898,
      "compression_ratio": 1.7404580152671756,
      "no_speech_prob": 0.011577984318137169,
      "confidence": 0.9884220156818628
    },
    {
      "id": 47,
      "start": 255.28,
      "end": 260.15999999999997,
      "text": "comprehensions pretty much do away with these map functions because they're no",
      "tokens": [
        50670,
        10753,
        8302,
        1238,
        709,
        360,
        1314,
        365,
        613,
        4471,
        6828,
        570,
        436,
        434,
        572,
        50914
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08454317416784898,
      "compression_ratio": 1.7404580152671756,
      "no_speech_prob": 0.011577984318137169,
      "confidence": 0.9884220156818628
    },
    {
      "id": 48,
      "start": 260.15999999999997,
      "end": 263.64,
      "text": "longer needed. This works and it's a one-liner just like the comprehension",
      "tokens": [
        50914,
        2854,
        2978,
        13,
        639,
        1985,
        293,
        309,
        311,
        257,
        472,
        12,
        36849,
        445,
        411,
        264,
        44991,
        51088
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08454317416784898,
      "compression_ratio": 1.7404580152671756,
      "no_speech_prob": 0.011577984318137169,
      "confidence": 0.9884220156818628
    },
    {
      "id": 49,
      "start": 263.64,
      "end": 269.44,
      "text": "but you can't read this and understand exactly what it's doing unless you",
      "tokens": [
        51088,
        457,
        291,
        393,
        380,
        1401,
        341,
        293,
        1223,
        2293,
        437,
        309,
        311,
        884,
        5969,
        291,
        51378
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08454317416784898,
      "compression_ratio": 1.7404580152671756,
      "no_speech_prob": 0.011577984318137169,
      "confidence": 0.9884220156818628
    },
    {
      "id": 50,
      "start": 269.44,
      "end": 273.6,
      "text": "already knew about these to begin with. If you compare this readability to the",
      "tokens": [
        51378,
        1217,
        2586,
        466,
        613,
        281,
        1841,
        365,
        13,
        759,
        291,
        6794,
        341,
        1401,
        2310,
        281,
        264,
        51586
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08454317416784898,
      "compression_ratio": 1.7404580152671756,
      "no_speech_prob": 0.011577984318137169,
      "confidence": 0.9884220156818628
    },
    {
      "id": 51,
      "start": 273.6,
      "end": 277.4,
      "text": "list comprehension, somebody who's completely new to Python can see this",
      "tokens": [
        51586,
        1329,
        44991,
        11,
        2618,
        567,
        311,
        2584,
        777,
        281,
        15329,
        393,
        536,
        341,
        51776
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08454317416784898,
      "compression_ratio": 1.7404580152671756,
      "no_speech_prob": 0.011577984318137169,
      "confidence": 0.9884220156818628
    },
    {
      "id": 52,
      "start": 277.4,
      "end": 284.96,
      "text": "and say n times n for n and nums and that just is readable. It just kind of",
      "tokens": [
        50364,
        293,
        584,
        297,
        1413,
        297,
        337,
        297,
        293,
        1031,
        82,
        293,
        300,
        445,
        307,
        49857,
        13,
        467,
        445,
        733,
        295,
        50742
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14038766663649987,
      "compression_ratio": 1.8506224066390042,
      "no_speech_prob": 0.43168649077415466,
      "confidence": 0.5683135092258453
    },
    {
      "id": 53,
      "start": 284.96,
      "end": 288.59999999999997,
      "text": "flows together and you can kind of understand what's going on with these",
      "tokens": [
        50742,
        12867,
        1214,
        293,
        291,
        393,
        733,
        295,
        1223,
        437,
        311,
        516,
        322,
        365,
        613,
        50924
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14038766663649987,
      "compression_ratio": 1.8506224066390042,
      "no_speech_prob": 0.43168649077415466,
      "confidence": 0.5683135092258453
    },
    {
      "id": 54,
      "start": 288.59999999999997,
      "end": 295.52,
      "text": "maps and lambdas. It says map lambda n n times n nums. It just doesn't",
      "tokens": [
        50924,
        11317,
        293,
        10097,
        27476,
        13,
        467,
        1619,
        4471,
        13607,
        297,
        297,
        1413,
        297,
        1031,
        82,
        13,
        467,
        445,
        1177,
        380,
        51270
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14038766663649987,
      "compression_ratio": 1.8506224066390042,
      "no_speech_prob": 0.43168649077415466,
      "confidence": 0.5683135092258453
    },
    {
      "id": 55,
      "start": 295.52,
      "end": 299.2,
      "text": "read very well and you have to be experienced with those before you",
      "tokens": [
        51270,
        1401,
        588,
        731,
        293,
        291,
        362,
        281,
        312,
        6751,
        365,
        729,
        949,
        291,
        51454
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14038766663649987,
      "compression_ratio": 1.8506224066390042,
      "no_speech_prob": 0.43168649077415466,
      "confidence": 0.5683135092258453
    },
    {
      "id": 56,
      "start": 299.2,
      "end": 303.59999999999997,
      "text": "understand what's going on. So if you are using maps and lambdas from within your",
      "tokens": [
        51454,
        1223,
        437,
        311,
        516,
        322,
        13,
        407,
        498,
        291,
        366,
        1228,
        11317,
        293,
        10097,
        27476,
        490,
        1951,
        428,
        51674
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14038766663649987,
      "compression_ratio": 1.8506224066390042,
      "no_speech_prob": 0.43168649077415466,
      "confidence": 0.5683135092258453
    },
    {
      "id": 57,
      "start": 303.59999999999997,
      "end": 307.32,
      "text": "code, then you might want to check and see if those can be converted to list",
      "tokens": [
        51674,
        3089,
        11,
        550,
        291,
        1062,
        528,
        281,
        1520,
        293,
        536,
        498,
        729,
        393,
        312,
        16424,
        281,
        1329,
        51860
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14038766663649987,
      "compression_ratio": 1.8506224066390042,
      "no_speech_prob": 0.43168649077415466,
      "confidence": 0.5683135092258453
    },
    {
      "id": 58,
      "start": 307.32,
      "end": 314.52,
      "text": "comprehensions because 99% of the time they can be. So I'm going to comment",
      "tokens": [
        50364,
        10753,
        8302,
        570,
        11803,
        4,
        295,
        264,
        565,
        436,
        393,
        312,
        13,
        407,
        286,
        478,
        516,
        281,
        2871,
        50724
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1146955265718348,
      "compression_ratio": 1.5656565656565657,
      "no_speech_prob": 0.004097813740372658,
      "confidence": 0.9959021862596273
    },
    {
      "id": 59,
      "start": 314.52,
      "end": 322.0,
      "text": "these out here and erase these and we'll move on to a slightly more difficult",
      "tokens": [
        50724,
        613,
        484,
        510,
        293,
        23525,
        613,
        293,
        321,
        603,
        1286,
        322,
        281,
        257,
        4748,
        544,
        2252,
        51098
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1146955265718348,
      "compression_ratio": 1.5656565656565657,
      "no_speech_prob": 0.004097813740372658,
      "confidence": 0.9959021862596273
    },
    {
      "id": 60,
      "start": 322.0,
      "end": 328.15999999999997,
      "text": "example. Okay so in the comment for this example, I'm saying that I want n for",
      "tokens": [
        51098,
        1365,
        13,
        1033,
        370,
        294,
        264,
        2871,
        337,
        341,
        1365,
        11,
        286,
        478,
        1566,
        300,
        286,
        528,
        297,
        337,
        51406
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1146955265718348,
      "compression_ratio": 1.5656565656565657,
      "no_speech_prob": 0.004097813740372658,
      "confidence": 0.9959021862596273
    },
    {
      "id": 61,
      "start": 328.15999999999997,
      "end": 336.96,
      "text": "each n n nums if n is even. So this is going to create a list that is all the",
      "tokens": [
        51406,
        1184,
        297,
        297,
        1031,
        82,
        498,
        297,
        307,
        754,
        13,
        407,
        341,
        307,
        516,
        281,
        1884,
        257,
        1329,
        300,
        307,
        439,
        264,
        51846
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1146955265718348,
      "compression_ratio": 1.5656565656565657,
      "no_speech_prob": 0.004097813740372658,
      "confidence": 0.9959021862596273
    },
    {
      "id": 62,
      "start": 336.96,
      "end": 341.79999999999995,
      "text": "even numbers of our original 1 through 10 list. So what's going on in our for",
      "tokens": [
        50364,
        754,
        3547,
        295,
        527,
        3380,
        502,
        807,
        1266,
        1329,
        13,
        407,
        437,
        311,
        516,
        322,
        294,
        527,
        337,
        50606
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0951556677770133,
      "compression_ratio": 1.6622222222222223,
      "no_speech_prob": 0.005372007377445698,
      "confidence": 0.9946279926225543
    },
    {
      "id": 63,
      "start": 341.79999999999995,
      "end": 345.96,
      "text": "loop here is we're creating our empty list and then we're saying for each",
      "tokens": [
        50606,
        6367,
        510,
        307,
        321,
        434,
        4084,
        527,
        6707,
        1329,
        293,
        550,
        321,
        434,
        1566,
        337,
        1184,
        50814
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0951556677770133,
      "compression_ratio": 1.6622222222222223,
      "no_speech_prob": 0.005372007377445698,
      "confidence": 0.9946279926225543
    },
    {
      "id": 64,
      "start": 345.96,
      "end": 353.71999999999997,
      "text": "item in the numbers list, then if that number mod 2 which will give us the",
      "tokens": [
        50814,
        3174,
        294,
        264,
        3547,
        1329,
        11,
        550,
        498,
        300,
        1230,
        1072,
        568,
        597,
        486,
        976,
        505,
        264,
        51202
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0951556677770133,
      "compression_ratio": 1.6622222222222223,
      "no_speech_prob": 0.005372007377445698,
      "confidence": 0.9946279926225543
    },
    {
      "id": 65,
      "start": 353.71999999999997,
      "end": 358.91999999999996,
      "text": "remainder after we divide it by 2 is equal to 0, that means that it's even. So",
      "tokens": [
        51202,
        29837,
        934,
        321,
        9845,
        309,
        538,
        568,
        307,
        2681,
        281,
        1958,
        11,
        300,
        1355,
        300,
        309,
        311,
        754,
        13,
        407,
        51462
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0951556677770133,
      "compression_ratio": 1.6622222222222223,
      "no_speech_prob": 0.005372007377445698,
      "confidence": 0.9946279926225543
    },
    {
      "id": 66,
      "start": 358.91999999999996,
      "end": 363.79999999999995,
      "text": "then append that to our list and then at the end we'll print out our",
      "tokens": [
        51462,
        550,
        34116,
        300,
        281,
        527,
        1329,
        293,
        550,
        412,
        264,
        917,
        321,
        603,
        4482,
        484,
        527,
        51706
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0951556677770133,
      "compression_ratio": 1.6622222222222223,
      "no_speech_prob": 0.005372007377445698,
      "confidence": 0.9946279926225543
    },
    {
      "id": 67,
      "start": 363.8,
      "end": 369.76,
      "text": "list. So if we run that then you can see that it works. We get 2 4 6 8 10. So now",
      "tokens": [
        50364,
        1329,
        13,
        407,
        498,
        321,
        1190,
        300,
        550,
        291,
        393,
        536,
        300,
        309,
        1985,
        13,
        492,
        483,
        568,
        1017,
        1386,
        1649,
        1266,
        13,
        407,
        586,
        50662
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1491145120150801,
      "compression_ratio": 1.4424242424242424,
      "no_speech_prob": 0.4770198166370392,
      "confidence": 0.5229801833629608
    },
    {
      "id": 68,
      "start": 369.76,
      "end": 375.56,
      "text": "let's look at this same example using a list comprehension. So I'm going to say",
      "tokens": [
        50662,
        718,
        311,
        574,
        412,
        341,
        912,
        1365,
        1228,
        257,
        1329,
        44991,
        13,
        407,
        286,
        478,
        516,
        281,
        584,
        50952
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1491145120150801,
      "compression_ratio": 1.4424242424242424,
      "no_speech_prob": 0.4770198166370392,
      "confidence": 0.5229801833629608
    },
    {
      "id": 69,
      "start": 375.56,
      "end": 383.12,
      "text": "my list equal to brackets which means that we're making a list. So we want n",
      "tokens": [
        50952,
        452,
        1329,
        2681,
        281,
        26179,
        597,
        1355,
        300,
        321,
        434,
        1455,
        257,
        1329,
        13,
        407,
        321,
        528,
        297,
        51330
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1491145120150801,
      "compression_ratio": 1.4424242424242424,
      "no_speech_prob": 0.4770198166370392,
      "confidence": 0.5229801833629608
    },
    {
      "id": 70,
      "start": 383.12,
      "end": 396.48,
      "text": "for n n nums if n mod 2 equals equals 0. So what we're saying is that we want we",
      "tokens": [
        50364,
        337,
        297,
        297,
        1031,
        82,
        498,
        297,
        1072,
        568,
        6915,
        6915,
        1958,
        13,
        407,
        437,
        321,
        434,
        1566,
        307,
        300,
        321,
        528,
        321,
        51032
      ],
      "temperature": 0.0,
      "avg_logprob": -0.131175829016644,
      "compression_ratio": 1.7426470588235294,
      "no_speech_prob": 0.09353579580783844,
      "confidence": 0.9064642041921616
    },
    {
      "id": 71,
      "start": 396.48,
      "end": 403.8,
      "text": "want an item for each item n nums if that item mod 2 equals equals 0. So let's",
      "tokens": [
        51032,
        528,
        364,
        3174,
        337,
        1184,
        3174,
        297,
        1031,
        82,
        498,
        300,
        3174,
        1072,
        568,
        6915,
        6915,
        1958,
        13,
        407,
        718,
        311,
        51398
      ],
      "temperature": 0.0,
      "avg_logprob": -0.131175829016644,
      "compression_ratio": 1.7426470588235294,
      "no_speech_prob": 0.09353579580783844,
      "confidence": 0.9064642041921616
    },
    {
      "id": 72,
      "start": 403.8,
      "end": 409.88,
      "text": "save that and actually let me print it out here and then run that and you can",
      "tokens": [
        51398,
        3155,
        300,
        293,
        767,
        718,
        385,
        4482,
        309,
        484,
        510,
        293,
        550,
        1190,
        300,
        293,
        291,
        393,
        51702
      ],
      "temperature": 0.0,
      "avg_logprob": -0.131175829016644,
      "compression_ratio": 1.7426470588235294,
      "no_speech_prob": 0.09353579580783844,
      "confidence": 0.9064642041921616
    },
    {
      "id": 73,
      "start": 409.88,
      "end": 414.68,
      "text": "see that we get the exact same result as our for loop. Now just like the map",
      "tokens": [
        50364,
        536,
        300,
        321,
        483,
        264,
        1900,
        912,
        1874,
        382,
        527,
        337,
        6367,
        13,
        823,
        445,
        411,
        264,
        4471,
        50604
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10482445767051295,
      "compression_ratio": 1.7853881278538812,
      "no_speech_prob": 0.5674858093261719,
      "confidence": 0.4325141906738281
    },
    {
      "id": 74,
      "start": 414.68,
      "end": 420.8,
      "text": "and lambda functions there's also the filter and lambda functions which is",
      "tokens": [
        50604,
        293,
        13607,
        6828,
        456,
        311,
        611,
        264,
        6608,
        293,
        13607,
        6828,
        597,
        307,
        50910
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10482445767051295,
      "compression_ratio": 1.7853881278538812,
      "no_speech_prob": 0.5674858093261719,
      "confidence": 0.4325141906738281
    },
    {
      "id": 75,
      "start": 420.8,
      "end": 427.48,
      "text": "pretty much the same thing. So instead of map we have filter and what this does is",
      "tokens": [
        50910,
        1238,
        709,
        264,
        912,
        551,
        13,
        407,
        2602,
        295,
        4471,
        321,
        362,
        6608,
        293,
        437,
        341,
        775,
        307,
        51244
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10482445767051295,
      "compression_ratio": 1.7853881278538812,
      "no_speech_prob": 0.5674858093261719,
      "confidence": 0.4325141906738281
    },
    {
      "id": 76,
      "start": 427.48,
      "end": 434.08,
      "text": "it filters it runs the list through this function and only gives us the values",
      "tokens": [
        51244,
        309,
        15995,
        309,
        6676,
        264,
        1329,
        807,
        341,
        2445,
        293,
        787,
        2709,
        505,
        264,
        4190,
        51574
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10482445767051295,
      "compression_ratio": 1.7853881278538812,
      "no_speech_prob": 0.5674858093261719,
      "confidence": 0.4325141906738281
    },
    {
      "id": 77,
      "start": 434.08,
      "end": 439.56,
      "text": "that are even. So if we print this out you can see that it works but the same",
      "tokens": [
        51574,
        300,
        366,
        754,
        13,
        407,
        498,
        321,
        4482,
        341,
        484,
        291,
        393,
        536,
        300,
        309,
        1985,
        457,
        264,
        912,
        51848
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10482445767051295,
      "compression_ratio": 1.7853881278538812,
      "no_speech_prob": 0.5674858093261719,
      "confidence": 0.4325141906738281
    },
    {
      "id": 78,
      "start": 439.56,
      "end": 445.16,
      "text": "with the map lambda function people just aren't going to know what this is if",
      "tokens": [
        50364,
        365,
        264,
        4471,
        13607,
        2445,
        561,
        445,
        3212,
        380,
        516,
        281,
        458,
        437,
        341,
        307,
        498,
        50644
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0834342883183406,
      "compression_ratio": 1.5454545454545454,
      "no_speech_prob": 0.007878568954765797,
      "confidence": 0.9921214310452342
    },
    {
      "id": 79,
      "start": 445.16,
      "end": 449.28000000000003,
      "text": "they're new to it. It's just not as readable as this list comprehension is.",
      "tokens": [
        50644,
        436,
        434,
        777,
        281,
        309,
        13,
        467,
        311,
        445,
        406,
        382,
        49857,
        382,
        341,
        1329,
        44991,
        307,
        13,
        50850
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0834342883183406,
      "compression_ratio": 1.5454545454545454,
      "no_speech_prob": 0.007878568954765797,
      "confidence": 0.9921214310452342
    },
    {
      "id": 80,
      "start": 449.28000000000003,
      "end": 457.16,
      "text": "So let's go ahead and delete all of this stuff and move on to a slightly more",
      "tokens": [
        50850,
        407,
        718,
        311,
        352,
        2286,
        293,
        12097,
        439,
        295,
        341,
        1507,
        293,
        1286,
        322,
        281,
        257,
        4748,
        544,
        51244
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0834342883183406,
      "compression_ratio": 1.5454545454545454,
      "no_speech_prob": 0.007878568954765797,
      "confidence": 0.9921214310452342
    },
    {
      "id": 81,
      "start": 457.16,
      "end": 464.56,
      "text": "difficult example. So in this example here I'm saying that I want a letter",
      "tokens": [
        51244,
        2252,
        1365,
        13,
        407,
        294,
        341,
        1365,
        510,
        286,
        478,
        1566,
        300,
        286,
        528,
        257,
        5063,
        51614
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0834342883183406,
      "compression_ratio": 1.5454545454545454,
      "no_speech_prob": 0.007878568954765797,
      "confidence": 0.9921214310452342
    },
    {
      "id": 82,
      "start": 464.56,
      "end": 474.12,
      "text": "number pair for each letter and ABCD and each number in 0 1 2 3. So for example I",
      "tokens": [
        50364,
        1230,
        6119,
        337,
        1184,
        5063,
        293,
        22342,
        35,
        293,
        1184,
        1230,
        294,
        1958,
        502,
        568,
        805,
        13,
        407,
        337,
        1365,
        286,
        50842
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12597583469591642,
      "compression_ratio": 1.5286624203821657,
      "no_speech_prob": 0.3835029900074005,
      "confidence": 0.6164970099925995
    },
    {
      "id": 83,
      "start": 474.12,
      "end": 483.28,
      "text": "would want a 0 a 1 a 2 a 3 b 0 b 1 b 2 b 3 and so on. So if we were to do this",
      "tokens": [
        50842,
        576,
        528,
        257,
        1958,
        257,
        502,
        257,
        568,
        257,
        805,
        272,
        1958,
        272,
        502,
        272,
        568,
        272,
        805,
        293,
        370,
        322,
        13,
        407,
        498,
        321,
        645,
        281,
        360,
        341,
        51300
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12597583469591642,
      "compression_ratio": 1.5286624203821657,
      "no_speech_prob": 0.3835029900074005,
      "confidence": 0.6164970099925995
    },
    {
      "id": 84,
      "start": 483.28,
      "end": 489.56,
      "text": "with a for loop then we would create our empty list then we would do a for loop",
      "tokens": [
        51300,
        365,
        257,
        337,
        6367,
        550,
        321,
        576,
        1884,
        527,
        6707,
        1329,
        550,
        321,
        576,
        360,
        257,
        337,
        6367,
        51614
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12597583469591642,
      "compression_ratio": 1.5286624203821657,
      "no_speech_prob": 0.3835029900074005,
      "confidence": 0.6164970099925995
    },
    {
      "id": 85,
      "start": 489.56,
      "end": 495.8,
      "text": "for letter in ABC and then within that for loop we're gonna have another nested",
      "tokens": [
        50364,
        337,
        5063,
        294,
        22342,
        293,
        550,
        1951,
        300,
        337,
        6367,
        321,
        434,
        799,
        362,
        1071,
        15646,
        292,
        50676
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14529625935987991,
      "compression_ratio": 1.6373056994818653,
      "no_speech_prob": 0.30336424708366394,
      "confidence": 0.6966357529163361
    },
    {
      "id": 86,
      "start": 495.8,
      "end": 503.0,
      "text": "for loop and say for num and range for which will give us 0 1 2 3 and then",
      "tokens": [
        50676,
        337,
        6367,
        293,
        584,
        337,
        1031,
        293,
        3613,
        337,
        597,
        486,
        976,
        505,
        1958,
        502,
        568,
        805,
        293,
        550,
        51036
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14529625935987991,
      "compression_ratio": 1.6373056994818653,
      "no_speech_prob": 0.30336424708366394,
      "confidence": 0.6966357529163361
    },
    {
      "id": 87,
      "start": 503.0,
      "end": 510.44,
      "text": "we're going to do a my list dot append a tuple of the pair letter and number. So",
      "tokens": [
        51036,
        321,
        434,
        516,
        281,
        360,
        257,
        452,
        1329,
        5893,
        34116,
        257,
        2604,
        781,
        295,
        264,
        6119,
        5063,
        293,
        1230,
        13,
        407,
        51408
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14529625935987991,
      "compression_ratio": 1.6373056994818653,
      "no_speech_prob": 0.30336424708366394,
      "confidence": 0.6966357529163361
    },
    {
      "id": 88,
      "start": 510.44,
      "end": 515.92,
      "text": "if I save that and I run it then you can see that we got all of our pairs we got",
      "tokens": [
        51408,
        498,
        286,
        3155,
        300,
        293,
        286,
        1190,
        309,
        550,
        291,
        393,
        536,
        300,
        321,
        658,
        439,
        295,
        527,
        15494,
        321,
        658,
        51682
      ],
      "temperature": 0.0,
      "avg_logprob": -0.14529625935987991,
      "compression_ratio": 1.6373056994818653,
      "no_speech_prob": 0.30336424708366394,
      "confidence": 0.6966357529163361
    },
    {
      "id": 89,
      "start": 515.92,
      "end": 524.12,
      "text": "a 0 a 1 a 2 a 3 b 0 b 1 b 2 b 3 and so on. So we can have these nested for loops",
      "tokens": [
        50364,
        257,
        1958,
        257,
        502,
        257,
        568,
        257,
        805,
        272,
        1958,
        272,
        502,
        272,
        568,
        272,
        805,
        293,
        370,
        322,
        13,
        407,
        321,
        393,
        362,
        613,
        15646,
        292,
        337,
        16121,
        50774
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13291349675920275,
      "compression_ratio": 1.5629139072847682,
      "no_speech_prob": 0.10256130248308182,
      "confidence": 0.8974386975169182
    },
    {
      "id": 90,
      "start": 524.12,
      "end": 529.1999999999999,
      "text": "and list comprehensions as well. So if I was to do this in a list comprehension",
      "tokens": [
        50774,
        293,
        1329,
        10753,
        8302,
        382,
        731,
        13,
        407,
        498,
        286,
        390,
        281,
        360,
        341,
        294,
        257,
        1329,
        44991,
        51028
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13291349675920275,
      "compression_ratio": 1.5629139072847682,
      "no_speech_prob": 0.10256130248308182,
      "confidence": 0.8974386975169182
    },
    {
      "id": 91,
      "start": 529.1999999999999,
      "end": 534.4799999999999,
      "text": "I would say my list equals create an empty list here and now what I want is",
      "tokens": [
        51028,
        286,
        576,
        584,
        452,
        1329,
        6915,
        1884,
        364,
        6707,
        1329,
        510,
        293,
        586,
        437,
        286,
        528,
        307,
        51292
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13291349675920275,
      "compression_ratio": 1.5629139072847682,
      "no_speech_prob": 0.10256130248308182,
      "confidence": 0.8974386975169182
    },
    {
      "id": 92,
      "start": 534.48,
      "end": 550.08,
      "text": "I want letter num for letter in ABCD and then right after that for loop for num",
      "tokens": [
        50364,
        286,
        528,
        5063,
        1031,
        337,
        5063,
        294,
        22342,
        35,
        293,
        550,
        558,
        934,
        300,
        337,
        6367,
        337,
        1031,
        51144
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11415089935552879,
      "compression_ratio": 1.5616438356164384,
      "no_speech_prob": 0.07563777267932892,
      "confidence": 0.9243622273206711
    },
    {
      "id": 93,
      "start": 550.08,
      "end": 559.2,
      "text": "in range for. So let's save this and print it out and make sure I typed",
      "tokens": [
        51144,
        294,
        3613,
        337,
        13,
        407,
        718,
        311,
        3155,
        341,
        293,
        4482,
        309,
        484,
        293,
        652,
        988,
        286,
        33941,
        51600
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11415089935552879,
      "compression_ratio": 1.5616438356164384,
      "no_speech_prob": 0.07563777267932892,
      "confidence": 0.9243622273206711
    },
    {
      "id": 94,
      "start": 559.2,
      "end": 563.88,
      "text": "everything right. So we print that out and we see that we get the exact same",
      "tokens": [
        51600,
        1203,
        558,
        13,
        407,
        321,
        4482,
        300,
        484,
        293,
        321,
        536,
        300,
        321,
        483,
        264,
        1900,
        912,
        51834
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11415089935552879,
      "compression_ratio": 1.5616438356164384,
      "no_speech_prob": 0.07563777267932892,
      "confidence": 0.9243622273206711
    },
    {
      "id": 95,
      "start": 563.88,
      "end": 568.28,
      "text": "result as our for loop. Now let's walk through this one one more time. So what",
      "tokens": [
        50364,
        1874,
        382,
        527,
        337,
        6367,
        13,
        823,
        718,
        311,
        1792,
        807,
        341,
        472,
        472,
        544,
        565,
        13,
        407,
        437,
        50584
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09392098299006826,
      "compression_ratio": 1.8066037735849056,
      "no_speech_prob": 0.17127135396003723,
      "confidence": 0.8287286460399628
    },
    {
      "id": 96,
      "start": 568.28,
      "end": 573.08,
      "text": "we're saying is that we want a list so we open up our brackets and we're",
      "tokens": [
        50584,
        321,
        434,
        1566,
        307,
        300,
        321,
        528,
        257,
        1329,
        370,
        321,
        1269,
        493,
        527,
        26179,
        293,
        321,
        434,
        50824
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09392098299006826,
      "compression_ratio": 1.8066037735849056,
      "no_speech_prob": 0.17127135396003723,
      "confidence": 0.8287286460399628
    },
    {
      "id": 97,
      "start": 573.08,
      "end": 581.52,
      "text": "saying that we want this tuple letter number for letter in ABCD for num in",
      "tokens": [
        50824,
        1566,
        300,
        321,
        528,
        341,
        2604,
        781,
        5063,
        1230,
        337,
        5063,
        294,
        22342,
        35,
        337,
        1031,
        294,
        51246
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09392098299006826,
      "compression_ratio": 1.8066037735849056,
      "no_speech_prob": 0.17127135396003723,
      "confidence": 0.8287286460399628
    },
    {
      "id": 98,
      "start": 581.52,
      "end": 586.24,
      "text": "range for. So one thing I probably should have mentioned earlier is that these",
      "tokens": [
        51246,
        3613,
        337,
        13,
        407,
        472,
        551,
        286,
        1391,
        820,
        362,
        2835,
        3071,
        307,
        300,
        613,
        51482
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09392098299006826,
      "compression_ratio": 1.8066037735849056,
      "no_speech_prob": 0.17127135396003723,
      "confidence": 0.8287286460399628
    },
    {
      "id": 99,
      "start": 586.24,
      "end": 590.68,
      "text": "values that we're saying that we want they have to match these values that we",
      "tokens": [
        51482,
        4190,
        300,
        321,
        434,
        1566,
        300,
        321,
        528,
        436,
        362,
        281,
        2995,
        613,
        4190,
        300,
        321,
        51704
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09392098299006826,
      "compression_ratio": 1.8066037735849056,
      "no_speech_prob": 0.17127135396003723,
      "confidence": 0.8287286460399628
    },
    {
      "id": 100,
      "start": 590.68,
      "end": 595.4799999999999,
      "text": "assign here. So I couldn't just call this number here I couldn't say that I",
      "tokens": [
        50364,
        6269,
        510,
        13,
        407,
        286,
        2809,
        380,
        445,
        818,
        341,
        1230,
        510,
        286,
        2809,
        380,
        584,
        300,
        286,
        50604
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11922028064727783,
      "compression_ratio": 1.6813186813186813,
      "no_speech_prob": 0.46888962388038635,
      "confidence": 0.5311103761196136
    },
    {
      "id": 101,
      "start": 595.4799999999999,
      "end": 602.1999999999999,
      "text": "want letter num for letter in ABCD for number in range for because it's not",
      "tokens": [
        50604,
        528,
        5063,
        1031,
        337,
        5063,
        294,
        22342,
        35,
        337,
        1230,
        294,
        3613,
        337,
        570,
        309,
        311,
        406,
        50940
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11922028064727783,
      "compression_ratio": 1.6813186813186813,
      "no_speech_prob": 0.46888962388038635,
      "confidence": 0.5311103761196136
    },
    {
      "id": 102,
      "start": 602.1999999999999,
      "end": 608.2399999999999,
      "text": "going to know what this value is this num value. We have to use the same",
      "tokens": [
        50940,
        516,
        281,
        458,
        437,
        341,
        2158,
        307,
        341,
        1031,
        2158,
        13,
        492,
        362,
        281,
        764,
        264,
        912,
        51242
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11922028064727783,
      "compression_ratio": 1.6813186813186813,
      "no_speech_prob": 0.46888962388038635,
      "confidence": 0.5311103761196136
    },
    {
      "id": 103,
      "start": 608.2399999999999,
      "end": 615.5999999999999,
      "text": "values that we want whenever we say that we want those values in the list. So you",
      "tokens": [
        51242,
        4190,
        300,
        321,
        528,
        5699,
        321,
        584,
        300,
        321,
        528,
        729,
        4190,
        294,
        264,
        1329,
        13,
        407,
        291,
        51610
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11922028064727783,
      "compression_ratio": 1.6813186813186813,
      "no_speech_prob": 0.46888962388038635,
      "confidence": 0.5311103761196136
    },
    {
      "id": 104,
      "start": 615.6,
      "end": 621.0,
      "text": "can see how we can start to do some complicated lists here that take you",
      "tokens": [
        50364,
        393,
        536,
        577,
        321,
        393,
        722,
        281,
        360,
        512,
        6179,
        14511,
        510,
        300,
        747,
        291,
        50634
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07817354202270507,
      "compression_ratio": 1.6609442060085837,
      "no_speech_prob": 0.0927760973572731,
      "confidence": 0.9072239026427269
    },
    {
      "id": 105,
      "start": 621.0,
      "end": 626.16,
      "text": "know a good bit of lines of code that we can write as a one-liner and it's",
      "tokens": [
        50634,
        458,
        257,
        665,
        857,
        295,
        3876,
        295,
        3089,
        300,
        321,
        393,
        2464,
        382,
        257,
        472,
        12,
        36849,
        293,
        309,
        311,
        50892
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07817354202270507,
      "compression_ratio": 1.6609442060085837,
      "no_speech_prob": 0.0927760973572731,
      "confidence": 0.9072239026427269
    },
    {
      "id": 106,
      "start": 626.16,
      "end": 630.4,
      "text": "slightly more readable as well. But it's not only lists that you can do these",
      "tokens": [
        50892,
        4748,
        544,
        49857,
        382,
        731,
        13,
        583,
        309,
        311,
        406,
        787,
        14511,
        300,
        291,
        393,
        360,
        613,
        51104
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07817354202270507,
      "compression_ratio": 1.6609442060085837,
      "no_speech_prob": 0.0927760973572731,
      "confidence": 0.9072239026427269
    },
    {
      "id": 107,
      "start": 630.4,
      "end": 636.6,
      "text": "comprehensions with you can also do this with dictionaries and sets also. So if I",
      "tokens": [
        51104,
        10753,
        8302,
        365,
        291,
        393,
        611,
        360,
        341,
        365,
        22352,
        4889,
        293,
        6352,
        611,
        13,
        407,
        498,
        286,
        51414
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07817354202270507,
      "compression_ratio": 1.6609442060085837,
      "no_speech_prob": 0.0927760973572731,
      "confidence": 0.9072239026427269
    },
    {
      "id": 108,
      "start": 636.6,
      "end": 641.5600000000001,
      "text": "delete that then let's move down to our next example here. Now this is going to",
      "tokens": [
        51414,
        12097,
        300,
        550,
        718,
        311,
        1286,
        760,
        281,
        527,
        958,
        1365,
        510,
        13,
        823,
        341,
        307,
        516,
        281,
        51662
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07817354202270507,
      "compression_ratio": 1.6609442060085837,
      "no_speech_prob": 0.0927760973572731,
      "confidence": 0.9072239026427269
    },
    {
      "id": 109,
      "start": 641.56,
      "end": 645.3599999999999,
      "text": "be an example of a dictionary comprehension. So I have two lists here I",
      "tokens": [
        50364,
        312,
        364,
        1365,
        295,
        257,
        25890,
        44991,
        13,
        407,
        286,
        362,
        732,
        14511,
        510,
        286,
        50554
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1252574920654297,
      "compression_ratio": 1.8028846153846154,
      "no_speech_prob": 0.30496159195899963,
      "confidence": 0.6950384080410004
    },
    {
      "id": 110,
      "start": 645.3599999999999,
      "end": 650.92,
      "text": "have names and then I have their superhero name that matches up with",
      "tokens": [
        50554,
        362,
        5288,
        293,
        550,
        286,
        362,
        641,
        19428,
        1315,
        300,
        10676,
        493,
        365,
        50832
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1252574920654297,
      "compression_ratio": 1.8028846153846154,
      "no_speech_prob": 0.30496159195899963,
      "confidence": 0.6950384080410004
    },
    {
      "id": 111,
      "start": 650.92,
      "end": 657.1999999999999,
      "text": "their first name. So if you've never seen this zip function here let me just",
      "tokens": [
        50832,
        641,
        700,
        1315,
        13,
        407,
        498,
        291,
        600,
        1128,
        1612,
        341,
        20730,
        2445,
        510,
        718,
        385,
        445,
        51146
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1252574920654297,
      "compression_ratio": 1.8028846153846154,
      "no_speech_prob": 0.30496159195899963,
      "confidence": 0.6950384080410004
    },
    {
      "id": 112,
      "start": 657.1999999999999,
      "end": 661.2399999999999,
      "text": "print out this zip function here so that you know what it does. So what the zip",
      "tokens": [
        51146,
        4482,
        484,
        341,
        20730,
        2445,
        510,
        370,
        300,
        291,
        458,
        437,
        309,
        775,
        13,
        407,
        437,
        264,
        20730,
        51348
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1252574920654297,
      "compression_ratio": 1.8028846153846154,
      "no_speech_prob": 0.30496159195899963,
      "confidence": 0.6950384080410004
    },
    {
      "id": 113,
      "start": 661.2399999999999,
      "end": 667.8,
      "text": "function does is so all these match up one to one so the first index of names",
      "tokens": [
        51348,
        2445,
        775,
        307,
        370,
        439,
        613,
        2995,
        493,
        472,
        281,
        472,
        370,
        264,
        700,
        8186,
        295,
        5288,
        51676
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1252574920654297,
      "compression_ratio": 1.8028846153846154,
      "no_speech_prob": 0.30496159195899963,
      "confidence": 0.6950384080410004
    },
    {
      "id": 114,
      "start": 667.8,
      "end": 674.04,
      "text": "is matches up with the first index of the heroes list here. Now if we run zip",
      "tokens": [
        50364,
        307,
        10676,
        493,
        365,
        264,
        700,
        8186,
        295,
        264,
        12332,
        1329,
        510,
        13,
        823,
        498,
        321,
        1190,
        20730,
        50676
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1273387423101461,
      "compression_ratio": 1.7048458149779735,
      "no_speech_prob": 0.2428845763206482,
      "confidence": 0.7571154236793518
    },
    {
      "id": 115,
      "start": 674.04,
      "end": 678.4799999999999,
      "text": "then it's going to create a list of tuples that match those up for us. So",
      "tokens": [
        50676,
        550,
        309,
        311,
        516,
        281,
        1884,
        257,
        1329,
        295,
        2604,
        2622,
        300,
        2995,
        729,
        493,
        337,
        505,
        13,
        407,
        50898
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1273387423101461,
      "compression_ratio": 1.7048458149779735,
      "no_speech_prob": 0.2428845763206482,
      "confidence": 0.7571154236793518
    },
    {
      "id": 116,
      "start": 678.4799999999999,
      "end": 682.8399999999999,
      "text": "it's going to say it's going to be a tuple of Bruce, Batman and then the next",
      "tokens": [
        50898,
        309,
        311,
        516,
        281,
        584,
        309,
        311,
        516,
        281,
        312,
        257,
        2604,
        781,
        295,
        15429,
        11,
        15432,
        293,
        550,
        264,
        958,
        51116
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1273387423101461,
      "compression_ratio": 1.7048458149779735,
      "no_speech_prob": 0.2428845763206482,
      "confidence": 0.7571154236793518
    },
    {
      "id": 117,
      "start": 682.8399999999999,
      "end": 688.64,
      "text": "tuple will be Clark, Superman and so on. So I'm going to make a dictionary",
      "tokens": [
        51116,
        2604,
        781,
        486,
        312,
        18572,
        11,
        22455,
        293,
        370,
        322,
        13,
        407,
        286,
        478,
        516,
        281,
        652,
        257,
        25890,
        51406
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1273387423101461,
      "compression_ratio": 1.7048458149779735,
      "no_speech_prob": 0.2428845763206482,
      "confidence": 0.7571154236793518
    },
    {
      "id": 118,
      "start": 688.64,
      "end": 695.9599999999999,
      "text": "comprehension using this zip function. So let me take that out and now you can see",
      "tokens": [
        51406,
        44991,
        1228,
        341,
        20730,
        2445,
        13,
        407,
        718,
        385,
        747,
        300,
        484,
        293,
        586,
        291,
        393,
        536,
        51772
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1273387423101461,
      "compression_ratio": 1.7048458149779735,
      "no_speech_prob": 0.2428845763206482,
      "confidence": 0.7571154236793518
    },
    {
      "id": 119,
      "start": 695.96,
      "end": 703.2800000000001,
      "text": "that in my comment here I'm saying that I want a dictionary of the name as the",
      "tokens": [
        50364,
        300,
        294,
        452,
        2871,
        510,
        286,
        478,
        1566,
        300,
        286,
        528,
        257,
        25890,
        295,
        264,
        1315,
        382,
        264,
        50730
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0784543316538741,
      "compression_ratio": 1.7206703910614525,
      "no_speech_prob": 0.06671076267957687,
      "confidence": 0.9332892373204231
    },
    {
      "id": 120,
      "start": 703.2800000000001,
      "end": 712.08,
      "text": "key, hero as the value for each name hero in zip names and heroes and this is",
      "tokens": [
        50730,
        2141,
        11,
        5316,
        382,
        264,
        2158,
        337,
        1184,
        1315,
        5316,
        294,
        20730,
        5288,
        293,
        12332,
        293,
        341,
        307,
        51170
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0784543316538741,
      "compression_ratio": 1.7206703910614525,
      "no_speech_prob": 0.06671076267957687,
      "confidence": 0.9332892373204231
    },
    {
      "id": 121,
      "start": 712.08,
      "end": 717.24,
      "text": "going to be a list of tuples. So here in the for loop I am making an empty",
      "tokens": [
        51170,
        516,
        281,
        312,
        257,
        1329,
        295,
        2604,
        2622,
        13,
        407,
        510,
        294,
        264,
        337,
        6367,
        286,
        669,
        1455,
        364,
        6707,
        51428
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0784543316538741,
      "compression_ratio": 1.7206703910614525,
      "no_speech_prob": 0.06671076267957687,
      "confidence": 0.9332892373204231
    },
    {
      "id": 122,
      "start": 717.24,
      "end": 723.96,
      "text": "dictionary and then I'm looping through these tuples and saying that for the",
      "tokens": [
        51428,
        25890,
        293,
        550,
        286,
        478,
        6367,
        278,
        807,
        613,
        2604,
        2622,
        293,
        1566,
        300,
        337,
        264,
        51764
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0784543316538741,
      "compression_ratio": 1.7206703910614525,
      "no_speech_prob": 0.06671076267957687,
      "confidence": 0.9332892373204231
    },
    {
      "id": 123,
      "start": 723.96,
      "end": 728.88,
      "text": "name of that tuple I want to be my key in the dictionary and for the hero of",
      "tokens": [
        50364,
        1315,
        295,
        300,
        2604,
        781,
        286,
        528,
        281,
        312,
        452,
        2141,
        294,
        264,
        25890,
        293,
        337,
        264,
        5316,
        295,
        50610
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09644421320112925,
      "compression_ratio": 2.0128755364806867,
      "no_speech_prob": 0.16290250420570374,
      "confidence": 0.8370974957942963
    },
    {
      "id": 124,
      "start": 728.88,
      "end": 732.84,
      "text": "that tuple I want to be the value in the dictionary and then I'll print out the",
      "tokens": [
        50610,
        300,
        2604,
        781,
        286,
        528,
        281,
        312,
        264,
        2158,
        294,
        264,
        25890,
        293,
        550,
        286,
        603,
        4482,
        484,
        264,
        50808
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09644421320112925,
      "compression_ratio": 2.0128755364806867,
      "no_speech_prob": 0.16290250420570374,
      "confidence": 0.8370974957942963
    },
    {
      "id": 125,
      "start": 732.84,
      "end": 737.2800000000001,
      "text": "dictionary here. So if I save that and run it then you can see that we get our",
      "tokens": [
        50808,
        25890,
        510,
        13,
        407,
        498,
        286,
        3155,
        300,
        293,
        1190,
        309,
        550,
        291,
        393,
        536,
        300,
        321,
        483,
        527,
        51030
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09644421320112925,
      "compression_ratio": 2.0128755364806867,
      "no_speech_prob": 0.16290250420570374,
      "confidence": 0.8370974957942963
    },
    {
      "id": 126,
      "start": 737.2800000000001,
      "end": 742.08,
      "text": "dictionary using our for loop. So now let's say that we want to do this as a",
      "tokens": [
        51030,
        25890,
        1228,
        527,
        337,
        6367,
        13,
        407,
        586,
        718,
        311,
        584,
        300,
        321,
        528,
        281,
        360,
        341,
        382,
        257,
        51270
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09644421320112925,
      "compression_ratio": 2.0128755364806867,
      "no_speech_prob": 0.16290250420570374,
      "confidence": 0.8370974957942963
    },
    {
      "id": 127,
      "start": 742.08,
      "end": 750.4200000000001,
      "text": "list or as a dictionary comprehension. So I'm going to do my dict equal to now",
      "tokens": [
        51270,
        1329,
        420,
        382,
        257,
        25890,
        44991,
        13,
        407,
        286,
        478,
        516,
        281,
        360,
        452,
        12569,
        2681,
        281,
        586,
        51687
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09644421320112925,
      "compression_ratio": 2.0128755364806867,
      "no_speech_prob": 0.16290250420570374,
      "confidence": 0.8370974957942963
    },
    {
      "id": 128,
      "start": 750.4200000000001,
      "end": 753.8000000000001,
      "text": "instead of the brackets this isn't a list anymore it's a dictionary. So we're",
      "tokens": [
        51687,
        2602,
        295,
        264,
        26179,
        341,
        1943,
        380,
        257,
        1329,
        3602,
        309,
        311,
        257,
        25890,
        13,
        407,
        321,
        434,
        51856
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09644421320112925,
      "compression_ratio": 2.0128755364806867,
      "no_speech_prob": 0.16290250420570374,
      "confidence": 0.8370974957942963
    },
    {
      "id": 129,
      "start": 753.8,
      "end": 757.64,
      "text": "going to use these braces instead. So for the dictionary comprehension I'm",
      "tokens": [
        50364,
        516,
        281,
        764,
        613,
        41537,
        2602,
        13,
        407,
        337,
        264,
        25890,
        44991,
        286,
        478,
        50556
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11383546250207084,
      "compression_ratio": 1.564625850340136,
      "no_speech_prob": 0.0016082332003861666,
      "confidence": 0.9983917667996138
    },
    {
      "id": 130,
      "start": 757.64,
      "end": 770.24,
      "text": "going to say name and then colon hero for name comma hero in zip heroes or",
      "tokens": [
        50556,
        516,
        281,
        584,
        1315,
        293,
        550,
        8255,
        5316,
        337,
        1315,
        22117,
        5316,
        294,
        20730,
        12332,
        420,
        51186
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11383546250207084,
      "compression_ratio": 1.564625850340136,
      "no_speech_prob": 0.0016082332003861666,
      "confidence": 0.9983917667996138
    },
    {
      "id": 131,
      "start": 770.24,
      "end": 777.3599999999999,
      "text": "actually that's going to be names comma heroes. So save that and now let's print",
      "tokens": [
        51186,
        767,
        300,
        311,
        516,
        281,
        312,
        5288,
        22117,
        12332,
        13,
        407,
        3155,
        300,
        293,
        586,
        718,
        311,
        4482,
        51542
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11383546250207084,
      "compression_ratio": 1.564625850340136,
      "no_speech_prob": 0.0016082332003861666,
      "confidence": 0.9983917667996138
    },
    {
      "id": 132,
      "start": 777.36,
      "end": 785.0,
      "text": "this out and you can see that we get the exact same result that we did with",
      "tokens": [
        50364,
        341,
        484,
        293,
        291,
        393,
        536,
        300,
        321,
        483,
        264,
        1900,
        912,
        1874,
        300,
        321,
        630,
        365,
        50746
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08960519602269303,
      "compression_ratio": 1.6,
      "no_speech_prob": 0.11252762377262115,
      "confidence": 0.8874723762273788
    },
    {
      "id": 133,
      "start": 785.0,
      "end": 789.76,
      "text": "our for loop and it's easy to add restrictions on to the ends of these",
      "tokens": [
        50746,
        527,
        337,
        6367,
        293,
        309,
        311,
        1858,
        281,
        909,
        14191,
        322,
        281,
        264,
        5314,
        295,
        613,
        50984
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08960519602269303,
      "compression_ratio": 1.6,
      "no_speech_prob": 0.11252762377262115,
      "confidence": 0.8874723762273788
    },
    {
      "id": 134,
      "start": 789.76,
      "end": 795.52,
      "text": "comprehensions. So like in this comment here I want to do the same thing but I",
      "tokens": [
        50984,
        10753,
        8302,
        13,
        407,
        411,
        294,
        341,
        2871,
        510,
        286,
        528,
        281,
        360,
        264,
        912,
        551,
        457,
        286,
        51272
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08960519602269303,
      "compression_ratio": 1.6,
      "no_speech_prob": 0.11252762377262115,
      "confidence": 0.8874723762273788
    },
    {
      "id": 135,
      "start": 795.52,
      "end": 801.96,
      "text": "don't want Peter added to this list. So here at the end I can just say if name",
      "tokens": [
        51272,
        500,
        380,
        528,
        6508,
        3869,
        281,
        341,
        1329,
        13,
        407,
        510,
        412,
        264,
        917,
        286,
        393,
        445,
        584,
        498,
        1315,
        51594
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08960519602269303,
      "compression_ratio": 1.6,
      "no_speech_prob": 0.11252762377262115,
      "confidence": 0.8874723762273788
    },
    {
      "id": 136,
      "start": 802.36,
      "end": 809.2800000000001,
      "text": "is not equal to Peter and then run that and you can see that we get our list",
      "tokens": [
        50384,
        307,
        406,
        2681,
        281,
        6508,
        293,
        550,
        1190,
        300,
        293,
        291,
        393,
        536,
        300,
        321,
        483,
        527,
        1329,
        50730
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15254202023358412,
      "compression_ratio": 1.6833333333333333,
      "no_speech_prob": 0.15321066975593567,
      "confidence": 0.8467893302440643
    },
    {
      "id": 137,
      "start": 809.2800000000001,
      "end": 815.36,
      "text": "without Peter and Spider-Man included in the list. So comprehensions really make",
      "tokens": [
        50730,
        1553,
        6508,
        293,
        17733,
        12,
        6652,
        5556,
        294,
        264,
        1329,
        13,
        407,
        10753,
        8302,
        534,
        652,
        51034
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15254202023358412,
      "compression_ratio": 1.6833333333333333,
      "no_speech_prob": 0.15321066975593567,
      "confidence": 0.8467893302440643
    },
    {
      "id": 138,
      "start": 815.36,
      "end": 821.36,
      "text": "it easy to add those loops and those conditionals on to the existing",
      "tokens": [
        51034,
        309,
        1858,
        281,
        909,
        729,
        16121,
        293,
        729,
        4188,
        1124,
        322,
        281,
        264,
        6741,
        51334
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15254202023358412,
      "compression_ratio": 1.6833333333333333,
      "no_speech_prob": 0.15321066975593567,
      "confidence": 0.8467893302440643
    },
    {
      "id": 139,
      "start": 821.36,
      "end": 827.12,
      "text": "comprehension. So now let's go ahead and delete the dictionary comprehension",
      "tokens": [
        51334,
        44991,
        13,
        407,
        586,
        718,
        311,
        352,
        2286,
        293,
        12097,
        264,
        25890,
        44991,
        51622
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15254202023358412,
      "compression_ratio": 1.6833333333333333,
      "no_speech_prob": 0.15321066975593567,
      "confidence": 0.8467893302440643
    },
    {
      "id": 140,
      "start": 827.12,
      "end": 834.04,
      "text": "example and we'll move on to the set comprehensions. So if you don't know",
      "tokens": [
        50364,
        1365,
        293,
        321,
        603,
        1286,
        322,
        281,
        264,
        992,
        10753,
        8302,
        13,
        407,
        498,
        291,
        500,
        380,
        458,
        50710
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11422319914165296,
      "compression_ratio": 1.6451612903225807,
      "no_speech_prob": 0.18910935521125793,
      "confidence": 0.8108906447887421
    },
    {
      "id": 141,
      "start": 834.04,
      "end": 839.96,
      "text": "what a set is, a set is pretty much like a list except it has all unique values.",
      "tokens": [
        50710,
        437,
        257,
        992,
        307,
        11,
        257,
        992,
        307,
        1238,
        709,
        411,
        257,
        1329,
        3993,
        309,
        575,
        439,
        3845,
        4190,
        13,
        51006
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11422319914165296,
      "compression_ratio": 1.6451612903225807,
      "no_speech_prob": 0.18910935521125793,
      "confidence": 0.8108906447887421
    },
    {
      "id": 142,
      "start": 839.96,
      "end": 844.12,
      "text": "So you see here that we have this jumbled mess of a bunch of values",
      "tokens": [
        51006,
        407,
        291,
        536,
        510,
        300,
        321,
        362,
        341,
        361,
        19928,
        2082,
        295,
        257,
        3840,
        295,
        4190,
        51214
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11422319914165296,
      "compression_ratio": 1.6451612903225807,
      "no_speech_prob": 0.18910935521125793,
      "confidence": 0.8108906447887421
    },
    {
      "id": 143,
      "start": 844.12,
      "end": 851.64,
      "text": "between zero and ten and so whenever we make a set and loop",
      "tokens": [
        51214,
        1296,
        4018,
        293,
        2064,
        293,
        370,
        5699,
        321,
        652,
        257,
        992,
        293,
        6367,
        51590
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11422319914165296,
      "compression_ratio": 1.6451612903225807,
      "no_speech_prob": 0.18910935521125793,
      "confidence": 0.8108906447887421
    },
    {
      "id": 144,
      "start": 851.64,
      "end": 856.6,
      "text": "through and add those values to the set the final set is going to have all",
      "tokens": [
        51590,
        807,
        293,
        909,
        729,
        4190,
        281,
        264,
        992,
        264,
        2572,
        992,
        307,
        516,
        281,
        362,
        439,
        51838
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11422319914165296,
      "compression_ratio": 1.6451612903225807,
      "no_speech_prob": 0.18910935521125793,
      "confidence": 0.8108906447887421
    },
    {
      "id": 145,
      "start": 856.6,
      "end": 861.84,
      "text": "unique values. So if I have this list of nums to do this in a for loop I'm going",
      "tokens": [
        50364,
        3845,
        4190,
        13,
        407,
        498,
        286,
        362,
        341,
        1329,
        295,
        1031,
        82,
        281,
        360,
        341,
        294,
        257,
        337,
        6367,
        286,
        478,
        516,
        50626
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10031713021768106,
      "compression_ratio": 1.841860465116279,
      "no_speech_prob": 0.04975685849785805,
      "confidence": 0.950243141502142
    },
    {
      "id": 146,
      "start": 861.84,
      "end": 868.6,
      "text": "to say my set equal to an empty set and then for each item and nums my set dot",
      "tokens": [
        50626,
        281,
        584,
        452,
        992,
        2681,
        281,
        364,
        6707,
        992,
        293,
        550,
        337,
        1184,
        3174,
        293,
        1031,
        82,
        452,
        992,
        5893,
        50964
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10031713021768106,
      "compression_ratio": 1.841860465116279,
      "no_speech_prob": 0.04975685849785805,
      "confidence": 0.950243141502142
    },
    {
      "id": 147,
      "start": 868.6,
      "end": 873.84,
      "text": "add that item and now I'm going to print out my set. So let's save that and run it",
      "tokens": [
        50964,
        909,
        300,
        3174,
        293,
        586,
        286,
        478,
        516,
        281,
        4482,
        484,
        452,
        992,
        13,
        407,
        718,
        311,
        3155,
        300,
        293,
        1190,
        309,
        51226
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10031713021768106,
      "compression_ratio": 1.841860465116279,
      "no_speech_prob": 0.04975685849785805,
      "confidence": 0.950243141502142
    },
    {
      "id": 148,
      "start": 873.84,
      "end": 879.96,
      "text": "and you can see that I get all the unique values from that nums list. So now",
      "tokens": [
        51226,
        293,
        291,
        393,
        536,
        300,
        286,
        483,
        439,
        264,
        3845,
        4190,
        490,
        300,
        1031,
        82,
        1329,
        13,
        407,
        586,
        51532
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10031713021768106,
      "compression_ratio": 1.841860465116279,
      "no_speech_prob": 0.04975685849785805,
      "confidence": 0.950243141502142
    },
    {
      "id": 149,
      "start": 879.96,
      "end": 885.1600000000001,
      "text": "if I wanted to turn this into a set comprehension then I can comment out the",
      "tokens": [
        51532,
        498,
        286,
        1415,
        281,
        1261,
        341,
        666,
        257,
        992,
        44991,
        550,
        286,
        393,
        2871,
        484,
        264,
        51792
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10031713021768106,
      "compression_ratio": 1.841860465116279,
      "no_speech_prob": 0.04975685849785805,
      "confidence": 0.950243141502142
    },
    {
      "id": 150,
      "start": 885.16,
      "end": 890.6,
      "text": "for loop there and I'm just going to say my set equal to and this is going to be",
      "tokens": [
        50364,
        337,
        6367,
        456,
        293,
        286,
        478,
        445,
        516,
        281,
        584,
        452,
        992,
        2681,
        281,
        293,
        341,
        307,
        516,
        281,
        312,
        50636
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13470035791397095,
      "compression_ratio": 1.8695652173913044,
      "no_speech_prob": 0.14065611362457275,
      "confidence": 0.8593438863754272
    },
    {
      "id": 151,
      "start": 890.6,
      "end": 894.3199999999999,
      "text": "braces again just like the dictionary comprehension but we're not going to",
      "tokens": [
        50636,
        41537,
        797,
        445,
        411,
        264,
        25890,
        44991,
        457,
        321,
        434,
        406,
        516,
        281,
        50822
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13470035791397095,
      "compression_ratio": 1.8695652173913044,
      "no_speech_prob": 0.14065611362457275,
      "confidence": 0.8593438863754272
    },
    {
      "id": 152,
      "start": 894.3199999999999,
      "end": 898.8,
      "text": "have a colon like the dictionary comprehension had. So now we can do this",
      "tokens": [
        50822,
        362,
        257,
        8255,
        411,
        264,
        25890,
        44991,
        632,
        13,
        407,
        586,
        321,
        393,
        360,
        341,
        51046
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13470035791397095,
      "compression_ratio": 1.8695652173913044,
      "no_speech_prob": 0.14065611362457275,
      "confidence": 0.8593438863754272
    },
    {
      "id": 153,
      "start": 898.8,
      "end": 906.52,
      "text": "just like the other list comprehension so we want n for n in nums. So save that",
      "tokens": [
        51046,
        445,
        411,
        264,
        661,
        1329,
        44991,
        370,
        321,
        528,
        297,
        337,
        297,
        294,
        1031,
        82,
        13,
        407,
        3155,
        300,
        51432
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13470035791397095,
      "compression_ratio": 1.8695652173913044,
      "no_speech_prob": 0.14065611362457275,
      "confidence": 0.8593438863754272
    },
    {
      "id": 154,
      "start": 906.52,
      "end": 911.68,
      "text": "now this is doing exactly what this for loop did it's just adding in for each",
      "tokens": [
        51432,
        586,
        341,
        307,
        884,
        2293,
        437,
        341,
        337,
        6367,
        630,
        309,
        311,
        445,
        5127,
        294,
        337,
        1184,
        51690
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13470035791397095,
      "compression_ratio": 1.8695652173913044,
      "no_speech_prob": 0.14065611362457275,
      "confidence": 0.8593438863754272
    },
    {
      "id": 155,
      "start": 911.68,
      "end": 920.0799999999999,
      "text": "number in the nums list. So if I print this out and run it then you can see",
      "tokens": [
        50364,
        1230,
        294,
        264,
        1031,
        82,
        1329,
        13,
        407,
        498,
        286,
        4482,
        341,
        484,
        293,
        1190,
        309,
        550,
        291,
        393,
        536,
        50784
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12288171342275675,
      "compression_ratio": 1.7522522522522523,
      "no_speech_prob": 0.10204622149467468,
      "confidence": 0.8979537785053253
    },
    {
      "id": 156,
      "start": 920.0799999999999,
      "end": 924.16,
      "text": "that we get the exact same result that we got with the for loop and just like",
      "tokens": [
        50784,
        300,
        321,
        483,
        264,
        1900,
        912,
        1874,
        300,
        321,
        658,
        365,
        264,
        337,
        6367,
        293,
        445,
        411,
        50988
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12288171342275675,
      "compression_ratio": 1.7522522522522523,
      "no_speech_prob": 0.10204622149467468,
      "confidence": 0.8979537785053253
    },
    {
      "id": 157,
      "start": 924.16,
      "end": 929.54,
      "text": "with the list comprehensions you can add nested loops and conditionals on to the",
      "tokens": [
        50988,
        365,
        264,
        1329,
        10753,
        8302,
        291,
        393,
        909,
        15646,
        292,
        16121,
        293,
        4188,
        1124,
        322,
        281,
        264,
        51257
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12288171342275675,
      "compression_ratio": 1.7522522522522523,
      "no_speech_prob": 0.10204622149467468,
      "confidence": 0.8979537785053253
    },
    {
      "id": 158,
      "start": 929.54,
      "end": 935.52,
      "text": "end of this as much as you want. So let's go ahead and delete that and so that",
      "tokens": [
        51257,
        917,
        295,
        341,
        382,
        709,
        382,
        291,
        528,
        13,
        407,
        718,
        311,
        352,
        2286,
        293,
        12097,
        300,
        293,
        370,
        300,
        51556
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12288171342275675,
      "compression_ratio": 1.7522522522522523,
      "no_speech_prob": 0.10204622149467468,
      "confidence": 0.8979537785053253
    },
    {
      "id": 159,
      "start": 935.52,
      "end": 940.28,
      "text": "does it for the comprehensions. Now I do have this one last example here of",
      "tokens": [
        51556,
        775,
        309,
        337,
        264,
        10753,
        8302,
        13,
        823,
        286,
        360,
        362,
        341,
        472,
        1036,
        1365,
        510,
        295,
        51794
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12288171342275675,
      "compression_ratio": 1.7522522522522523,
      "no_speech_prob": 0.10204622149467468,
      "confidence": 0.8979537785053253
    },
    {
      "id": 160,
      "start": 940.28,
      "end": 944.76,
      "text": "generator expressions. Now generators are a lot different than lists and",
      "tokens": [
        50364,
        19265,
        15277,
        13,
        823,
        38662,
        366,
        257,
        688,
        819,
        813,
        14511,
        293,
        50588
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12706563639086346,
      "compression_ratio": 1.670995670995671,
      "no_speech_prob": 0.217351034283638,
      "confidence": 0.782648965716362
    },
    {
      "id": 161,
      "start": 944.76,
      "end": 951.4399999999999,
      "text": "dictionaries and sets but I wanted to include them in this tutorial because a",
      "tokens": [
        50588,
        22352,
        4889,
        293,
        6352,
        457,
        286,
        1415,
        281,
        4090,
        552,
        294,
        341,
        7073,
        570,
        257,
        50922
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12706563639086346,
      "compression_ratio": 1.670995670995671,
      "no_speech_prob": 0.217351034283638,
      "confidence": 0.782648965716362
    },
    {
      "id": 162,
      "start": 951.4399999999999,
      "end": 957.28,
      "text": "generator expression is so similar to a list comprehension. So if you do want a",
      "tokens": [
        50922,
        19265,
        6114,
        307,
        370,
        2531,
        281,
        257,
        1329,
        44991,
        13,
        407,
        498,
        291,
        360,
        528,
        257,
        51214
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12706563639086346,
      "compression_ratio": 1.670995670995671,
      "no_speech_prob": 0.217351034283638,
      "confidence": 0.782648965716362
    },
    {
      "id": 163,
      "start": 957.28,
      "end": 962.12,
      "text": "more in-depth look at the advantages of generators then you can watch my video",
      "tokens": [
        51214,
        544,
        294,
        12,
        25478,
        574,
        412,
        264,
        14906,
        295,
        38662,
        550,
        291,
        393,
        1159,
        452,
        960,
        51456
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12706563639086346,
      "compression_ratio": 1.670995670995671,
      "no_speech_prob": 0.217351034283638,
      "confidence": 0.782648965716362
    },
    {
      "id": 164,
      "start": 962.12,
      "end": 966.64,
      "text": "that I made specifically on generators but in this example I'm just going to",
      "tokens": [
        51456,
        300,
        286,
        1027,
        4682,
        322,
        38662,
        457,
        294,
        341,
        1365,
        286,
        478,
        445,
        516,
        281,
        51682
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12706563639086346,
      "compression_ratio": 1.670995670995671,
      "no_speech_prob": 0.217351034283638,
      "confidence": 0.782648965716362
    },
    {
      "id": 165,
      "start": 966.64,
      "end": 971.48,
      "text": "focus on generator expressions. Okay so if we uncomment out this code here this",
      "tokens": [
        50364,
        1879,
        322,
        19265,
        15277,
        13,
        1033,
        370,
        498,
        321,
        8585,
        518,
        484,
        341,
        3089,
        510,
        341,
        50606
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11603991820080446,
      "compression_ratio": 1.7782805429864252,
      "no_speech_prob": 0.45952504873275757,
      "confidence": 0.5404749512672424
    },
    {
      "id": 166,
      "start": 971.48,
      "end": 977.12,
      "text": "is just a regular generator this isn't an expression. So if we look at the",
      "tokens": [
        50606,
        307,
        445,
        257,
        3890,
        19265,
        341,
        1943,
        380,
        364,
        6114,
        13,
        407,
        498,
        321,
        574,
        412,
        264,
        50888
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11603991820080446,
      "compression_ratio": 1.7782805429864252,
      "no_speech_prob": 0.45952504873275757,
      "confidence": 0.5404749512672424
    },
    {
      "id": 167,
      "start": 977.12,
      "end": 983.16,
      "text": "comment I'm saying that I want to yield n times n so the square of n for each n",
      "tokens": [
        50888,
        2871,
        286,
        478,
        1566,
        300,
        286,
        528,
        281,
        11257,
        297,
        1413,
        297,
        370,
        264,
        3732,
        295,
        297,
        337,
        1184,
        297,
        51190
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11603991820080446,
      "compression_ratio": 1.7782805429864252,
      "no_speech_prob": 0.45952504873275757,
      "confidence": 0.5404749512672424
    },
    {
      "id": 168,
      "start": 983.16,
      "end": 988.88,
      "text": "and nums just like our other examples. So here our generator function we are",
      "tokens": [
        51190,
        293,
        1031,
        82,
        445,
        411,
        527,
        661,
        5110,
        13,
        407,
        510,
        527,
        19265,
        2445,
        321,
        366,
        51476
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11603991820080446,
      "compression_ratio": 1.7782805429864252,
      "no_speech_prob": 0.45952504873275757,
      "confidence": 0.5404749512672424
    },
    {
      "id": 169,
      "start": 988.88,
      "end": 996.28,
      "text": "passing in this nums list and then we're saying for n in nums yield the square of",
      "tokens": [
        51476,
        8437,
        294,
        341,
        1031,
        82,
        1329,
        293,
        550,
        321,
        434,
        1566,
        337,
        297,
        294,
        1031,
        82,
        11257,
        264,
        3732,
        295,
        51846
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11603991820080446,
      "compression_ratio": 1.7782805429864252,
      "no_speech_prob": 0.45952504873275757,
      "confidence": 0.5404749512672424
    },
    {
      "id": 170,
      "start": 996.28,
      "end": 1001.56,
      "text": "n and then here we're saying my gen equals this gen function and we're",
      "tokens": [
        50364,
        297,
        293,
        550,
        510,
        321,
        434,
        1566,
        452,
        1049,
        6915,
        341,
        1049,
        2445,
        293,
        321,
        434,
        50628
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09679821840266592,
      "compression_ratio": 1.7612612612612613,
      "no_speech_prob": 0.003320964751765132,
      "confidence": 0.9966790352482349
    },
    {
      "id": 171,
      "start": 1001.56,
      "end": 1007.12,
      "text": "passing in that list of numbers and then finally here at the bottom we are looping",
      "tokens": [
        50628,
        8437,
        294,
        300,
        1329,
        295,
        3547,
        293,
        550,
        2721,
        510,
        412,
        264,
        2767,
        321,
        366,
        6367,
        278,
        50906
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09679821840266592,
      "compression_ratio": 1.7612612612612613,
      "no_speech_prob": 0.003320964751765132,
      "confidence": 0.9966790352482349
    },
    {
      "id": 172,
      "start": 1007.12,
      "end": 1013.56,
      "text": "through that generator and printing out each i. So let's save that and run it and",
      "tokens": [
        50906,
        807,
        300,
        19265,
        293,
        14699,
        484,
        1184,
        741,
        13,
        407,
        718,
        311,
        3155,
        300,
        293,
        1190,
        309,
        293,
        51228
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09679821840266592,
      "compression_ratio": 1.7612612612612613,
      "no_speech_prob": 0.003320964751765132,
      "confidence": 0.9966790352482349
    },
    {
      "id": 173,
      "start": 1013.56,
      "end": 1020.1,
      "text": "you can see that it ran the for loop and printed out all of the values in that",
      "tokens": [
        51228,
        291,
        393,
        536,
        300,
        309,
        5872,
        264,
        337,
        6367,
        293,
        13567,
        484,
        439,
        295,
        264,
        4190,
        294,
        300,
        51555
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09679821840266592,
      "compression_ratio": 1.7612612612612613,
      "no_speech_prob": 0.003320964751765132,
      "confidence": 0.9966790352482349
    },
    {
      "id": 174,
      "start": 1020.1,
      "end": 1025.24,
      "text": "generator. Now if I was to do this with a generator expression the syntax is",
      "tokens": [
        51555,
        19265,
        13,
        823,
        498,
        286,
        390,
        281,
        360,
        341,
        365,
        257,
        19265,
        6114,
        264,
        28431,
        307,
        51812
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09679821840266592,
      "compression_ratio": 1.7612612612612613,
      "no_speech_prob": 0.003320964751765132,
      "confidence": 0.9966790352482349
    },
    {
      "id": 175,
      "start": 1025.24,
      "end": 1032.2,
      "text": "almost identical to a list comprehension but instead of the brackets or the",
      "tokens": [
        50364,
        1920,
        14800,
        281,
        257,
        1329,
        44991,
        457,
        2602,
        295,
        264,
        26179,
        420,
        264,
        50712
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12360583679585517,
      "compression_ratio": 1.5970149253731343,
      "no_speech_prob": 0.011571266688406467,
      "confidence": 0.9884287333115935
    },
    {
      "id": 176,
      "start": 1032.2,
      "end": 1037.64,
      "text": "braces we're going to use parentheses. So now just like the other examples we can",
      "tokens": [
        50712,
        41537,
        321,
        434,
        516,
        281,
        764,
        34153,
        13,
        407,
        586,
        445,
        411,
        264,
        661,
        5110,
        321,
        393,
        50984
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12360583679585517,
      "compression_ratio": 1.5970149253731343,
      "no_speech_prob": 0.011571266688406467,
      "confidence": 0.9884287333115935
    },
    {
      "id": 177,
      "start": 1037.64,
      "end": 1047.88,
      "text": "say I want n times n for n in nums. Save that and then we still need to keep our",
      "tokens": [
        50984,
        584,
        286,
        528,
        297,
        1413,
        297,
        337,
        297,
        294,
        1031,
        82,
        13,
        15541,
        300,
        293,
        550,
        321,
        920,
        643,
        281,
        1066,
        527,
        51496
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12360583679585517,
      "compression_ratio": 1.5970149253731343,
      "no_speech_prob": 0.011571266688406467,
      "confidence": 0.9884287333115935
    },
    {
      "id": 178,
      "start": 1047.88,
      "end": 1052.56,
      "text": "for loop here because we have to iterate through that generator. So if I save that",
      "tokens": [
        51496,
        337,
        6367,
        510,
        570,
        321,
        362,
        281,
        44497,
        807,
        300,
        19265,
        13,
        407,
        498,
        286,
        3155,
        300,
        51730
      ],
      "temperature": 0.0,
      "avg_logprob": -0.12360583679585517,
      "compression_ratio": 1.5970149253731343,
      "no_speech_prob": 0.011571266688406467,
      "confidence": 0.9884287333115935
    },
    {
      "id": 179,
      "start": 1052.6,
      "end": 1058.36,
      "text": "and print it out then you can see that we got the exact same result as we did",
      "tokens": [
        50366,
        293,
        4482,
        309,
        484,
        550,
        291,
        393,
        536,
        300,
        321,
        658,
        264,
        1900,
        912,
        1874,
        382,
        321,
        630,
        50654
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10129544199729452,
      "compression_ratio": 1.8148148148148149,
      "no_speech_prob": 0.5317574143409729,
      "confidence": 0.4682425856590271
    },
    {
      "id": 180,
      "start": 1058.36,
      "end": 1064.28,
      "text": "with these lines of code that where we had to create the generator function and",
      "tokens": [
        50654,
        365,
        613,
        3876,
        295,
        3089,
        300,
        689,
        321,
        632,
        281,
        1884,
        264,
        19265,
        2445,
        293,
        50950
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10129544199729452,
      "compression_ratio": 1.8148148148148149,
      "no_speech_prob": 0.5317574143409729,
      "confidence": 0.4682425856590271
    },
    {
      "id": 181,
      "start": 1064.28,
      "end": 1069.56,
      "text": "do the for loop and then create the generator using the function and all of",
      "tokens": [
        50950,
        360,
        264,
        337,
        6367,
        293,
        550,
        1884,
        264,
        19265,
        1228,
        264,
        2445,
        293,
        439,
        295,
        51214
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10129544199729452,
      "compression_ratio": 1.8148148148148149,
      "no_speech_prob": 0.5317574143409729,
      "confidence": 0.4682425856590271
    },
    {
      "id": 182,
      "start": 1069.56,
      "end": 1075.0,
      "text": "that. So you can see how this one line of code is not only a lot easier to write",
      "tokens": [
        51214,
        300,
        13,
        407,
        291,
        393,
        536,
        577,
        341,
        472,
        1622,
        295,
        3089,
        307,
        406,
        787,
        257,
        688,
        3571,
        281,
        2464,
        51486
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10129544199729452,
      "compression_ratio": 1.8148148148148149,
      "no_speech_prob": 0.5317574143409729,
      "confidence": 0.4682425856590271
    },
    {
      "id": 183,
      "start": 1075.0,
      "end": 1080.08,
      "text": "and maintain but it's also a lot more readable as well. So that about does it",
      "tokens": [
        51486,
        293,
        6909,
        457,
        309,
        311,
        611,
        257,
        688,
        544,
        49857,
        382,
        731,
        13,
        407,
        300,
        466,
        775,
        309,
        51740
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10129544199729452,
      "compression_ratio": 1.8148148148148149,
      "no_speech_prob": 0.5317574143409729,
      "confidence": 0.4682425856590271
    },
    {
      "id": 184,
      "start": 1080.1999999999998,
      "end": 1085.96,
      "text": "for this video on list comprehensions. You'll be surprised at how often you'll",
      "tokens": [
        50370,
        337,
        341,
        960,
        322,
        1329,
        10753,
        8302,
        13,
        509,
        603,
        312,
        6100,
        412,
        577,
        2049,
        291,
        603,
        50658
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16355001515355602,
      "compression_ratio": 1.6607142857142858,
      "no_speech_prob": 0.16518107056617737,
      "confidence": 0.8348189294338226
    },
    {
      "id": 185,
      "start": 1085.96,
      "end": 1090.76,
      "text": "use these and how much code that you can go through your code base and replace",
      "tokens": [
        50658,
        764,
        613,
        293,
        577,
        709,
        3089,
        300,
        291,
        393,
        352,
        807,
        428,
        3089,
        3096,
        293,
        7406,
        50898
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16355001515355602,
      "compression_ratio": 1.6607142857142858,
      "no_speech_prob": 0.16518107056617737,
      "confidence": 0.8348189294338226
    },
    {
      "id": 186,
      "start": 1090.76,
      "end": 1096.72,
      "text": "these long nested for loops with these list comprehensions. So if you guys do",
      "tokens": [
        50898,
        613,
        938,
        15646,
        292,
        337,
        16121,
        365,
        613,
        1329,
        10753,
        8302,
        13,
        407,
        498,
        291,
        1074,
        360,
        51196
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16355001515355602,
      "compression_ratio": 1.6607142857142858,
      "no_speech_prob": 0.16518107056617737,
      "confidence": 0.8348189294338226
    },
    {
      "id": 187,
      "start": 1096.72,
      "end": 1100.12,
      "text": "have any questions just ask in the comment section below. Be sure to",
      "tokens": [
        51196,
        362,
        604,
        1651,
        445,
        1029,
        294,
        264,
        2871,
        3541,
        2507,
        13,
        879,
        988,
        281,
        51366
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16355001515355602,
      "compression_ratio": 1.6607142857142858,
      "no_speech_prob": 0.16518107056617737,
      "confidence": 0.8348189294338226
    },
    {
      "id": 188,
      "start": 1100.12,
      "end": 1105.76,
      "text": "subscribe for future Python videos and thank you guys for watching.",
      "tokens": [
        51366,
        3022,
        337,
        2027,
        15329,
        2145,
        293,
        1309,
        291,
        1074,
        337,
        1976,
        13,
        51648
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16355001515355602,
      "compression_ratio": 1.6607142857142858,
      "no_speech_prob": 0.16518107056617737,
      "confidence": 0.8348189294338226
    }
  ]
}