{
  "video_id": "2d073269a17b",
  "video_path": "videos/Python Tutorial for Beginners 8- Functions (1).mp4",
  "video_filename": "Python Tutorial for Beginners 8- Functions (1).mp4",
  "model_size": "medium",
  "language": "en",
  "duration": 0,
  "text": " Hey there how's it going everybody? In this video we'll be learning about functions. Now functions are basically some instructions packaged together that perform a specific task. So let's create our first function and see why these are so beneficial. Now to create a function we'll use the def keyword which I believe stands for definition. And let's just make a simple function here to get started. I'll call this hello func. Now we have parentheses there because that is where our parameters will go when we add those in but we don't have any parameters just yet so that will be empty for now. Now it is possible to write a function and not have any code in it but we can't leave it completely blank. But if we want to fill this function in later then we can use this pass keyword. And basically that pass keyword is saying that we don't want to do anything with this for now but it won't throw any errors for leaving it blank. So if we want to run our function then we can just say hello underscore func and put in these parentheses. And we need to add those parentheses after the function in order to execute it. If we don't have those parentheses there then it'll be equal to the function itself. So let's actually see what that looks like. So I'm going to print out that hello function without the parentheses in place which means that we're not executing the function. So let me run that and we can see when we printed that out that it prints out that this is a function in a certain location in memory but it didn't execute the function. So to execute it then we add in these parentheses. So now if I run this then now it just gives us none because we're not doing anything with this function yet and it doesn't have a return value. So let's go ahead and put some code into our function. So first we'll just put in a print statement and we'll just print out some text that says hello function with an exclamation point. And now that we're actually running that print statement from within the function we don't need to print out that executed function. We can just execute that function and it should run that print statement. So we'll run that. So we can see that we executed our function here. It came within our function and ran our print statement. Now one benefit of functions is that they allow us to reuse code without repeating ourselves. So let's say for example that we had to print out some text in several locations throughout our program. So it might look something like this. So let me copy this and I'll comment out our function execution for now and I'm just going to paste this in about four times. So now if we run this then as we expect it prints out our four messages. Now imagine our boss came to us and told us that the text was a little bit off and that we didn't want to have an exclamation point at the end of the string. Well the way that we have it now we'd have to come in here and change all of those manually. So I'd come in and change all these messages to have a period instead. Now that was only four changes to make there but in some instances that can be in hundreds of locations in multiple different files. So that's the first benefit of functions. It allows us to put code with a specific purpose into a single location. So instead of printing those four statements what we can instead do is run our function four times. So I will remove that and uncomment our function and we're going to execute this four different times. So now if we run that then we can see that it ran our function four times and executed our print statement four different times. But now if our boss came to us and asked us to remove that exclamation point then it doesn't matter if this is spread out over a hundred different lines or a hundred different locations. We can just update it in this one spot so I can change this to a period and now if we run this then we can see that those changes are seen everywhere that the function is called. Now this is called keeping your code dry which stands for don't repeat yourself. It's a common mistake for people new to programming to repeat the same things throughout their code when really they could either put their code into certain variables or functions so that it's in a single location. So we saw earlier that since we aren't returning anything from our function it was actually equal to none. So what does it mean for our function to return something? Now this is where functions become really powerful because it allows us to operate on some data and then pass the result to whatever called our function. So instead of printing this string hello function within here let's instead return this. Okay so what does this mean exactly? This means that when we execute our function it's actually going to be equal to our return value so these executed functions here are actually equal to the string hello function. So right now if we run this then it doesn't give us any results because it's just a string that we're not doing anything with but if instead we print this so let me print that executed function and if we run that then we can see that it prints out our string. So basically think of a function as a machine that takes input and produces a result. When you execute a function you can think of it almost like a black box you don't need to know exactly how it's doing what it's doing you're mainly concerned about the input and the return value. So in this simple example here we don't have any input and we can see that the return value is a string. Now don't get me wrong it's useful to know what a function is doing but when you're first getting started don't get caught up on understanding every detail of what every function does just focus on the input and what's returned. So for example when we call the len function on a string so if I print out len of this string test if I run this then as we saw in a previous video this just returns an integer that is the number of characters in our string so we have no idea what the code that produces that result looks like but we do know that we passed in a string and that it returned this integer and we'll see why here in a bit why looking at functions in this way will help you become better when working with python because we can treat the return value just like the data type that it is and understanding this will allow you to chain together some functionality so we know our hello function returns a string so we can treat that executed function just like a string so if we remember back to our string methods remember that we can uppercase a string with dot upper so really we can take this executed function and just chain dot upper on to the end of it so now if we run this now we can see that our executed function returned the string hello function and then we were able to use the string method upper on that returned value to uppercase the string okay so now let's look at how we can pass arguments to our function and real quick I'm going to remove that dot upper method so to be able to pass arguments to our function we'll need to create some parameters here within our parentheses so let's say that we wanted to customize the greeting that our function returns so let's create a parameter called greeting and now within our function we'll return a string where we use that greeting instead of our hello text that we had before so now I'll just pass this in with a dot format so now before we run this we have to pass in that greeting argument when we execute our function if we don't then we'll get an error so actually let's go ahead and run this and see this error so we can see that when we ran that it says that hello func is missing one required positional argument greeting so let's pass in that greeting argument to our hello function and to do that we can just pass it in directly here when we call our function so I'm just going to pass in high as our string so now if we run this then we can see that when we passed in that string high into our function that it set that greeting variable equal to the string high and then returned the string high function now this greeting variable doesn't affect any variables outside of the function its scope is only local to the function which is nice because we don't have to worry about it affecting anything we don't want it to affect so and if you want to learn more about python scope then I do have a detailed video going in depth as to how that works exactly and I'll leave a link to that video in the description section below okay so right now this greeting parameter is a required argument and that is because it doesn't have a default value now if we had a default value then it would just fall back to the default value whenever we didn't pass that argument in so let's see an example of this so let's say that we also want to be able to pass a name to our hello function and it will return a greeting and the name so we can add that to our parameters by putting in a comma here and saying that we also want to accept this name parameter but let's say that if no name is passed in then we want to have a default value of u so we can just say name is equal to u and now let's add that to our return string so I'll put in a comma space and then another placeholder and we'll pass in that name so what this is going to do is it will return a greeting and a name separated by a comma and a space so if we run this then we can see that even though we didn't pass in a value for the name argument when we executed this function it didn't throw an error and instead use the default value that we specified as u but if we want to pass in a value then it will use that value instead so when we execute this function if I was to say name is equal to and we'll say corey and run that then now we can see that printed out the greeting with the name that we passed in now your required positional arguments have to come before your keyword arguments now if you try to create a function with those out of order then it's going to give you an error now this is a little more advanced topic that tripped a lot of people up but at some point you'll probably run across a function in python that looks something like this so I'll say def student info and you might see something where you see this star args and star star quarks and so let me just go ahead and within this new function here I will print out args and I'll also print out quarks so let's not really worry about this function name for now it's the arguments that I want to focus on so seeing this star args and star star quarks can seem confusing at first but basically all it's doing is allowing us to accept an arbitrary number of positional or keyword arguments so for example let's say that this student info function takes positional arguments that represent the classes that the student is taking plus the keyword arguments passed in will be random information about the student so you can see in both of those examples we don't know how many of these positional or keyword arguments there will be and that's why we use star args and star star quarks and the names don't have to be args and quarks but that's a convention that you'll see a lot so it's always good to stick with convention so that people can understand your code so let's call this function with some random values so I'm going to say student info and first we want to pass in some positional arguments of the classes that they're taking so we'll say math and art and now for our keyword arguments we'll pass in some random information about the student so we'll say name is equal to john and age is equal to 22 so now if we run this then we can see that when we printed the args it's actually a tuple with all of our positional arguments and our quarks are a dictionary with all of our keyword values so once you have that tuple and that dictionary then you'll be able to do whatever you want with that information now sometimes you might see a function call with arguments using the star or double star now when it's used in that context it will actually unpack a sequence or dictionary and pass those values into the function individually so to see what I mean let's make a list in a dictionary of everything that we just passed into our function and just to clear up some room here I'm going to go ahead and delete the hello function that we started off with so now I'm going to create a list called courses and I'm going to set this equal to math and art that we passed in before and instead of a tuple I'm going to make that a list so now for the student info I'm going to create a dictionary called info and set that equal to those values so now let me get rid of our positional and arguments here so let's say that we wanted to pass all of these courses in as our positional arguments and the info dictionary as our keyword arguments so if we just pass these in as is and I passed in courses and info now if we run this then we can see that this might not be exactly what we thought instead of passing the values in individually and instead passed in the complete list and the complete dictionary as positional arguments so if we use the single star in front of our list and the double star in front of our dictionary then it will actually unpack these values and pass them in individually so basically it will be the equivalent to our previous execution where we pass them in individually so to see what I mean let's add a star in front of this courses to unpack those values and a star star in front of our dictionary to unpack those keyword values so now if we run this and we can see that we got what we had before we can see that when our function prints args it's the values from our list that we unpacked and our quarks is equal to the dictionary values that we unpacked now I know that's a little confusing especially to you know get the idea that whenever you're passing these in that it unpacks the values and within here it's for accepting an arbitrary number of positional or keyword values but it's a little more advanced of a topic and I know it's confusing but hopefully it makes some sense and you'll be able to better understand what's going on if you ever run into something like that okay so lastly I wanted to run through an example that ties together everything we've learned so far in this series of videos so I have some code here in my snippets file that I'm going to grab real quick and paste into the file that we've been working with so now let me lower this output a little bit so that we can see everything here now these are actually a couple of functions that I grabbed from the python standard library I modified them very slightly but it's basically the same and I wanted to show that even though we've only gone over the fundamentals we're already able to look at some code from within the standard library itself and understand what's going on so at the top here we have a list called month days and this has the number of days and each month now the first index here is just a placeholder that's not going to get used we're only going to be accessing indexes 1 through 12 since those are the months and then we have a function here called is leap which determines if a year is a leap year it takes a single argument that is the year that it's checking and we can see that there's this string after the function definition with three quotes and this is called a doc string and doc strings help document what a function or a class is supposed to do so it's a good practice anytime you write a function to write a doc string that goes along with it explaining what that function is supposed to do now this part here can seem a little intimidating but it's not important that you understand how a leap year is calculated there's not a lot of people who know that off the top of their head but for various reasons this is how a leap year is calculated and it's not important but you could probably figure out what this conditional is doing so we're saying that if the year is divisible by four and it's not divisible by a hundred or it's divisible by 400 so like i was saying there's a lot of different reasons why leap years are determined this way and if you don't know that that's completely fine but this function here is going to return true if a year is a leap year and false if it's a non-leap year and down here we have a days in month function that takes a year and a month as arguments and it'll return the number of days in that month so if we look at how this function works we can see that it first checks if a month is between one and 12 and if it's not then it returns that it's an invalid month and then it checks if the month that we're working with is the second month which would mean that it's february and is a leap year using our function up here at the top then it returns 29 if both of those are true and lastly if it makes it to the end without having returned anything yet then it will index into our month days and list up here at the top and return the value of our month so let's just run through this one time and see how these functions work so outside of both of the functions we're going to go ahead and first use this is leap year function so we'll say is leap 2017 so if we run this then it returns false so we ran this function is leap passed in 2017 as our value and it went through this complicated conditional here and determined that that was false but if we type in 2020 here and run that then we can see that it returns true that 2020 is a leap year but now let's try our days and month function which is going to be a little bit longer of a walkthrough so we'll say days and month and we'll pass in a year so it takes a year first we'll pass in a year of 2017 and we'll pass in a month of two which is february now since 2017 is not a leap year then this second month which is february should only have 28 days so if we run this then we can see that we got 28 so let's walk through exactly what happened just so we're sure that we understand so we executed our days and month function with our arguments of 2017 for the year and two for the month so it comes in to our days and month function and it sets this year variable equal to 2017 and this month variable equal to two so let's comment those here just to keep track of them through our walkthrough so i'll put a comment for a year as 2017 and a comment for month as two so first it checks if our month is not between one and twelve our month is two so it is in that range so it doesn't meet this conditional and since it doesn't meet that conditional then we just continue on so our next conditional asks if the month is equal to two and is a leap year so our month is equal to two but this is leap function runs through its code with the year 2017 and returns false so since is leap is false and we're using an and operator then the whole conditional evaluates to false so we move on and lastly it accesses the month days list at this month index and remember that our month is equal to two so it's accessing the second index and if we look up here to our month days list and go to our second index so zero one two then we can see that that's equal to 28 so it should be returning 28 here and finally when we printed out that result 28 is what we got as our result now i know that it was kind of a long walkthrough but i thought it might be useful to see how these things actually work together and how do you go about determining what a function should return based on the arguments that you pass in okay so i think that is going to do it for this video i hope that now you have a clear understanding of how functions work how we return values and the different ways that we can pass arguments in the next video we'll be learning how to import modules and also learn about some of the useful modules that come in the standard library but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and i'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways is simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching",
  "segments": [
    {
      "id": 0,
      "start": 0.0,
      "end": 4.48,
      "text": "Hey there how's it going everybody? In this video we'll be learning about functions. Now functions",
      "tokens": [
        50364,
        1911,
        456,
        577,
        311,
        309,
        516,
        2201,
        30,
        682,
        341,
        960,
        321,
        603,
        312,
        2539,
        466,
        6828,
        13,
        823,
        6828,
        50588
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09000859819017015,
      "compression_ratio": 1.7275862068965517,
      "no_speech_prob": 0.07668141275644302,
      "confidence": 0.923318587243557
    },
    {
      "id": 1,
      "start": 4.48,
      "end": 10.16,
      "text": "are basically some instructions packaged together that perform a specific task. So let's create our",
      "tokens": [
        50588,
        366,
        1936,
        512,
        9415,
        38162,
        1214,
        300,
        2042,
        257,
        2685,
        5633,
        13,
        407,
        718,
        311,
        1884,
        527,
        50872
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09000859819017015,
      "compression_ratio": 1.7275862068965517,
      "no_speech_prob": 0.07668141275644302,
      "confidence": 0.923318587243557
    },
    {
      "id": 2,
      "start": 10.16,
      "end": 16.16,
      "text": "first function and see why these are so beneficial. Now to create a function we'll use the def keyword",
      "tokens": [
        50872,
        700,
        2445,
        293,
        536,
        983,
        613,
        366,
        370,
        14072,
        13,
        823,
        281,
        1884,
        257,
        2445,
        321,
        603,
        764,
        264,
        1060,
        20428,
        51172
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09000859819017015,
      "compression_ratio": 1.7275862068965517,
      "no_speech_prob": 0.07668141275644302,
      "confidence": 0.923318587243557
    },
    {
      "id": 3,
      "start": 16.16,
      "end": 21.12,
      "text": "which I believe stands for definition. And let's just make a simple function here to get started.",
      "tokens": [
        51172,
        597,
        286,
        1697,
        7382,
        337,
        7123,
        13,
        400,
        718,
        311,
        445,
        652,
        257,
        2199,
        2445,
        510,
        281,
        483,
        1409,
        13,
        51420
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09000859819017015,
      "compression_ratio": 1.7275862068965517,
      "no_speech_prob": 0.07668141275644302,
      "confidence": 0.923318587243557
    },
    {
      "id": 4,
      "start": 21.12,
      "end": 26.8,
      "text": "I'll call this hello func. Now we have parentheses there because that is where our parameters will go",
      "tokens": [
        51420,
        286,
        603,
        818,
        341,
        7751,
        1019,
        66,
        13,
        823,
        321,
        362,
        34153,
        456,
        570,
        300,
        307,
        689,
        527,
        9834,
        486,
        352,
        51704
      ],
      "temperature": 0.0,
      "avg_logprob": -0.09000859819017015,
      "compression_ratio": 1.7275862068965517,
      "no_speech_prob": 0.07668141275644302,
      "confidence": 0.923318587243557
    },
    {
      "id": 5,
      "start": 26.8,
      "end": 31.6,
      "text": "when we add those in but we don't have any parameters just yet so that will be empty for",
      "tokens": [
        50364,
        562,
        321,
        909,
        729,
        294,
        457,
        321,
        500,
        380,
        362,
        604,
        9834,
        445,
        1939,
        370,
        300,
        486,
        312,
        6707,
        337,
        50604
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04810947026961889,
      "compression_ratio": 1.83203125,
      "no_speech_prob": 0.20537801086902618,
      "confidence": 0.7946219891309738
    },
    {
      "id": 6,
      "start": 31.6,
      "end": 36.88,
      "text": "now. Now it is possible to write a function and not have any code in it but we can't leave it",
      "tokens": [
        50604,
        586,
        13,
        823,
        309,
        307,
        1944,
        281,
        2464,
        257,
        2445,
        293,
        406,
        362,
        604,
        3089,
        294,
        309,
        457,
        321,
        393,
        380,
        1856,
        309,
        50868
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04810947026961889,
      "compression_ratio": 1.83203125,
      "no_speech_prob": 0.20537801086902618,
      "confidence": 0.7946219891309738
    },
    {
      "id": 7,
      "start": 36.88,
      "end": 43.68,
      "text": "completely blank. But if we want to fill this function in later then we can use this pass",
      "tokens": [
        50868,
        2584,
        8247,
        13,
        583,
        498,
        321,
        528,
        281,
        2836,
        341,
        2445,
        294,
        1780,
        550,
        321,
        393,
        764,
        341,
        1320,
        51208
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04810947026961889,
      "compression_ratio": 1.83203125,
      "no_speech_prob": 0.20537801086902618,
      "confidence": 0.7946219891309738
    },
    {
      "id": 8,
      "start": 43.68,
      "end": 48.08,
      "text": "keyword. And basically that pass keyword is saying that we don't want to do anything with this for",
      "tokens": [
        51208,
        20428,
        13,
        400,
        1936,
        300,
        1320,
        20428,
        307,
        1566,
        300,
        321,
        500,
        380,
        528,
        281,
        360,
        1340,
        365,
        341,
        337,
        51428
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04810947026961889,
      "compression_ratio": 1.83203125,
      "no_speech_prob": 0.20537801086902618,
      "confidence": 0.7946219891309738
    },
    {
      "id": 9,
      "start": 48.08,
      "end": 55.040000000000006,
      "text": "now but it won't throw any errors for leaving it blank. So if we want to run our function then we",
      "tokens": [
        51428,
        586,
        457,
        309,
        1582,
        380,
        3507,
        604,
        13603,
        337,
        5012,
        309,
        8247,
        13,
        407,
        498,
        321,
        528,
        281,
        1190,
        527,
        2445,
        550,
        321,
        51776
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04810947026961889,
      "compression_ratio": 1.83203125,
      "no_speech_prob": 0.20537801086902618,
      "confidence": 0.7946219891309738
    },
    {
      "id": 10,
      "start": 55.04,
      "end": 60.08,
      "text": "can just say hello underscore func and put in these parentheses. And we need to add those",
      "tokens": [
        50364,
        393,
        445,
        584,
        7751,
        37556,
        1019,
        66,
        293,
        829,
        294,
        613,
        34153,
        13,
        400,
        321,
        643,
        281,
        909,
        729,
        50616
      ],
      "temperature": 0.0,
      "avg_logprob": -0.037486664883725276,
      "compression_ratio": 1.900398406374502,
      "no_speech_prob": 0.0019560172222554684,
      "confidence": 0.9980439827777445
    },
    {
      "id": 11,
      "start": 60.08,
      "end": 65.36,
      "text": "parentheses after the function in order to execute it. If we don't have those parentheses there",
      "tokens": [
        50616,
        34153,
        934,
        264,
        2445,
        294,
        1668,
        281,
        14483,
        309,
        13,
        759,
        321,
        500,
        380,
        362,
        729,
        34153,
        456,
        50880
      ],
      "temperature": 0.0,
      "avg_logprob": -0.037486664883725276,
      "compression_ratio": 1.900398406374502,
      "no_speech_prob": 0.0019560172222554684,
      "confidence": 0.9980439827777445
    },
    {
      "id": 12,
      "start": 65.36,
      "end": 71.75999999999999,
      "text": "then it'll be equal to the function itself. So let's actually see what that looks like. So I'm",
      "tokens": [
        50880,
        550,
        309,
        603,
        312,
        2681,
        281,
        264,
        2445,
        2564,
        13,
        407,
        718,
        311,
        767,
        536,
        437,
        300,
        1542,
        411,
        13,
        407,
        286,
        478,
        51200
      ],
      "temperature": 0.0,
      "avg_logprob": -0.037486664883725276,
      "compression_ratio": 1.900398406374502,
      "no_speech_prob": 0.0019560172222554684,
      "confidence": 0.9980439827777445
    },
    {
      "id": 13,
      "start": 71.75999999999999,
      "end": 77.68,
      "text": "going to print out that hello function without the parentheses in place which means that we're not",
      "tokens": [
        51200,
        516,
        281,
        4482,
        484,
        300,
        7751,
        2445,
        1553,
        264,
        34153,
        294,
        1081,
        597,
        1355,
        300,
        321,
        434,
        406,
        51496
      ],
      "temperature": 0.0,
      "avg_logprob": -0.037486664883725276,
      "compression_ratio": 1.900398406374502,
      "no_speech_prob": 0.0019560172222554684,
      "confidence": 0.9980439827777445
    },
    {
      "id": 14,
      "start": 77.68,
      "end": 82.72,
      "text": "executing the function. So let me run that and we can see when we printed that out that it prints",
      "tokens": [
        51496,
        32368,
        264,
        2445,
        13,
        407,
        718,
        385,
        1190,
        300,
        293,
        321,
        393,
        536,
        562,
        321,
        13567,
        300,
        484,
        300,
        309,
        22305,
        51748
      ],
      "temperature": 0.0,
      "avg_logprob": -0.037486664883725276,
      "compression_ratio": 1.900398406374502,
      "no_speech_prob": 0.0019560172222554684,
      "confidence": 0.9980439827777445
    },
    {
      "id": 15,
      "start": 82.72,
      "end": 88.4,
      "text": "out that this is a function in a certain location in memory but it didn't execute the function.",
      "tokens": [
        50364,
        484,
        300,
        341,
        307,
        257,
        2445,
        294,
        257,
        1629,
        4914,
        294,
        4675,
        457,
        309,
        994,
        380,
        14483,
        264,
        2445,
        13,
        50648
      ],
      "temperature": 0.0,
      "avg_logprob": -0.031621062128167406,
      "compression_ratio": 1.735159817351598,
      "no_speech_prob": 0.01589944213628769,
      "confidence": 0.9841005578637123
    },
    {
      "id": 16,
      "start": 88.4,
      "end": 95.6,
      "text": "So to execute it then we add in these parentheses. So now if I run this then now it just gives us",
      "tokens": [
        50648,
        407,
        281,
        14483,
        309,
        550,
        321,
        909,
        294,
        613,
        34153,
        13,
        407,
        586,
        498,
        286,
        1190,
        341,
        550,
        586,
        309,
        445,
        2709,
        505,
        51008
      ],
      "temperature": 0.0,
      "avg_logprob": -0.031621062128167406,
      "compression_ratio": 1.735159817351598,
      "no_speech_prob": 0.01589944213628769,
      "confidence": 0.9841005578637123
    },
    {
      "id": 17,
      "start": 95.6,
      "end": 100.72,
      "text": "none because we're not doing anything with this function yet and it doesn't have a return value.",
      "tokens": [
        51008,
        6022,
        570,
        321,
        434,
        406,
        884,
        1340,
        365,
        341,
        2445,
        1939,
        293,
        309,
        1177,
        380,
        362,
        257,
        2736,
        2158,
        13,
        51264
      ],
      "temperature": 0.0,
      "avg_logprob": -0.031621062128167406,
      "compression_ratio": 1.735159817351598,
      "no_speech_prob": 0.01589944213628769,
      "confidence": 0.9841005578637123
    },
    {
      "id": 18,
      "start": 100.72,
      "end": 106.64,
      "text": "So let's go ahead and put some code into our function. So first we'll just put in a print",
      "tokens": [
        51264,
        407,
        718,
        311,
        352,
        2286,
        293,
        829,
        512,
        3089,
        666,
        527,
        2445,
        13,
        407,
        700,
        321,
        603,
        445,
        829,
        294,
        257,
        4482,
        51560
      ],
      "temperature": 0.0,
      "avg_logprob": -0.031621062128167406,
      "compression_ratio": 1.735159817351598,
      "no_speech_prob": 0.01589944213628769,
      "confidence": 0.9841005578637123
    },
    {
      "id": 19,
      "start": 106.64,
      "end": 113.52,
      "text": "statement and we'll just print out some text that says hello function with an exclamation point. And",
      "tokens": [
        50364,
        5629,
        293,
        321,
        603,
        445,
        4482,
        484,
        512,
        2487,
        300,
        1619,
        7751,
        2445,
        365,
        364,
        1624,
        43233,
        935,
        13,
        400,
        50708
      ],
      "temperature": 0.0,
      "avg_logprob": -0.042430002754981364,
      "compression_ratio": 2.0466101694915255,
      "no_speech_prob": 0.25022372603416443,
      "confidence": 0.7497762739658356
    },
    {
      "id": 20,
      "start": 113.52,
      "end": 118.72,
      "text": "now that we're actually running that print statement from within the function we don't need to print",
      "tokens": [
        50708,
        586,
        300,
        321,
        434,
        767,
        2614,
        300,
        4482,
        5629,
        490,
        1951,
        264,
        2445,
        321,
        500,
        380,
        643,
        281,
        4482,
        50968
      ],
      "temperature": 0.0,
      "avg_logprob": -0.042430002754981364,
      "compression_ratio": 2.0466101694915255,
      "no_speech_prob": 0.25022372603416443,
      "confidence": 0.7497762739658356
    },
    {
      "id": 21,
      "start": 118.72,
      "end": 124.48,
      "text": "out that executed function. We can just execute that function and it should run that print",
      "tokens": [
        50968,
        484,
        300,
        17577,
        2445,
        13,
        492,
        393,
        445,
        14483,
        300,
        2445,
        293,
        309,
        820,
        1190,
        300,
        4482,
        51256
      ],
      "temperature": 0.0,
      "avg_logprob": -0.042430002754981364,
      "compression_ratio": 2.0466101694915255,
      "no_speech_prob": 0.25022372603416443,
      "confidence": 0.7497762739658356
    },
    {
      "id": 22,
      "start": 124.48,
      "end": 129.92000000000002,
      "text": "statement. So we'll run that. So we can see that we executed our function here. It came within our",
      "tokens": [
        51256,
        5629,
        13,
        407,
        321,
        603,
        1190,
        300,
        13,
        407,
        321,
        393,
        536,
        300,
        321,
        17577,
        527,
        2445,
        510,
        13,
        467,
        1361,
        1951,
        527,
        51528
      ],
      "temperature": 0.0,
      "avg_logprob": -0.042430002754981364,
      "compression_ratio": 2.0466101694915255,
      "no_speech_prob": 0.25022372603416443,
      "confidence": 0.7497762739658356
    },
    {
      "id": 23,
      "start": 129.92000000000002,
      "end": 134.8,
      "text": "function and ran our print statement. Now one benefit of functions is that they allow us to",
      "tokens": [
        51528,
        2445,
        293,
        5872,
        527,
        4482,
        5629,
        13,
        823,
        472,
        5121,
        295,
        6828,
        307,
        300,
        436,
        2089,
        505,
        281,
        51772
      ],
      "temperature": 0.0,
      "avg_logprob": -0.042430002754981364,
      "compression_ratio": 2.0466101694915255,
      "no_speech_prob": 0.25022372603416443,
      "confidence": 0.7497762739658356
    },
    {
      "id": 24,
      "start": 134.8,
      "end": 140.24,
      "text": "reuse code without repeating ourselves. So let's say for example that we had to print out some text",
      "tokens": [
        50364,
        26225,
        3089,
        1553,
        18617,
        4175,
        13,
        407,
        718,
        311,
        584,
        337,
        1365,
        300,
        321,
        632,
        281,
        4482,
        484,
        512,
        2487,
        50636
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04857662345180992,
      "compression_ratio": 1.7678571428571428,
      "no_speech_prob": 0.024029120802879333,
      "confidence": 0.9759708791971207
    },
    {
      "id": 25,
      "start": 140.24,
      "end": 145.76000000000002,
      "text": "in several locations throughout our program. So it might look something like this. So let me copy this",
      "tokens": [
        50636,
        294,
        2940,
        9253,
        3710,
        527,
        1461,
        13,
        407,
        309,
        1062,
        574,
        746,
        411,
        341,
        13,
        407,
        718,
        385,
        5055,
        341,
        50912
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04857662345180992,
      "compression_ratio": 1.7678571428571428,
      "no_speech_prob": 0.024029120802879333,
      "confidence": 0.9759708791971207
    },
    {
      "id": 26,
      "start": 145.76000000000002,
      "end": 151.60000000000002,
      "text": "and I'll comment out our function execution for now and I'm just going to paste this in about four",
      "tokens": [
        50912,
        293,
        286,
        603,
        2871,
        484,
        527,
        2445,
        15058,
        337,
        586,
        293,
        286,
        478,
        445,
        516,
        281,
        9163,
        341,
        294,
        466,
        1451,
        51204
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04857662345180992,
      "compression_ratio": 1.7678571428571428,
      "no_speech_prob": 0.024029120802879333,
      "confidence": 0.9759708791971207
    },
    {
      "id": 27,
      "start": 151.60000000000002,
      "end": 158.88000000000002,
      "text": "times. So now if we run this then as we expect it prints out our four messages. Now imagine our boss",
      "tokens": [
        51204,
        1413,
        13,
        407,
        586,
        498,
        321,
        1190,
        341,
        550,
        382,
        321,
        2066,
        309,
        22305,
        484,
        527,
        1451,
        7897,
        13,
        823,
        3811,
        527,
        5741,
        51568
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04857662345180992,
      "compression_ratio": 1.7678571428571428,
      "no_speech_prob": 0.024029120802879333,
      "confidence": 0.9759708791971207
    },
    {
      "id": 28,
      "start": 158.88000000000002,
      "end": 163.84,
      "text": "came to us and told us that the text was a little bit off and that we didn't want to have an",
      "tokens": [
        51568,
        1361,
        281,
        505,
        293,
        1907,
        505,
        300,
        264,
        2487,
        390,
        257,
        707,
        857,
        766,
        293,
        300,
        321,
        994,
        380,
        528,
        281,
        362,
        364,
        51816
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04857662345180992,
      "compression_ratio": 1.7678571428571428,
      "no_speech_prob": 0.024029120802879333,
      "confidence": 0.9759708791971207
    },
    {
      "id": 29,
      "start": 163.84,
      "end": 168.88,
      "text": "exclamation point at the end of the string. Well the way that we have it now we'd have to come in",
      "tokens": [
        50364,
        1624,
        43233,
        935,
        412,
        264,
        917,
        295,
        264,
        6798,
        13,
        1042,
        264,
        636,
        300,
        321,
        362,
        309,
        586,
        321,
        1116,
        362,
        281,
        808,
        294,
        50616
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03902062694583319,
      "compression_ratio": 1.750915750915751,
      "no_speech_prob": 0.0010852073319256306,
      "confidence": 0.9989147926680744
    },
    {
      "id": 30,
      "start": 168.88,
      "end": 175.04,
      "text": "here and change all of those manually. So I'd come in and change all these messages to have",
      "tokens": [
        50616,
        510,
        293,
        1319,
        439,
        295,
        729,
        16945,
        13,
        407,
        286,
        1116,
        808,
        294,
        293,
        1319,
        439,
        613,
        7897,
        281,
        362,
        50924
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03902062694583319,
      "compression_ratio": 1.750915750915751,
      "no_speech_prob": 0.0010852073319256306,
      "confidence": 0.9989147926680744
    },
    {
      "id": 31,
      "start": 175.04,
      "end": 180.72,
      "text": "a period instead. Now that was only four changes to make there but in some instances that can be",
      "tokens": [
        50924,
        257,
        2896,
        2602,
        13,
        823,
        300,
        390,
        787,
        1451,
        2962,
        281,
        652,
        456,
        457,
        294,
        512,
        14519,
        300,
        393,
        312,
        51208
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03902062694583319,
      "compression_ratio": 1.750915750915751,
      "no_speech_prob": 0.0010852073319256306,
      "confidence": 0.9989147926680744
    },
    {
      "id": 32,
      "start": 180.72,
      "end": 186.48000000000002,
      "text": "in hundreds of locations in multiple different files. So that's the first benefit of functions.",
      "tokens": [
        51208,
        294,
        6779,
        295,
        9253,
        294,
        3866,
        819,
        7098,
        13,
        407,
        300,
        311,
        264,
        700,
        5121,
        295,
        6828,
        13,
        51496
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03902062694583319,
      "compression_ratio": 1.750915750915751,
      "no_speech_prob": 0.0010852073319256306,
      "confidence": 0.9989147926680744
    },
    {
      "id": 33,
      "start": 186.48000000000002,
      "end": 192.8,
      "text": "It allows us to put code with a specific purpose into a single location. So instead of printing",
      "tokens": [
        51496,
        467,
        4045,
        505,
        281,
        829,
        3089,
        365,
        257,
        2685,
        4334,
        666,
        257,
        2167,
        4914,
        13,
        407,
        2602,
        295,
        14699,
        51812
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03902062694583319,
      "compression_ratio": 1.750915750915751,
      "no_speech_prob": 0.0010852073319256306,
      "confidence": 0.9989147926680744
    },
    {
      "id": 34,
      "start": 192.8,
      "end": 200.48000000000002,
      "text": "those four statements what we can instead do is run our function four times. So I will remove that",
      "tokens": [
        50364,
        729,
        1451,
        12363,
        437,
        321,
        393,
        2602,
        360,
        307,
        1190,
        527,
        2445,
        1451,
        1413,
        13,
        407,
        286,
        486,
        4159,
        300,
        50748
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03128203261982311,
      "compression_ratio": 2.042194092827004,
      "no_speech_prob": 0.007043235935270786,
      "confidence": 0.9929567640647292
    },
    {
      "id": 35,
      "start": 200.48000000000002,
      "end": 206.16000000000003,
      "text": "and uncomment our function and we're going to execute this four different times. So now if we",
      "tokens": [
        50748,
        293,
        8585,
        518,
        527,
        2445,
        293,
        321,
        434,
        516,
        281,
        14483,
        341,
        1451,
        819,
        1413,
        13,
        407,
        586,
        498,
        321,
        51032
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03128203261982311,
      "compression_ratio": 2.042194092827004,
      "no_speech_prob": 0.007043235935270786,
      "confidence": 0.9929567640647292
    },
    {
      "id": 36,
      "start": 206.16000000000003,
      "end": 211.52,
      "text": "run that then we can see that it ran our function four times and executed our print statement four",
      "tokens": [
        51032,
        1190,
        300,
        550,
        321,
        393,
        536,
        300,
        309,
        5872,
        527,
        2445,
        1451,
        1413,
        293,
        17577,
        527,
        4482,
        5629,
        1451,
        51300
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03128203261982311,
      "compression_ratio": 2.042194092827004,
      "no_speech_prob": 0.007043235935270786,
      "confidence": 0.9929567640647292
    },
    {
      "id": 37,
      "start": 211.52,
      "end": 216.64000000000001,
      "text": "different times. But now if our boss came to us and asked us to remove that exclamation point",
      "tokens": [
        51300,
        819,
        1413,
        13,
        583,
        586,
        498,
        527,
        5741,
        1361,
        281,
        505,
        293,
        2351,
        505,
        281,
        4159,
        300,
        1624,
        43233,
        935,
        51556
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03128203261982311,
      "compression_ratio": 2.042194092827004,
      "no_speech_prob": 0.007043235935270786,
      "confidence": 0.9929567640647292
    },
    {
      "id": 38,
      "start": 216.64000000000001,
      "end": 221.36,
      "text": "then it doesn't matter if this is spread out over a hundred different lines or a hundred different",
      "tokens": [
        51556,
        550,
        309,
        1177,
        380,
        1871,
        498,
        341,
        307,
        3974,
        484,
        670,
        257,
        3262,
        819,
        3876,
        420,
        257,
        3262,
        819,
        51792
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03128203261982311,
      "compression_ratio": 2.042194092827004,
      "no_speech_prob": 0.007043235935270786,
      "confidence": 0.9929567640647292
    },
    {
      "id": 39,
      "start": 221.36,
      "end": 228.0,
      "text": "locations. We can just update it in this one spot so I can change this to a period and now if we run",
      "tokens": [
        50364,
        9253,
        13,
        492,
        393,
        445,
        5623,
        309,
        294,
        341,
        472,
        4008,
        370,
        286,
        393,
        1319,
        341,
        281,
        257,
        2896,
        293,
        586,
        498,
        321,
        1190,
        50696
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04460702248669546,
      "compression_ratio": 1.7545126353790614,
      "no_speech_prob": 0.008787344209849834,
      "confidence": 0.9912126557901502
    },
    {
      "id": 40,
      "start": 228.0,
      "end": 232.88000000000002,
      "text": "this then we can see that those changes are seen everywhere that the function is called. Now this",
      "tokens": [
        50696,
        341,
        550,
        321,
        393,
        536,
        300,
        729,
        2962,
        366,
        1612,
        5315,
        300,
        264,
        2445,
        307,
        1219,
        13,
        823,
        341,
        50940
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04460702248669546,
      "compression_ratio": 1.7545126353790614,
      "no_speech_prob": 0.008787344209849834,
      "confidence": 0.9912126557901502
    },
    {
      "id": 41,
      "start": 232.88000000000002,
      "end": 239.36,
      "text": "is called keeping your code dry which stands for don't repeat yourself. It's a common mistake for",
      "tokens": [
        50940,
        307,
        1219,
        5145,
        428,
        3089,
        4016,
        597,
        7382,
        337,
        500,
        380,
        7149,
        1803,
        13,
        467,
        311,
        257,
        2689,
        6146,
        337,
        51264
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04460702248669546,
      "compression_ratio": 1.7545126353790614,
      "no_speech_prob": 0.008787344209849834,
      "confidence": 0.9912126557901502
    },
    {
      "id": 42,
      "start": 239.36,
      "end": 243.68,
      "text": "people new to programming to repeat the same things throughout their code when really they",
      "tokens": [
        51264,
        561,
        777,
        281,
        9410,
        281,
        7149,
        264,
        912,
        721,
        3710,
        641,
        3089,
        562,
        534,
        436,
        51480
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04460702248669546,
      "compression_ratio": 1.7545126353790614,
      "no_speech_prob": 0.008787344209849834,
      "confidence": 0.9912126557901502
    },
    {
      "id": 43,
      "start": 243.68,
      "end": 249.52,
      "text": "could either put their code into certain variables or functions so that it's in a single location.",
      "tokens": [
        51480,
        727,
        2139,
        829,
        641,
        3089,
        666,
        1629,
        9102,
        420,
        6828,
        370,
        300,
        309,
        311,
        294,
        257,
        2167,
        4914,
        13,
        51772
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04460702248669546,
      "compression_ratio": 1.7545126353790614,
      "no_speech_prob": 0.008787344209849834,
      "confidence": 0.9912126557901502
    },
    {
      "id": 44,
      "start": 249.52,
      "end": 255.52,
      "text": "So we saw earlier that since we aren't returning anything from our function it was actually equal",
      "tokens": [
        50364,
        407,
        321,
        1866,
        3071,
        300,
        1670,
        321,
        3212,
        380,
        12678,
        1340,
        490,
        527,
        2445,
        309,
        390,
        767,
        2681,
        50664
      ],
      "temperature": 0.0,
      "avg_logprob": -0.038848525001889185,
      "compression_ratio": 1.747787610619469,
      "no_speech_prob": 0.0012916570995002985,
      "confidence": 0.9987083429004997
    },
    {
      "id": 45,
      "start": 255.52,
      "end": 262.40000000000003,
      "text": "to none. So what does it mean for our function to return something? Now this is where functions become",
      "tokens": [
        50664,
        281,
        6022,
        13,
        407,
        437,
        775,
        309,
        914,
        337,
        527,
        2445,
        281,
        2736,
        746,
        30,
        823,
        341,
        307,
        689,
        6828,
        1813,
        51008
      ],
      "temperature": 0.0,
      "avg_logprob": -0.038848525001889185,
      "compression_ratio": 1.747787610619469,
      "no_speech_prob": 0.0012916570995002985,
      "confidence": 0.9987083429004997
    },
    {
      "id": 46,
      "start": 262.40000000000003,
      "end": 267.92,
      "text": "really powerful because it allows us to operate on some data and then pass the result to whatever",
      "tokens": [
        51008,
        534,
        4005,
        570,
        309,
        4045,
        505,
        281,
        9651,
        322,
        512,
        1412,
        293,
        550,
        1320,
        264,
        1874,
        281,
        2035,
        51284
      ],
      "temperature": 0.0,
      "avg_logprob": -0.038848525001889185,
      "compression_ratio": 1.747787610619469,
      "no_speech_prob": 0.0012916570995002985,
      "confidence": 0.9987083429004997
    },
    {
      "id": 47,
      "start": 267.92,
      "end": 274.08000000000004,
      "text": "called our function. So instead of printing this string hello function within here let's instead",
      "tokens": [
        51284,
        1219,
        527,
        2445,
        13,
        407,
        2602,
        295,
        14699,
        341,
        6798,
        7751,
        2445,
        1951,
        510,
        718,
        311,
        2602,
        51592
      ],
      "temperature": 0.0,
      "avg_logprob": -0.038848525001889185,
      "compression_ratio": 1.747787610619469,
      "no_speech_prob": 0.0012916570995002985,
      "confidence": 0.9987083429004997
    },
    {
      "id": 48,
      "start": 274.15999999999997,
      "end": 279.76,
      "text": "return this. Okay so what does this mean exactly? This means that when we execute our function",
      "tokens": [
        50368,
        2736,
        341,
        13,
        1033,
        370,
        437,
        775,
        341,
        914,
        2293,
        30,
        639,
        1355,
        300,
        562,
        321,
        14483,
        527,
        2445,
        50648
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07102263375614466,
      "compression_ratio": 1.7309417040358743,
      "no_speech_prob": 0.19809363782405853,
      "confidence": 0.8019063621759415
    },
    {
      "id": 49,
      "start": 279.76,
      "end": 285.59999999999997,
      "text": "it's actually going to be equal to our return value so these executed functions here are actually",
      "tokens": [
        50648,
        309,
        311,
        767,
        516,
        281,
        312,
        2681,
        281,
        527,
        2736,
        2158,
        370,
        613,
        17577,
        6828,
        510,
        366,
        767,
        50940
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07102263375614466,
      "compression_ratio": 1.7309417040358743,
      "no_speech_prob": 0.19809363782405853,
      "confidence": 0.8019063621759415
    },
    {
      "id": 50,
      "start": 285.59999999999997,
      "end": 292.4,
      "text": "equal to the string hello function. So right now if we run this then it doesn't give us any results",
      "tokens": [
        50940,
        2681,
        281,
        264,
        6798,
        7751,
        2445,
        13,
        407,
        558,
        586,
        498,
        321,
        1190,
        341,
        550,
        309,
        1177,
        380,
        976,
        505,
        604,
        3542,
        51280
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07102263375614466,
      "compression_ratio": 1.7309417040358743,
      "no_speech_prob": 0.19809363782405853,
      "confidence": 0.8019063621759415
    },
    {
      "id": 51,
      "start": 292.4,
      "end": 299.52,
      "text": "because it's just a string that we're not doing anything with but if instead we print this so",
      "tokens": [
        51280,
        570,
        309,
        311,
        445,
        257,
        6798,
        300,
        321,
        434,
        406,
        884,
        1340,
        365,
        457,
        498,
        2602,
        321,
        4482,
        341,
        370,
        51636
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07102263375614466,
      "compression_ratio": 1.7309417040358743,
      "no_speech_prob": 0.19809363782405853,
      "confidence": 0.8019063621759415
    },
    {
      "id": 52,
      "start": 299.52,
      "end": 306.0,
      "text": "let me print that executed function and if we run that then we can see that it prints out our",
      "tokens": [
        50364,
        718,
        385,
        4482,
        300,
        17577,
        2445,
        293,
        498,
        321,
        1190,
        300,
        550,
        321,
        393,
        536,
        300,
        309,
        22305,
        484,
        527,
        50688
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05079028899209541,
      "compression_ratio": 1.8968253968253967,
      "no_speech_prob": 0.001529182307422161,
      "confidence": 0.9984708176925778
    },
    {
      "id": 53,
      "start": 306.0,
      "end": 312.96,
      "text": "string. So basically think of a function as a machine that takes input and produces a result.",
      "tokens": [
        50688,
        6798,
        13,
        407,
        1936,
        519,
        295,
        257,
        2445,
        382,
        257,
        3479,
        300,
        2516,
        4846,
        293,
        14725,
        257,
        1874,
        13,
        51036
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05079028899209541,
      "compression_ratio": 1.8968253968253967,
      "no_speech_prob": 0.001529182307422161,
      "confidence": 0.9984708176925778
    },
    {
      "id": 54,
      "start": 312.96,
      "end": 317.91999999999996,
      "text": "When you execute a function you can think of it almost like a black box you don't need to know",
      "tokens": [
        51036,
        1133,
        291,
        14483,
        257,
        2445,
        291,
        393,
        519,
        295,
        309,
        1920,
        411,
        257,
        2211,
        2424,
        291,
        500,
        380,
        643,
        281,
        458,
        51284
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05079028899209541,
      "compression_ratio": 1.8968253968253967,
      "no_speech_prob": 0.001529182307422161,
      "confidence": 0.9984708176925778
    },
    {
      "id": 55,
      "start": 317.91999999999996,
      "end": 323.12,
      "text": "exactly how it's doing what it's doing you're mainly concerned about the input and the return",
      "tokens": [
        51284,
        2293,
        577,
        309,
        311,
        884,
        437,
        309,
        311,
        884,
        291,
        434,
        8704,
        5922,
        466,
        264,
        4846,
        293,
        264,
        2736,
        51544
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05079028899209541,
      "compression_ratio": 1.8968253968253967,
      "no_speech_prob": 0.001529182307422161,
      "confidence": 0.9984708176925778
    },
    {
      "id": 56,
      "start": 323.12,
      "end": 329.28,
      "text": "value. So in this simple example here we don't have any input and we can see that the return value is",
      "tokens": [
        51544,
        2158,
        13,
        407,
        294,
        341,
        2199,
        1365,
        510,
        321,
        500,
        380,
        362,
        604,
        4846,
        293,
        321,
        393,
        536,
        300,
        264,
        2736,
        2158,
        307,
        51852
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05079028899209541,
      "compression_ratio": 1.8968253968253967,
      "no_speech_prob": 0.001529182307422161,
      "confidence": 0.9984708176925778
    },
    {
      "id": 57,
      "start": 329.28,
      "end": 334.15999999999997,
      "text": "a string. Now don't get me wrong it's useful to know what a function is doing but when you're",
      "tokens": [
        50364,
        257,
        6798,
        13,
        823,
        500,
        380,
        483,
        385,
        2085,
        309,
        311,
        4420,
        281,
        458,
        437,
        257,
        2445,
        307,
        884,
        457,
        562,
        291,
        434,
        50608
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03944789856038195,
      "compression_ratio": 1.670995670995671,
      "no_speech_prob": 0.0003137614985462278,
      "confidence": 0.9996862385014538
    },
    {
      "id": 58,
      "start": 334.15999999999997,
      "end": 340.08,
      "text": "first getting started don't get caught up on understanding every detail of what every function",
      "tokens": [
        50608,
        700,
        1242,
        1409,
        500,
        380,
        483,
        5415,
        493,
        322,
        3701,
        633,
        2607,
        295,
        437,
        633,
        2445,
        50904
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03944789856038195,
      "compression_ratio": 1.670995670995671,
      "no_speech_prob": 0.0003137614985462278,
      "confidence": 0.9996862385014538
    },
    {
      "id": 59,
      "start": 340.08,
      "end": 347.44,
      "text": "does just focus on the input and what's returned. So for example when we call the len function on",
      "tokens": [
        50904,
        775,
        445,
        1879,
        322,
        264,
        4846,
        293,
        437,
        311,
        8752,
        13,
        407,
        337,
        1365,
        562,
        321,
        818,
        264,
        40116,
        2445,
        322,
        51272
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03944789856038195,
      "compression_ratio": 1.670995670995671,
      "no_speech_prob": 0.0003137614985462278,
      "confidence": 0.9996862385014538
    },
    {
      "id": 60,
      "start": 347.44,
      "end": 356.47999999999996,
      "text": "a string so if I print out len of this string test if I run this then as we saw in a previous video",
      "tokens": [
        51272,
        257,
        6798,
        370,
        498,
        286,
        4482,
        484,
        40116,
        295,
        341,
        6798,
        1500,
        498,
        286,
        1190,
        341,
        550,
        382,
        321,
        1866,
        294,
        257,
        3894,
        960,
        51724
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03944789856038195,
      "compression_ratio": 1.670995670995671,
      "no_speech_prob": 0.0003137614985462278,
      "confidence": 0.9996862385014538
    },
    {
      "id": 61,
      "start": 356.48,
      "end": 362.88,
      "text": "this just returns an integer that is the number of characters in our string so we have no idea",
      "tokens": [
        50364,
        341,
        445,
        11247,
        364,
        24922,
        300,
        307,
        264,
        1230,
        295,
        4342,
        294,
        527,
        6798,
        370,
        321,
        362,
        572,
        1558,
        50684
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0419254572886341,
      "compression_ratio": 1.8206106870229009,
      "no_speech_prob": 0.017706597223877907,
      "confidence": 0.9822934027761221
    },
    {
      "id": 62,
      "start": 362.88,
      "end": 368.0,
      "text": "what the code that produces that result looks like but we do know that we passed in a string",
      "tokens": [
        50684,
        437,
        264,
        3089,
        300,
        14725,
        300,
        1874,
        1542,
        411,
        457,
        321,
        360,
        458,
        300,
        321,
        4678,
        294,
        257,
        6798,
        50940
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0419254572886341,
      "compression_ratio": 1.8206106870229009,
      "no_speech_prob": 0.017706597223877907,
      "confidence": 0.9822934027761221
    },
    {
      "id": 63,
      "start": 368.0,
      "end": 373.68,
      "text": "and that it returned this integer and we'll see why here in a bit why looking at functions in this",
      "tokens": [
        50940,
        293,
        300,
        309,
        8752,
        341,
        24922,
        293,
        321,
        603,
        536,
        983,
        510,
        294,
        257,
        857,
        983,
        1237,
        412,
        6828,
        294,
        341,
        51224
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0419254572886341,
      "compression_ratio": 1.8206106870229009,
      "no_speech_prob": 0.017706597223877907,
      "confidence": 0.9822934027761221
    },
    {
      "id": 64,
      "start": 373.68,
      "end": 380.0,
      "text": "way will help you become better when working with python because we can treat the return value just",
      "tokens": [
        51224,
        636,
        486,
        854,
        291,
        1813,
        1101,
        562,
        1364,
        365,
        38797,
        570,
        321,
        393,
        2387,
        264,
        2736,
        2158,
        445,
        51540
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0419254572886341,
      "compression_ratio": 1.8206106870229009,
      "no_speech_prob": 0.017706597223877907,
      "confidence": 0.9822934027761221
    },
    {
      "id": 65,
      "start": 380.0,
      "end": 384.64000000000004,
      "text": "like the data type that it is and understanding this will allow you to chain together some",
      "tokens": [
        51540,
        411,
        264,
        1412,
        2010,
        300,
        309,
        307,
        293,
        3701,
        341,
        486,
        2089,
        291,
        281,
        5021,
        1214,
        512,
        51772
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0419254572886341,
      "compression_ratio": 1.8206106870229009,
      "no_speech_prob": 0.017706597223877907,
      "confidence": 0.9822934027761221
    },
    {
      "id": 66,
      "start": 384.64,
      "end": 391.44,
      "text": "functionality so we know our hello function returns a string so we can treat that executed",
      "tokens": [
        50364,
        14980,
        370,
        321,
        458,
        527,
        7751,
        2445,
        11247,
        257,
        6798,
        370,
        321,
        393,
        2387,
        300,
        17577,
        50704
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05474996005787569,
      "compression_ratio": 2.0552486187845305,
      "no_speech_prob": 0.012594996951520443,
      "confidence": 0.9874050030484796
    },
    {
      "id": 67,
      "start": 391.44,
      "end": 396.96,
      "text": "function just like a string so if we remember back to our string methods remember that we can",
      "tokens": [
        50704,
        2445,
        445,
        411,
        257,
        6798,
        370,
        498,
        321,
        1604,
        646,
        281,
        527,
        6798,
        7150,
        1604,
        300,
        321,
        393,
        50980
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05474996005787569,
      "compression_ratio": 2.0552486187845305,
      "no_speech_prob": 0.012594996951520443,
      "confidence": 0.9874050030484796
    },
    {
      "id": 68,
      "start": 396.96,
      "end": 404.0,
      "text": "uppercase a string with dot upper so really we can take this executed function and just chain",
      "tokens": [
        50980,
        11775,
        2869,
        651,
        257,
        6798,
        365,
        5893,
        6597,
        370,
        534,
        321,
        393,
        747,
        341,
        17577,
        2445,
        293,
        445,
        5021,
        51332
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05474996005787569,
      "compression_ratio": 2.0552486187845305,
      "no_speech_prob": 0.012594996951520443,
      "confidence": 0.9874050030484796
    },
    {
      "id": 69,
      "start": 404.0,
      "end": 410.4,
      "text": "dot upper on to the end of it so now if we run this now we can see that our executed function",
      "tokens": [
        51332,
        5893,
        6597,
        322,
        281,
        264,
        917,
        295,
        309,
        370,
        586,
        498,
        321,
        1190,
        341,
        586,
        321,
        393,
        536,
        300,
        527,
        17577,
        2445,
        51652
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05474996005787569,
      "compression_ratio": 2.0552486187845305,
      "no_speech_prob": 0.012594996951520443,
      "confidence": 0.9874050030484796
    },
    {
      "id": 70,
      "start": 410.4,
      "end": 416.0,
      "text": "returned the string hello function and then we were able to use the string method upper",
      "tokens": [
        50364,
        8752,
        264,
        6798,
        7751,
        2445,
        293,
        550,
        321,
        645,
        1075,
        281,
        764,
        264,
        6798,
        3170,
        6597,
        50644
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03744360243920052,
      "compression_ratio": 1.9824561403508771,
      "no_speech_prob": 0.025017308071255684,
      "confidence": 0.9749826919287443
    },
    {
      "id": 71,
      "start": 416.0,
      "end": 422.56,
      "text": "on that returned value to uppercase the string okay so now let's look at how we can pass",
      "tokens": [
        50644,
        322,
        300,
        8752,
        2158,
        281,
        11775,
        2869,
        651,
        264,
        6798,
        1392,
        370,
        586,
        718,
        311,
        574,
        412,
        577,
        321,
        393,
        1320,
        50972
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03744360243920052,
      "compression_ratio": 1.9824561403508771,
      "no_speech_prob": 0.025017308071255684,
      "confidence": 0.9749826919287443
    },
    {
      "id": 72,
      "start": 422.56,
      "end": 428.79999999999995,
      "text": "arguments to our function and real quick I'm going to remove that dot upper method so to be",
      "tokens": [
        50972,
        12869,
        281,
        527,
        2445,
        293,
        957,
        1702,
        286,
        478,
        516,
        281,
        4159,
        300,
        5893,
        6597,
        3170,
        370,
        281,
        312,
        51284
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03744360243920052,
      "compression_ratio": 1.9824561403508771,
      "no_speech_prob": 0.025017308071255684,
      "confidence": 0.9749826919287443
    },
    {
      "id": 73,
      "start": 428.79999999999995,
      "end": 433.76,
      "text": "able to pass arguments to our function we'll need to create some parameters here within our",
      "tokens": [
        51284,
        1075,
        281,
        1320,
        12869,
        281,
        527,
        2445,
        321,
        603,
        643,
        281,
        1884,
        512,
        9834,
        510,
        1951,
        527,
        51532
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03744360243920052,
      "compression_ratio": 1.9824561403508771,
      "no_speech_prob": 0.025017308071255684,
      "confidence": 0.9749826919287443
    },
    {
      "id": 74,
      "start": 433.76,
      "end": 439.52,
      "text": "parentheses so let's say that we wanted to customize the greeting that our function returns",
      "tokens": [
        51532,
        34153,
        370,
        718,
        311,
        584,
        300,
        321,
        1415,
        281,
        19734,
        264,
        28174,
        300,
        527,
        2445,
        11247,
        51820
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03744360243920052,
      "compression_ratio": 1.9824561403508771,
      "no_speech_prob": 0.025017308071255684,
      "confidence": 0.9749826919287443
    },
    {
      "id": 75,
      "start": 439.52,
      "end": 446.64,
      "text": "so let's create a parameter called greeting and now within our function we'll return a string",
      "tokens": [
        50364,
        370,
        718,
        311,
        1884,
        257,
        13075,
        1219,
        28174,
        293,
        586,
        1951,
        527,
        2445,
        321,
        603,
        2736,
        257,
        6798,
        50720
      ],
      "temperature": 0.0,
      "avg_logprob": -0.036223695519265166,
      "compression_ratio": 1.7677725118483412,
      "no_speech_prob": 0.0001917242188937962,
      "confidence": 0.9998082757811062
    },
    {
      "id": 76,
      "start": 446.64,
      "end": 453.91999999999996,
      "text": "where we use that greeting instead of our hello text that we had before so now I'll just pass",
      "tokens": [
        50720,
        689,
        321,
        764,
        300,
        28174,
        2602,
        295,
        527,
        7751,
        2487,
        300,
        321,
        632,
        949,
        370,
        586,
        286,
        603,
        445,
        1320,
        51084
      ],
      "temperature": 0.0,
      "avg_logprob": -0.036223695519265166,
      "compression_ratio": 1.7677725118483412,
      "no_speech_prob": 0.0001917242188937962,
      "confidence": 0.9998082757811062
    },
    {
      "id": 77,
      "start": 453.91999999999996,
      "end": 460.56,
      "text": "this in with a dot format so now before we run this we have to pass in that greeting argument",
      "tokens": [
        51084,
        341,
        294,
        365,
        257,
        5893,
        7877,
        370,
        586,
        949,
        321,
        1190,
        341,
        321,
        362,
        281,
        1320,
        294,
        300,
        28174,
        6770,
        51416
      ],
      "temperature": 0.0,
      "avg_logprob": -0.036223695519265166,
      "compression_ratio": 1.7677725118483412,
      "no_speech_prob": 0.0001917242188937962,
      "confidence": 0.9998082757811062
    },
    {
      "id": 78,
      "start": 460.56,
      "end": 465.68,
      "text": "when we execute our function if we don't then we'll get an error so actually let's go ahead",
      "tokens": [
        51416,
        562,
        321,
        14483,
        527,
        2445,
        498,
        321,
        500,
        380,
        550,
        321,
        603,
        483,
        364,
        6713,
        370,
        767,
        718,
        311,
        352,
        2286,
        51672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.036223695519265166,
      "compression_ratio": 1.7677725118483412,
      "no_speech_prob": 0.0001917242188937962,
      "confidence": 0.9998082757811062
    },
    {
      "id": 79,
      "start": 465.68,
      "end": 472.16,
      "text": "and run this and see this error so we can see that when we ran that it says that hello func",
      "tokens": [
        50364,
        293,
        1190,
        341,
        293,
        536,
        341,
        6713,
        370,
        321,
        393,
        536,
        300,
        562,
        321,
        5872,
        300,
        309,
        1619,
        300,
        7751,
        1019,
        66,
        50688
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05567088178409043,
      "compression_ratio": 1.958762886597938,
      "no_speech_prob": 0.34223228693008423,
      "confidence": 0.6577677130699158
    },
    {
      "id": 80,
      "start": 472.16,
      "end": 478.32,
      "text": "is missing one required positional argument greeting so let's pass in that greeting argument",
      "tokens": [
        50688,
        307,
        5361,
        472,
        4739,
        2535,
        304,
        6770,
        28174,
        370,
        718,
        311,
        1320,
        294,
        300,
        28174,
        6770,
        50996
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05567088178409043,
      "compression_ratio": 1.958762886597938,
      "no_speech_prob": 0.34223228693008423,
      "confidence": 0.6577677130699158
    },
    {
      "id": 81,
      "start": 478.32,
      "end": 484.72,
      "text": "to our hello function and to do that we can just pass it in directly here when we call our function",
      "tokens": [
        50996,
        281,
        527,
        7751,
        2445,
        293,
        281,
        360,
        300,
        321,
        393,
        445,
        1320,
        309,
        294,
        3838,
        510,
        562,
        321,
        818,
        527,
        2445,
        51316
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05567088178409043,
      "compression_ratio": 1.958762886597938,
      "no_speech_prob": 0.34223228693008423,
      "confidence": 0.6577677130699158
    },
    {
      "id": 82,
      "start": 484.72,
      "end": 491.2,
      "text": "so I'm just going to pass in high as our string so now if we run this then we can see that when",
      "tokens": [
        51316,
        370,
        286,
        478,
        445,
        516,
        281,
        1320,
        294,
        1090,
        382,
        527,
        6798,
        370,
        586,
        498,
        321,
        1190,
        341,
        550,
        321,
        393,
        536,
        300,
        562,
        51640
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05567088178409043,
      "compression_ratio": 1.958762886597938,
      "no_speech_prob": 0.34223228693008423,
      "confidence": 0.6577677130699158
    },
    {
      "id": 83,
      "start": 491.2,
      "end": 498.0,
      "text": "we passed in that string high into our function that it set that greeting variable equal to the",
      "tokens": [
        50364,
        321,
        4678,
        294,
        300,
        6798,
        1090,
        666,
        527,
        2445,
        300,
        309,
        992,
        300,
        28174,
        7006,
        2681,
        281,
        264,
        50704
      ],
      "temperature": 0.0,
      "avg_logprob": -0.028077616749039615,
      "compression_ratio": 1.9591836734693877,
      "no_speech_prob": 0.08833174407482147,
      "confidence": 0.9116682559251785
    },
    {
      "id": 84,
      "start": 498.0,
      "end": 504.48,
      "text": "string high and then returned the string high function now this greeting variable doesn't",
      "tokens": [
        50704,
        6798,
        1090,
        293,
        550,
        8752,
        264,
        6798,
        1090,
        2445,
        586,
        341,
        28174,
        7006,
        1177,
        380,
        51028
      ],
      "temperature": 0.0,
      "avg_logprob": -0.028077616749039615,
      "compression_ratio": 1.9591836734693877,
      "no_speech_prob": 0.08833174407482147,
      "confidence": 0.9116682559251785
    },
    {
      "id": 85,
      "start": 504.48,
      "end": 510.64,
      "text": "affect any variables outside of the function its scope is only local to the function which is nice",
      "tokens": [
        51028,
        3345,
        604,
        9102,
        2380,
        295,
        264,
        2445,
        1080,
        11923,
        307,
        787,
        2654,
        281,
        264,
        2445,
        597,
        307,
        1481,
        51336
      ],
      "temperature": 0.0,
      "avg_logprob": -0.028077616749039615,
      "compression_ratio": 1.9591836734693877,
      "no_speech_prob": 0.08833174407482147,
      "confidence": 0.9116682559251785
    },
    {
      "id": 86,
      "start": 510.64,
      "end": 516.88,
      "text": "because we don't have to worry about it affecting anything we don't want it to affect so and if you",
      "tokens": [
        51336,
        570,
        321,
        500,
        380,
        362,
        281,
        3292,
        466,
        309,
        17476,
        1340,
        321,
        500,
        380,
        528,
        309,
        281,
        3345,
        370,
        293,
        498,
        291,
        51648
      ],
      "temperature": 0.0,
      "avg_logprob": -0.028077616749039615,
      "compression_ratio": 1.9591836734693877,
      "no_speech_prob": 0.08833174407482147,
      "confidence": 0.9116682559251785
    },
    {
      "id": 87,
      "start": 516.88,
      "end": 522.56,
      "text": "want to learn more about python scope then I do have a detailed video going in depth as to how",
      "tokens": [
        50364,
        528,
        281,
        1466,
        544,
        466,
        38797,
        11923,
        550,
        286,
        360,
        362,
        257,
        9942,
        960,
        516,
        294,
        7161,
        382,
        281,
        577,
        50648
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03087679974667661,
      "compression_ratio": 1.7835820895522387,
      "no_speech_prob": 0.19512805342674255,
      "confidence": 0.8048719465732574
    },
    {
      "id": 88,
      "start": 522.56,
      "end": 527.52,
      "text": "that works exactly and I'll leave a link to that video in the description section below okay so",
      "tokens": [
        50648,
        300,
        1985,
        2293,
        293,
        286,
        603,
        1856,
        257,
        2113,
        281,
        300,
        960,
        294,
        264,
        3855,
        3541,
        2507,
        1392,
        370,
        50896
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03087679974667661,
      "compression_ratio": 1.7835820895522387,
      "no_speech_prob": 0.19512805342674255,
      "confidence": 0.8048719465732574
    },
    {
      "id": 89,
      "start": 527.52,
      "end": 533.12,
      "text": "right now this greeting parameter is a required argument and that is because it doesn't have a",
      "tokens": [
        50896,
        558,
        586,
        341,
        28174,
        13075,
        307,
        257,
        4739,
        6770,
        293,
        300,
        307,
        570,
        309,
        1177,
        380,
        362,
        257,
        51176
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03087679974667661,
      "compression_ratio": 1.7835820895522387,
      "no_speech_prob": 0.19512805342674255,
      "confidence": 0.8048719465732574
    },
    {
      "id": 90,
      "start": 533.12,
      "end": 538.8,
      "text": "default value now if we had a default value then it would just fall back to the default value",
      "tokens": [
        51176,
        7576,
        2158,
        586,
        498,
        321,
        632,
        257,
        7576,
        2158,
        550,
        309,
        576,
        445,
        2100,
        646,
        281,
        264,
        7576,
        2158,
        51460
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03087679974667661,
      "compression_ratio": 1.7835820895522387,
      "no_speech_prob": 0.19512805342674255,
      "confidence": 0.8048719465732574
    },
    {
      "id": 91,
      "start": 538.8,
      "end": 545.36,
      "text": "whenever we didn't pass that argument in so let's see an example of this so let's say that we also",
      "tokens": [
        51460,
        5699,
        321,
        994,
        380,
        1320,
        300,
        6770,
        294,
        370,
        718,
        311,
        536,
        364,
        1365,
        295,
        341,
        370,
        718,
        311,
        584,
        300,
        321,
        611,
        51788
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03087679974667661,
      "compression_ratio": 1.7835820895522387,
      "no_speech_prob": 0.19512805342674255,
      "confidence": 0.8048719465732574
    },
    {
      "id": 92,
      "start": 545.36,
      "end": 550.8000000000001,
      "text": "want to be able to pass a name to our hello function and it will return a greeting and the",
      "tokens": [
        50364,
        528,
        281,
        312,
        1075,
        281,
        1320,
        257,
        1315,
        281,
        527,
        7751,
        2445,
        293,
        309,
        486,
        2736,
        257,
        28174,
        293,
        264,
        50636
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03290792057911555,
      "compression_ratio": 1.8805970149253732,
      "no_speech_prob": 0.036332063376903534,
      "confidence": 0.9636679366230965
    },
    {
      "id": 93,
      "start": 550.8000000000001,
      "end": 557.76,
      "text": "name so we can add that to our parameters by putting in a comma here and saying that we also",
      "tokens": [
        50636,
        1315,
        370,
        321,
        393,
        909,
        300,
        281,
        527,
        9834,
        538,
        3372,
        294,
        257,
        22117,
        510,
        293,
        1566,
        300,
        321,
        611,
        50984
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03290792057911555,
      "compression_ratio": 1.8805970149253732,
      "no_speech_prob": 0.036332063376903534,
      "confidence": 0.9636679366230965
    },
    {
      "id": 94,
      "start": 557.76,
      "end": 564.32,
      "text": "want to accept this name parameter but let's say that if no name is passed in then we want to have",
      "tokens": [
        50984,
        528,
        281,
        3241,
        341,
        1315,
        13075,
        457,
        718,
        311,
        584,
        300,
        498,
        572,
        1315,
        307,
        4678,
        294,
        550,
        321,
        528,
        281,
        362,
        51312
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03290792057911555,
      "compression_ratio": 1.8805970149253732,
      "no_speech_prob": 0.036332063376903534,
      "confidence": 0.9636679366230965
    },
    {
      "id": 95,
      "start": 564.32,
      "end": 572.8000000000001,
      "text": "a default value of u so we can just say name is equal to u and now let's add that to our return",
      "tokens": [
        51312,
        257,
        7576,
        2158,
        295,
        344,
        370,
        321,
        393,
        445,
        584,
        1315,
        307,
        2681,
        281,
        344,
        293,
        586,
        718,
        311,
        909,
        300,
        281,
        527,
        2736,
        51736
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03290792057911555,
      "compression_ratio": 1.8805970149253732,
      "no_speech_prob": 0.036332063376903534,
      "confidence": 0.9636679366230965
    },
    {
      "id": 96,
      "start": 572.8,
      "end": 579.5999999999999,
      "text": "string so I'll put in a comma space and then another placeholder and we'll pass in that",
      "tokens": [
        50364,
        6798,
        370,
        286,
        603,
        829,
        294,
        257,
        22117,
        1901,
        293,
        550,
        1071,
        1081,
        20480,
        293,
        321,
        603,
        1320,
        294,
        300,
        50704
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04778400380560692,
      "compression_ratio": 1.7934272300469483,
      "no_speech_prob": 0.12480124831199646,
      "confidence": 0.8751987516880035
    },
    {
      "id": 97,
      "start": 579.5999999999999,
      "end": 585.4399999999999,
      "text": "name so what this is going to do is it will return a greeting and a name separated by a comma and a",
      "tokens": [
        50704,
        1315,
        370,
        437,
        341,
        307,
        516,
        281,
        360,
        307,
        309,
        486,
        2736,
        257,
        28174,
        293,
        257,
        1315,
        12005,
        538,
        257,
        22117,
        293,
        257,
        50996
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04778400380560692,
      "compression_ratio": 1.7934272300469483,
      "no_speech_prob": 0.12480124831199646,
      "confidence": 0.8751987516880035
    },
    {
      "id": 98,
      "start": 585.4399999999999,
      "end": 592.0,
      "text": "space so if we run this then we can see that even though we didn't pass in a value for the name",
      "tokens": [
        50996,
        1901,
        370,
        498,
        321,
        1190,
        341,
        550,
        321,
        393,
        536,
        300,
        754,
        1673,
        321,
        994,
        380,
        1320,
        294,
        257,
        2158,
        337,
        264,
        1315,
        51324
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04778400380560692,
      "compression_ratio": 1.7934272300469483,
      "no_speech_prob": 0.12480124831199646,
      "confidence": 0.8751987516880035
    },
    {
      "id": 99,
      "start": 592.0,
      "end": 597.92,
      "text": "argument when we executed this function it didn't throw an error and instead use the default value",
      "tokens": [
        51324,
        6770,
        562,
        321,
        17577,
        341,
        2445,
        309,
        994,
        380,
        3507,
        364,
        6713,
        293,
        2602,
        764,
        264,
        7576,
        2158,
        51620
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04778400380560692,
      "compression_ratio": 1.7934272300469483,
      "no_speech_prob": 0.12480124831199646,
      "confidence": 0.8751987516880035
    },
    {
      "id": 100,
      "start": 597.92,
      "end": 605.04,
      "text": "that we specified as u but if we want to pass in a value then it will use that value instead so when",
      "tokens": [
        50364,
        300,
        321,
        22206,
        382,
        344,
        457,
        498,
        321,
        528,
        281,
        1320,
        294,
        257,
        2158,
        550,
        309,
        486,
        764,
        300,
        2158,
        2602,
        370,
        562,
        50720
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08180314561595088,
      "compression_ratio": 1.7522935779816513,
      "no_speech_prob": 0.32454293966293335,
      "confidence": 0.6754570603370667
    },
    {
      "id": 101,
      "start": 605.04,
      "end": 612.4799999999999,
      "text": "we execute this function if I was to say name is equal to and we'll say corey and run that then now",
      "tokens": [
        50720,
        321,
        14483,
        341,
        2445,
        498,
        286,
        390,
        281,
        584,
        1315,
        307,
        2681,
        281,
        293,
        321,
        603,
        584,
        4965,
        88,
        293,
        1190,
        300,
        550,
        586,
        51092
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08180314561595088,
      "compression_ratio": 1.7522935779816513,
      "no_speech_prob": 0.32454293966293335,
      "confidence": 0.6754570603370667
    },
    {
      "id": 102,
      "start": 612.4799999999999,
      "end": 618.0799999999999,
      "text": "we can see that printed out the greeting with the name that we passed in now your required",
      "tokens": [
        51092,
        321,
        393,
        536,
        300,
        13567,
        484,
        264,
        28174,
        365,
        264,
        1315,
        300,
        321,
        4678,
        294,
        586,
        428,
        4739,
        51372
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08180314561595088,
      "compression_ratio": 1.7522935779816513,
      "no_speech_prob": 0.32454293966293335,
      "confidence": 0.6754570603370667
    },
    {
      "id": 103,
      "start": 618.0799999999999,
      "end": 624.0799999999999,
      "text": "positional arguments have to come before your keyword arguments now if you try to create a",
      "tokens": [
        51372,
        2535,
        304,
        12869,
        362,
        281,
        808,
        949,
        428,
        20428,
        12869,
        586,
        498,
        291,
        853,
        281,
        1884,
        257,
        51672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.08180314561595088,
      "compression_ratio": 1.7522935779816513,
      "no_speech_prob": 0.32454293966293335,
      "confidence": 0.6754570603370667
    },
    {
      "id": 104,
      "start": 624.08,
      "end": 628.64,
      "text": "function with those out of order then it's going to give you an error now this is a little more",
      "tokens": [
        50364,
        2445,
        365,
        729,
        484,
        295,
        1668,
        550,
        309,
        311,
        516,
        281,
        976,
        291,
        364,
        6713,
        586,
        341,
        307,
        257,
        707,
        544,
        50592
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04019886255264282,
      "compression_ratio": 1.6812227074235808,
      "no_speech_prob": 0.26485133171081543,
      "confidence": 0.7351486682891846
    },
    {
      "id": 105,
      "start": 628.64,
      "end": 633.9200000000001,
      "text": "advanced topic that tripped a lot of people up but at some point you'll probably run across a",
      "tokens": [
        50592,
        7339,
        4829,
        300,
        1376,
        3320,
        257,
        688,
        295,
        561,
        493,
        457,
        412,
        512,
        935,
        291,
        603,
        1391,
        1190,
        2108,
        257,
        50856
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04019886255264282,
      "compression_ratio": 1.6812227074235808,
      "no_speech_prob": 0.26485133171081543,
      "confidence": 0.7351486682891846
    },
    {
      "id": 106,
      "start": 633.9200000000001,
      "end": 642.0,
      "text": "function in python that looks something like this so I'll say def student info and you might see",
      "tokens": [
        50856,
        2445,
        294,
        38797,
        300,
        1542,
        746,
        411,
        341,
        370,
        286,
        603,
        584,
        1060,
        3107,
        13614,
        293,
        291,
        1062,
        536,
        51260
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04019886255264282,
      "compression_ratio": 1.6812227074235808,
      "no_speech_prob": 0.26485133171081543,
      "confidence": 0.7351486682891846
    },
    {
      "id": 107,
      "start": 642.0,
      "end": 650.08,
      "text": "something where you see this star args and star star quarks and so let me just go ahead and within",
      "tokens": [
        51260,
        746,
        689,
        291,
        536,
        341,
        3543,
        3882,
        82,
        293,
        3543,
        3543,
        421,
        20851,
        293,
        370,
        718,
        385,
        445,
        352,
        2286,
        293,
        1951,
        51664
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04019886255264282,
      "compression_ratio": 1.6812227074235808,
      "no_speech_prob": 0.26485133171081543,
      "confidence": 0.7351486682891846
    },
    {
      "id": 108,
      "start": 650.1600000000001,
      "end": 657.6800000000001,
      "text": "this new function here I will print out args and I'll also print out quarks so let's not really",
      "tokens": [
        50368,
        341,
        777,
        2445,
        510,
        286,
        486,
        4482,
        484,
        3882,
        82,
        293,
        286,
        603,
        611,
        4482,
        484,
        421,
        20851,
        370,
        718,
        311,
        406,
        534,
        50744
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0377525376236957,
      "compression_ratio": 1.742081447963801,
      "no_speech_prob": 0.358419805765152,
      "confidence": 0.641580194234848
    },
    {
      "id": 109,
      "start": 657.6800000000001,
      "end": 663.0400000000001,
      "text": "worry about this function name for now it's the arguments that I want to focus on so seeing this",
      "tokens": [
        50744,
        3292,
        466,
        341,
        2445,
        1315,
        337,
        586,
        309,
        311,
        264,
        12869,
        300,
        286,
        528,
        281,
        1879,
        322,
        370,
        2577,
        341,
        51012
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0377525376236957,
      "compression_ratio": 1.742081447963801,
      "no_speech_prob": 0.358419805765152,
      "confidence": 0.641580194234848
    },
    {
      "id": 110,
      "start": 663.0400000000001,
      "end": 670.1600000000001,
      "text": "star args and star star quarks can seem confusing at first but basically all it's doing is allowing",
      "tokens": [
        51012,
        3543,
        3882,
        82,
        293,
        3543,
        3543,
        421,
        20851,
        393,
        1643,
        13181,
        412,
        700,
        457,
        1936,
        439,
        309,
        311,
        884,
        307,
        8293,
        51368
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0377525376236957,
      "compression_ratio": 1.742081447963801,
      "no_speech_prob": 0.358419805765152,
      "confidence": 0.641580194234848
    },
    {
      "id": 111,
      "start": 670.1600000000001,
      "end": 676.72,
      "text": "us to accept an arbitrary number of positional or keyword arguments so for example let's say",
      "tokens": [
        51368,
        505,
        281,
        3241,
        364,
        23211,
        1230,
        295,
        2535,
        304,
        420,
        20428,
        12869,
        370,
        337,
        1365,
        718,
        311,
        584,
        51696
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0377525376236957,
      "compression_ratio": 1.742081447963801,
      "no_speech_prob": 0.358419805765152,
      "confidence": 0.641580194234848
    },
    {
      "id": 112,
      "start": 676.72,
      "end": 682.48,
      "text": "that this student info function takes positional arguments that represent the classes that the",
      "tokens": [
        50364,
        300,
        341,
        3107,
        13614,
        2445,
        2516,
        2535,
        304,
        12869,
        300,
        2906,
        264,
        5359,
        300,
        264,
        50652
      ],
      "temperature": 0.0,
      "avg_logprob": -0.034653252025820175,
      "compression_ratio": 1.9205020920502092,
      "no_speech_prob": 0.09625077247619629,
      "confidence": 0.9037492275238037
    },
    {
      "id": 113,
      "start": 682.48,
      "end": 688.24,
      "text": "student is taking plus the keyword arguments passed in will be random information about",
      "tokens": [
        50652,
        3107,
        307,
        1940,
        1804,
        264,
        20428,
        12869,
        4678,
        294,
        486,
        312,
        4974,
        1589,
        466,
        50940
      ],
      "temperature": 0.0,
      "avg_logprob": -0.034653252025820175,
      "compression_ratio": 1.9205020920502092,
      "no_speech_prob": 0.09625077247619629,
      "confidence": 0.9037492275238037
    },
    {
      "id": 114,
      "start": 688.24,
      "end": 693.28,
      "text": "the student so you can see in both of those examples we don't know how many of these",
      "tokens": [
        50940,
        264,
        3107,
        370,
        291,
        393,
        536,
        294,
        1293,
        295,
        729,
        5110,
        321,
        500,
        380,
        458,
        577,
        867,
        295,
        613,
        51192
      ],
      "temperature": 0.0,
      "avg_logprob": -0.034653252025820175,
      "compression_ratio": 1.9205020920502092,
      "no_speech_prob": 0.09625077247619629,
      "confidence": 0.9037492275238037
    },
    {
      "id": 115,
      "start": 693.28,
      "end": 700.0,
      "text": "positional or keyword arguments there will be and that's why we use star args and star star quarks",
      "tokens": [
        51192,
        2535,
        304,
        420,
        20428,
        12869,
        456,
        486,
        312,
        293,
        300,
        311,
        983,
        321,
        764,
        3543,
        3882,
        82,
        293,
        3543,
        3543,
        421,
        20851,
        51528
      ],
      "temperature": 0.0,
      "avg_logprob": -0.034653252025820175,
      "compression_ratio": 1.9205020920502092,
      "no_speech_prob": 0.09625077247619629,
      "confidence": 0.9037492275238037
    },
    {
      "id": 116,
      "start": 700.0,
      "end": 705.6800000000001,
      "text": "and the names don't have to be args and quarks but that's a convention that you'll see a lot",
      "tokens": [
        51528,
        293,
        264,
        5288,
        500,
        380,
        362,
        281,
        312,
        3882,
        82,
        293,
        421,
        20851,
        457,
        300,
        311,
        257,
        10286,
        300,
        291,
        603,
        536,
        257,
        688,
        51812
      ],
      "temperature": 0.0,
      "avg_logprob": -0.034653252025820175,
      "compression_ratio": 1.9205020920502092,
      "no_speech_prob": 0.09625077247619629,
      "confidence": 0.9037492275238037
    },
    {
      "id": 117,
      "start": 705.68,
      "end": 710.2399999999999,
      "text": "so it's always good to stick with convention so that people can understand your code",
      "tokens": [
        50364,
        370,
        309,
        311,
        1009,
        665,
        281,
        2897,
        365,
        10286,
        370,
        300,
        561,
        393,
        1223,
        428,
        3089,
        50592
      ],
      "temperature": 0.0,
      "avg_logprob": -0.047685791464412916,
      "compression_ratio": 1.7201834862385321,
      "no_speech_prob": 0.00029124642605893314,
      "confidence": 0.9997087535739411
    },
    {
      "id": 118,
      "start": 710.2399999999999,
      "end": 716.88,
      "text": "so let's call this function with some random values so I'm going to say student info and first",
      "tokens": [
        50592,
        370,
        718,
        311,
        818,
        341,
        2445,
        365,
        512,
        4974,
        4190,
        370,
        286,
        478,
        516,
        281,
        584,
        3107,
        13614,
        293,
        700,
        50924
      ],
      "temperature": 0.0,
      "avg_logprob": -0.047685791464412916,
      "compression_ratio": 1.7201834862385321,
      "no_speech_prob": 0.00029124642605893314,
      "confidence": 0.9997087535739411
    },
    {
      "id": 119,
      "start": 716.88,
      "end": 722.4,
      "text": "we want to pass in some positional arguments of the classes that they're taking so we'll say math",
      "tokens": [
        50924,
        321,
        528,
        281,
        1320,
        294,
        512,
        2535,
        304,
        12869,
        295,
        264,
        5359,
        300,
        436,
        434,
        1940,
        370,
        321,
        603,
        584,
        5221,
        51200
      ],
      "temperature": 0.0,
      "avg_logprob": -0.047685791464412916,
      "compression_ratio": 1.7201834862385321,
      "no_speech_prob": 0.00029124642605893314,
      "confidence": 0.9997087535739411
    },
    {
      "id": 120,
      "start": 722.4,
      "end": 728.64,
      "text": "and art and now for our keyword arguments we'll pass in some random information about the student",
      "tokens": [
        51200,
        293,
        1523,
        293,
        586,
        337,
        527,
        20428,
        12869,
        321,
        603,
        1320,
        294,
        512,
        4974,
        1589,
        466,
        264,
        3107,
        51512
      ],
      "temperature": 0.0,
      "avg_logprob": -0.047685791464412916,
      "compression_ratio": 1.7201834862385321,
      "no_speech_prob": 0.00029124642605893314,
      "confidence": 0.9997087535739411
    },
    {
      "id": 121,
      "start": 728.64,
      "end": 737.12,
      "text": "so we'll say name is equal to john and age is equal to 22 so now if we run this then we can see",
      "tokens": [
        50364,
        370,
        321,
        603,
        584,
        1315,
        307,
        2681,
        281,
        35097,
        293,
        3205,
        307,
        2681,
        281,
        5853,
        370,
        586,
        498,
        321,
        1190,
        341,
        550,
        321,
        393,
        536,
        50788
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03413518692584748,
      "compression_ratio": 1.7710280373831775,
      "no_speech_prob": 0.37756890058517456,
      "confidence": 0.6224310994148254
    },
    {
      "id": 122,
      "start": 737.12,
      "end": 743.92,
      "text": "that when we printed the args it's actually a tuple with all of our positional arguments",
      "tokens": [
        50788,
        300,
        562,
        321,
        13567,
        264,
        3882,
        82,
        309,
        311,
        767,
        257,
        2604,
        781,
        365,
        439,
        295,
        527,
        2535,
        304,
        12869,
        51128
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03413518692584748,
      "compression_ratio": 1.7710280373831775,
      "no_speech_prob": 0.37756890058517456,
      "confidence": 0.6224310994148254
    },
    {
      "id": 123,
      "start": 743.92,
      "end": 751.4399999999999,
      "text": "and our quarks are a dictionary with all of our keyword values so once you have that tuple and",
      "tokens": [
        51128,
        293,
        527,
        421,
        20851,
        366,
        257,
        25890,
        365,
        439,
        295,
        527,
        20428,
        4190,
        370,
        1564,
        291,
        362,
        300,
        2604,
        781,
        293,
        51504
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03413518692584748,
      "compression_ratio": 1.7710280373831775,
      "no_speech_prob": 0.37756890058517456,
      "confidence": 0.6224310994148254
    },
    {
      "id": 124,
      "start": 751.4399999999999,
      "end": 756.0,
      "text": "that dictionary then you'll be able to do whatever you want with that information now sometimes you",
      "tokens": [
        51504,
        300,
        25890,
        550,
        291,
        603,
        312,
        1075,
        281,
        360,
        2035,
        291,
        528,
        365,
        300,
        1589,
        586,
        2171,
        291,
        51732
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03413518692584748,
      "compression_ratio": 1.7710280373831775,
      "no_speech_prob": 0.37756890058517456,
      "confidence": 0.6224310994148254
    },
    {
      "id": 125,
      "start": 756.0,
      "end": 762.16,
      "text": "might see a function call with arguments using the star or double star now when it's used in",
      "tokens": [
        50364,
        1062,
        536,
        257,
        2445,
        818,
        365,
        12869,
        1228,
        264,
        3543,
        420,
        3834,
        3543,
        586,
        562,
        309,
        311,
        1143,
        294,
        50672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0222418044888696,
      "compression_ratio": 1.7066666666666668,
      "no_speech_prob": 0.05140417069196701,
      "confidence": 0.948595829308033
    },
    {
      "id": 126,
      "start": 762.16,
      "end": 768.8,
      "text": "that context it will actually unpack a sequence or dictionary and pass those values into the",
      "tokens": [
        50672,
        300,
        4319,
        309,
        486,
        767,
        26699,
        257,
        8310,
        420,
        25890,
        293,
        1320,
        729,
        4190,
        666,
        264,
        51004
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0222418044888696,
      "compression_ratio": 1.7066666666666668,
      "no_speech_prob": 0.05140417069196701,
      "confidence": 0.948595829308033
    },
    {
      "id": 127,
      "start": 768.8,
      "end": 774.48,
      "text": "function individually so to see what I mean let's make a list in a dictionary of everything that",
      "tokens": [
        51004,
        2445,
        16652,
        370,
        281,
        536,
        437,
        286,
        914,
        718,
        311,
        652,
        257,
        1329,
        294,
        257,
        25890,
        295,
        1203,
        300,
        51288
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0222418044888696,
      "compression_ratio": 1.7066666666666668,
      "no_speech_prob": 0.05140417069196701,
      "confidence": 0.948595829308033
    },
    {
      "id": 128,
      "start": 774.48,
      "end": 779.2,
      "text": "we just passed into our function and just to clear up some room here I'm going to go ahead and delete",
      "tokens": [
        51288,
        321,
        445,
        4678,
        666,
        527,
        2445,
        293,
        445,
        281,
        1850,
        493,
        512,
        1808,
        510,
        286,
        478,
        516,
        281,
        352,
        2286,
        293,
        12097,
        51524
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0222418044888696,
      "compression_ratio": 1.7066666666666668,
      "no_speech_prob": 0.05140417069196701,
      "confidence": 0.948595829308033
    },
    {
      "id": 129,
      "start": 779.2,
      "end": 786.08,
      "text": "the hello function that we started off with so now I'm going to create a list called courses",
      "tokens": [
        50364,
        264,
        7751,
        2445,
        300,
        321,
        1409,
        766,
        365,
        370,
        586,
        286,
        478,
        516,
        281,
        1884,
        257,
        1329,
        1219,
        7712,
        50708
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03658344668726767,
      "compression_ratio": 1.8686868686868687,
      "no_speech_prob": 0.5032730102539062,
      "confidence": 0.49672698974609375
    },
    {
      "id": 130,
      "start": 786.08,
      "end": 791.44,
      "text": "and I'm going to set this equal to math and art that we passed in before and instead of a tuple",
      "tokens": [
        50708,
        293,
        286,
        478,
        516,
        281,
        992,
        341,
        2681,
        281,
        5221,
        293,
        1523,
        300,
        321,
        4678,
        294,
        949,
        293,
        2602,
        295,
        257,
        2604,
        781,
        50976
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03658344668726767,
      "compression_ratio": 1.8686868686868687,
      "no_speech_prob": 0.5032730102539062,
      "confidence": 0.49672698974609375
    },
    {
      "id": 131,
      "start": 791.44,
      "end": 797.6,
      "text": "I'm going to make that a list so now for the student info I'm going to create a dictionary",
      "tokens": [
        50976,
        286,
        478,
        516,
        281,
        652,
        300,
        257,
        1329,
        370,
        586,
        337,
        264,
        3107,
        13614,
        286,
        478,
        516,
        281,
        1884,
        257,
        25890,
        51284
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03658344668726767,
      "compression_ratio": 1.8686868686868687,
      "no_speech_prob": 0.5032730102539062,
      "confidence": 0.49672698974609375
    },
    {
      "id": 132,
      "start": 797.6,
      "end": 804.08,
      "text": "called info and set that equal to those values so now let me get rid of our positional and",
      "tokens": [
        51284,
        1219,
        13614,
        293,
        992,
        300,
        2681,
        281,
        729,
        4190,
        370,
        586,
        718,
        385,
        483,
        3973,
        295,
        527,
        2535,
        304,
        293,
        51608
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03658344668726767,
      "compression_ratio": 1.8686868686868687,
      "no_speech_prob": 0.5032730102539062,
      "confidence": 0.49672698974609375
    },
    {
      "id": 133,
      "start": 804.72,
      "end": 810.32,
      "text": "arguments here so let's say that we wanted to pass all of these courses in as our positional",
      "tokens": [
        50396,
        12869,
        510,
        370,
        718,
        311,
        584,
        300,
        321,
        1415,
        281,
        1320,
        439,
        295,
        613,
        7712,
        294,
        382,
        527,
        2535,
        304,
        50676
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03946374183477357,
      "compression_ratio": 1.8495145631067962,
      "no_speech_prob": 0.2885417938232422,
      "confidence": 0.7114582061767578
    },
    {
      "id": 134,
      "start": 810.32,
      "end": 817.6,
      "text": "arguments and the info dictionary as our keyword arguments so if we just pass these in as is and",
      "tokens": [
        50676,
        12869,
        293,
        264,
        13614,
        25890,
        382,
        527,
        20428,
        12869,
        370,
        498,
        321,
        445,
        1320,
        613,
        294,
        382,
        307,
        293,
        51040
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03946374183477357,
      "compression_ratio": 1.8495145631067962,
      "no_speech_prob": 0.2885417938232422,
      "confidence": 0.7114582061767578
    },
    {
      "id": 135,
      "start": 817.6,
      "end": 824.96,
      "text": "I passed in courses and info now if we run this then we can see that this might not be exactly",
      "tokens": [
        51040,
        286,
        4678,
        294,
        7712,
        293,
        13614,
        586,
        498,
        321,
        1190,
        341,
        550,
        321,
        393,
        536,
        300,
        341,
        1062,
        406,
        312,
        2293,
        51408
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03946374183477357,
      "compression_ratio": 1.8495145631067962,
      "no_speech_prob": 0.2885417938232422,
      "confidence": 0.7114582061767578
    },
    {
      "id": 136,
      "start": 824.96,
      "end": 831.6,
      "text": "what we thought instead of passing the values in individually and instead passed in the complete",
      "tokens": [
        51408,
        437,
        321,
        1194,
        2602,
        295,
        8437,
        264,
        4190,
        294,
        16652,
        293,
        2602,
        4678,
        294,
        264,
        3566,
        51740
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03946374183477357,
      "compression_ratio": 1.8495145631067962,
      "no_speech_prob": 0.2885417938232422,
      "confidence": 0.7114582061767578
    },
    {
      "id": 137,
      "start": 831.6,
      "end": 838.0,
      "text": "list and the complete dictionary as positional arguments so if we use the single star in front",
      "tokens": [
        50364,
        1329,
        293,
        264,
        3566,
        25890,
        382,
        2535,
        304,
        12869,
        370,
        498,
        321,
        764,
        264,
        2167,
        3543,
        294,
        1868,
        50684
      ],
      "temperature": 0.0,
      "avg_logprob": -0.042519911597756775,
      "compression_ratio": 1.916256157635468,
      "no_speech_prob": 0.14969190955162048,
      "confidence": 0.8503080904483795
    },
    {
      "id": 138,
      "start": 838.0,
      "end": 843.6,
      "text": "of our list and the double star in front of our dictionary then it will actually unpack these",
      "tokens": [
        50684,
        295,
        527,
        1329,
        293,
        264,
        3834,
        3543,
        294,
        1868,
        295,
        527,
        25890,
        550,
        309,
        486,
        767,
        26699,
        613,
        50964
      ],
      "temperature": 0.0,
      "avg_logprob": -0.042519911597756775,
      "compression_ratio": 1.916256157635468,
      "no_speech_prob": 0.14969190955162048,
      "confidence": 0.8503080904483795
    },
    {
      "id": 139,
      "start": 843.6,
      "end": 850.5600000000001,
      "text": "values and pass them in individually so basically it will be the equivalent to our previous execution",
      "tokens": [
        50964,
        4190,
        293,
        1320,
        552,
        294,
        16652,
        370,
        1936,
        309,
        486,
        312,
        264,
        10344,
        281,
        527,
        3894,
        15058,
        51312
      ],
      "temperature": 0.0,
      "avg_logprob": -0.042519911597756775,
      "compression_ratio": 1.916256157635468,
      "no_speech_prob": 0.14969190955162048,
      "confidence": 0.8503080904483795
    },
    {
      "id": 140,
      "start": 850.5600000000001,
      "end": 856.64,
      "text": "where we pass them in individually so to see what I mean let's add a star in front of this courses",
      "tokens": [
        51312,
        689,
        321,
        1320,
        552,
        294,
        16652,
        370,
        281,
        536,
        437,
        286,
        914,
        718,
        311,
        909,
        257,
        3543,
        294,
        1868,
        295,
        341,
        7712,
        51616
      ],
      "temperature": 0.0,
      "avg_logprob": -0.042519911597756775,
      "compression_ratio": 1.916256157635468,
      "no_speech_prob": 0.14969190955162048,
      "confidence": 0.8503080904483795
    },
    {
      "id": 141,
      "start": 856.64,
      "end": 864.3199999999999,
      "text": "to unpack those values and a star star in front of our dictionary to unpack those keyword values",
      "tokens": [
        50364,
        281,
        26699,
        729,
        4190,
        293,
        257,
        3543,
        3543,
        294,
        1868,
        295,
        527,
        25890,
        281,
        26699,
        729,
        20428,
        4190,
        50748
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04542664190133413,
      "compression_ratio": 1.9371980676328502,
      "no_speech_prob": 0.22390811145305634,
      "confidence": 0.7760918885469437
    },
    {
      "id": 142,
      "start": 864.3199999999999,
      "end": 870.56,
      "text": "so now if we run this and we can see that we got what we had before we can see that when our function",
      "tokens": [
        50748,
        370,
        586,
        498,
        321,
        1190,
        341,
        293,
        321,
        393,
        536,
        300,
        321,
        658,
        437,
        321,
        632,
        949,
        321,
        393,
        536,
        300,
        562,
        527,
        2445,
        51060
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04542664190133413,
      "compression_ratio": 1.9371980676328502,
      "no_speech_prob": 0.22390811145305634,
      "confidence": 0.7760918885469437
    },
    {
      "id": 143,
      "start": 870.56,
      "end": 877.12,
      "text": "prints args it's the values from our list that we unpacked and our quarks is equal to the dictionary",
      "tokens": [
        51060,
        22305,
        3882,
        82,
        309,
        311,
        264,
        4190,
        490,
        527,
        1329,
        300,
        321,
        26699,
        292,
        293,
        527,
        421,
        20851,
        307,
        2681,
        281,
        264,
        25890,
        51388
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04542664190133413,
      "compression_ratio": 1.9371980676328502,
      "no_speech_prob": 0.22390811145305634,
      "confidence": 0.7760918885469437
    },
    {
      "id": 144,
      "start": 877.12,
      "end": 882.8,
      "text": "values that we unpacked now I know that's a little confusing especially to you know get the idea that",
      "tokens": [
        51388,
        4190,
        300,
        321,
        26699,
        292,
        586,
        286,
        458,
        300,
        311,
        257,
        707,
        13181,
        2318,
        281,
        291,
        458,
        483,
        264,
        1558,
        300,
        51672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04542664190133413,
      "compression_ratio": 1.9371980676328502,
      "no_speech_prob": 0.22390811145305634,
      "confidence": 0.7760918885469437
    },
    {
      "id": 145,
      "start": 882.8,
      "end": 888.4799999999999,
      "text": "whenever you're passing these in that it unpacks the values and within here it's for accepting an",
      "tokens": [
        50364,
        5699,
        291,
        434,
        8437,
        613,
        294,
        300,
        309,
        20994,
        7424,
        264,
        4190,
        293,
        1951,
        510,
        309,
        311,
        337,
        17391,
        364,
        50648
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03586757948639196,
      "compression_ratio": 1.7031802120141342,
      "no_speech_prob": 0.1724940687417984,
      "confidence": 0.8275059312582016
    },
    {
      "id": 146,
      "start": 888.4799999999999,
      "end": 894.9599999999999,
      "text": "arbitrary number of positional or keyword values but it's a little more advanced of a topic and I",
      "tokens": [
        50648,
        23211,
        1230,
        295,
        2535,
        304,
        420,
        20428,
        4190,
        457,
        309,
        311,
        257,
        707,
        544,
        7339,
        295,
        257,
        4829,
        293,
        286,
        50972
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03586757948639196,
      "compression_ratio": 1.7031802120141342,
      "no_speech_prob": 0.1724940687417984,
      "confidence": 0.8275059312582016
    },
    {
      "id": 147,
      "start": 894.9599999999999,
      "end": 899.12,
      "text": "know it's confusing but hopefully it makes some sense and you'll be able to better understand",
      "tokens": [
        50972,
        458,
        309,
        311,
        13181,
        457,
        4696,
        309,
        1669,
        512,
        2020,
        293,
        291,
        603,
        312,
        1075,
        281,
        1101,
        1223,
        51180
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03586757948639196,
      "compression_ratio": 1.7031802120141342,
      "no_speech_prob": 0.1724940687417984,
      "confidence": 0.8275059312582016
    },
    {
      "id": 148,
      "start": 899.12,
      "end": 904.24,
      "text": "what's going on if you ever run into something like that okay so lastly I wanted to run through",
      "tokens": [
        51180,
        437,
        311,
        516,
        322,
        498,
        291,
        1562,
        1190,
        666,
        746,
        411,
        300,
        1392,
        370,
        16386,
        286,
        1415,
        281,
        1190,
        807,
        51436
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03586757948639196,
      "compression_ratio": 1.7031802120141342,
      "no_speech_prob": 0.1724940687417984,
      "confidence": 0.8275059312582016
    },
    {
      "id": 149,
      "start": 904.24,
      "end": 909.52,
      "text": "an example that ties together everything we've learned so far in this series of videos so I have",
      "tokens": [
        51436,
        364,
        1365,
        300,
        14039,
        1214,
        1203,
        321,
        600,
        3264,
        370,
        1400,
        294,
        341,
        2638,
        295,
        2145,
        370,
        286,
        362,
        51700
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03586757948639196,
      "compression_ratio": 1.7031802120141342,
      "no_speech_prob": 0.1724940687417984,
      "confidence": 0.8275059312582016
    },
    {
      "id": 150,
      "start": 909.52,
      "end": 916.0799999999999,
      "text": "some code here in my snippets file that I'm going to grab real quick and paste into the file that",
      "tokens": [
        50364,
        512,
        3089,
        510,
        294,
        452,
        35623,
        1385,
        3991,
        300,
        286,
        478,
        516,
        281,
        4444,
        957,
        1702,
        293,
        9163,
        666,
        264,
        3991,
        300,
        50692
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02191488677208577,
      "compression_ratio": 1.702127659574468,
      "no_speech_prob": 0.36889564990997314,
      "confidence": 0.6311043500900269
    },
    {
      "id": 151,
      "start": 916.0799999999999,
      "end": 921.36,
      "text": "we've been working with so now let me lower this output a little bit so that we can see everything",
      "tokens": [
        50692,
        321,
        600,
        668,
        1364,
        365,
        370,
        586,
        718,
        385,
        3126,
        341,
        5598,
        257,
        707,
        857,
        370,
        300,
        321,
        393,
        536,
        1203,
        50956
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02191488677208577,
      "compression_ratio": 1.702127659574468,
      "no_speech_prob": 0.36889564990997314,
      "confidence": 0.6311043500900269
    },
    {
      "id": 152,
      "start": 921.36,
      "end": 925.92,
      "text": "here now these are actually a couple of functions that I grabbed from the python standard library",
      "tokens": [
        50956,
        510,
        586,
        613,
        366,
        767,
        257,
        1916,
        295,
        6828,
        300,
        286,
        18607,
        490,
        264,
        38797,
        3832,
        6405,
        51184
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02191488677208577,
      "compression_ratio": 1.702127659574468,
      "no_speech_prob": 0.36889564990997314,
      "confidence": 0.6311043500900269
    },
    {
      "id": 153,
      "start": 925.92,
      "end": 930.56,
      "text": "I modified them very slightly but it's basically the same and I wanted to show that even though",
      "tokens": [
        51184,
        286,
        15873,
        552,
        588,
        4748,
        457,
        309,
        311,
        1936,
        264,
        912,
        293,
        286,
        1415,
        281,
        855,
        300,
        754,
        1673,
        51416
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02191488677208577,
      "compression_ratio": 1.702127659574468,
      "no_speech_prob": 0.36889564990997314,
      "confidence": 0.6311043500900269
    },
    {
      "id": 154,
      "start": 930.56,
      "end": 934.96,
      "text": "we've only gone over the fundamentals we're already able to look at some code from within",
      "tokens": [
        51416,
        321,
        600,
        787,
        2780,
        670,
        264,
        29505,
        321,
        434,
        1217,
        1075,
        281,
        574,
        412,
        512,
        3089,
        490,
        1951,
        51636
      ],
      "temperature": 0.0,
      "avg_logprob": -0.02191488677208577,
      "compression_ratio": 1.702127659574468,
      "no_speech_prob": 0.36889564990997314,
      "confidence": 0.6311043500900269
    },
    {
      "id": 155,
      "start": 934.96,
      "end": 941.12,
      "text": "the standard library itself and understand what's going on so at the top here we have a list called",
      "tokens": [
        50364,
        264,
        3832,
        6405,
        2564,
        293,
        1223,
        437,
        311,
        516,
        322,
        370,
        412,
        264,
        1192,
        510,
        321,
        362,
        257,
        1329,
        1219,
        50672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07643879110162909,
      "compression_ratio": 1.8171206225680934,
      "no_speech_prob": 0.6535133719444275,
      "confidence": 0.3464866280555725
    },
    {
      "id": 156,
      "start": 941.12,
      "end": 947.6,
      "text": "month days and this has the number of days and each month now the first index here is just a",
      "tokens": [
        50672,
        1618,
        1708,
        293,
        341,
        575,
        264,
        1230,
        295,
        1708,
        293,
        1184,
        1618,
        586,
        264,
        700,
        8186,
        510,
        307,
        445,
        257,
        50996
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07643879110162909,
      "compression_ratio": 1.8171206225680934,
      "no_speech_prob": 0.6535133719444275,
      "confidence": 0.3464866280555725
    },
    {
      "id": 157,
      "start": 947.6,
      "end": 953.52,
      "text": "placeholder that's not going to get used we're only going to be accessing indexes 1 through 12",
      "tokens": [
        50996,
        1081,
        20480,
        300,
        311,
        406,
        516,
        281,
        483,
        1143,
        321,
        434,
        787,
        516,
        281,
        312,
        26440,
        8186,
        279,
        502,
        807,
        2272,
        51292
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07643879110162909,
      "compression_ratio": 1.8171206225680934,
      "no_speech_prob": 0.6535133719444275,
      "confidence": 0.3464866280555725
    },
    {
      "id": 158,
      "start": 953.52,
      "end": 958.8000000000001,
      "text": "since those are the months and then we have a function here called is leap which determines",
      "tokens": [
        51292,
        1670,
        729,
        366,
        264,
        2493,
        293,
        550,
        321,
        362,
        257,
        2445,
        510,
        1219,
        307,
        19438,
        597,
        24799,
        51556
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07643879110162909,
      "compression_ratio": 1.8171206225680934,
      "no_speech_prob": 0.6535133719444275,
      "confidence": 0.3464866280555725
    },
    {
      "id": 159,
      "start": 958.8000000000001,
      "end": 964.1600000000001,
      "text": "if a year is a leap year it takes a single argument that is the year that it's checking",
      "tokens": [
        51556,
        498,
        257,
        1064,
        307,
        257,
        19438,
        1064,
        309,
        2516,
        257,
        2167,
        6770,
        300,
        307,
        264,
        1064,
        300,
        309,
        311,
        8568,
        51824
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07643879110162909,
      "compression_ratio": 1.8171206225680934,
      "no_speech_prob": 0.6535133719444275,
      "confidence": 0.3464866280555725
    },
    {
      "id": 160,
      "start": 964.16,
      "end": 970.88,
      "text": "and we can see that there's this string after the function definition with three quotes and this",
      "tokens": [
        50364,
        293,
        321,
        393,
        536,
        300,
        456,
        311,
        341,
        6798,
        934,
        264,
        2445,
        7123,
        365,
        1045,
        19963,
        293,
        341,
        50700
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03727554587217478,
      "compression_ratio": 1.9344262295081966,
      "no_speech_prob": 0.007643042132258415,
      "confidence": 0.9923569578677416
    },
    {
      "id": 161,
      "start": 970.88,
      "end": 976.64,
      "text": "is called a doc string and doc strings help document what a function or a class is supposed",
      "tokens": [
        50700,
        307,
        1219,
        257,
        3211,
        6798,
        293,
        3211,
        13985,
        854,
        4166,
        437,
        257,
        2445,
        420,
        257,
        1508,
        307,
        3442,
        50988
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03727554587217478,
      "compression_ratio": 1.9344262295081966,
      "no_speech_prob": 0.007643042132258415,
      "confidence": 0.9923569578677416
    },
    {
      "id": 162,
      "start": 976.64,
      "end": 981.76,
      "text": "to do so it's a good practice anytime you write a function to write a doc string that goes along",
      "tokens": [
        50988,
        281,
        360,
        370,
        309,
        311,
        257,
        665,
        3124,
        13038,
        291,
        2464,
        257,
        2445,
        281,
        2464,
        257,
        3211,
        6798,
        300,
        1709,
        2051,
        51244
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03727554587217478,
      "compression_ratio": 1.9344262295081966,
      "no_speech_prob": 0.007643042132258415,
      "confidence": 0.9923569578677416
    },
    {
      "id": 163,
      "start": 981.76,
      "end": 986.88,
      "text": "with it explaining what that function is supposed to do now this part here can seem a little",
      "tokens": [
        51244,
        365,
        309,
        13468,
        437,
        300,
        2445,
        307,
        3442,
        281,
        360,
        586,
        341,
        644,
        510,
        393,
        1643,
        257,
        707,
        51500
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03727554587217478,
      "compression_ratio": 1.9344262295081966,
      "no_speech_prob": 0.007643042132258415,
      "confidence": 0.9923569578677416
    },
    {
      "id": 164,
      "start": 986.88,
      "end": 991.4399999999999,
      "text": "intimidating but it's not important that you understand how a leap year is calculated there's",
      "tokens": [
        51500,
        29714,
        457,
        309,
        311,
        406,
        1021,
        300,
        291,
        1223,
        577,
        257,
        19438,
        1064,
        307,
        15598,
        456,
        311,
        51728
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03727554587217478,
      "compression_ratio": 1.9344262295081966,
      "no_speech_prob": 0.007643042132258415,
      "confidence": 0.9923569578677416
    },
    {
      "id": 165,
      "start": 991.44,
      "end": 996.4000000000001,
      "text": "not a lot of people who know that off the top of their head but for various reasons this is how a",
      "tokens": [
        50364,
        406,
        257,
        688,
        295,
        561,
        567,
        458,
        300,
        766,
        264,
        1192,
        295,
        641,
        1378,
        457,
        337,
        3683,
        4112,
        341,
        307,
        577,
        257,
        50612
      ],
      "temperature": 0.0,
      "avg_logprob": -0.051021179266735515,
      "compression_ratio": 1.8464566929133859,
      "no_speech_prob": 0.07097463309764862,
      "confidence": 0.9290253669023514
    },
    {
      "id": 166,
      "start": 996.4000000000001,
      "end": 1001.6800000000001,
      "text": "leap year is calculated and it's not important but you could probably figure out what this",
      "tokens": [
        50612,
        19438,
        1064,
        307,
        15598,
        293,
        309,
        311,
        406,
        1021,
        457,
        291,
        727,
        1391,
        2573,
        484,
        437,
        341,
        50876
      ],
      "temperature": 0.0,
      "avg_logprob": -0.051021179266735515,
      "compression_ratio": 1.8464566929133859,
      "no_speech_prob": 0.07097463309764862,
      "confidence": 0.9290253669023514
    },
    {
      "id": 167,
      "start": 1001.6800000000001,
      "end": 1009.6800000000001,
      "text": "conditional is doing so we're saying that if the year is divisible by four and it's not divisible",
      "tokens": [
        50876,
        27708,
        307,
        884,
        370,
        321,
        434,
        1566,
        300,
        498,
        264,
        1064,
        307,
        25974,
        964,
        538,
        1451,
        293,
        309,
        311,
        406,
        25974,
        964,
        51276
      ],
      "temperature": 0.0,
      "avg_logprob": -0.051021179266735515,
      "compression_ratio": 1.8464566929133859,
      "no_speech_prob": 0.07097463309764862,
      "confidence": 0.9290253669023514
    },
    {
      "id": 168,
      "start": 1009.6800000000001,
      "end": 1015.44,
      "text": "by a hundred or it's divisible by 400 so like i was saying there's a lot of different reasons why",
      "tokens": [
        51276,
        538,
        257,
        3262,
        420,
        309,
        311,
        25974,
        964,
        538,
        8423,
        370,
        411,
        741,
        390,
        1566,
        456,
        311,
        257,
        688,
        295,
        819,
        4112,
        983,
        51564
      ],
      "temperature": 0.0,
      "avg_logprob": -0.051021179266735515,
      "compression_ratio": 1.8464566929133859,
      "no_speech_prob": 0.07097463309764862,
      "confidence": 0.9290253669023514
    },
    {
      "id": 169,
      "start": 1016.08,
      "end": 1020.24,
      "text": "leap years are determined this way and if you don't know that that's completely fine",
      "tokens": [
        51596,
        19438,
        924,
        366,
        9540,
        341,
        636,
        293,
        498,
        291,
        500,
        380,
        458,
        300,
        300,
        311,
        2584,
        2489,
        51804
      ],
      "temperature": 0.0,
      "avg_logprob": -0.051021179266735515,
      "compression_ratio": 1.8464566929133859,
      "no_speech_prob": 0.07097463309764862,
      "confidence": 0.9290253669023514
    },
    {
      "id": 170,
      "start": 1020.24,
      "end": 1025.68,
      "text": "but this function here is going to return true if a year is a leap year and false if it's a non-leap",
      "tokens": [
        50364,
        457,
        341,
        2445,
        510,
        307,
        516,
        281,
        2736,
        2074,
        498,
        257,
        1064,
        307,
        257,
        19438,
        1064,
        293,
        7908,
        498,
        309,
        311,
        257,
        2107,
        12,
        306,
        569,
        50636
      ],
      "temperature": 0.0,
      "avg_logprob": -0.043240718841552735,
      "compression_ratio": 1.883495145631068,
      "no_speech_prob": 0.0004926527035422623,
      "confidence": 0.9995073472964577
    },
    {
      "id": 171,
      "start": 1025.68,
      "end": 1032.56,
      "text": "year and down here we have a days in month function that takes a year and a month as arguments",
      "tokens": [
        50636,
        1064,
        293,
        760,
        510,
        321,
        362,
        257,
        1708,
        294,
        1618,
        2445,
        300,
        2516,
        257,
        1064,
        293,
        257,
        1618,
        382,
        12869,
        50980
      ],
      "temperature": 0.0,
      "avg_logprob": -0.043240718841552735,
      "compression_ratio": 1.883495145631068,
      "no_speech_prob": 0.0004926527035422623,
      "confidence": 0.9995073472964577
    },
    {
      "id": 172,
      "start": 1032.56,
      "end": 1038.88,
      "text": "and it'll return the number of days in that month so if we look at how this function works we can",
      "tokens": [
        50980,
        293,
        309,
        603,
        2736,
        264,
        1230,
        295,
        1708,
        294,
        300,
        1618,
        370,
        498,
        321,
        574,
        412,
        577,
        341,
        2445,
        1985,
        321,
        393,
        51296
      ],
      "temperature": 0.0,
      "avg_logprob": -0.043240718841552735,
      "compression_ratio": 1.883495145631068,
      "no_speech_prob": 0.0004926527035422623,
      "confidence": 0.9995073472964577
    },
    {
      "id": 173,
      "start": 1038.88,
      "end": 1046.24,
      "text": "see that it first checks if a month is between one and 12 and if it's not then it returns that",
      "tokens": [
        51296,
        536,
        300,
        309,
        700,
        13834,
        498,
        257,
        1618,
        307,
        1296,
        472,
        293,
        2272,
        293,
        498,
        309,
        311,
        406,
        550,
        309,
        11247,
        300,
        51664
      ],
      "temperature": 0.0,
      "avg_logprob": -0.043240718841552735,
      "compression_ratio": 1.883495145631068,
      "no_speech_prob": 0.0004926527035422623,
      "confidence": 0.9995073472964577
    },
    {
      "id": 174,
      "start": 1046.24,
      "end": 1051.28,
      "text": "it's an invalid month and then it checks if the month that we're working with is the second month",
      "tokens": [
        50364,
        309,
        311,
        364,
        34702,
        1618,
        293,
        550,
        309,
        13834,
        498,
        264,
        1618,
        300,
        321,
        434,
        1364,
        365,
        307,
        264,
        1150,
        1618,
        50616
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04680490493774414,
      "compression_ratio": 1.7853881278538812,
      "no_speech_prob": 0.28134724497795105,
      "confidence": 0.718652755022049
    },
    {
      "id": 175,
      "start": 1051.28,
      "end": 1057.76,
      "text": "which would mean that it's february and is a leap year using our function up here at the top then",
      "tokens": [
        50616,
        597,
        576,
        914,
        300,
        309,
        311,
        579,
        7294,
        822,
        293,
        307,
        257,
        19438,
        1064,
        1228,
        527,
        2445,
        493,
        510,
        412,
        264,
        1192,
        550,
        50940
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04680490493774414,
      "compression_ratio": 1.7853881278538812,
      "no_speech_prob": 0.28134724497795105,
      "confidence": 0.718652755022049
    },
    {
      "id": 176,
      "start": 1057.76,
      "end": 1064.16,
      "text": "it returns 29 if both of those are true and lastly if it makes it to the end without having returned",
      "tokens": [
        50940,
        309,
        11247,
        9413,
        498,
        1293,
        295,
        729,
        366,
        2074,
        293,
        16386,
        498,
        309,
        1669,
        309,
        281,
        264,
        917,
        1553,
        1419,
        8752,
        51260
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04680490493774414,
      "compression_ratio": 1.7853881278538812,
      "no_speech_prob": 0.28134724497795105,
      "confidence": 0.718652755022049
    },
    {
      "id": 177,
      "start": 1064.16,
      "end": 1071.44,
      "text": "anything yet then it will index into our month days and list up here at the top and return the",
      "tokens": [
        51260,
        1340,
        1939,
        550,
        309,
        486,
        8186,
        666,
        527,
        1618,
        1708,
        293,
        1329,
        493,
        510,
        412,
        264,
        1192,
        293,
        2736,
        264,
        51624
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04680490493774414,
      "compression_ratio": 1.7853881278538812,
      "no_speech_prob": 0.28134724497795105,
      "confidence": 0.718652755022049
    },
    {
      "id": 178,
      "start": 1071.44,
      "end": 1077.6000000000001,
      "text": "value of our month so let's just run through this one time and see how these functions work",
      "tokens": [
        50364,
        2158,
        295,
        527,
        1618,
        370,
        718,
        311,
        445,
        1190,
        807,
        341,
        472,
        565,
        293,
        536,
        577,
        613,
        6828,
        589,
        50672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04321867428468854,
      "compression_ratio": 1.7671232876712328,
      "no_speech_prob": 0.2739344537258148,
      "confidence": 0.7260655462741852
    },
    {
      "id": 179,
      "start": 1077.6000000000001,
      "end": 1084.72,
      "text": "so outside of both of the functions we're going to go ahead and first use this is leap year function",
      "tokens": [
        50672,
        370,
        2380,
        295,
        1293,
        295,
        264,
        6828,
        321,
        434,
        516,
        281,
        352,
        2286,
        293,
        700,
        764,
        341,
        307,
        19438,
        1064,
        2445,
        51028
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04321867428468854,
      "compression_ratio": 1.7671232876712328,
      "no_speech_prob": 0.2739344537258148,
      "confidence": 0.7260655462741852
    },
    {
      "id": 180,
      "start": 1084.72,
      "end": 1093.28,
      "text": "so we'll say is leap 2017 so if we run this then it returns false so we ran this function is leap",
      "tokens": [
        51028,
        370,
        321,
        603,
        584,
        307,
        19438,
        6591,
        370,
        498,
        321,
        1190,
        341,
        550,
        309,
        11247,
        7908,
        370,
        321,
        5872,
        341,
        2445,
        307,
        19438,
        51456
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04321867428468854,
      "compression_ratio": 1.7671232876712328,
      "no_speech_prob": 0.2739344537258148,
      "confidence": 0.7260655462741852
    },
    {
      "id": 181,
      "start": 1093.28,
      "end": 1099.1200000000001,
      "text": "passed in 2017 as our value and it went through this complicated conditional here and determined",
      "tokens": [
        51456,
        4678,
        294,
        6591,
        382,
        527,
        2158,
        293,
        309,
        1437,
        807,
        341,
        6179,
        27708,
        510,
        293,
        9540,
        51748
      ],
      "temperature": 0.0,
      "avg_logprob": -0.04321867428468854,
      "compression_ratio": 1.7671232876712328,
      "no_speech_prob": 0.2739344537258148,
      "confidence": 0.7260655462741852
    },
    {
      "id": 182,
      "start": 1099.12,
      "end": 1106.08,
      "text": "that that was false but if we type in 2020 here and run that then we can see that it returns true",
      "tokens": [
        50364,
        300,
        300,
        390,
        7908,
        457,
        498,
        321,
        2010,
        294,
        4808,
        510,
        293,
        1190,
        300,
        550,
        321,
        393,
        536,
        300,
        309,
        11247,
        2074,
        50712
      ],
      "temperature": 0.0,
      "avg_logprob": -0.034112613177993925,
      "compression_ratio": 1.8461538461538463,
      "no_speech_prob": 0.14091935753822327,
      "confidence": 0.8590806424617767
    },
    {
      "id": 183,
      "start": 1106.08,
      "end": 1113.6,
      "text": "that 2020 is a leap year but now let's try our days and month function which is going to be a",
      "tokens": [
        50712,
        300,
        4808,
        307,
        257,
        19438,
        1064,
        457,
        586,
        718,
        311,
        853,
        527,
        1708,
        293,
        1618,
        2445,
        597,
        307,
        516,
        281,
        312,
        257,
        51088
      ],
      "temperature": 0.0,
      "avg_logprob": -0.034112613177993925,
      "compression_ratio": 1.8461538461538463,
      "no_speech_prob": 0.14091935753822327,
      "confidence": 0.8590806424617767
    },
    {
      "id": 184,
      "start": 1113.6,
      "end": 1120.0,
      "text": "little bit longer of a walkthrough so we'll say days and month and we'll pass in a year so it",
      "tokens": [
        51088,
        707,
        857,
        2854,
        295,
        257,
        1792,
        11529,
        370,
        321,
        603,
        584,
        1708,
        293,
        1618,
        293,
        321,
        603,
        1320,
        294,
        257,
        1064,
        370,
        309,
        51408
      ],
      "temperature": 0.0,
      "avg_logprob": -0.034112613177993925,
      "compression_ratio": 1.8461538461538463,
      "no_speech_prob": 0.14091935753822327,
      "confidence": 0.8590806424617767
    },
    {
      "id": 185,
      "start": 1120.0,
      "end": 1127.1999999999998,
      "text": "takes a year first we'll pass in a year of 2017 and we'll pass in a month of two which is february",
      "tokens": [
        51408,
        2516,
        257,
        1064,
        700,
        321,
        603,
        1320,
        294,
        257,
        1064,
        295,
        6591,
        293,
        321,
        603,
        1320,
        294,
        257,
        1618,
        295,
        732,
        597,
        307,
        579,
        7294,
        822,
        51768
      ],
      "temperature": 0.0,
      "avg_logprob": -0.034112613177993925,
      "compression_ratio": 1.8461538461538463,
      "no_speech_prob": 0.14091935753822327,
      "confidence": 0.8590806424617767
    },
    {
      "id": 186,
      "start": 1127.2,
      "end": 1133.3600000000001,
      "text": "now since 2017 is not a leap year then this second month which is february should only",
      "tokens": [
        50364,
        586,
        1670,
        6591,
        307,
        406,
        257,
        19438,
        1064,
        550,
        341,
        1150,
        1618,
        597,
        307,
        579,
        7294,
        822,
        820,
        787,
        50672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030548179542625342,
      "compression_ratio": 1.7064220183486238,
      "no_speech_prob": 0.0018080095760524273,
      "confidence": 0.9981919904239476
    },
    {
      "id": 187,
      "start": 1133.3600000000001,
      "end": 1139.52,
      "text": "have 28 days so if we run this then we can see that we got 28 so let's walk through exactly",
      "tokens": [
        50672,
        362,
        7562,
        1708,
        370,
        498,
        321,
        1190,
        341,
        550,
        321,
        393,
        536,
        300,
        321,
        658,
        7562,
        370,
        718,
        311,
        1792,
        807,
        2293,
        50980
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030548179542625342,
      "compression_ratio": 1.7064220183486238,
      "no_speech_prob": 0.0018080095760524273,
      "confidence": 0.9981919904239476
    },
    {
      "id": 188,
      "start": 1139.52,
      "end": 1145.3600000000001,
      "text": "what happened just so we're sure that we understand so we executed our days and month function with",
      "tokens": [
        50980,
        437,
        2011,
        445,
        370,
        321,
        434,
        988,
        300,
        321,
        1223,
        370,
        321,
        17577,
        527,
        1708,
        293,
        1618,
        2445,
        365,
        51272
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030548179542625342,
      "compression_ratio": 1.7064220183486238,
      "no_speech_prob": 0.0018080095760524273,
      "confidence": 0.9981919904239476
    },
    {
      "id": 189,
      "start": 1145.3600000000001,
      "end": 1152.88,
      "text": "our arguments of 2017 for the year and two for the month so it comes in to our days and month",
      "tokens": [
        51272,
        527,
        12869,
        295,
        6591,
        337,
        264,
        1064,
        293,
        732,
        337,
        264,
        1618,
        370,
        309,
        1487,
        294,
        281,
        527,
        1708,
        293,
        1618,
        51648
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030548179542625342,
      "compression_ratio": 1.7064220183486238,
      "no_speech_prob": 0.0018080095760524273,
      "confidence": 0.9981919904239476
    },
    {
      "id": 190,
      "start": 1152.88,
      "end": 1160.5600000000002,
      "text": "function and it sets this year variable equal to 2017 and this month variable equal to two so let's",
      "tokens": [
        50364,
        2445,
        293,
        309,
        6352,
        341,
        1064,
        7006,
        2681,
        281,
        6591,
        293,
        341,
        1618,
        7006,
        2681,
        281,
        732,
        370,
        718,
        311,
        50748
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0731036144754161,
      "compression_ratio": 1.7041420118343196,
      "no_speech_prob": 0.3991132080554962,
      "confidence": 0.6008867919445038
    },
    {
      "id": 191,
      "start": 1160.5600000000002,
      "end": 1166.3200000000002,
      "text": "comment those here just to keep track of them through our walkthrough so i'll put a comment",
      "tokens": [
        50748,
        2871,
        729,
        510,
        445,
        281,
        1066,
        2837,
        295,
        552,
        807,
        527,
        1792,
        11529,
        370,
        741,
        603,
        829,
        257,
        2871,
        51036
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0731036144754161,
      "compression_ratio": 1.7041420118343196,
      "no_speech_prob": 0.3991132080554962,
      "confidence": 0.6008867919445038
    },
    {
      "id": 192,
      "start": 1166.3200000000002,
      "end": 1176.16,
      "text": "for a year as 2017 and a comment for month as two so first it checks if our month is not between",
      "tokens": [
        51036,
        337,
        257,
        1064,
        382,
        6591,
        293,
        257,
        2871,
        337,
        1618,
        382,
        732,
        370,
        700,
        309,
        13834,
        498,
        527,
        1618,
        307,
        406,
        1296,
        51528
      ],
      "temperature": 0.0,
      "avg_logprob": -0.0731036144754161,
      "compression_ratio": 1.7041420118343196,
      "no_speech_prob": 0.3991132080554962,
      "confidence": 0.6008867919445038
    },
    {
      "id": 193,
      "start": 1176.16,
      "end": 1182.3200000000002,
      "text": "one and twelve our month is two so it is in that range so it doesn't meet this conditional",
      "tokens": [
        50364,
        472,
        293,
        14390,
        527,
        1618,
        307,
        732,
        370,
        309,
        307,
        294,
        300,
        3613,
        370,
        309,
        1177,
        380,
        1677,
        341,
        27708,
        50672
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05819930719292682,
      "compression_ratio": 1.9543147208121827,
      "no_speech_prob": 0.13030506670475006,
      "confidence": 0.8696949332952499
    },
    {
      "id": 194,
      "start": 1182.3200000000002,
      "end": 1188.16,
      "text": "and since it doesn't meet that conditional then we just continue on so our next conditional asks if",
      "tokens": [
        50672,
        293,
        1670,
        309,
        1177,
        380,
        1677,
        300,
        27708,
        550,
        321,
        445,
        2354,
        322,
        370,
        527,
        958,
        27708,
        8962,
        498,
        50964
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05819930719292682,
      "compression_ratio": 1.9543147208121827,
      "no_speech_prob": 0.13030506670475006,
      "confidence": 0.8696949332952499
    },
    {
      "id": 195,
      "start": 1188.16,
      "end": 1196.3200000000002,
      "text": "the month is equal to two and is a leap year so our month is equal to two but this is leap function",
      "tokens": [
        50964,
        264,
        1618,
        307,
        2681,
        281,
        732,
        293,
        307,
        257,
        19438,
        1064,
        370,
        527,
        1618,
        307,
        2681,
        281,
        732,
        457,
        341,
        307,
        19438,
        2445,
        51372
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05819930719292682,
      "compression_ratio": 1.9543147208121827,
      "no_speech_prob": 0.13030506670475006,
      "confidence": 0.8696949332952499
    },
    {
      "id": 196,
      "start": 1196.3200000000002,
      "end": 1203.76,
      "text": "runs through its code with the year 2017 and returns false so since is leap is false and we're",
      "tokens": [
        51372,
        6676,
        807,
        1080,
        3089,
        365,
        264,
        1064,
        6591,
        293,
        11247,
        7908,
        370,
        1670,
        307,
        19438,
        307,
        7908,
        293,
        321,
        434,
        51744
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05819930719292682,
      "compression_ratio": 1.9543147208121827,
      "no_speech_prob": 0.13030506670475006,
      "confidence": 0.8696949332952499
    },
    {
      "id": 197,
      "start": 1203.76,
      "end": 1210.8799999999999,
      "text": "using an and operator then the whole conditional evaluates to false so we move on and lastly it",
      "tokens": [
        50364,
        1228,
        364,
        293,
        12973,
        550,
        264,
        1379,
        27708,
        6133,
        1024,
        281,
        7908,
        370,
        321,
        1286,
        322,
        293,
        16386,
        309,
        50720
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03603415558303612,
      "compression_ratio": 1.7365269461077844,
      "no_speech_prob": 0.0176931694149971,
      "confidence": 0.9823068305850029
    },
    {
      "id": 198,
      "start": 1210.8799999999999,
      "end": 1219.6,
      "text": "accesses the month days list at this month index and remember that our month is equal to two so",
      "tokens": [
        50720,
        2105,
        279,
        264,
        1618,
        1708,
        1329,
        412,
        341,
        1618,
        8186,
        293,
        1604,
        300,
        527,
        1618,
        307,
        2681,
        281,
        732,
        370,
        51156
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03603415558303612,
      "compression_ratio": 1.7365269461077844,
      "no_speech_prob": 0.0176931694149971,
      "confidence": 0.9823068305850029
    },
    {
      "id": 199,
      "start": 1219.6,
      "end": 1226.32,
      "text": "it's accessing the second index and if we look up here to our month days list and go to our second",
      "tokens": [
        51156,
        309,
        311,
        26440,
        264,
        1150,
        8186,
        293,
        498,
        321,
        574,
        493,
        510,
        281,
        527,
        1618,
        1708,
        1329,
        293,
        352,
        281,
        527,
        1150,
        51492
      ],
      "temperature": 0.0,
      "avg_logprob": -0.03603415558303612,
      "compression_ratio": 1.7365269461077844,
      "no_speech_prob": 0.0176931694149971,
      "confidence": 0.9823068305850029
    },
    {
      "id": 200,
      "start": 1226.3999999999999,
      "end": 1233.76,
      "text": "index so zero one two then we can see that that's equal to 28 so it should be returning",
      "tokens": [
        50368,
        8186,
        370,
        4018,
        472,
        732,
        550,
        321,
        393,
        536,
        300,
        300,
        311,
        2681,
        281,
        7562,
        370,
        309,
        820,
        312,
        12678,
        50736
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05339294619264856,
      "compression_ratio": 1.7715355805243447,
      "no_speech_prob": 0.2665514647960663,
      "confidence": 0.7334485352039337
    },
    {
      "id": 201,
      "start": 1233.76,
      "end": 1240.24,
      "text": "28 here and finally when we printed out that result 28 is what we got as our result now i",
      "tokens": [
        50736,
        7562,
        510,
        293,
        2721,
        562,
        321,
        13567,
        484,
        300,
        1874,
        7562,
        307,
        437,
        321,
        658,
        382,
        527,
        1874,
        586,
        741,
        51060
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05339294619264856,
      "compression_ratio": 1.7715355805243447,
      "no_speech_prob": 0.2665514647960663,
      "confidence": 0.7334485352039337
    },
    {
      "id": 202,
      "start": 1240.24,
      "end": 1244.96,
      "text": "know that it was kind of a long walkthrough but i thought it might be useful to see how these things",
      "tokens": [
        51060,
        458,
        300,
        309,
        390,
        733,
        295,
        257,
        938,
        1792,
        11529,
        457,
        741,
        1194,
        309,
        1062,
        312,
        4420,
        281,
        536,
        577,
        613,
        721,
        51296
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05339294619264856,
      "compression_ratio": 1.7715355805243447,
      "no_speech_prob": 0.2665514647960663,
      "confidence": 0.7334485352039337
    },
    {
      "id": 203,
      "start": 1244.96,
      "end": 1249.9199999999998,
      "text": "actually work together and how do you go about determining what a function should return based",
      "tokens": [
        51296,
        767,
        589,
        1214,
        293,
        577,
        360,
        291,
        352,
        466,
        23751,
        437,
        257,
        2445,
        820,
        2736,
        2361,
        51544
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05339294619264856,
      "compression_ratio": 1.7715355805243447,
      "no_speech_prob": 0.2665514647960663,
      "confidence": 0.7334485352039337
    },
    {
      "id": 204,
      "start": 1249.9199999999998,
      "end": 1254.48,
      "text": "on the arguments that you pass in okay so i think that is going to do it for this video i hope that",
      "tokens": [
        51544,
        322,
        264,
        12869,
        300,
        291,
        1320,
        294,
        1392,
        370,
        741,
        519,
        300,
        307,
        516,
        281,
        360,
        309,
        337,
        341,
        960,
        741,
        1454,
        300,
        51772
      ],
      "temperature": 0.0,
      "avg_logprob": -0.05339294619264856,
      "compression_ratio": 1.7715355805243447,
      "no_speech_prob": 0.2665514647960663,
      "confidence": 0.7334485352039337
    },
    {
      "id": 205,
      "start": 1254.48,
      "end": 1259.52,
      "text": "now you have a clear understanding of how functions work how we return values and the different",
      "tokens": [
        50364,
        586,
        291,
        362,
        257,
        1850,
        3701,
        295,
        577,
        6828,
        589,
        577,
        321,
        2736,
        4190,
        293,
        264,
        819,
        50616
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030100706055408388,
      "compression_ratio": 1.8741935483870968,
      "no_speech_prob": 0.15425743162631989,
      "confidence": 0.8457425683736801
    },
    {
      "id": 206,
      "start": 1259.52,
      "end": 1265.04,
      "text": "ways that we can pass arguments in the next video we'll be learning how to import modules and also",
      "tokens": [
        50616,
        2098,
        300,
        321,
        393,
        1320,
        12869,
        294,
        264,
        958,
        960,
        321,
        603,
        312,
        2539,
        577,
        281,
        974,
        16679,
        293,
        611,
        50892
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030100706055408388,
      "compression_ratio": 1.8741935483870968,
      "no_speech_prob": 0.15425743162631989,
      "confidence": 0.8457425683736801
    },
    {
      "id": 207,
      "start": 1265.04,
      "end": 1270.0,
      "text": "learn about some of the useful modules that come in the standard library but if anyone has any",
      "tokens": [
        50892,
        1466,
        466,
        512,
        295,
        264,
        4420,
        16679,
        300,
        808,
        294,
        264,
        3832,
        6405,
        457,
        498,
        2878,
        575,
        604,
        51140
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030100706055408388,
      "compression_ratio": 1.8741935483870968,
      "no_speech_prob": 0.15425743162631989,
      "confidence": 0.8457425683736801
    },
    {
      "id": 208,
      "start": 1270.0,
      "end": 1274.48,
      "text": "questions about what we covered in this video then feel free to ask in the comment section below and",
      "tokens": [
        51140,
        1651,
        466,
        437,
        321,
        5343,
        294,
        341,
        960,
        550,
        841,
        1737,
        281,
        1029,
        294,
        264,
        2871,
        3541,
        2507,
        293,
        51364
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030100706055408388,
      "compression_ratio": 1.8741935483870968,
      "no_speech_prob": 0.15425743162631989,
      "confidence": 0.8457425683736801
    },
    {
      "id": 209,
      "start": 1274.48,
      "end": 1278.72,
      "text": "i'll do my best to answer those and if you enjoy these tutorials and would like to support them",
      "tokens": [
        51364,
        741,
        603,
        360,
        452,
        1151,
        281,
        1867,
        729,
        293,
        498,
        291,
        2103,
        613,
        17616,
        293,
        576,
        411,
        281,
        1406,
        552,
        51576
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030100706055408388,
      "compression_ratio": 1.8741935483870968,
      "no_speech_prob": 0.15425743162631989,
      "confidence": 0.8457425683736801
    },
    {
      "id": 210,
      "start": 1278.72,
      "end": 1282.48,
      "text": "then there are several ways you can do that the easiest ways is simply like the video and give",
      "tokens": [
        51576,
        550,
        456,
        366,
        2940,
        2098,
        291,
        393,
        360,
        300,
        264,
        12889,
        2098,
        307,
        2935,
        411,
        264,
        960,
        293,
        976,
        51764
      ],
      "temperature": 0.0,
      "avg_logprob": -0.030100706055408388,
      "compression_ratio": 1.8741935483870968,
      "no_speech_prob": 0.15425743162631989,
      "confidence": 0.8457425683736801
    },
    {
      "id": 211,
      "start": 1282.48,
      "end": 1286.4,
      "text": "it a thumbs up and also it's a huge help to share these videos with anyone who you think would find",
      "tokens": [
        50364,
        309,
        257,
        8838,
        493,
        293,
        611,
        309,
        311,
        257,
        2603,
        854,
        281,
        2073,
        613,
        2145,
        365,
        2878,
        567,
        291,
        519,
        576,
        915,
        50560
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07380202838352748,
      "compression_ratio": 1.6505376344086022,
      "no_speech_prob": 0.013806721195578575,
      "confidence": 0.9861932788044214
    },
    {
      "id": 212,
      "start": 1286.4,
      "end": 1290.08,
      "text": "them useful and if you have the means you can contribute through patreon and there's a link",
      "tokens": [
        50560,
        552,
        4420,
        293,
        498,
        291,
        362,
        264,
        1355,
        291,
        393,
        10586,
        807,
        33161,
        293,
        456,
        311,
        257,
        2113,
        50744
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07380202838352748,
      "compression_ratio": 1.6505376344086022,
      "no_speech_prob": 0.013806721195578575,
      "confidence": 0.9861932788044214
    },
    {
      "id": 213,
      "start": 1290.08,
      "end": 1294.32,
      "text": "to that page in the description section below be sure to subscribe for future videos and thank you",
      "tokens": [
        50744,
        281,
        300,
        3028,
        294,
        264,
        3855,
        3541,
        2507,
        312,
        988,
        281,
        3022,
        337,
        2027,
        2145,
        293,
        1309,
        291,
        50956
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07380202838352748,
      "compression_ratio": 1.6505376344086022,
      "no_speech_prob": 0.013806721195578575,
      "confidence": 0.9861932788044214
    },
    {
      "id": 214,
      "start": 1294.32,
      "end": 1299.28,
      "text": "all for watching",
      "tokens": [
        50956,
        439,
        337,
        1976,
        51204
      ],
      "temperature": 0.0,
      "avg_logprob": -0.07380202838352748,
      "compression_ratio": 1.6505376344086022,
      "no_speech_prob": 0.013806721195578575,
      "confidence": 0.9861932788044214
    }
  ]
}